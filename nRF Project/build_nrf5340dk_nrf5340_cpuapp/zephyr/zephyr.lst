
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
		gpio_pin_set(led_dev, LED, led_param);
	}
}

int led_init(void)
{
   0:	20004248 	.word	0x20004248
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   4:	0000315d 	.word	0x0000315d
	int ret;

	led_dev = device_get_binding(LED_PORT);
   8:	0000d439 	.word	0x0000d439
	if (!led_dev) {
   c:	0000318d 	.word	0x0000318d
				     gpio_pin_t pin, gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->pin_configure(port, pin, flags);
  10:	0000318d 	.word	0x0000318d
  14:	0000318d 	.word	0x0000318d
  18:	0000318d 	.word	0x0000318d
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
  1c:	0000318d 	.word	0x0000318d
	...
		ret, LED, DT_LABEL(DT_ALIAS(led0)));
		return ret;
	}

	led_state = false;
	led_on_off(led_state);
  2c:	000030b9 	.word	0x000030b9
  30:	0000318d 	.word	0x0000318d
	return 0;
  34:	00000000 	.word	0x00000000
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
  38:	00003061 	.word	0x00003061
		LOG_ERR("Error %d: failed to configure pin %d '%s'\n",
  3c:	0000cc29 	.word	0x0000cc29

00000040 <_irq_vector_table>:
  40:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
  50:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
		return (-EOPNOTSUPP);
  60:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
  70:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
  80:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
  90:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
  a0:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
  b0:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
  c0:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
  d0:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
  e0:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
  f0:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
 100:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
 110:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
 120:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
 130:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
 140:	0000311d 0000311d 0000311d 0000311d     .1...1...1...1..
 150:	0000311d                                .1..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b970 	b.w	44c <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f806 	bl	184 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__udivmoddi4>:
     184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     188:	9e08      	ldr	r6, [sp, #32]
     18a:	460d      	mov	r5, r1
     18c:	4604      	mov	r4, r0
     18e:	468a      	mov	sl, r1
     190:	2b00      	cmp	r3, #0
     192:	d17f      	bne.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     194:	428a      	cmp	r2, r1
     196:	4617      	mov	r7, r2
     198:	d941      	bls.n	21e <CONFIG_SRAM_SIZE+0x5e>
     19a:	fab2 f282 	clz	r2, r2
     19e:	b14a      	cbz	r2, 1b4 <__udivmoddi4+0x30>
     1a0:	f1c2 0120 	rsb	r1, r2, #32
     1a4:	fa05 f302 	lsl.w	r3, r5, r2
     1a8:	4097      	lsls	r7, r2
     1aa:	4094      	lsls	r4, r2
     1ac:	fa20 f101 	lsr.w	r1, r0, r1
     1b0:	ea41 0a03 	orr.w	sl, r1, r3
     1b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1b8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1bc:	fa1f f987 	uxth.w	r9, r7
     1c0:	fbba fef8 	udiv	lr, sl, r8
     1c4:	fb08 a31e 	mls	r3, r8, lr, sl
     1c8:	fb0e f109 	mul.w	r1, lr, r9
     1cc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d0:	4299      	cmp	r1, r3
     1d2:	d906      	bls.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	d202      	bcs.n	1de <CONFIG_SRAM_SIZE+0x1e>
     1d8:	4299      	cmp	r1, r3
     1da:	f200 8124 	bhi.w	426 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     1de:	f10e 3eff 	add.w	lr, lr, #4294967295
     1e2:	1a59      	subs	r1, r3, r1
     1e4:	b2a3      	uxth	r3, r4
     1e6:	fbb1 f0f8 	udiv	r0, r1, r8
     1ea:	fb08 1110 	mls	r1, r8, r0, r1
     1ee:	fb00 f909 	mul.w	r9, r0, r9
     1f2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1f6:	45a1      	cmp	r9, r4
     1f8:	d905      	bls.n	206 <CONFIG_SRAM_SIZE+0x46>
     1fa:	193c      	adds	r4, r7, r4
     1fc:	d202      	bcs.n	204 <CONFIG_SRAM_SIZE+0x44>
     1fe:	45a1      	cmp	r9, r4
     200:	f200 810e 	bhi.w	420 <CONFIG_BT_HCI_TX_STACK_SIZE+0x20>
     204:	3801      	subs	r0, #1
     206:	eba4 0409 	sub.w	r4, r4, r9
     20a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     20e:	2100      	movs	r1, #0
     210:	b11e      	cbz	r6, 21a <CONFIG_SRAM_SIZE+0x5a>
     212:	40d4      	lsrs	r4, r2
     214:	2300      	movs	r3, #0
     216:	e9c6 4300 	strd	r4, r3, [r6]
     21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21e:	b902      	cbnz	r2, 222 <CONFIG_SRAM_SIZE+0x62>
     220:	deff      	udf	#255	; 0xff
     222:	fab2 f282 	clz	r2, r2
     226:	2a00      	cmp	r2, #0
     228:	d14f      	bne.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     22a:	1bcb      	subs	r3, r1, r7
     22c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     230:	fa1f f887 	uxth.w	r8, r7
     234:	2101      	movs	r1, #1
     236:	0c25      	lsrs	r5, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 301c 	mls	r0, lr, ip, r3
     240:	462b      	mov	r3, r5
     242:	fb08 f90c 	mul.w	r9, r8, ip
     246:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     24a:	45a9      	cmp	r9, r5
     24c:	d90a      	bls.n	264 <CONFIG_SRAM_SIZE+0xa4>
     24e:	197d      	adds	r5, r7, r5
     250:	bf2c      	ite	cs
     252:	2301      	movcs	r3, #1
     254:	2300      	movcc	r3, #0
     256:	45a9      	cmp	r9, r5
     258:	d902      	bls.n	260 <CONFIG_SRAM_SIZE+0xa0>
     25a:	2b00      	cmp	r3, #0
     25c:	f000 80d9 	beq.w	412 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     260:	f10c 3cff 	add.w	ip, ip, #4294967295
     264:	eba5 0509 	sub.w	r5, r5, r9
     268:	b2a3      	uxth	r3, r4
     26a:	fbb5 f0fe 	udiv	r0, r5, lr
     26e:	fb0e 5510 	mls	r5, lr, r0, r5
     272:	fb08 f800 	mul.w	r8, r8, r0
     276:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     27a:	45a0      	cmp	r8, r4
     27c:	d905      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     27e:	193c      	adds	r4, r7, r4
     280:	d202      	bcs.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     282:	45a0      	cmp	r8, r4
     284:	f200 80c9 	bhi.w	41a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     288:	3801      	subs	r0, #1
     28a:	eba4 0408 	sub.w	r4, r4, r8
     28e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     292:	e7bd      	b.n	210 <CONFIG_SRAM_SIZE+0x50>
     294:	428b      	cmp	r3, r1
     296:	d908      	bls.n	2aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2a>
     298:	2e00      	cmp	r6, #0
     29a:	f000 80b1 	beq.w	400 <CONFIG_BT_HCI_TX_STACK_SIZE>
     29e:	2100      	movs	r1, #0
     2a0:	e9c6 0500 	strd	r0, r5, [r6]
     2a4:	4608      	mov	r0, r1
     2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2aa:	fab3 f183 	clz	r1, r3
     2ae:	2900      	cmp	r1, #0
     2b0:	d146      	bne.n	340 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x40>
     2b2:	42ab      	cmp	r3, r5
     2b4:	f0c0 80a7 	bcc.w	406 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     2b8:	4282      	cmp	r2, r0
     2ba:	f240 80a4 	bls.w	406 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     2be:	4608      	mov	r0, r1
     2c0:	2e00      	cmp	r6, #0
     2c2:	d0aa      	beq.n	21a <CONFIG_SRAM_SIZE+0x5a>
     2c4:	e9c6 4a00 	strd	r4, sl, [r6]
     2c8:	e7a7      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     2ca:	f1c2 0020 	rsb	r0, r2, #32
     2ce:	4097      	lsls	r7, r2
     2d0:	fa01 f302 	lsl.w	r3, r1, r2
     2d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2d8:	40c1      	lsrs	r1, r0
     2da:	fa24 f500 	lsr.w	r5, r4, r0
     2de:	fa1f f887 	uxth.w	r8, r7
     2e2:	4094      	lsls	r4, r2
     2e4:	431d      	orrs	r5, r3
     2e6:	fbb1 f0fe 	udiv	r0, r1, lr
     2ea:	0c2b      	lsrs	r3, r5, #16
     2ec:	fb0e 1110 	mls	r1, lr, r0, r1
     2f0:	fb00 fc08 	mul.w	ip, r0, r8
     2f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f8:	459c      	cmp	ip, r3
     2fa:	d909      	bls.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	bf2c      	ite	cs
     300:	2101      	movcs	r1, #1
     302:	2100      	movcc	r1, #0
     304:	459c      	cmp	ip, r3
     306:	d902      	bls.n	30e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe>
     308:	2900      	cmp	r1, #0
     30a:	f000 8095 	beq.w	438 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     30e:	3801      	subs	r0, #1
     310:	eba3 030c 	sub.w	r3, r3, ip
     314:	b2ad      	uxth	r5, r5
     316:	fbb3 f1fe 	udiv	r1, r3, lr
     31a:	fb0e 3311 	mls	r3, lr, r1, r3
     31e:	fb01 fc08 	mul.w	ip, r1, r8
     322:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     326:	45ac      	cmp	ip, r5
     328:	d905      	bls.n	336 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x36>
     32a:	197d      	adds	r5, r7, r5
     32c:	d202      	bcs.n	334 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x34>
     32e:	45ac      	cmp	ip, r5
     330:	f200 8089 	bhi.w	446 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     334:	3901      	subs	r1, #1
     336:	eba5 030c 	sub.w	r3, r5, ip
     33a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     33e:	e77a      	b.n	236 <CONFIG_SRAM_SIZE+0x76>
     340:	f1c1 0420 	rsb	r4, r1, #32
     344:	408b      	lsls	r3, r1
     346:	fa02 f701 	lsl.w	r7, r2, r1
     34a:	fa05 fc01 	lsl.w	ip, r5, r1
     34e:	40e2      	lsrs	r2, r4
     350:	fa20 f804 	lsr.w	r8, r0, r4
     354:	40e5      	lsrs	r5, r4
     356:	fa00 fe01 	lsl.w	lr, r0, r1
     35a:	4313      	orrs	r3, r2
     35c:	ea48 020c 	orr.w	r2, r8, ip
     360:	ea4f 4813 	mov.w	r8, r3, lsr #16
     364:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     368:	fa1f f983 	uxth.w	r9, r3
     36c:	fbb5 faf8 	udiv	sl, r5, r8
     370:	fb08 551a 	mls	r5, r8, sl, r5
     374:	fb0a f009 	mul.w	r0, sl, r9
     378:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     37c:	4560      	cmp	r0, ip
     37e:	d90a      	bls.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     380:	eb13 0c0c 	adds.w	ip, r3, ip
     384:	bf2c      	ite	cs
     386:	2501      	movcs	r5, #1
     388:	2500      	movcc	r5, #0
     38a:	4560      	cmp	r0, ip
     38c:	d901      	bls.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     38e:	2d00      	cmp	r5, #0
     390:	d055      	beq.n	43e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     392:	f10a 3aff 	add.w	sl, sl, #4294967295
     396:	ebac 0c00 	sub.w	ip, ip, r0
     39a:	b292      	uxth	r2, r2
     39c:	fbbc f0f8 	udiv	r0, ip, r8
     3a0:	fb08 cc10 	mls	ip, r8, r0, ip
     3a4:	fb00 f909 	mul.w	r9, r0, r9
     3a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3ac:	45e1      	cmp	r9, ip
     3ae:	d905      	bls.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     3b0:	eb13 0c0c 	adds.w	ip, r3, ip
     3b4:	d201      	bcs.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     3b6:	45e1      	cmp	r9, ip
     3b8:	d83b      	bhi.n	432 <CONFIG_BT_HCI_TX_STACK_SIZE+0x32>
     3ba:	3801      	subs	r0, #1
     3bc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3c0:	ebac 0c09 	sub.w	ip, ip, r9
     3c4:	fba0 8907 	umull	r8, r9, r0, r7
     3c8:	45cc      	cmp	ip, r9
     3ca:	4645      	mov	r5, r8
     3cc:	464a      	mov	r2, r9
     3ce:	d302      	bcc.n	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     3d0:	d106      	bne.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     3d2:	45c6      	cmp	lr, r8
     3d4:	d204      	bcs.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     3d6:	3801      	subs	r0, #1
     3d8:	ebb8 0507 	subs.w	r5, r8, r7
     3dc:	eb69 0203 	sbc.w	r2, r9, r3
     3e0:	b32e      	cbz	r6, 42e <CONFIG_BT_HCI_TX_STACK_SIZE+0x2e>
     3e2:	ebbe 0305 	subs.w	r3, lr, r5
     3e6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3ea:	fa23 f201 	lsr.w	r2, r3, r1
     3ee:	fa0c f404 	lsl.w	r4, ip, r4
     3f2:	fa2c f301 	lsr.w	r3, ip, r1
     3f6:	2100      	movs	r1, #0
     3f8:	4314      	orrs	r4, r2
     3fa:	e9c6 4300 	strd	r4, r3, [r6]
     3fe:	e70c      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     400:	4631      	mov	r1, r6
     402:	4630      	mov	r0, r6
     404:	e709      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     406:	1a84      	subs	r4, r0, r2
     408:	eb65 0303 	sbc.w	r3, r5, r3
     40c:	2001      	movs	r0, #1
     40e:	469a      	mov	sl, r3
     410:	e756      	b.n	2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     412:	f1ac 0c02 	sub.w	ip, ip, #2
     416:	443d      	add	r5, r7
     418:	e724      	b.n	264 <CONFIG_SRAM_SIZE+0xa4>
     41a:	3802      	subs	r0, #2
     41c:	443c      	add	r4, r7
     41e:	e734      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     420:	3802      	subs	r0, #2
     422:	443c      	add	r4, r7
     424:	e6ef      	b.n	206 <CONFIG_SRAM_SIZE+0x46>
     426:	f1ae 0e02 	sub.w	lr, lr, #2
     42a:	443b      	add	r3, r7
     42c:	e6d9      	b.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     42e:	4631      	mov	r1, r6
     430:	e6f3      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     432:	3802      	subs	r0, #2
     434:	449c      	add	ip, r3
     436:	e7c1      	b.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     438:	3802      	subs	r0, #2
     43a:	443b      	add	r3, r7
     43c:	e768      	b.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     43e:	f1aa 0a02 	sub.w	sl, sl, #2
     442:	449c      	add	ip, r3
     444:	e7a7      	b.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     446:	3902      	subs	r1, #2
     448:	443d      	add	r5, r7
     44a:	e774      	b.n	336 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x36>

0000044c <__aeabi_idiv0>:
     44c:	4770      	bx	lr
     44e:	bf00      	nop

00000450 <beginTriWire>:
	beginTriWire();
	return 0;
}

void beginTriWire(void)
{
     450:	b510      	push	{r4, lr}
     452:	4809      	ldr	r0, [pc, #36]	; (478 <beginTriWire+0x28>)
     454:	f009 ff98 	bl	a388 <z_impl_device_get_binding>
    dev = device_get_binding("GPIO_1");
     458:	4c08      	ldr	r4, [pc, #32]	; (47c <beginTriWire+0x2c>)
    gpio_pin_configure(dev, BITT, GPIO_INPUT);
     45a:	2107      	movs	r1, #7
    dev = device_get_binding("GPIO_1");
     45c:	6020      	str	r0, [r4, #0]
    gpio_pin_configure(dev, BITT, GPIO_INPUT);
     45e:	f00b fbc3 	bl	bbe8 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(dev, COM, GPIO_INPUT);
     462:	2108      	movs	r1, #8
     464:	6820      	ldr	r0, [r4, #0]
     466:	f00b fbbf 	bl	bbe8 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(dev, ENA, GPIO_INPUT);
     46a:	6820      	ldr	r0, [r4, #0]
     46c:	2109      	movs	r1, #9
}
     46e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gpio_pin_configure(dev, ENA, GPIO_INPUT);
     472:	f00b bbb9 	b.w	bbe8 <gpio_pin_configure.constprop.0>
     476:	bf00      	nop
     478:	00010c94 	.word	0x00010c94
     47c:	20000ee0 	.word	0x20000ee0

00000480 <readTriWire>:

unsigned int readTriWire(void)
{
     480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    unsigned int recv = 0;
    bool printFlag = false;
     484:	2400      	movs	r4, #0
    int pointer = 1;
    while (gpio_pin_get(dev, ENA) == 1)
     486:	4f14      	ldr	r7, [pc, #80]	; (4d8 <readTriWire+0x58>)
    int pointer = 1;
     488:	2601      	movs	r6, #1
    unsigned int recv = 0;
     48a:	4625      	mov	r5, r4
     48c:	46b8      	mov	r8, r7
    while (gpio_pin_get(dev, ENA) == 1)
     48e:	2109      	movs	r1, #9
     490:	6838      	ldr	r0, [r7, #0]
     492:	f00b fb95 	bl	bbc0 <gpio_pin_get>
     496:	2801      	cmp	r0, #1
     498:	d01a      	beq.n	4d0 <readTriWire+0x50>
    {
        return (recv);
    }
    else
    {
        return (0);
     49a:	2c00      	cmp	r4, #0
    }
}
     49c:	bf14      	ite	ne
     49e:	4628      	movne	r0, r5
     4a0:	2000      	moveq	r0, #0
     4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if (flag)
     4a6:	f1b9 0f00 	cmp.w	r9, #0
     4aa:	d009      	beq.n	4c0 <readTriWire+0x40>
                recv += (((int)gpio_pin_get(dev, BITT)) * pointer);
     4ac:	2107      	movs	r1, #7
     4ae:	f8d8 0000 	ldr.w	r0, [r8]
     4b2:	f00b fb85 	bl	bbc0 <gpio_pin_get>
                flag = false;
     4b6:	f04f 0900 	mov.w	r9, #0
                recv += (((int)gpio_pin_get(dev, BITT)) * pointer);
     4ba:	fb06 5500 	mla	r5, r6, r0, r5
                pointer *= 2;
     4be:	0076      	lsls	r6, r6, #1
        while (gpio_pin_get(dev, COM) == 1)
     4c0:	2108      	movs	r1, #8
     4c2:	f8d8 0000 	ldr.w	r0, [r8]
     4c6:	f00b fb7b 	bl	bbc0 <gpio_pin_get>
     4ca:	2801      	cmp	r0, #1
     4cc:	d0eb      	beq.n	4a6 <readTriWire+0x26>
     4ce:	e7de      	b.n	48e <readTriWire+0xe>
        bool flag = true;
     4d0:	4604      	mov	r4, r0
        printFlag = true;
     4d2:	4681      	mov	r9, r0
     4d4:	e7f4      	b.n	4c0 <readTriWire+0x40>
     4d6:	bf00      	nop
     4d8:	20000ee0 	.word	0x20000ee0

000004dc <sensor_loop>:
{
     4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        temp = readTriWire();
     4e0:	4f19      	ldr	r7, [pc, #100]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
unsigned int memory = 0;
     4e2:	2500      	movs	r5, #0
     4e4:	46b9      	mov	r9, r7
                spo_val = memory;
     4e6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>
{
     4ea:	b087      	sub	sp, #28
        temp = readTriWire();
     4ec:	f7ff ffc8 	bl	480 <readTriWire>
        if (temp >> 8 != 0)
     4f0:	0a06      	lsrs	r6, r0, #8
        temp = readTriWire();
     4f2:	6038      	str	r0, [r7, #0]
        if (temp >> 8 != 0)
     4f4:	d0fa      	beq.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
            if (temp >> 8 == 1)
     4f6:	2e01      	cmp	r6, #1
     4f8:	b2c4      	uxtb	r4, r0
     4fa:	d003      	beq.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
            else if (temp >> 8 == 2)
     4fc:	2e02      	cmp	r6, #2
     4fe:	d108      	bne.n	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
                memory = memory + (temp & 0x00FF);
     500:	eb04 2405 	add.w	r4, r4, r5, lsl #8
            printk("%d \n",(temp & 0x00FF));
     504:	f899 1000 	ldrb.w	r1, [r9]
     508:	4810      	ldr	r0, [pc, #64]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     50a:	f00b fbc5 	bl	bc98 <printk>
     50e:	4625      	mov	r5, r4
     510:	e7ec      	b.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
            else if (temp >> 8 == 3)
     512:	2e03      	cmp	r6, #3
     514:	d0f4      	beq.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
            else if (temp >> 8 == 4)
     516:	2e04      	cmp	r6, #4
     518:	d114      	bne.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
                bt_gatt_notify(NULL, &stsensor_svc->attrs[2], &spo_val, sizeof(spo_val));
     51a:	4b0d      	ldr	r3, [pc, #52]	; (550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>)
                memory = memory + (temp & 0x00FF);
     51c:	eb04 2405 	add.w	r4, r4, r5, lsl #8
                bt_gatt_notify(NULL, &stsensor_svc->attrs[2], &spo_val, sizeof(spo_val));
     520:	681d      	ldr	r5, [r3, #0]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
     522:	2218      	movs	r2, #24
     524:	2100      	movs	r1, #0
     526:	4668      	mov	r0, sp
                spo_val = memory;
     528:	f8c8 4000 	str.w	r4, [r8]
                bt_gatt_notify(NULL, &stsensor_svc->attrs[2], &spo_val, sizeof(spo_val));
     52c:	3528      	adds	r5, #40	; 0x28
     52e:	f00d f82f 	bl	d590 <memset>

	params.attr = attr;
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
     532:	4669      	mov	r1, sp
     534:	2000      	movs	r0, #0
	params.data = data;
     536:	e9cd 5801 	strd	r5, r8, [sp, #4]
	params.len = len;
     53a:	f8ad 600c 	strh.w	r6, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
     53e:	f008 f8ab 	bl	8698 <bt_gatt_notify_cb>
     542:	e7df      	b.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     544:	462c      	mov	r4, r5
     546:	e7dd      	b.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     548:	20000ee8 	.word	0x20000ee8
     54c:	00010c9b 	.word	0x00010c9b
     550:	000102f0 	.word	0x000102f0
     554:	20000ee4 	.word	0x20000ee4

00000558 <mpu_ccc_cfg_changed>:
volatile bool notify_enable;

static void mpu_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	ARG_UNUSED(attr);
	notify_enable = (value == BT_GATT_CCC_NOTIFY);
     558:	1e4b      	subs	r3, r1, #1
     55a:	4259      	negs	r1, r3
     55c:	4159      	adcs	r1, r3
     55e:	4b09      	ldr	r3, [pc, #36]	; (584 <mpu_ccc_cfg_changed+0x2c>)
     560:	4a09      	ldr	r2, [pc, #36]	; (588 <mpu_ccc_cfg_changed+0x30>)
     562:	7019      	strb	r1, [r3, #0]
     564:	4909      	ldr	r1, [pc, #36]	; (58c <mpu_ccc_cfg_changed+0x34>)
	LOG_INF("Notification %s", notify_enable ? "enabled" : "disabled");
     566:	7818      	ldrb	r0, [r3, #0]
     568:	1a52      	subs	r2, r2, r1
     56a:	4b09      	ldr	r3, [pc, #36]	; (590 <mpu_ccc_cfg_changed+0x38>)
     56c:	4909      	ldr	r1, [pc, #36]	; (594 <mpu_ccc_cfg_changed+0x3c>)
     56e:	08d2      	lsrs	r2, r2, #3
     570:	0192      	lsls	r2, r2, #6
     572:	2800      	cmp	r0, #0
     574:	bf18      	it	ne
     576:	4619      	movne	r1, r3
     578:	f042 0203 	orr.w	r2, r2, #3
     57c:	4806      	ldr	r0, [pc, #24]	; (598 <mpu_ccc_cfg_changed+0x40>)
     57e:	f00b bfbf 	b.w	c500 <log_1>
     582:	bf00      	nop
     584:	2000295e 	.word	0x2000295e
     588:	00010378 	.word	0x00010378
     58c:	000102f8 	.word	0x000102f8
     590:	00010cb3 	.word	0x00010cb3
     594:	00010cbb 	.word	0x00010cbb
     598:	00010cc4 	.word	0x00010cc4

0000059c <bt_ready>:
 BT_GATT_CHARACTERISTIC(&spo_notif_uuid.uuid, BT_GATT_CHRC_NOTIFY,
                        BT_GATT_PERM_READ, NULL, NULL, &spo_val),
 BT_GATT_CCC(mpu_ccc_cfg_changed, BT_GATT_PERM_READ | BT_GATT_PERM_WRITE) );

static void bt_ready(int err)
{
     59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5a0:	4b17      	ldr	r3, [pc, #92]	; (600 <CONFIG_BT_COMPANY_ID+0xf>)
     5a2:	4c18      	ldr	r4, [pc, #96]	; (604 <CONFIG_BT_COMPANY_ID+0x13>)
	if (err) {
     5a4:	4607      	mov	r7, r0
     5a6:	1ae4      	subs	r4, r4, r3
     5a8:	08e4      	lsrs	r4, r4, #3
{
     5aa:	b088      	sub	sp, #32
     5ac:	01a4      	lsls	r4, r4, #6
	if (err) {
     5ae:	b140      	cbz	r0, 5c2 <bt_ready+0x26>
		LOG_ERR("Bluetooth init failed (err %d)", err);
     5b0:	4601      	mov	r1, r0
     5b2:	4815      	ldr	r0, [pc, #84]	; (608 <CONFIG_BT_COMPANY_ID+0x17>)
     5b4:	f044 0201 	orr.w	r2, r4, #1
	}
	LOG_INF("Bluetooth initialized");
	/* Start advertising */
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), NULL, 0);
	if (err) {
		LOG_ERR("Advertising failed to start (err %d)", err);
     5b8:	f00b ffa2 	bl	c500 <log_1>
		return;
	}

	LOG_INF("Configuration mode: waiting connections...");
}
     5bc:	b008      	add	sp, #32
     5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), NULL, 0);
     5c2:	4e12      	ldr	r6, [pc, #72]	; (60c <CONFIG_BT_COMPANY_ID+0x1b>)
	LOG_INF("Bluetooth initialized");
     5c4:	f044 0803 	orr.w	r8, r4, #3
     5c8:	4641      	mov	r1, r8
     5ca:	4811      	ldr	r0, [pc, #68]	; (610 <CONFIG_BT_COMPANY_ID+0x1f>)
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), NULL, 0);
     5cc:	ad03      	add	r5, sp, #12
	LOG_INF("Bluetooth initialized");
     5ce:	f00b ff8a 	bl	c4e6 <log_0>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), NULL, 0);
     5d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     5d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     5d6:	6833      	ldr	r3, [r6, #0]
     5d8:	490e      	ldr	r1, [pc, #56]	; (614 <CONFIG_BT_COMPANY_ID+0x23>)
     5da:	602b      	str	r3, [r5, #0]
     5dc:	2203      	movs	r2, #3
     5de:	463b      	mov	r3, r7
     5e0:	9700      	str	r7, [sp, #0]
     5e2:	a803      	add	r0, sp, #12
     5e4:	f005 fb30 	bl	5c48 <bt_le_adv_start>
	if (err) {
     5e8:	4601      	mov	r1, r0
     5ea:	b118      	cbz	r0, 5f4 <CONFIG_BT_COMPANY_ID+0x3>
		LOG_ERR("Advertising failed to start (err %d)", err);
     5ec:	480a      	ldr	r0, [pc, #40]	; (618 <CONFIG_BT_COMPANY_ID+0x27>)
     5ee:	f044 0201 	orr.w	r2, r4, #1
     5f2:	e7e1      	b.n	5b8 <bt_ready+0x1c>
	LOG_INF("Configuration mode: waiting connections...");
     5f4:	4641      	mov	r1, r8
     5f6:	4809      	ldr	r0, [pc, #36]	; (61c <CONFIG_BT_COMPANY_ID+0x2b>)
     5f8:	f00b ff75 	bl	c4e6 <log_0>
     5fc:	e7de      	b.n	5bc <bt_ready+0x20>
     5fe:	bf00      	nop
     600:	000102f8 	.word	0x000102f8
     604:	00010378 	.word	0x00010378
     608:	00010cd4 	.word	0x00010cd4
     60c:	000103e0 	.word	0x000103e0
     610:	00010cf3 	.word	0x00010cf3
     614:	00010468 	.word	0x00010468
     618:	00010d09 	.word	0x00010d09
     61c:	00010d2e 	.word	0x00010d2e

00000620 <disconnected>:
		}
	}
}

static void disconnected(struct bt_conn *disconn, uint8_t reason)
{
     620:	b538      	push	{r3, r4, r5, lr}
	if (conn) {
     622:	4d0a      	ldr	r5, [pc, #40]	; (64c <disconnected+0x2c>)
{
     624:	460c      	mov	r4, r1
	if (conn) {
     626:	6828      	ldr	r0, [r5, #0]
     628:	b118      	cbz	r0, 632 <disconnected+0x12>
		bt_conn_unref(conn);
     62a:	f00d f9cb 	bl	d9c4 <bt_conn_unref>
		conn = NULL;
     62e:	2300      	movs	r3, #0
     630:	602b      	str	r3, [r5, #0]
     632:	4b07      	ldr	r3, [pc, #28]	; (650 <disconnected+0x30>)
     634:	4a07      	ldr	r2, [pc, #28]	; (654 <disconnected+0x34>)
	}

	LOG_INF("Disconnected (reason %u)", reason);
     636:	4621      	mov	r1, r4
     638:	1ad2      	subs	r2, r2, r3
     63a:	08d2      	lsrs	r2, r2, #3
     63c:	0192      	lsls	r2, r2, #6
     63e:	4806      	ldr	r0, [pc, #24]	; (658 <disconnected+0x38>)
     640:	f042 0203 	orr.w	r2, r2, #3
}
     644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("Disconnected (reason %u)", reason);
     648:	f00b bf5a 	b.w	c500 <log_1>
     64c:	20000eec 	.word	0x20000eec
     650:	000102f8 	.word	0x000102f8
     654:	00010378 	.word	0x00010378
     658:	00010d59 	.word	0x00010d59

0000065c <connected>:
{
     65c:	b538      	push	{r3, r4, r5, lr}
     65e:	4a0d      	ldr	r2, [pc, #52]	; (694 <connected+0x38>)
     660:	4b0d      	ldr	r3, [pc, #52]	; (698 <connected+0x3c>)
     662:	4604      	mov	r4, r0
     664:	1ad2      	subs	r2, r2, r3
     666:	08d2      	lsrs	r2, r2, #3
     668:	0192      	lsls	r2, r2, #6
	if (err) {
     66a:	b131      	cbz	r1, 67a <connected+0x1e>
}
     66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Connection failed (err %u)", err);
     670:	480a      	ldr	r0, [pc, #40]	; (69c <connected+0x40>)
     672:	f042 0201 	orr.w	r2, r2, #1
     676:	f00b bf43 	b.w	c500 <log_1>
		if (!conn) {
     67a:	4d09      	ldr	r5, [pc, #36]	; (6a0 <connected+0x44>)
		LOG_INF("Connected");
     67c:	4809      	ldr	r0, [pc, #36]	; (6a4 <connected+0x48>)
     67e:	f042 0103 	orr.w	r1, r2, #3
     682:	f00b ff30 	bl	c4e6 <log_0>
		if (!conn) {
     686:	682b      	ldr	r3, [r5, #0]
     688:	b91b      	cbnz	r3, 692 <connected+0x36>
			conn = bt_conn_ref(connected);
     68a:	4620      	mov	r0, r4
     68c:	f00d f986 	bl	d99c <bt_conn_ref>
     690:	6028      	str	r0, [r5, #0]
}
     692:	bd38      	pop	{r3, r4, r5, pc}
     694:	00010378 	.word	0x00010378
     698:	000102f8 	.word	0x000102f8
     69c:	00010d72 	.word	0x00010d72
     6a0:	20000eec 	.word	0x20000eec
     6a4:	00010d8d 	.word	0x00010d8d

000006a8 <main>:
	.connected = connected,
	.disconnected = disconnected,
};

void main(void)
{
     6a8:	b508      	push	{r3, lr}
	int err;

	err = sensor_init();
     6aa:	f00b faae 	bl	bc0a <sensor_init>
	if (err) {
     6ae:	b9a8      	cbnz	r0, 6dc <main+0x34>
		return;
	}

	bt_conn_cb_register(&conn_callbacks);
     6b0:	480b      	ldr	r0, [pc, #44]	; (6e0 <main+0x38>)
     6b2:	f005 fd81 	bl	61b8 <bt_conn_cb_register>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ready);
     6b6:	480b      	ldr	r0, [pc, #44]	; (6e4 <main+0x3c>)
     6b8:	f005 f8fa 	bl	58b0 <bt_enable>
	if (err) {
     6bc:	4601      	mov	r1, r0
     6be:	b148      	cbz	r0, 6d4 <main+0x2c>
     6c0:	4a09      	ldr	r2, [pc, #36]	; (6e8 <main+0x40>)
     6c2:	4b0a      	ldr	r3, [pc, #40]	; (6ec <main+0x44>)
		LOG_ERR("Bluetooth init failed (err %d)", err);
     6c4:	480a      	ldr	r0, [pc, #40]	; (6f0 <main+0x48>)
     6c6:	1ad2      	subs	r2, r2, r3
     6c8:	08d2      	lsrs	r2, r2, #3
     6ca:	0192      	lsls	r2, r2, #6
     6cc:	f042 0201 	orr.w	r2, r2, #1
     6d0:	f00b ff16 	bl	c500 <log_1>
	}
        sensor_loop();
}
     6d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        sensor_loop();
     6d8:	f7ff bf00 	b.w	4dc <sensor_loop>
}
     6dc:	bd08      	pop	{r3, pc}
     6de:	bf00      	nop
     6e0:	20000150 	.word	0x20000150
     6e4:	0000059d 	.word	0x0000059d
     6e8:	00010378 	.word	0x00010378
     6ec:	000102f8 	.word	0x000102f8
     6f0:	00010cd4 	.word	0x00010cd4

000006f4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     6f4:	680b      	ldr	r3, [r1, #0]
     6f6:	3301      	adds	r3, #1
     6f8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     6fa:	4b01      	ldr	r3, [pc, #4]	; (700 <char_out+0xc>)
     6fc:	681b      	ldr	r3, [r3, #0]
     6fe:	4718      	bx	r3
     700:	20000164 	.word	0x20000164

00000704 <__printk_hook_install>:
	_char_out = fn;
     704:	4b01      	ldr	r3, [pc, #4]	; (70c <__printk_hook_install+0x8>)
     706:	6018      	str	r0, [r3, #0]
}
     708:	4770      	bx	lr
     70a:	bf00      	nop
     70c:	20000164 	.word	0x20000164

00000710 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     710:	b507      	push	{r0, r1, r2, lr}
     712:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     714:	2100      	movs	r1, #0
{
     716:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     718:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     71a:	4803      	ldr	r0, [pc, #12]	; (728 <vprintk+0x18>)
     71c:	a901      	add	r1, sp, #4
     71e:	f000 f8ff 	bl	920 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     722:	b003      	add	sp, #12
     724:	f85d fb04 	ldr.w	pc, [sp], #4
     728:	000006f5 	.word	0x000006f5

0000072c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     72c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     72e:	2500      	movs	r5, #0
{
     730:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     732:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     736:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
     738:	a901      	add	r1, sp, #4
     73a:	4805      	ldr	r0, [pc, #20]	; (750 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     73c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     73e:	f000 f8ef 	bl	920 <cbvprintf>

	if (ctx.count < ctx.max) {
     742:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     746:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     748:	bfb8      	it	lt
     74a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     74c:	b005      	add	sp, #20
     74e:	bd30      	pop	{r4, r5, pc}
     750:	0000bc73 	.word	0x0000bc73

00000754 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     754:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     758:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
     75c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     75e:	f019 0808 	ands.w	r8, r9, #8
{
     762:	4693      	mov	fp, r2
	if (processing) {
     764:	d00d      	beq.n	782 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     766:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     768:	bf0c      	ite	eq
     76a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     76e:	f049 0920 	orrne.w	r9, r9, #32
     772:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     776:	f38b 8811 	msr	BASEPRI, fp
     77a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     77e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     782:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     786:	2902      	cmp	r1, #2
     788:	d107      	bne.n	79a <process_event+0x46>
			evt = process_recheck(mgr);
     78a:	4620      	mov	r0, r4
     78c:	f00b fa9e 	bl	bccc <process_recheck>
		if (evt == EVT_NOP) {
     790:	2800      	cmp	r0, #0
     792:	d0f0      	beq.n	776 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     794:	2801      	cmp	r0, #1
     796:	8b23      	ldrh	r3, [r4, #24]
     798:	d150      	bne.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
			res = mgr->last_res;
     79a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     79c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     79e:	2f00      	cmp	r7, #0
     7a0:	da15      	bge.n	7ce <process_event+0x7a>
		*clients = mgr->clients;
     7a2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7a4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     7a8:	e9c4 8800 	strd	r8, r8, [r4]
     7ac:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     7b0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     7b2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     7b4:	8b21      	ldrh	r1, [r4, #24]
     7b6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     7ba:	45ca      	cmp	sl, r9
     7bc:	d002      	beq.n	7c4 <process_event+0x70>
		if (do_monitors
     7be:	68a3      	ldr	r3, [r4, #8]
     7c0:	2b00      	cmp	r3, #0
     7c2:	d15c      	bne.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
		    || !sys_slist_is_empty(&clients)
     7c4:	b90d      	cbnz	r5, 7ca <process_event+0x76>
		    || (transit != NULL)) {
     7c6:	2e00      	cmp	r6, #0
     7c8:	d074      	beq.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
     7ca:	2300      	movs	r3, #0
     7cc:	e058      	b.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7ce:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     7d2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     7d4:	2a01      	cmp	r2, #1
     7d6:	d820      	bhi.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
		*clients = mgr->clients;
     7d8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     7dc:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     7de:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     7e0:	b289      	uxth	r1, r1
	list->tail = NULL;
     7e2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     7e6:	d10c      	bne.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     7e8:	2d00      	cmp	r5, #0
     7ea:	462b      	mov	r3, r5
     7ec:	bf38      	it	cc
     7ee:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     7f0:	b12b      	cbz	r3, 7fe <process_event+0xaa>
				mgr->refs += 1U;
     7f2:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     7f4:	681b      	ldr	r3, [r3, #0]
     7f6:	3201      	adds	r2, #1
     7f8:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     7fa:	2b00      	cmp	r3, #0
     7fc:	d1f8      	bne.n	7f0 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7fe:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     802:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     804:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     806:	f00b fa61 	bl	bccc <process_recheck>
     80a:	4606      	mov	r6, r0
     80c:	2800      	cmp	r0, #0
     80e:	d0d1      	beq.n	7b4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     810:	8b23      	ldrh	r3, [r4, #24]
     812:	f043 0320 	orr.w	r3, r3, #32
     816:	8323      	strh	r3, [r4, #24]
     818:	e7cb      	b.n	7b2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     81a:	2b04      	cmp	r3, #4
     81c:	d10c      	bne.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     81e:	f021 0107 	bic.w	r1, r1, #7
     822:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     824:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     826:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     828:	f00b fa50 	bl	bccc <process_recheck>
     82c:	4605      	mov	r5, r0
     82e:	2800      	cmp	r0, #0
     830:	d0bf      	beq.n	7b2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     832:	f041 0120 	orr.w	r1, r1, #32
     836:	8321      	strh	r1, [r4, #24]
     838:	2500      	movs	r5, #0
     83a:	e7ba      	b.n	7b2 <process_event+0x5e>
		} else if (evt == EVT_START) {
     83c:	2803      	cmp	r0, #3
     83e:	d109      	bne.n	854 <CONFIG_ISR_STACK_SIZE+0x54>
			transit = mgr->transitions->start;
     840:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     842:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     846:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     848:	f043 0306 	orr.w	r3, r3, #6
}
     84c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     84e:	8323      	strh	r3, [r4, #24]
		res = 0;
     850:	462f      	mov	r7, r5
     852:	e7af      	b.n	7b4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     854:	2804      	cmp	r0, #4
     856:	d106      	bne.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
			transit = mgr->transitions->stop;
     858:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     85a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     85e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     860:	f043 0304 	orr.w	r3, r3, #4
     864:	e7f2      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
		} else if (evt == EVT_RESET) {
     866:	2805      	cmp	r0, #5
     868:	d106      	bne.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
			transit = mgr->transitions->reset;
     86a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     86c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     870:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     872:	f043 0305 	orr.w	r3, r3, #5
     876:	e7e9      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
     878:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     87a:	462e      	mov	r6, r5
     87c:	e7e8      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
				   && !sys_slist_is_empty(&mgr->monitors);
     87e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     880:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     884:	8321      	strh	r1, [r4, #24]
     886:	f38b 8811 	msr	BASEPRI, fp
     88a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     88e:	bb03      	cbnz	r3, 8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
	while (!sys_slist_is_empty(list)) {
     890:	2d00      	cmp	r5, #0
     892:	d133      	bne.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
			if (transit != NULL) {
     894:	b116      	cbz	r6, 89c <CONFIG_ISR_STACK_SIZE+0x9c>
				transit(mgr, transition_complete);
     896:	4620      	mov	r0, r4
     898:	4920      	ldr	r1, [pc, #128]	; (91c <CONFIG_ISR_STACK_SIZE+0x11c>)
     89a:	47b0      	blx	r6
	__asm__ volatile(
     89c:	f04f 0320 	mov.w	r3, #32
     8a0:	f3ef 8b11 	mrs	fp, BASEPRI
     8a4:	f383 8811 	msr	BASEPRI, r3
     8a8:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     8ac:	8b23      	ldrh	r3, [r4, #24]
     8ae:	f023 0308 	bic.w	r3, r3, #8
     8b2:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     8b4:	8b23      	ldrh	r3, [r4, #24]
     8b6:	06da      	lsls	r2, r3, #27
     8b8:	d528      	bpl.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
			evt = EVT_COMPLETE;
     8ba:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     8bc:	f023 0310 	bic.w	r3, r3, #16
     8c0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     8c2:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     8c6:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     8ca:	2900      	cmp	r1, #0
     8cc:	f47f af5b 	bne.w	786 <process_event+0x32>
out:
     8d0:	e751      	b.n	776 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     8d2:	68a1      	ldr	r1, [r4, #8]
     8d4:	2900      	cmp	r1, #0
     8d6:	d0db      	beq.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
	return node->next;
     8d8:	680b      	ldr	r3, [r1, #0]
     8da:	2b00      	cmp	r3, #0
     8dc:	bf38      	it	cc
     8de:	2300      	movcc	r3, #0
     8e0:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
     8e2:	4652      	mov	r2, sl
     8e4:	463b      	mov	r3, r7
     8e6:	4620      	mov	r0, r4
     8e8:	f8d1 b004 	ldr.w	fp, [r1, #4]
     8ec:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     8ee:	f1b9 0f00 	cmp.w	r9, #0
     8f2:	d0cd      	beq.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     8f4:	4649      	mov	r1, r9
     8f6:	f8d9 3000 	ldr.w	r3, [r9]
     8fa:	e7ee      	b.n	8da <CONFIG_ISR_STACK_SIZE+0xda>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     8fc:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     8fe:	463b      	mov	r3, r7
     900:	4652      	mov	r2, sl
     902:	4620      	mov	r0, r4
     904:	682d      	ldr	r5, [r5, #0]
     906:	f00b f9fd 	bl	bd04 <notify_one>
     90a:	e7c1      	b.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     90c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     910:	bf1e      	ittt	ne
     912:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     916:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     918:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     91a:	e7d2      	b.n	8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
     91c:	0000bd31 	.word	0x0000bd31

00000920 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     924:	468b      	mov	fp, r1
     926:	4692      	mov	sl, r2
     928:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     92a:	2500      	movs	r5, #0
{
     92c:	b091      	sub	sp, #68	; 0x44
     92e:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     930:	f89a 0000 	ldrb.w	r0, [sl]
     934:	b908      	cbnz	r0, 93a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     936:	4628      	mov	r0, r5
     938:	e35e      	b.n	ff8 <cbvprintf+0x6d8>
		if (*fp != '%') {
     93a:	2825      	cmp	r0, #37	; 0x25
     93c:	f10a 0701 	add.w	r7, sl, #1
     940:	d007      	beq.n	952 <cbvprintf+0x32>
			OUTC('%');
     942:	4659      	mov	r1, fp
     944:	9b02      	ldr	r3, [sp, #8]
     946:	4798      	blx	r3
     948:	2800      	cmp	r0, #0
     94a:	f2c0 8355 	blt.w	ff8 <cbvprintf+0x6d8>
     94e:	3501      	adds	r5, #1
			break;
     950:	e210      	b.n	d74 <cbvprintf+0x454>
		} state = {
     952:	2218      	movs	r2, #24
     954:	2100      	movs	r1, #0
     956:	a80a      	add	r0, sp, #40	; 0x28
     958:	f00c fe1a 	bl	d590 <memset>
	if (*sp == '%') {
     95c:	f89a 3001 	ldrb.w	r3, [sl, #1]
     960:	2b25      	cmp	r3, #37	; 0x25
     962:	d078      	beq.n	a56 <cbvprintf+0x136>
     964:	2200      	movs	r2, #0
     966:	4694      	mov	ip, r2
     968:	4616      	mov	r6, r2
     96a:	4696      	mov	lr, r2
     96c:	4610      	mov	r0, r2
     96e:	4639      	mov	r1, r7
		switch (*sp) {
     970:	f817 3b01 	ldrb.w	r3, [r7], #1
     974:	2b2b      	cmp	r3, #43	; 0x2b
     976:	f000 809d 	beq.w	ab4 <cbvprintf+0x194>
     97a:	f200 8094 	bhi.w	aa6 <cbvprintf+0x186>
     97e:	2b20      	cmp	r3, #32
     980:	f000 809b 	beq.w	aba <cbvprintf+0x19a>
     984:	2b23      	cmp	r3, #35	; 0x23
     986:	f000 809a 	beq.w	abe <cbvprintf+0x19e>
     98a:	b128      	cbz	r0, 998 <cbvprintf+0x78>
     98c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     990:	f040 0004 	orr.w	r0, r0, #4
     994:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     998:	f1be 0f00 	cmp.w	lr, #0
     99c:	d005      	beq.n	9aa <cbvprintf+0x8a>
     99e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     9a2:	f040 0008 	orr.w	r0, r0, #8
     9a6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     9aa:	b12e      	cbz	r6, 9b8 <cbvprintf+0x98>
     9ac:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     9b0:	f040 0010 	orr.w	r0, r0, #16
     9b4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     9b8:	f1bc 0f00 	cmp.w	ip, #0
     9bc:	d005      	beq.n	9ca <cbvprintf+0xaa>
     9be:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     9c2:	f040 0020 	orr.w	r0, r0, #32
     9c6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     9ca:	b12a      	cbz	r2, 9d8 <cbvprintf+0xb8>
     9cc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     9d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     9d4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     9d8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     9dc:	f002 0044 	and.w	r0, r2, #68	; 0x44
     9e0:	2844      	cmp	r0, #68	; 0x44
     9e2:	d103      	bne.n	9ec <cbvprintf+0xcc>
		conv->flag_zero = false;
     9e4:	f36f 1286 	bfc	r2, #6, #1
     9e8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     9ec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     9f0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     9f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     9f6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     9fa:	d17b      	bne.n	af4 <cbvprintf+0x1d4>
		conv->width_star = true;
     9fc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a00:	1c4b      	adds	r3, r1, #1
     a02:	f042 0201 	orr.w	r2, r2, #1
     a06:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     a0a:	781a      	ldrb	r2, [r3, #0]
     a0c:	2a2e      	cmp	r2, #46	; 0x2e
     a0e:	bf0c      	ite	eq
     a10:	2101      	moveq	r1, #1
     a12:	2100      	movne	r1, #0
     a14:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a18:	f361 0241 	bfi	r2, r1, #1, #1
     a1c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     a20:	d174      	bne.n	b0c <cbvprintf+0x1ec>
	if (*sp == '*') {
     a22:	785a      	ldrb	r2, [r3, #1]
     a24:	2a2a      	cmp	r2, #42	; 0x2a
     a26:	d06a      	beq.n	afe <cbvprintf+0x1de>
	size_t val = 0;
     a28:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     a2a:	260a      	movs	r6, #10
     a2c:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     a2e:	4618      	mov	r0, r3
     a30:	f810 2b01 	ldrb.w	r2, [r0], #1
     a34:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     a38:	2f09      	cmp	r7, #9
     a3a:	f240 808e 	bls.w	b5a <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     a3e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     a42:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     a44:	f3c2 0040 	ubfx	r0, r2, #1, #1
     a48:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     a4c:	f361 0241 	bfi	r2, r1, #1, #1
     a50:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     a54:	e05a      	b.n	b0c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     a56:	f10a 0702 	add.w	r7, sl, #2
     a5a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     a5e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a62:	07d9      	lsls	r1, r3, #31
     a64:	f140 8149 	bpl.w	cfa <cbvprintf+0x3da>
			width = va_arg(ap, int);
     a68:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     a6c:	f1b9 0f00 	cmp.w	r9, #0
     a70:	da07      	bge.n	a82 <cbvprintf+0x162>
				conv->flag_dash = true;
     a72:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     a76:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     a7a:	f042 0204 	orr.w	r2, r2, #4
     a7e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     a82:	075a      	lsls	r2, r3, #29
     a84:	f140 8142 	bpl.w	d0c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     a88:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     a8c:	f1b8 0f00 	cmp.w	r8, #0
     a90:	f280 8141 	bge.w	d16 <cbvprintf+0x3f6>
				conv->prec_present = false;
     a94:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a98:	f36f 0341 	bfc	r3, #1, #1
     a9c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     aa0:	f04f 38ff 	mov.w	r8, #4294967295
     aa4:	e137      	b.n	d16 <cbvprintf+0x3f6>
		switch (*sp) {
     aa6:	2b2d      	cmp	r3, #45	; 0x2d
     aa8:	d00c      	beq.n	ac4 <cbvprintf+0x1a4>
     aaa:	2b30      	cmp	r3, #48	; 0x30
     aac:	f47f af6d 	bne.w	98a <cbvprintf+0x6a>
			conv->flag_zero = true;
     ab0:	2201      	movs	r2, #1
	} while (loop);
     ab2:	e75c      	b.n	96e <cbvprintf+0x4e>
			conv->flag_plus = true;
     ab4:	f04f 0e01 	mov.w	lr, #1
     ab8:	e759      	b.n	96e <cbvprintf+0x4e>
			conv->flag_space = true;
     aba:	2601      	movs	r6, #1
     abc:	e757      	b.n	96e <cbvprintf+0x4e>
			conv->flag_hash = true;
     abe:	f04f 0c01 	mov.w	ip, #1
     ac2:	e754      	b.n	96e <cbvprintf+0x4e>
		switch (*sp) {
     ac4:	2001      	movs	r0, #1
     ac6:	e752      	b.n	96e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     ac8:	4633      	mov	r3, r6
     aca:	fb0c 0202 	mla	r2, ip, r2, r0
     ace:	3a30      	subs	r2, #48	; 0x30
     ad0:	461e      	mov	r6, r3
     ad2:	f816 0b01 	ldrb.w	r0, [r6], #1
     ad6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     ada:	2f09      	cmp	r7, #9
     adc:	d9f4      	bls.n	ac8 <cbvprintf+0x1a8>
	if (sp != wp) {
     ade:	4299      	cmp	r1, r3
     ae0:	d093      	beq.n	a0a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     ae2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     ae6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     ae8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     aea:	f362 0141 	bfi	r1, r2, #1, #1
     aee:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     af2:	e78a      	b.n	a0a <cbvprintf+0xea>
     af4:	460b      	mov	r3, r1
	size_t val = 0;
     af6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     af8:	f04f 0c0a 	mov.w	ip, #10
     afc:	e7e8      	b.n	ad0 <cbvprintf+0x1b0>
		conv->prec_star = true;
     afe:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     b02:	3302      	adds	r3, #2
		conv->prec_star = true;
     b04:	f042 0204 	orr.w	r2, r2, #4
     b08:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     b0c:	461f      	mov	r7, r3
     b0e:	f817 2b01 	ldrb.w	r2, [r7], #1
     b12:	2a6c      	cmp	r2, #108	; 0x6c
     b14:	d041      	beq.n	b9a <cbvprintf+0x27a>
     b16:	d825      	bhi.n	b64 <cbvprintf+0x244>
     b18:	2a68      	cmp	r2, #104	; 0x68
     b1a:	d02b      	beq.n	b74 <cbvprintf+0x254>
     b1c:	2a6a      	cmp	r2, #106	; 0x6a
     b1e:	d046      	beq.n	bae <cbvprintf+0x28e>
     b20:	2a4c      	cmp	r2, #76	; 0x4c
     b22:	d04c      	beq.n	bbe <cbvprintf+0x29e>
     b24:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     b26:	f817 2b01 	ldrb.w	r2, [r7], #1
     b2a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     b2e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     b30:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     b34:	f200 80d9 	bhi.w	cea <cbvprintf+0x3ca>
     b38:	2a57      	cmp	r2, #87	; 0x57
     b3a:	d84d      	bhi.n	bd8 <cbvprintf+0x2b8>
     b3c:	2a41      	cmp	r2, #65	; 0x41
     b3e:	d003      	beq.n	b48 <cbvprintf+0x228>
     b40:	3a45      	subs	r2, #69	; 0x45
     b42:	2a02      	cmp	r2, #2
     b44:	f200 80d1 	bhi.w	cea <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     b48:	2204      	movs	r2, #4
     b4a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     b4e:	f362 0302 	bfi	r3, r2, #0, #3
     b52:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     b56:	2301      	movs	r3, #1
			break;
     b58:	e09e      	b.n	c98 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     b5a:	fb06 2101 	mla	r1, r6, r1, r2
     b5e:	4603      	mov	r3, r0
     b60:	3930      	subs	r1, #48	; 0x30
     b62:	e764      	b.n	a2e <cbvprintf+0x10e>
	switch (*sp) {
     b64:	2a74      	cmp	r2, #116	; 0x74
     b66:	d026      	beq.n	bb6 <cbvprintf+0x296>
     b68:	2a7a      	cmp	r2, #122	; 0x7a
     b6a:	d1db      	bne.n	b24 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     b6c:	2206      	movs	r2, #6
     b6e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     b72:	e00d      	b.n	b90 <cbvprintf+0x270>
		if (*++sp == 'h') {
     b74:	785a      	ldrb	r2, [r3, #1]
     b76:	2a68      	cmp	r2, #104	; 0x68
     b78:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b7c:	d106      	bne.n	b8c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     b7e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     b80:	f361 02c6 	bfi	r2, r1, #3, #4
     b84:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     b88:	1c9f      	adds	r7, r3, #2
     b8a:	e7cc      	b.n	b26 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     b8c:	4613      	mov	r3, r2
     b8e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     b90:	f362 03c6 	bfi	r3, r2, #3, #4
     b94:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     b98:	e7c5      	b.n	b26 <cbvprintf+0x206>
		if (*++sp == 'l') {
     b9a:	785a      	ldrb	r2, [r3, #1]
     b9c:	2a6c      	cmp	r2, #108	; 0x6c
     b9e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     ba2:	d101      	bne.n	ba8 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     ba4:	2104      	movs	r1, #4
     ba6:	e7eb      	b.n	b80 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     ba8:	4613      	mov	r3, r2
     baa:	2203      	movs	r2, #3
     bac:	e7f0      	b.n	b90 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     bae:	2205      	movs	r2, #5
     bb0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     bb4:	e7ec      	b.n	b90 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     bb6:	2207      	movs	r2, #7
     bb8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     bbc:	e7e8      	b.n	b90 <cbvprintf+0x270>
		conv->unsupported = true;
     bbe:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     bc2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     bc6:	f023 0302 	bic.w	r3, r3, #2
     bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     bce:	f043 0302 	orr.w	r3, r3, #2
     bd2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     bd6:	e7a6      	b.n	b26 <cbvprintf+0x206>
     bd8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     bdc:	2920      	cmp	r1, #32
     bde:	f200 8084 	bhi.w	cea <cbvprintf+0x3ca>
     be2:	a001      	add	r0, pc, #4	; (adr r0, be8 <cbvprintf+0x2c8>)
     be4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     be8:	00000cad 	.word	0x00000cad
     bec:	00000ceb 	.word	0x00000ceb
     bf0:	00000ceb 	.word	0x00000ceb
     bf4:	00000ceb 	.word	0x00000ceb
     bf8:	00000ceb 	.word	0x00000ceb
     bfc:	00000ceb 	.word	0x00000ceb
     c00:	00000ceb 	.word	0x00000ceb
     c04:	00000ceb 	.word	0x00000ceb
     c08:	00000ceb 	.word	0x00000ceb
     c0c:	00000b49 	.word	0x00000b49
     c10:	00000ceb 	.word	0x00000ceb
     c14:	00000cad 	.word	0x00000cad
     c18:	00000c6d 	.word	0x00000c6d
     c1c:	00000b49 	.word	0x00000b49
     c20:	00000b49 	.word	0x00000b49
     c24:	00000b49 	.word	0x00000b49
     c28:	00000ceb 	.word	0x00000ceb
     c2c:	00000c6d 	.word	0x00000c6d
     c30:	00000ceb 	.word	0x00000ceb
     c34:	00000ceb 	.word	0x00000ceb
     c38:	00000ceb 	.word	0x00000ceb
     c3c:	00000ceb 	.word	0x00000ceb
     c40:	00000cb5 	.word	0x00000cb5
     c44:	00000cad 	.word	0x00000cad
     c48:	00000cd1 	.word	0x00000cd1
     c4c:	00000ceb 	.word	0x00000ceb
     c50:	00000ceb 	.word	0x00000ceb
     c54:	00000cd1 	.word	0x00000cd1
     c58:	00000ceb 	.word	0x00000ceb
     c5c:	00000cad 	.word	0x00000cad
     c60:	00000ceb 	.word	0x00000ceb
     c64:	00000ceb 	.word	0x00000ceb
     c68:	00000cad 	.word	0x00000cad
		conv->specifier_cat = SPECIFIER_SINT;
     c6c:	2001      	movs	r0, #1
     c6e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     c72:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     c76:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     c7a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     c7c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     c80:	bf02      	ittt	eq
     c82:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     c86:	f041 0101 	orreq.w	r1, r1, #1
     c8a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     c8e:	2a63      	cmp	r2, #99	; 0x63
     c90:	d131      	bne.n	cf6 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     c92:	3b00      	subs	r3, #0
     c94:	bf18      	it	ne
     c96:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     c98:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     c9c:	f3c2 0140 	ubfx	r1, r2, #1, #1
     ca0:	430b      	orrs	r3, r1
     ca2:	f363 0241 	bfi	r2, r3, #1, #1
     ca6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     caa:	e6d8      	b.n	a5e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     cac:	2002      	movs	r0, #2
     cae:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     cb2:	e7de      	b.n	c72 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     cb4:	2103      	movs	r1, #3
     cb6:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     cba:	f003 0378 	and.w	r3, r3, #120	; 0x78
     cbe:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     cc2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     cc6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     cc8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     ccc:	4143      	adcs	r3, r0
     cce:	e7e3      	b.n	c98 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     cd0:	2103      	movs	r1, #3
     cd2:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     cd6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     cda:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     cde:	bf14      	ite	ne
     ce0:	2301      	movne	r3, #1
     ce2:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     ce4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     ce8:	e7d6      	b.n	c98 <cbvprintf+0x378>
		conv->invalid = true;
     cea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     cee:	f043 0301 	orr.w	r3, r3, #1
     cf2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     cf6:	2300      	movs	r3, #0
     cf8:	e7ce      	b.n	c98 <cbvprintf+0x378>
		} else if (conv->width_present) {
     cfa:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     cfe:	2a00      	cmp	r2, #0
		int width = -1;
     d00:	bfac      	ite	ge
     d02:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     d06:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     d0a:	e6ba      	b.n	a82 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     d0c:	079b      	lsls	r3, r3, #30
     d0e:	f57f aec7 	bpl.w	aa0 <cbvprintf+0x180>
			precision = conv->prec_value;
     d12:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     d16:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     d18:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     d1c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     d20:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     d24:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     d28:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     d2a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     d2e:	d136      	bne.n	d9e <cbvprintf+0x47e>
			switch (length_mod) {
     d30:	1ed3      	subs	r3, r2, #3
     d32:	2b04      	cmp	r3, #4
     d34:	d820      	bhi.n	d78 <cbvprintf+0x458>
     d36:	e8df f003 	tbb	[pc, r3]
     d3a:	0703      	.short	0x0703
     d3c:	1f07      	.short	0x1f07
     d3e:	1f          	.byte	0x1f
     d3f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     d40:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     d44:	17c1      	asrs	r1, r0, #31
     d46:	e004      	b.n	d52 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
     d48:	3407      	adds	r4, #7
     d4a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     d4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     d52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     d56:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     d5a:	f013 0603 	ands.w	r6, r3, #3
     d5e:	d054      	beq.n	e0a <cbvprintf+0x4ea>
			OUTS(sp, fp);
     d60:	463b      	mov	r3, r7
     d62:	4652      	mov	r2, sl
     d64:	4659      	mov	r1, fp
     d66:	9802      	ldr	r0, [sp, #8]
     d68:	f00b fb61 	bl	c42e <outs>
     d6c:	2800      	cmp	r0, #0
     d6e:	f2c0 8143 	blt.w	ff8 <cbvprintf+0x6d8>
     d72:	4405      	add	r5, r0
			continue;
     d74:	46ba      	mov	sl, r7
     d76:	e5db      	b.n	930 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     d78:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     d7c:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     d7e:	ea4f 71e0 	mov.w	r1, r0, asr #31
     d82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     d86:	d105      	bne.n	d94 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
     d88:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     d8c:	930a      	str	r3, [sp, #40]	; 0x28
     d8e:	2300      	movs	r3, #0
     d90:	930b      	str	r3, [sp, #44]	; 0x2c
     d92:	e7e0      	b.n	d56 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
     d94:	2a02      	cmp	r2, #2
     d96:	d1de      	bne.n	d56 <cbvprintf+0x436>
				value->sint = (short)value->sint;
     d98:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     d9c:	e7d2      	b.n	d44 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     d9e:	2b02      	cmp	r3, #2
     da0:	d123      	bne.n	dea <cbvprintf+0x4ca>
			switch (length_mod) {
     da2:	1ed3      	subs	r3, r2, #3
     da4:	2b04      	cmp	r3, #4
     da6:	d813      	bhi.n	dd0 <cbvprintf+0x4b0>
     da8:	e8df f003 	tbb	[pc, r3]
     dac:	120a0a03 	.word	0x120a0a03
     db0:	12          	.byte	0x12
     db1:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     db2:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
     db4:	6820      	ldr	r0, [r4, #0]
     db6:	1d23      	adds	r3, r4, #4
     db8:	900a      	str	r0, [sp, #40]	; 0x28
     dba:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     dbc:	461c      	mov	r4, r3
     dbe:	e7ca      	b.n	d56 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
     dc0:	3407      	adds	r4, #7
     dc2:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     dc6:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     dca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     dce:	e7f5      	b.n	dbc <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
     dd0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     dd4:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     dd6:	930a      	str	r3, [sp, #40]	; 0x28
     dd8:	f04f 0300 	mov.w	r3, #0
     ddc:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     dde:	d0d3      	beq.n	d88 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
     de0:	2a02      	cmp	r2, #2
     de2:	d1b8      	bne.n	d56 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
     de4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     de8:	e7d0      	b.n	d8c <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
     dea:	2b04      	cmp	r3, #4
     dec:	d107      	bne.n	dfe <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
     dee:	3407      	adds	r4, #7
     df0:	f024 0407 	bic.w	r4, r4, #7
     df4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     df8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     dfc:	e7ab      	b.n	d56 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
     dfe:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     e00:	bf04      	itt	eq
     e02:	f854 3b04 	ldreq.w	r3, [r4], #4
     e06:	930a      	streq	r3, [sp, #40]	; 0x28
     e08:	e7a5      	b.n	d56 <cbvprintf+0x436>
		switch (conv->specifier) {
     e0a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     e0e:	2878      	cmp	r0, #120	; 0x78
     e10:	d8b0      	bhi.n	d74 <cbvprintf+0x454>
     e12:	2862      	cmp	r0, #98	; 0x62
     e14:	d822      	bhi.n	e5c <cbvprintf+0x53c>
     e16:	2825      	cmp	r0, #37	; 0x25
     e18:	f43f ad93 	beq.w	942 <cbvprintf+0x22>
     e1c:	2858      	cmp	r0, #88	; 0x58
     e1e:	d1a9      	bne.n	d74 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
     e20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     e24:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     e28:	9300      	str	r3, [sp, #0]
     e2a:	aa0c      	add	r2, sp, #48	; 0x30
     e2c:	ab04      	add	r3, sp, #16
     e2e:	f00b fab3 	bl	c398 <encode_uint>
     e32:	4682      	mov	sl, r0
			if (precision >= 0) {
     e34:	f1b8 0f00 	cmp.w	r8, #0
     e38:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     e3c:	db0c      	blt.n	e58 <cbvprintf+0x538>
				conv->flag_zero = false;
     e3e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     e42:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     e46:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     e4a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     e4c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     e50:	d902      	bls.n	e58 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
     e52:	eba8 0303 	sub.w	r3, r8, r3
     e56:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     e58:	4680      	mov	r8, r0
     e5a:	e03d      	b.n	ed8 <cbvprintf+0x5b8>
     e5c:	3863      	subs	r0, #99	; 0x63
     e5e:	2815      	cmp	r0, #21
     e60:	d888      	bhi.n	d74 <cbvprintf+0x454>
     e62:	a101      	add	r1, pc, #4	; (adr r1, e68 <cbvprintf+0x548>)
     e64:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     e68:	00000ee9 	.word	0x00000ee9
     e6c:	00000f4d 	.word	0x00000f4d
     e70:	00000d75 	.word	0x00000d75
     e74:	00000d75 	.word	0x00000d75
     e78:	00000d75 	.word	0x00000d75
     e7c:	00000d75 	.word	0x00000d75
     e80:	00000f4d 	.word	0x00000f4d
     e84:	00000d75 	.word	0x00000d75
     e88:	00000d75 	.word	0x00000d75
     e8c:	00000d75 	.word	0x00000d75
     e90:	00000d75 	.word	0x00000d75
     e94:	00000fab 	.word	0x00000fab
     e98:	00000f79 	.word	0x00000f79
     e9c:	00000f7d 	.word	0x00000f7d
     ea0:	00000d75 	.word	0x00000d75
     ea4:	00000d75 	.word	0x00000d75
     ea8:	00000ec1 	.word	0x00000ec1
     eac:	00000d75 	.word	0x00000d75
     eb0:	00000f79 	.word	0x00000f79
     eb4:	00000d75 	.word	0x00000d75
     eb8:	00000d75 	.word	0x00000d75
     ebc:	00000f79 	.word	0x00000f79
			if (precision >= 0) {
     ec0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     ec4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     ec8:	db0a      	blt.n	ee0 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
     eca:	4641      	mov	r1, r8
     ecc:	4650      	mov	r0, sl
     ece:	f00c fb00 	bl	d4d2 <strnlen>
		char sign = 0;
     ed2:	2600      	movs	r6, #0
			bpe = bps + len;
     ed4:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
     ed8:	f1ba 0f00 	cmp.w	sl, #0
     edc:	d10c      	bne.n	ef8 <cbvprintf+0x5d8>
     ede:	e749      	b.n	d74 <cbvprintf+0x454>
				len = strlen(bps);
     ee0:	4650      	mov	r0, sl
     ee2:	f00c faef 	bl	d4c4 <strlen>
     ee6:	e7f4      	b.n	ed2 <cbvprintf+0x5b2>
			break;
     ee8:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
     eec:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ef0:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
     ef4:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     ef8:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     efc:	b106      	cbz	r6, f00 <cbvprintf+0x5e0>
			nj_len += 1U;
     efe:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     f00:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     f04:	06d0      	lsls	r0, r2, #27
     f06:	d56b      	bpl.n	fe0 <cbvprintf+0x6c0>
			nj_len += 2U;
     f08:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     f0a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     f0c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     f0e:	bf48      	it	mi
     f10:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     f12:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     f14:	bf48      	it	mi
     f16:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     f18:	f1b9 0f00 	cmp.w	r9, #0
     f1c:	dd79      	ble.n	1012 <CONFIG_HEAP_MEM_POOL_SIZE+0x12>
			if (!conv->flag_dash) {
     f1e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     f22:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     f26:	f3c2 0380 	ubfx	r3, r2, #2, #1
     f2a:	9303      	str	r3, [sp, #12]
     f2c:	0753      	lsls	r3, r2, #29
     f2e:	d470      	bmi.n	1012 <CONFIG_HEAP_MEM_POOL_SIZE+0x12>
				if (conv->flag_zero) {
     f30:	0650      	lsls	r0, r2, #25
     f32:	d564      	bpl.n	ffe <cbvprintf+0x6de>
					if (sign != 0) {
     f34:	b146      	cbz	r6, f48 <cbvprintf+0x628>
						OUTC(sign);
     f36:	4659      	mov	r1, fp
     f38:	4630      	mov	r0, r6
     f3a:	9b02      	ldr	r3, [sp, #8]
     f3c:	4798      	blx	r3
     f3e:	2800      	cmp	r0, #0
     f40:	db5a      	blt.n	ff8 <cbvprintf+0x6d8>
						sign = 0;
     f42:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     f44:	3501      	adds	r5, #1
						sign = 0;
     f46:	461e      	mov	r6, r3
					pad = '0';
     f48:	2330      	movs	r3, #48	; 0x30
     f4a:	e059      	b.n	1000 <CONFIG_HEAP_MEM_POOL_SIZE>
			if (conv->flag_plus) {
     f4c:	071e      	lsls	r6, r3, #28
     f4e:	d411      	bmi.n	f74 <cbvprintf+0x654>
				sign = ' ';
     f50:	f013 0610 	ands.w	r6, r3, #16
     f54:	bf18      	it	ne
     f56:	2620      	movne	r6, #32
			if (value->sint < 0) {
     f58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     f5c:	2a00      	cmp	r2, #0
     f5e:	f173 0100 	sbcs.w	r1, r3, #0
     f62:	f6bf af5d 	bge.w	e20 <cbvprintf+0x500>
				value->uint = (uint_value_type)-value->sint;
     f66:	4252      	negs	r2, r2
     f68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     f6c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
     f6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     f72:	e755      	b.n	e20 <cbvprintf+0x500>
				sign = '+';
     f74:	262b      	movs	r6, #43	; 0x2b
     f76:	e7ef      	b.n	f58 <cbvprintf+0x638>
		switch (conv->specifier) {
     f78:	2600      	movs	r6, #0
     f7a:	e751      	b.n	e20 <cbvprintf+0x500>
			if (value->ptr != NULL) {
     f7c:	980a      	ldr	r0, [sp, #40]	; 0x28
     f7e:	b348      	cbz	r0, fd4 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     f80:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     f84:	9300      	str	r3, [sp, #0]
     f86:	2100      	movs	r1, #0
     f88:	ab04      	add	r3, sp, #16
     f8a:	aa0c      	add	r2, sp, #48	; 0x30
     f8c:	f00b fa04 	bl	c398 <encode_uint>
				conv->altform_0c = true;
     f90:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
     f94:	4682      	mov	sl, r0
				conv->altform_0c = true;
     f96:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     f9a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     f9e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
     fa2:	2600      	movs	r6, #0
				conv->altform_0c = true;
     fa4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
     fa8:	e744      	b.n	e34 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
     faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     fac:	2a07      	cmp	r2, #7
     fae:	f63f aee1 	bhi.w	d74 <cbvprintf+0x454>
     fb2:	e8df f002 	tbb	[pc, r2]
     fb6:	040d      	.short	0x040d
     fb8:	08080d06 	.word	0x08080d06
     fbc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     fbe:	701d      	strb	r5, [r3, #0]
		break;
     fc0:	e6d8      	b.n	d74 <cbvprintf+0x454>
		*(short *)dp = (short)count;
     fc2:	801d      	strh	r5, [r3, #0]
		break;
     fc4:	e6d6      	b.n	d74 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
     fc6:	4628      	mov	r0, r5
     fc8:	17e9      	asrs	r1, r5, #31
     fca:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     fce:	e6d1      	b.n	d74 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     fd0:	601d      	str	r5, [r3, #0]
		break;
     fd2:	e6cf      	b.n	d74 <cbvprintf+0x454>
			bpe = bps + 5;
     fd4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 109c <CONFIG_HEAP_MEM_POOL_SIZE+0x9c>
     fd8:	4606      	mov	r6, r0
			bps = "(nil)";
     fda:	f1a8 0a05 	sub.w	sl, r8, #5
     fde:	e78b      	b.n	ef8 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
     fe0:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     fe2:	bf48      	it	mi
     fe4:	3301      	addmi	r3, #1
     fe6:	e790      	b.n	f0a <cbvprintf+0x5ea>
					OUTC(pad);
     fe8:	4618      	mov	r0, r3
     fea:	9303      	str	r3, [sp, #12]
     fec:	4659      	mov	r1, fp
     fee:	9b02      	ldr	r3, [sp, #8]
     ff0:	4798      	blx	r3
     ff2:	2800      	cmp	r0, #0
     ff4:	9b03      	ldr	r3, [sp, #12]
     ff6:	da04      	bge.n	1002 <CONFIG_HEAP_MEM_POOL_SIZE+0x2>
#undef OUTS
#undef OUTC
}
     ff8:	b011      	add	sp, #68	; 0x44
     ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     ffe:	2320      	movs	r3, #32
    1000:	444d      	add	r5, r9
    1002:	464a      	mov	r2, r9
				while (width-- > 0) {
    1004:	2a00      	cmp	r2, #0
    1006:	eba5 0109 	sub.w	r1, r5, r9
    100a:	f109 39ff 	add.w	r9, r9, #4294967295
    100e:	dceb      	bgt.n	fe8 <cbvprintf+0x6c8>
    1010:	460d      	mov	r5, r1
		if (sign != 0) {
    1012:	b136      	cbz	r6, 1022 <CONFIG_HEAP_MEM_POOL_SIZE+0x22>
			OUTC(sign);
    1014:	4659      	mov	r1, fp
    1016:	4630      	mov	r0, r6
    1018:	9b02      	ldr	r3, [sp, #8]
    101a:	4798      	blx	r3
    101c:	2800      	cmp	r0, #0
    101e:	dbeb      	blt.n	ff8 <cbvprintf+0x6d8>
    1020:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1022:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1026:	06d9      	lsls	r1, r3, #27
    1028:	d401      	bmi.n	102e <CONFIG_HEAP_MEM_POOL_SIZE+0x2e>
    102a:	071a      	lsls	r2, r3, #28
    102c:	d506      	bpl.n	103c <CONFIG_HEAP_MEM_POOL_SIZE+0x3c>
				OUTC('0');
    102e:	4659      	mov	r1, fp
    1030:	2030      	movs	r0, #48	; 0x30
    1032:	9b02      	ldr	r3, [sp, #8]
    1034:	4798      	blx	r3
    1036:	2800      	cmp	r0, #0
    1038:	dbde      	blt.n	ff8 <cbvprintf+0x6d8>
    103a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    103c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1040:	06db      	lsls	r3, r3, #27
    1042:	d507      	bpl.n	1054 <CONFIG_HEAP_MEM_POOL_SIZE+0x54>
				OUTC(conv->specifier);
    1044:	4659      	mov	r1, fp
    1046:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    104a:	9b02      	ldr	r3, [sp, #8]
    104c:	4798      	blx	r3
    104e:	2800      	cmp	r0, #0
    1050:	dbd2      	blt.n	ff8 <cbvprintf+0x6d8>
    1052:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1054:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1056:	442e      	add	r6, r5
    1058:	1b73      	subs	r3, r6, r5
    105a:	2b00      	cmp	r3, #0
    105c:	dc16      	bgt.n	108c <CONFIG_HEAP_MEM_POOL_SIZE+0x8c>
			OUTS(bps, bpe);
    105e:	4643      	mov	r3, r8
    1060:	4652      	mov	r2, sl
    1062:	4659      	mov	r1, fp
    1064:	9802      	ldr	r0, [sp, #8]
    1066:	f00b f9e2 	bl	c42e <outs>
    106a:	2800      	cmp	r0, #0
    106c:	dbc4      	blt.n	ff8 <cbvprintf+0x6d8>
    106e:	4405      	add	r5, r0
		while (width > 0) {
    1070:	44a9      	add	r9, r5
    1072:	eba9 0305 	sub.w	r3, r9, r5
    1076:	2b00      	cmp	r3, #0
    1078:	f77f ae7c 	ble.w	d74 <cbvprintf+0x454>
			OUTC(' ');
    107c:	4659      	mov	r1, fp
    107e:	2020      	movs	r0, #32
    1080:	9b02      	ldr	r3, [sp, #8]
    1082:	4798      	blx	r3
    1084:	2800      	cmp	r0, #0
    1086:	dbb7      	blt.n	ff8 <cbvprintf+0x6d8>
    1088:	3501      	adds	r5, #1
			--width;
    108a:	e7f2      	b.n	1072 <CONFIG_HEAP_MEM_POOL_SIZE+0x72>
				OUTC('0');
    108c:	4659      	mov	r1, fp
    108e:	2030      	movs	r0, #48	; 0x30
    1090:	9b02      	ldr	r3, [sp, #8]
    1092:	4798      	blx	r3
    1094:	2800      	cmp	r0, #0
    1096:	dbaf      	blt.n	ff8 <cbvprintf+0x6d8>
    1098:	3501      	adds	r5, #1
    109a:	e7dd      	b.n	1058 <CONFIG_HEAP_MEM_POOL_SIZE+0x58>
    109c:	00010da9 	.word	0x00010da9

000010a0 <check_erratum19>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    10a0:	4b13      	ldr	r3, [pc, #76]	; (10f0 <check_erratum19+0x50>)
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE) && \
	!defined(CONFIG_NRF5340_CPUAPP_ERRATUM19)

static int check_erratum19(const struct device *arg)
{
    10a2:	b510      	push	{r4, lr}
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    10a4:	681b      	ldr	r3, [r3, #0]
    10a6:	2b07      	cmp	r3, #7
    10a8:	d120      	bne.n	10ec <check_erratum19+0x4c>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    10aa:	4b12      	ldr	r3, [pc, #72]	; (10f4 <check_erratum19+0x54>)
    10ac:	681b      	ldr	r3, [r3, #0]
    10ae:	3b02      	subs	r3, #2
    10b0:	2b03      	cmp	r3, #3
    10b2:	d81b      	bhi.n	10ec <check_erratum19+0x4c>
	ARG_UNUSED(arg);
	if (nrf53_errata_19()) {
    10b4:	4a10      	ldr	r2, [pc, #64]	; (10f8 <check_erratum19+0x58>)
    10b6:	5cd3      	ldrb	r3, [r2, r3]
    10b8:	b1c3      	cbz	r3, 10ec <check_erratum19+0x4c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    10ba:	4b10      	ldr	r3, [pc, #64]	; (10fc <check_erratum19+0x5c>)
    10bc:	4c10      	ldr	r4, [pc, #64]	; (1100 <check_erratum19+0x60>)
		LOG_ERR("This device is affected by nRF53 Erratum 19,");
    10be:	4811      	ldr	r0, [pc, #68]	; (1104 <check_erratum19+0x64>)
    10c0:	1ae4      	subs	r4, r4, r3
    10c2:	08e4      	lsrs	r4, r4, #3
    10c4:	01a4      	lsls	r4, r4, #6
    10c6:	f044 0401 	orr.w	r4, r4, #1
    10ca:	4621      	mov	r1, r4
    10cc:	f00b fa0b 	bl	c4e6 <log_0>
		LOG_ERR("but workarounds have not been enabled.");
    10d0:	4621      	mov	r1, r4
    10d2:	480d      	ldr	r0, [pc, #52]	; (1108 <check_erratum19+0x68>)
    10d4:	f00b fa07 	bl	c4e6 <log_0>
		LOG_ERR("See CONFIG_NRF5340_CPUAPP_ERRATUM19.");
    10d8:	4621      	mov	r1, r4
    10da:	480c      	ldr	r0, [pc, #48]	; (110c <check_erratum19+0x6c>)
    10dc:	f00b fa03 	bl	c4e6 <log_0>
		k_panic();
    10e0:	4040      	eors	r0, r0
    10e2:	f380 8811 	msr	BASEPRI, r0
    10e6:	f04f 0004 	mov.w	r0, #4
    10ea:	df02      	svc	2
	}

	return 0;
}
    10ec:	2000      	movs	r0, #0
    10ee:	bd10      	pop	{r4, pc}
    10f0:	00ff0130 	.word	0x00ff0130
    10f4:	00ff0134 	.word	0x00ff0134
    10f8:	00010e27 	.word	0x00010e27
    10fc:	000102f8 	.word	0x000102f8
    1100:	000103b8 	.word	0x000103b8
    1104:	00010daa 	.word	0x00010daa
    1108:	00010dd7 	.word	0x00010dd7
    110c:	00010dfe 	.word	0x00010dfe

00001110 <nrf_gpio_pin_mcu_select.constprop.0>:
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
    1110:	4b09      	ldr	r3, [pc, #36]	; (1138 <nrf_gpio_pin_mcu_select.constprop.0+0x28>)
    1112:	490a      	ldr	r1, [pc, #40]	; (113c <nrf_gpio_pin_mcu_select.constprop.0+0x2c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1114:	f000 021f 	and.w	r2, r0, #31

    return pin_number >> 5;
    1118:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    111a:	2801      	cmp	r0, #1
    111c:	bf08      	it	eq
    111e:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1120:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1124:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1128:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    112c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    1130:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    1134:	4770      	bx	lr
    1136:	bf00      	nop
    1138:	50842500 	.word	0x50842500
    113c:	50842800 	.word	0x50842800

00001140 <nordicsemi_nrf53_init>:
{
    1140:	b570      	push	{r4, r5, r6, lr}
    1142:	f04f 0320 	mov.w	r3, #32
    1146:	f3ef 8611 	mrs	r6, BASEPRI
    114a:	f383 8811 	msr	BASEPRI, r3
    114e:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    1152:	2401      	movs	r4, #1
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1154:	4d0b      	ldr	r5, [pc, #44]	; (1184 <nordicsemi_nrf53_init+0x44>)
    1156:	4b0c      	ldr	r3, [pc, #48]	; (1188 <nordicsemi_nrf53_init+0x48>)
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    1158:	2000      	movs	r0, #0
    115a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    115e:	f8c5 46d0 	str.w	r4, [r5, #1744]	; 0x6d0
    1162:	f7ff ffd5 	bl	1110 <nrf_gpio_pin_mcu_select.constprop.0>
	nrf_gpio_pin_mcu_select(PIN_XL2, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    1166:	4620      	mov	r0, r4
    1168:	f7ff ffd2 	bl	1110 <nrf_gpio_pin_mcu_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    116c:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1170:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1174:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
	__asm__ volatile(
    1178:	f386 8811 	msr	BASEPRI, r6
    117c:	f3bf 8f6f 	isb	sy
}
    1180:	2000      	movs	r0, #0
    1182:	bd70      	pop	{r4, r5, r6, pc}
    1184:	50004000 	.word	0x50004000
    1188:	50001000 	.word	0x50001000

0000118c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    118c:	b148      	cbz	r0, 11a2 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    118e:	4b05      	ldr	r3, [pc, #20]	; (11a4 <arch_busy_wait+0x18>)
    1190:	681a      	ldr	r2, [r3, #0]
    1192:	4b05      	ldr	r3, [pc, #20]	; (11a8 <arch_busy_wait+0x1c>)
    1194:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1198:	4b04      	ldr	r3, [pc, #16]	; (11ac <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    119a:	4350      	muls	r0, r2
    119c:	f043 0301 	orr.w	r3, r3, #1
    11a0:	4718      	bx	r3
}
    11a2:	4770      	bx	lr
    11a4:	200002e0 	.word	0x200002e0
    11a8:	000f4240 	.word	0x000f4240
    11ac:	00010460 	.word	0x00010460

000011b0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    11b0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    11b2:	2200      	movs	r2, #0
{
    11b4:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    11b6:	490f      	ldr	r1, [pc, #60]	; (11f4 <enable_logger+0x44>)
    11b8:	480f      	ldr	r0, [pc, #60]	; (11f8 <enable_logger+0x48>)
    11ba:	f00e fd71 	bl	fca0 <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    11be:	2200      	movs	r2, #0
    11c0:	2300      	movs	r3, #0
    11c2:	2400      	movs	r4, #0
    11c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    11c8:	230e      	movs	r3, #14
    11ca:	4d0c      	ldr	r5, [pc, #48]	; (11fc <enable_logger+0x4c>)
    11cc:	e9cd 3403 	strd	r3, r4, [sp, #12]
    11d0:	f44f 7240 	mov.w	r2, #768	; 0x300
    11d4:	4628      	mov	r0, r5
    11d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    11da:	4b09      	ldr	r3, [pc, #36]	; (1200 <enable_logger+0x50>)
    11dc:	4909      	ldr	r1, [pc, #36]	; (1204 <enable_logger+0x54>)
    11de:	9400      	str	r4, [sp, #0]
    11e0:	f009 ffee 	bl	b1c0 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread_id, *(uintptr_t *)&value, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread_id, value);
    11e4:	4908      	ldr	r1, [pc, #32]	; (1208 <enable_logger+0x58>)
    11e6:	4628      	mov	r0, r5
    11e8:	f00e fc78 	bl	fadc <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    11ec:	4620      	mov	r0, r4
    11ee:	b009      	add	sp, #36	; 0x24
    11f0:	bd30      	pop	{r4, r5, pc}
    11f2:	bf00      	nop
    11f4:	0000120d 	.word	0x0000120d
    11f8:	20000698 	.word	0x20000698
    11fc:	200006d0 	.word	0x200006d0
    1200:	000015f5 	.word	0x000015f5
    1204:	20002a18 	.word	0x20002a18
    1208:	00010e2b 	.word	0x00010e2b

0000120c <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    120c:	4801      	ldr	r0, [pc, #4]	; (1214 <log_process_thread_timer_expiry_fn+0x8>)
    120e:	f009 bf3f 	b.w	b090 <z_impl_k_sem_give>
    1212:	bf00      	nop
    1214:	2000054c 	.word	0x2000054c

00001218 <log_core_init>:
{
    1218:	b508      	push	{r3, lr}
		log_msg_pool_init();
    121a:	f000 fa49 	bl	16b0 <log_msg_pool_init>
		log_list_init(&list);
    121e:	4809      	ldr	r0, [pc, #36]	; (1244 <log_core_init+0x2c>)
    1220:	f00b f91e 	bl	c460 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1224:	2304      	movs	r3, #4
    1226:	2228      	movs	r2, #40	; 0x28
    1228:	4907      	ldr	r1, [pc, #28]	; (1248 <log_core_init+0x30>)
    122a:	4808      	ldr	r0, [pc, #32]	; (124c <log_core_init+0x34>)
    122c:	f00e fa51 	bl	f6d2 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    1230:	4b07      	ldr	r3, [pc, #28]	; (1250 <log_core_init+0x38>)
    1232:	4a08      	ldr	r2, [pc, #32]	; (1254 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    1234:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    1238:	601a      	str	r2, [r3, #0]
}
    123a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    123e:	f000 bc7f 	b.w	1b40 <log_output_timestamp_freq_set>
    1242:	bf00      	nop
    1244:	20000efc 	.word	0x20000efc
    1248:	20004f88 	.word	0x20004f88
    124c:	20000f04 	.word	0x20000f04
    1250:	20000168 	.word	0x20000168
    1254:	0000c49f 	.word	0x0000c49f

00001258 <dropped_notify>:
{
    1258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    125a:	2500      	movs	r5, #0
    125c:	4b0c      	ldr	r3, [pc, #48]	; (1290 <dropped_notify+0x38>)
    125e:	e8d3 7fef 	ldaex	r7, [r3]
    1262:	e8c3 5fe2 	stlex	r2, r5, [r3]
    1266:	2a00      	cmp	r2, #0
    1268:	d1f9      	bne.n	125e <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    126a:	4c0a      	ldr	r4, [pc, #40]	; (1294 <dropped_notify+0x3c>)
    126c:	4e0a      	ldr	r6, [pc, #40]	; (1298 <dropped_notify+0x40>)
    126e:	1b36      	subs	r6, r6, r4
    1270:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1272:	42b5      	cmp	r5, r6
    1274:	db00      	blt.n	1278 <dropped_notify+0x20>
}
    1276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1278:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    127a:	795b      	ldrb	r3, [r3, #5]
    127c:	b12b      	cbz	r3, 128a <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    127e:	6823      	ldr	r3, [r4, #0]
    1280:	68db      	ldr	r3, [r3, #12]
    1282:	b113      	cbz	r3, 128a <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    1284:	4639      	mov	r1, r7
    1286:	4620      	mov	r0, r4
    1288:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    128a:	3501      	adds	r5, #1
    128c:	3410      	adds	r4, #16
    128e:	e7f0      	b.n	1272 <dropped_notify+0x1a>
    1290:	20000ef4 	.word	0x20000ef4
    1294:	000103c8 	.word	0x000103c8
    1298:	000103d8 	.word	0x000103d8

0000129c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    129c:	4b04      	ldr	r3, [pc, #16]	; (12b0 <log_dropped+0x14>)
    129e:	e8d3 2fef 	ldaex	r2, [r3]
    12a2:	3201      	adds	r2, #1
    12a4:	e8c3 2fe1 	stlex	r1, r2, [r3]
    12a8:	2900      	cmp	r1, #0
    12aa:	d1f8      	bne.n	129e <log_dropped+0x2>
}
    12ac:	4770      	bx	lr
    12ae:	bf00      	nop
    12b0:	20000ef4 	.word	0x20000ef4

000012b4 <log_source_name_get>:
    12b4:	4a04      	ldr	r2, [pc, #16]	; (12c8 <log_source_name_get+0x14>)
    12b6:	4b05      	ldr	r3, [pc, #20]	; (12cc <log_source_name_get+0x18>)
    12b8:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    12ba:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    12be:	bf34      	ite	cc
    12c0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    12c4:	2000      	movcs	r0, #0
}
    12c6:	4770      	bx	lr
    12c8:	000102f8 	.word	0x000102f8
    12cc:	000103c8 	.word	0x000103c8

000012d0 <log_backend_enable>:
	id += backend - log_backend_get(0);
    12d0:	4b09      	ldr	r3, [pc, #36]	; (12f8 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    12d2:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    12d4:	1ac3      	subs	r3, r0, r3
    12d6:	111b      	asrs	r3, r3, #4
    12d8:	3301      	adds	r3, #1
{
    12da:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    12dc:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    12de:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    12e0:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    12e2:	4c06      	ldr	r4, [pc, #24]	; (12fc <log_backend_enable+0x2c>)
    12e4:	715a      	strb	r2, [r3, #5]
    12e6:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    12e8:	6019      	str	r1, [r3, #0]
    12ea:	b912      	cbnz	r2, 12f2 <log_backend_enable+0x22>
    12ec:	4804      	ldr	r0, [pc, #16]	; (1300 <log_backend_enable+0x30>)
    12ee:	f009 fecf 	bl	b090 <z_impl_k_sem_give>
	backend_attached = true;
    12f2:	2301      	movs	r3, #1
    12f4:	7023      	strb	r3, [r4, #0]
}
    12f6:	bd10      	pop	{r4, pc}
    12f8:	000103c8 	.word	0x000103c8
    12fc:	2000295f 	.word	0x2000295f
    1300:	2000054c 	.word	0x2000054c

00001304 <log_init>:
{
    1304:	b570      	push	{r4, r5, r6, lr}
    1306:	4b0f      	ldr	r3, [pc, #60]	; (1344 <log_init+0x40>)
    1308:	e8d3 5fef 	ldaex	r5, [r3]
    130c:	1c6a      	adds	r2, r5, #1
    130e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1312:	2900      	cmp	r1, #0
    1314:	d1f8      	bne.n	1308 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    1316:	b92d      	cbnz	r5, 1324 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    1318:	4c0b      	ldr	r4, [pc, #44]	; (1348 <log_init+0x44>)
    131a:	4e0c      	ldr	r6, [pc, #48]	; (134c <log_init+0x48>)
    131c:	1b36      	subs	r6, r6, r4
    131e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    1320:	42b5      	cmp	r5, r6
    1322:	db00      	blt.n	1326 <log_init+0x22>
}
    1324:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    1326:	7b23      	ldrb	r3, [r4, #12]
    1328:	b143      	cbz	r3, 133c <log_init+0x38>
			if (backend->api->init != NULL) {
    132a:	6823      	ldr	r3, [r4, #0]
    132c:	695b      	ldr	r3, [r3, #20]
    132e:	b103      	cbz	r3, 1332 <log_init+0x2e>
				backend->api->init();
    1330:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    1332:	2204      	movs	r2, #4
    1334:	2100      	movs	r1, #0
    1336:	4620      	mov	r0, r4
    1338:	f7ff ffca 	bl	12d0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    133c:	3501      	adds	r5, #1
    133e:	3410      	adds	r4, #16
    1340:	e7ee      	b.n	1320 <log_init+0x1c>
    1342:	bf00      	nop
    1344:	20000ef8 	.word	0x20000ef8
    1348:	000103c8 	.word	0x000103c8
    134c:	000103d8 	.word	0x000103d8

00001350 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    1350:	4b14      	ldr	r3, [pc, #80]	; (13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>)
{
    1352:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    1354:	4298      	cmp	r0, r3
{
    1356:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    1358:	d302      	bcc.n	1360 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    135a:	4b13      	ldr	r3, [pc, #76]	; (13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>)
    135c:	4298      	cmp	r0, r3
    135e:	d31c      	bcc.n	139a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    1360:	2200      	movs	r2, #0
    1362:	2300      	movs	r3, #0
    1364:	4811      	ldr	r0, [pc, #68]	; (13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>)
    1366:	a901      	add	r1, sp, #4
    1368:	f009 f9a2 	bl	a6b0 <k_mem_slab_alloc>
	if (err != 0) {
    136c:	4605      	mov	r5, r0
    136e:	b9b8      	cbnz	r0, 13a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1370:	2201      	movs	r2, #1
    1372:	9b01      	ldr	r3, [sp, #4]
    1374:	e8d3 1fef 	ldaex	r1, [r3]
    1378:	e8c3 2fe0 	stlex	r0, r2, [r3]
    137c:	2800      	cmp	r0, #0
    137e:	d1f9      	bne.n	1374 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    1380:	9801      	ldr	r0, [sp, #4]
    1382:	4621      	mov	r1, r4
    1384:	221f      	movs	r2, #31
    1386:	3004      	adds	r0, #4
    1388:	f00c f889 	bl	d49e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    138c:	237e      	movs	r3, #126	; 0x7e
    138e:	9c01      	ldr	r4, [sp, #4]
    1390:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1394:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    1398:	3404      	adds	r4, #4
}
    139a:	4620      	mov	r0, r4
    139c:	b003      	add	sp, #12
    139e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    13a0:	4c03      	ldr	r4, [pc, #12]	; (13b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28>)
    13a2:	e7fa      	b.n	139a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12>
    13a4:	0000fff4 	.word	0x0000fff4
    13a8:	00012ce0 	.word	0x00012ce0
    13ac:	20000f04 	.word	0x20000f04
    13b0:	00010e33 	.word	0x00010e33

000013b4 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    13b4:	b148      	cbz	r0, 13ca <log_is_strdup+0x16>
    13b6:	4b05      	ldr	r3, [pc, #20]	; (13cc <log_is_strdup+0x18>)
    13b8:	4298      	cmp	r0, r3
    13ba:	d305      	bcc.n	13c8 <log_is_strdup+0x14>
    13bc:	33a0      	adds	r3, #160	; 0xa0
    13be:	4298      	cmp	r0, r3
    13c0:	bf2c      	ite	cs
    13c2:	2000      	movcs	r0, #0
    13c4:	2001      	movcc	r0, #1
    13c6:	4770      	bx	lr
    13c8:	2000      	movs	r0, #0
}
    13ca:	4770      	bx	lr
    13cc:	20004f88 	.word	0x20004f88

000013d0 <z_impl_log_process>:
{
    13d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    13d4:	4b4a      	ldr	r3, [pc, #296]	; (1500 <z_impl_log_process+0x130>)
{
    13d6:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    13d8:	781b      	ldrb	r3, [r3, #0]
{
    13da:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    13dc:	b903      	cbnz	r3, 13e0 <z_impl_log_process+0x10>
    13de:	b340      	cbz	r0, 1432 <z_impl_log_process+0x62>
	__asm__ volatile(
    13e0:	f04f 0320 	mov.w	r3, #32
    13e4:	f3ef 8611 	mrs	r6, BASEPRI
    13e8:	f383 8811 	msr	BASEPRI, r3
    13ec:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    13f0:	4844      	ldr	r0, [pc, #272]	; (1504 <z_impl_log_process+0x134>)
    13f2:	f00b f845 	bl	c480 <log_list_head_get>
    13f6:	4605      	mov	r5, r0
	__asm__ volatile(
    13f8:	f386 8811 	msr	BASEPRI, r6
    13fc:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    1400:	b158      	cbz	r0, 141a <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1402:	4b41      	ldr	r3, [pc, #260]	; (1508 <z_impl_log_process+0x138>)
    1404:	e8d3 2fef 	ldaex	r2, [r3]
    1408:	3a01      	subs	r2, #1
    140a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    140e:	2900      	cmp	r1, #0
    1410:	d1f8      	bne.n	1404 <z_impl_log_process+0x34>
	if (!bypass) {
    1412:	b194      	cbz	r4, 143a <z_impl_log_process+0x6a>
	log_msg_put(msg);
    1414:	4628      	mov	r0, r5
    1416:	f00b f948 	bl	c6aa <log_msg_put>
	if (!bypass && dropped_cnt) {
    141a:	b924      	cbnz	r4, 1426 <z_impl_log_process+0x56>
    141c:	4b3b      	ldr	r3, [pc, #236]	; (150c <z_impl_log_process+0x13c>)
    141e:	681b      	ldr	r3, [r3, #0]
    1420:	b10b      	cbz	r3, 1426 <z_impl_log_process+0x56>
		dropped_notify();
    1422:	f7ff ff19 	bl	1258 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    1426:	4837      	ldr	r0, [pc, #220]	; (1504 <z_impl_log_process+0x134>)
    1428:	f00b f828 	bl	c47c <log_list_head_peek>
    142c:	1e04      	subs	r4, r0, #0
    142e:	bf18      	it	ne
    1430:	2401      	movne	r4, #1
}
    1432:	4620      	mov	r0, r4
    1434:	b005      	add	sp, #20
    1436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    143a:	4b35      	ldr	r3, [pc, #212]	; (1510 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    143c:	781b      	ldrb	r3, [r3, #0]
    143e:	b9cb      	cbnz	r3, 1474 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1440:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    1442:	07db      	lsls	r3, r3, #31
    1444:	d416      	bmi.n	1474 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    1446:	f00b f93f 	bl	c6c8 <log_msg_str_get>
    144a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    144c:	4628      	mov	r0, r5
    144e:	f00b f90a 	bl	c666 <log_msg_nargs_get>
    1452:	4601      	mov	r1, r0
    1454:	4640      	mov	r0, r8
    1456:	f00b f826 	bl	c4a6 <z_log_get_s_mask>
    145a:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    145c:	4f2d      	ldr	r7, [pc, #180]	; (1514 <z_impl_log_process+0x144>)
    145e:	4b2e      	ldr	r3, [pc, #184]	; (1518 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    1460:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 1534 <z_impl_log_process+0x164>
    1464:	1bdb      	subs	r3, r3, r7
    1466:	08db      	lsrs	r3, r3, #3
    1468:	9303      	str	r3, [sp, #12]
    146a:	4b2c      	ldr	r3, [pc, #176]	; (151c <z_impl_log_process+0x14c>)
    146c:	1bdb      	subs	r3, r3, r7
    146e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    1472:	b936      	cbnz	r6, 1482 <z_impl_log_process+0xb2>
    1474:	4e2a      	ldr	r6, [pc, #168]	; (1520 <z_impl_log_process+0x150>)
    1476:	4f2b      	ldr	r7, [pc, #172]	; (1524 <z_impl_log_process+0x154>)
    1478:	f04f 0800 	mov.w	r8, #0
    147c:	1bbf      	subs	r7, r7, r6
    147e:	113f      	asrs	r7, r7, #4
    1480:	e03a      	b.n	14f8 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
    1482:	fab6 f186 	clz	r1, r6
    1486:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    148a:	4649      	mov	r1, r9
    148c:	4628      	mov	r0, r5
    148e:	f00b f8ed 	bl	c66c <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    1492:	4b25      	ldr	r3, [pc, #148]	; (1528 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
    1494:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    1496:	4298      	cmp	r0, r3
    1498:	d302      	bcc.n	14a0 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    149a:	4b24      	ldr	r3, [pc, #144]	; (152c <z_impl_log_process+0x15c>)
    149c:	4298      	cmp	r0, r3
    149e:	d31a      	bcc.n	14d6 <z_impl_log_process+0x106>
    14a0:	4608      	mov	r0, r1
    14a2:	f7ff ff87 	bl	13b4 <log_is_strdup>
    14a6:	4602      	mov	r2, r0
    14a8:	b9a8      	cbnz	r0, 14d6 <z_impl_log_process+0x106>
    14aa:	4b21      	ldr	r3, [pc, #132]	; (1530 <z_impl_log_process+0x160>)
    14ac:	4299      	cmp	r1, r3
    14ae:	d012      	beq.n	14d6 <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
    14b0:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    14b2:	9903      	ldr	r1, [sp, #12]
    14b4:	f3c3 1389 	ubfx	r3, r3, #6, #10
    14b8:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    14ba:	bf38      	it	cc
    14bc:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    14c0:	ea4f 138a 	mov.w	r3, sl, lsl #6
    14c4:	f043 0301 	orr.w	r3, r3, #1
    14c8:	f8ad 3000 	strh.w	r3, [sp]
    14cc:	4649      	mov	r1, r9
    14ce:	4643      	mov	r3, r8
    14d0:	4658      	mov	r0, fp
    14d2:	f00b f842 	bl	c55a <log_3>
		mask &= ~BIT(idx);
    14d6:	2101      	movs	r1, #1
    14d8:	fa01 f109 	lsl.w	r1, r1, r9
    14dc:	ea26 0601 	bic.w	r6, r6, r1
    14e0:	e7c7      	b.n	1472 <z_impl_log_process+0xa2>
	return backend->cb->active;
    14e2:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    14e4:	795b      	ldrb	r3, [r3, #5]
    14e6:	b123      	cbz	r3, 14f2 <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
    14e8:	6833      	ldr	r3, [r6, #0]
    14ea:	4629      	mov	r1, r5
    14ec:	4630      	mov	r0, r6
    14ee:	681b      	ldr	r3, [r3, #0]
    14f0:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    14f2:	f108 0801 	add.w	r8, r8, #1
    14f6:	3610      	adds	r6, #16
    14f8:	45b8      	cmp	r8, r7
    14fa:	dbf2      	blt.n	14e2 <z_impl_log_process+0x112>
    14fc:	e78a      	b.n	1414 <z_impl_log_process+0x44>
    14fe:	bf00      	nop
    1500:	2000295f 	.word	0x2000295f
    1504:	20000efc 	.word	0x20000efc
    1508:	20000ef0 	.word	0x20000ef0
    150c:	20000ef4 	.word	0x20000ef4
    1510:	20002960 	.word	0x20002960
    1514:	000102f8 	.word	0x000102f8
    1518:	000103c8 	.word	0x000103c8
    151c:	00010370 	.word	0x00010370
    1520:	000103c8 	.word	0x000103c8
    1524:	000103d8 	.word	0x000103d8
    1528:	0000fff4 	.word	0x0000fff4
    152c:	00012ce0 	.word	0x00012ce0
    1530:	00010e33 	.word	0x00010e33
    1534:	00010e4d 	.word	0x00010e4d

00001538 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    1538:	4b27      	ldr	r3, [pc, #156]	; (15d8 <msg_finalize+0xa0>)
{
    153a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    153c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    153e:	8141      	strh	r1, [r0, #10]
{
    1540:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1542:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1544:	4d25      	ldr	r5, [pc, #148]	; (15dc <msg_finalize+0xa4>)
    1546:	60e0      	str	r0, [r4, #12]
    1548:	e8d5 3fef 	ldaex	r3, [r5]
    154c:	3301      	adds	r3, #1
    154e:	e8c5 3fe2 	stlex	r2, r3, [r5]
    1552:	2a00      	cmp	r2, #0
    1554:	d1f8      	bne.n	1548 <msg_finalize+0x10>
	__asm__ volatile(
    1556:	f04f 0320 	mov.w	r3, #32
    155a:	f3ef 8611 	mrs	r6, BASEPRI
    155e:	f383 8811 	msr	BASEPRI, r3
    1562:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1566:	481e      	ldr	r0, [pc, #120]	; (15e0 <msg_finalize+0xa8>)
    1568:	4621      	mov	r1, r4
    156a:	f00a ff7d 	bl	c468 <log_list_add_tail>
	__asm__ volatile(
    156e:	f386 8811 	msr	BASEPRI, r6
    1572:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    1576:	4b1b      	ldr	r3, [pc, #108]	; (15e4 <msg_finalize+0xac>)
    1578:	781b      	ldrb	r3, [r3, #0]
    157a:	b183      	cbz	r3, 159e <msg_finalize+0x66>
	__asm__ volatile(
    157c:	f04f 0320 	mov.w	r3, #32
    1580:	f3ef 8411 	mrs	r4, BASEPRI
    1584:	f383 8811 	msr	BASEPRI, r3
    1588:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    158c:	2000      	movs	r0, #0
    158e:	f7ff ff1f 	bl	13d0 <z_impl_log_process>
	__asm__ volatile(
    1592:	f384 8811 	msr	BASEPRI, r4
    1596:	f3bf 8f6f 	isb	sy
}
    159a:	b002      	add	sp, #8
    159c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    159e:	4a12      	ldr	r2, [pc, #72]	; (15e8 <msg_finalize+0xb0>)
    15a0:	682b      	ldr	r3, [r5, #0]
    15a2:	6812      	ldr	r2, [r2, #0]
    15a4:	2a00      	cmp	r2, #0
    15a6:	d0f8      	beq.n	159a <msg_finalize+0x62>
    15a8:	2b01      	cmp	r3, #1
    15aa:	d10a      	bne.n	15c2 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    15ac:	2200      	movs	r2, #0
    15ae:	2300      	movs	r3, #0
    15b0:	480e      	ldr	r0, [pc, #56]	; (15ec <msg_finalize+0xb4>)
    15b2:	e9cd 2300 	strd	r2, r3, [sp]
    15b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    15ba:	2300      	movs	r3, #0
    15bc:	f00a f8b2 	bl	b724 <z_impl_k_timer_start>
    15c0:	e7eb      	b.n	159a <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    15c2:	2b0a      	cmp	r3, #10
    15c4:	d1e9      	bne.n	159a <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    15c6:	4809      	ldr	r0, [pc, #36]	; (15ec <msg_finalize+0xb4>)
    15c8:	f00e fb76 	bl	fcb8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    15cc:	4808      	ldr	r0, [pc, #32]	; (15f0 <msg_finalize+0xb8>)
}
    15ce:	b002      	add	sp, #8
    15d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    15d4:	f009 bd5c 	b.w	b090 <z_impl_k_sem_give>
    15d8:	20000168 	.word	0x20000168
    15dc:	20000ef0 	.word	0x20000ef0
    15e0:	20000efc 	.word	0x20000efc
    15e4:	20002960 	.word	0x20002960
    15e8:	20000f20 	.word	0x20000f20
    15ec:	20000698 	.word	0x20000698
    15f0:	2000054c 	.word	0x2000054c

000015f4 <log_process_thread_func>:
{
    15f4:	b510      	push	{r4, lr}
	log_init();
    15f6:	f7ff fe85 	bl	1304 <log_init>
	return z_impl_k_current_get();
    15fa:	f009 fd43 	bl	b084 <z_impl_k_current_get>
	proc_tid = process_tid;
    15fe:	4b0c      	ldr	r3, [pc, #48]	; (1630 <log_process_thread_func+0x3c>)
    1600:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1602:	b130      	cbz	r0, 1612 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1604:	4b0b      	ldr	r3, [pc, #44]	; (1634 <log_process_thread_func+0x40>)
	    process_tid &&
    1606:	681b      	ldr	r3, [r3, #0]
    1608:	2b09      	cmp	r3, #9
    160a:	dd02      	ble.n	1612 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    160c:	480a      	ldr	r0, [pc, #40]	; (1638 <log_process_thread_func+0x44>)
    160e:	f009 fd3f 	bl	b090 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    1612:	4c09      	ldr	r4, [pc, #36]	; (1638 <log_process_thread_func+0x44>)
    1614:	2000      	movs	r0, #0
    1616:	f7ff fedb 	bl	13d0 <z_impl_log_process>
		if (log_process(false) == false) {
    161a:	2800      	cmp	r0, #0
    161c:	d1fa      	bne.n	1614 <log_process_thread_func+0x20>
    161e:	f04f 32ff 	mov.w	r2, #4294967295
    1622:	f04f 33ff 	mov.w	r3, #4294967295
    1626:	4620      	mov	r0, r4
    1628:	f009 fd58 	bl	b0dc <z_impl_k_sem_take>
    162c:	e7f2      	b.n	1614 <log_process_thread_func+0x20>
    162e:	bf00      	nop
    1630:	20000f20 	.word	0x20000f20
    1634:	20000ef0 	.word	0x20000ef0
    1638:	2000054c 	.word	0x2000054c

0000163c <z_impl_log_panic>:
{
    163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    163e:	4f0e      	ldr	r7, [pc, #56]	; (1678 <z_impl_log_panic+0x3c>)
    1640:	783d      	ldrb	r5, [r7, #0]
    1642:	b975      	cbnz	r5, 1662 <z_impl_log_panic+0x26>
	log_init();
    1644:	f7ff fe5e 	bl	1304 <log_init>
	return __log_backends_end - __log_backends_start;
    1648:	4c0c      	ldr	r4, [pc, #48]	; (167c <z_impl_log_panic+0x40>)
    164a:	4e0d      	ldr	r6, [pc, #52]	; (1680 <z_impl_log_panic+0x44>)
    164c:	1b36      	subs	r6, r6, r4
    164e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1650:	42b5      	cmp	r5, r6
    1652:	db07      	blt.n	1664 <z_impl_log_panic+0x28>
    1654:	2000      	movs	r0, #0
    1656:	f7ff febb 	bl	13d0 <z_impl_log_process>
		while (log_process(false) == true) {
    165a:	2800      	cmp	r0, #0
    165c:	d1fa      	bne.n	1654 <z_impl_log_panic+0x18>
	panic_mode = true;
    165e:	2301      	movs	r3, #1
    1660:	703b      	strb	r3, [r7, #0]
}
    1662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1664:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1666:	795b      	ldrb	r3, [r3, #5]
    1668:	b11b      	cbz	r3, 1672 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    166a:	6823      	ldr	r3, [r4, #0]
    166c:	4620      	mov	r0, r4
    166e:	691b      	ldr	r3, [r3, #16]
    1670:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1672:	3501      	adds	r5, #1
    1674:	3410      	adds	r4, #16
    1676:	e7eb      	b.n	1650 <z_impl_log_panic+0x14>
    1678:	20002960 	.word	0x20002960
    167c:	000103c8 	.word	0x000103c8
    1680:	000103d8 	.word	0x000103d8

00001684 <log_free>:
{
    1684:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1686:	3804      	subs	r0, #4
    1688:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    168a:	e8d0 3fef 	ldaex	r3, [r0]
    168e:	1e5a      	subs	r2, r3, #1
    1690:	e8c0 2fe1 	stlex	r1, r2, [r0]
    1694:	2900      	cmp	r1, #0
    1696:	d1f8      	bne.n	168a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    1698:	2b01      	cmp	r3, #1
    169a:	d103      	bne.n	16a4 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    169c:	4803      	ldr	r0, [pc, #12]	; (16ac <log_free+0x28>)
    169e:	a901      	add	r1, sp, #4
    16a0:	f009 f838 	bl	a714 <k_mem_slab_free>
}
    16a4:	b003      	add	sp, #12
    16a6:	f85d fb04 	ldr.w	pc, [sp], #4
    16aa:	bf00      	nop
    16ac:	20000f04 	.word	0x20000f04

000016b0 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    16b0:	2340      	movs	r3, #64	; 0x40
    16b2:	2220      	movs	r2, #32
    16b4:	4901      	ldr	r1, [pc, #4]	; (16bc <log_msg_pool_init+0xc>)
    16b6:	4802      	ldr	r0, [pc, #8]	; (16c0 <log_msg_pool_init+0x10>)
    16b8:	f00e b80b 	b.w	f6d2 <k_mem_slab_init>
    16bc:	20005028 	.word	0x20005028
    16c0:	20000f24 	.word	0x20000f24

000016c4 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    16c4:	2300      	movs	r3, #0
{
    16c6:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    16c8:	4d09      	ldr	r5, [pc, #36]	; (16f0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    16ca:	9301      	str	r3, [sp, #4]
    16cc:	2001      	movs	r0, #1
    16ce:	f7ff fe7f 	bl	13d0 <z_impl_log_process>
    16d2:	4604      	mov	r4, r0
			log_dropped();
    16d4:	f7ff fde2 	bl	129c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    16d8:	2200      	movs	r2, #0
    16da:	2300      	movs	r3, #0
    16dc:	4628      	mov	r0, r5
    16de:	a901      	add	r1, sp, #4
    16e0:	f008 ffe6 	bl	a6b0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    16e4:	b108      	cbz	r0, 16ea <log_msg_no_space_handle+0x26>
    16e6:	2c00      	cmp	r4, #0
    16e8:	d1f0      	bne.n	16cc <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    16ea:	9801      	ldr	r0, [sp, #4]
    16ec:	b003      	add	sp, #12
    16ee:	bd30      	pop	{r4, r5, pc}
    16f0:	20000f24 	.word	0x20000f24

000016f4 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    16f4:	2300      	movs	r3, #0
{
    16f6:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    16f8:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    16fa:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    16fc:	4806      	ldr	r0, [pc, #24]	; (1718 <log_msg_chunk_alloc+0x24>)
    16fe:	2300      	movs	r3, #0
    1700:	a901      	add	r1, sp, #4
    1702:	f008 ffd5 	bl	a6b0 <k_mem_slab_alloc>
	if (err != 0) {
    1706:	b110      	cbz	r0, 170e <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    1708:	f7ff ffdc 	bl	16c4 <log_msg_no_space_handle>
    170c:	9001      	str	r0, [sp, #4]
}
    170e:	9801      	ldr	r0, [sp, #4]
    1710:	b003      	add	sp, #12
    1712:	f85d fb04 	ldr.w	pc, [sp], #4
    1716:	bf00      	nop
    1718:	20000f24 	.word	0x20000f24

0000171c <msg_free>:
{
    171c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    171e:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    1720:	7a45      	ldrb	r5, [r0, #9]
{
    1722:	b085      	sub	sp, #20
    1724:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    1726:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
    1728:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    172c:	d41c      	bmi.n	1768 <msg_free+0x4c>
    172e:	b1dd      	cbz	r5, 1768 <msg_free+0x4c>
		uint32_t smask = 0;
    1730:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    1732:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    1734:	4631      	mov	r1, r6
    1736:	9801      	ldr	r0, [sp, #4]
    1738:	f00a ff98 	bl	c66c <log_msg_arg_get>
    173c:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    173e:	f7ff fe39 	bl	13b4 <log_is_strdup>
    1742:	b170      	cbz	r0, 1762 <msg_free+0x46>
				if (smask == 0) {
    1744:	b934      	cbnz	r4, 1754 <msg_free+0x38>
					smask = z_log_get_s_mask(
    1746:	9b01      	ldr	r3, [sp, #4]
    1748:	4629      	mov	r1, r5
    174a:	6918      	ldr	r0, [r3, #16]
    174c:	f00a feab 	bl	c4a6 <z_log_get_s_mask>
					if (smask == 0) {
    1750:	4604      	mov	r4, r0
    1752:	b148      	cbz	r0, 1768 <msg_free+0x4c>
				if (smask & BIT(i)) {
    1754:	fa24 f306 	lsr.w	r3, r4, r6
    1758:	07d9      	lsls	r1, r3, #31
    175a:	d502      	bpl.n	1762 <msg_free+0x46>
					log_free(buf);
    175c:	4638      	mov	r0, r7
    175e:	f7ff ff91 	bl	1684 <log_free>
		for (i = 0; i < nargs; i++) {
    1762:	3601      	adds	r6, #1
    1764:	42ae      	cmp	r6, r5
    1766:	d3e5      	bcc.n	1734 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    1768:	9b01      	ldr	r3, [sp, #4]
    176a:	7a1a      	ldrb	r2, [r3, #8]
    176c:	0792      	lsls	r2, r2, #30
    176e:	d504      	bpl.n	177a <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    1770:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1772:	4c08      	ldr	r4, [pc, #32]	; (1794 <msg_free+0x78>)
    1774:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    1776:	9b03      	ldr	r3, [sp, #12]
    1778:	b92b      	cbnz	r3, 1786 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    177a:	4806      	ldr	r0, [pc, #24]	; (1794 <msg_free+0x78>)
    177c:	a901      	add	r1, sp, #4
    177e:	f008 ffc9 	bl	a714 <k_mem_slab_free>
}
    1782:	b005      	add	sp, #20
    1784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    1786:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1788:	4620      	mov	r0, r4
    178a:	a903      	add	r1, sp, #12
    178c:	f008 ffc2 	bl	a714 <k_mem_slab_free>
		cont = next;
    1790:	9503      	str	r5, [sp, #12]
    1792:	e7f0      	b.n	1776 <msg_free+0x5a>
    1794:	20000f24 	.word	0x20000f24

00001798 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    1798:	b40e      	push	{r1, r2, r3}
    179a:	b503      	push	{r0, r1, lr}
    179c:	ab03      	add	r3, sp, #12
    179e:	f853 2b04 	ldr.w	r2, [r3], #4
    17a2:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    17a4:	4804      	ldr	r0, [pc, #16]	; (17b8 <print_formatted+0x20>)
	va_start(args, fmt);
    17a6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    17a8:	f7ff f8ba 	bl	920 <cbvprintf>
	va_end(args);

	return length;
}
    17ac:	b002      	add	sp, #8
    17ae:	f85d eb04 	ldr.w	lr, [sp], #4
    17b2:	b003      	add	sp, #12
    17b4:	4770      	bx	lr
    17b6:	bf00      	nop
    17b8:	0000ca71 	.word	0x0000ca71

000017bc <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    17bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    17c0:	f011 0402 	ands.w	r4, r1, #2
{
    17c4:	b085      	sub	sp, #20
    17c6:	4690      	mov	r8, r2
    17c8:	4606      	mov	r6, r0
    17ca:	461a      	mov	r2, r3
    17cc:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    17d0:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    17d4:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    17d8:	d007      	beq.n	17ea <prefix_print+0x2e>
	if (!format) {
    17da:	f011 0f44 	tst.w	r1, #68	; 0x44
    17de:	d137      	bne.n	1850 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    17e0:	4932      	ldr	r1, [pc, #200]	; (18ac <prefix_print+0xf0>)
    17e2:	f7ff ffd9 	bl	1798 <print_formatted>
			length = print_formatted(log_output,
    17e6:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    17e8:	460c      	mov	r4, r1
	if (color) {
    17ea:	f1b9 0f00 	cmp.w	r9, #0
    17ee:	d00a      	beq.n	1806 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    17f0:	4b2f      	ldr	r3, [pc, #188]	; (18b0 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    17f2:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
    17f4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    17f8:	4b2e      	ldr	r3, [pc, #184]	; (18b4 <prefix_print+0xf8>)
    17fa:	492f      	ldr	r1, [pc, #188]	; (18b8 <prefix_print+0xfc>)
    17fc:	2a00      	cmp	r2, #0
    17fe:	bf08      	it	eq
    1800:	461a      	moveq	r2, r3
    1802:	f7ff ffc9 	bl	1798 <print_formatted>
	if (level_on) {
    1806:	b13d      	cbz	r5, 1818 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    1808:	4b2c      	ldr	r3, [pc, #176]	; (18bc <prefix_print+0x100>)
    180a:	4630      	mov	r0, r6
    180c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    1810:	492b      	ldr	r1, [pc, #172]	; (18c0 <prefix_print+0x104>)
    1812:	f7ff ffc1 	bl	1798 <print_formatted>
    1816:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    1818:	f1b8 0f00 	cmp.w	r8, #0
    181c:	d043      	beq.n	18a6 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    181e:	2301      	movs	r3, #1
    1820:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    1824:	4b27      	ldr	r3, [pc, #156]	; (18c4 <prefix_print+0x108>)
    1826:	f017 0f10 	tst.w	r7, #16
    182a:	4f27      	ldr	r7, [pc, #156]	; (18c8 <prefix_print+0x10c>)
    182c:	bf18      	it	ne
    182e:	461f      	movne	r7, r3
    1830:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    1834:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1838:	f7ff fd3c 	bl	12b4 <log_source_name_get>
    183c:	4639      	mov	r1, r7
    183e:	4602      	mov	r2, r0
    1840:	4630      	mov	r0, r6
    1842:	f7ff ffa9 	bl	1798 <print_formatted>
    1846:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    1848:	4420      	add	r0, r4
    184a:	b005      	add	sp, #20
    184c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    1850:	4b1e      	ldr	r3, [pc, #120]	; (18cc <prefix_print+0x110>)
    1852:	6819      	ldr	r1, [r3, #0]
    1854:	2900      	cmp	r1, #0
    1856:	d0c7      	beq.n	17e8 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    1858:	4b1d      	ldr	r3, [pc, #116]	; (18d0 <prefix_print+0x114>)
    185a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    185e:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
    1860:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1864:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
    1868:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    186c:	fbb4 f2fe 	udiv	r2, r4, lr
    1870:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    1874:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    1878:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    187c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    1880:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1884:	fb01 441b 	mls	r4, r1, fp, r4
    1888:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    188c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1890:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    1894:	e9cd b101 	strd	fp, r1, [sp, #4]
    1898:	fb0a e113 	mls	r1, sl, r3, lr
    189c:	9100      	str	r1, [sp, #0]
    189e:	490d      	ldr	r1, [pc, #52]	; (18d4 <prefix_print+0x118>)
    18a0:	f7ff ff7a 	bl	1798 <print_formatted>
    18a4:	e79f      	b.n	17e6 <prefix_print+0x2a>
	total += print_formatted(log_output,
    18a6:	4f08      	ldr	r7, [pc, #32]	; (18c8 <prefix_print+0x10c>)
    18a8:	e7c2      	b.n	1830 <prefix_print+0x74>
    18aa:	bf00      	nop
    18ac:	00010e9e 	.word	0x00010e9e
    18b0:	000104d0 	.word	0x000104d0
    18b4:	00010e90 	.word	0x00010e90
    18b8:	00011fa0 	.word	0x00011fa0
    18bc:	000104e4 	.word	0x000104e4
    18c0:	00010ec3 	.word	0x00010ec3
    18c4:	00010e9a 	.word	0x00010e9a
    18c8:	00010e95 	.word	0x00010e95
    18cc:	20000f40 	.word	0x20000f40
    18d0:	20000f44 	.word	0x20000f44
    18d4:	00010ea7 	.word	0x00010ea7

000018d8 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    18d8:	b538      	push	{r3, r4, r5, lr}
    18da:	460c      	mov	r4, r1
	if (color) {
    18dc:	07e1      	lsls	r1, r4, #31
{
    18de:	4605      	mov	r5, r0
	if (color) {
    18e0:	d503      	bpl.n	18ea <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    18e2:	4a08      	ldr	r2, [pc, #32]	; (1904 <postfix_print+0x2c>)
    18e4:	4908      	ldr	r1, [pc, #32]	; (1908 <postfix_print+0x30>)
    18e6:	f7ff ff57 	bl	1798 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    18ea:	06e2      	lsls	r2, r4, #27
    18ec:	d408      	bmi.n	1900 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    18ee:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    18f0:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    18f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    18f6:	bf4c      	ite	mi
    18f8:	4904      	ldrmi	r1, [pc, #16]	; (190c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    18fa:	4905      	ldrpl	r1, [pc, #20]	; (1910 <postfix_print+0x38>)
    18fc:	f7ff bf4c 	b.w	1798 <print_formatted>
}
    1900:	bd38      	pop	{r3, r4, r5, pc}
    1902:	bf00      	nop
    1904:	00010e90 	.word	0x00010e90
    1908:	00011fa0 	.word	0x00011fa0
    190c:	00010eca 	.word	0x00010eca
    1910:	00010ec9 	.word	0x00010ec9

00001914 <hexdump_line_print>:
{
    1914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1918:	461d      	mov	r5, r3
    191a:	9b08      	ldr	r3, [sp, #32]
    191c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    191e:	06da      	lsls	r2, r3, #27
{
    1920:	4604      	mov	r4, r0
    1922:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1924:	d405      	bmi.n	1932 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1926:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1928:	bf4c      	ite	mi
    192a:	492a      	ldrmi	r1, [pc, #168]	; (19d4 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    192c:	492a      	ldrpl	r1, [pc, #168]	; (19d8 <hexdump_line_print+0xc4>)
    192e:	f7ff ff33 	bl	1798 <print_formatted>
{
    1932:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
    1936:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 19e0 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    193a:	45a8      	cmp	r8, r5
    193c:	db2a      	blt.n	1994 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    193e:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    1940:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 19e4 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    1944:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 19e8 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    1948:	f8df a094 	ldr.w	sl, [pc, #148]	; 19e0 <hexdump_line_print+0xcc>
		if (i < length) {
    194c:	42bd      	cmp	r5, r7
    194e:	d22f      	bcs.n	19b0 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    1950:	4649      	mov	r1, r9
    1952:	4620      	mov	r0, r4
    1954:	5d72      	ldrb	r2, [r6, r5]
    1956:	f7ff ff1f 	bl	1798 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    195a:	3501      	adds	r5, #1
    195c:	2d10      	cmp	r5, #16
    195e:	d120      	bne.n	19a2 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    1960:	4620      	mov	r0, r4
    1962:	491e      	ldr	r1, [pc, #120]	; (19dc <hexdump_line_print+0xc8>)
    1964:	f7ff ff18 	bl	1798 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1968:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    196a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 19e0 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    196e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 19ec <hexdump_line_print+0xd8>
		if (i < length) {
    1972:	42af      	cmp	r7, r5
    1974:	d928      	bls.n	19c8 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1976:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    1978:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    197a:	f1a2 0320 	sub.w	r3, r2, #32
    197e:	2b5f      	cmp	r3, #95	; 0x5f
    1980:	bf28      	it	cs
    1982:	222e      	movcs	r2, #46	; 0x2e
    1984:	4620      	mov	r0, r4
    1986:	f7ff ff07 	bl	1798 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    198a:	3501      	adds	r5, #1
    198c:	2d10      	cmp	r5, #16
    198e:	d114      	bne.n	19ba <hexdump_line_print+0xa6>
}
    1990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    1994:	4649      	mov	r1, r9
    1996:	4620      	mov	r0, r4
    1998:	f7ff fefe 	bl	1798 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    199c:	f108 0801 	add.w	r8, r8, #1
    19a0:	e7cb      	b.n	193a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    19a2:	076a      	lsls	r2, r5, #29
    19a4:	d1d2      	bne.n	194c <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    19a6:	4651      	mov	r1, sl
    19a8:	4620      	mov	r0, r4
    19aa:	f7ff fef5 	bl	1798 <print_formatted>
    19ae:	e7cd      	b.n	194c <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    19b0:	4641      	mov	r1, r8
    19b2:	4620      	mov	r0, r4
    19b4:	f7ff fef0 	bl	1798 <print_formatted>
    19b8:	e7cf      	b.n	195a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    19ba:	076b      	lsls	r3, r5, #29
    19bc:	d1d9      	bne.n	1972 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    19be:	4641      	mov	r1, r8
    19c0:	4620      	mov	r0, r4
    19c2:	f7ff fee9 	bl	1798 <print_formatted>
    19c6:	e7d4      	b.n	1972 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    19c8:	4641      	mov	r1, r8
    19ca:	4620      	mov	r0, r4
    19cc:	f7ff fee4 	bl	1798 <print_formatted>
    19d0:	e7db      	b.n	198a <hexdump_line_print+0x76>
    19d2:	bf00      	nop
    19d4:	00010eca 	.word	0x00010eca
    19d8:	00010ec9 	.word	0x00010ec9
    19dc:	00010ed2 	.word	0x00010ed2
    19e0:	00012bb6 	.word	0x00012bb6
    19e4:	00012bb4 	.word	0x00012bb4
    19e8:	00010ecc 	.word	0x00010ecc
    19ec:	00010ed4 	.word	0x00010ed4

000019f0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    19f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    19f4:	7a8b      	ldrb	r3, [r1, #10]
    19f6:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    19f8:	f013 0807 	ands.w	r8, r3, #7
{
    19fc:	4605      	mov	r5, r0
    19fe:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1a00:	7a0a      	ldrb	r2, [r1, #8]
    1a02:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1a04:	d021      	beq.n	1a4a <log_output_msg_process+0x5a>
    1a06:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    1a08:	8949      	ldrh	r1, [r1, #10]
    1a0a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1a0e:	f3c1 1189 	ubfx	r1, r1, #6, #10
    1a12:	e9cd 8300 	strd	r8, r3, [sp]
    1a16:	9102      	str	r1, [sp, #8]
    1a18:	68f3      	ldr	r3, [r6, #12]
    1a1a:	4639      	mov	r1, r7
    1a1c:	f002 0201 	and.w	r2, r2, #1
    1a20:	f7ff fecc 	bl	17bc <prefix_print>
    1a24:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1a26:	7a34      	ldrb	r4, [r6, #8]
    1a28:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    1a2a:	f014 0401 	ands.w	r4, r4, #1
    1a2e:	d00e      	beq.n	1a4e <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    1a30:	4629      	mov	r1, r5
    1a32:	4630      	mov	r0, r6
    1a34:	f00a feb2 	bl	c79c <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    1a38:	f1b8 0f00 	cmp.w	r8, #0
    1a3c:	d02b      	beq.n	1a96 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    1a3e:	4642      	mov	r2, r8
    1a40:	4639      	mov	r1, r7
    1a42:	4628      	mov	r0, r5
    1a44:	f7ff ff48 	bl	18d8 <postfix_print>
    1a48:	e025      	b.n	1a96 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1a4a:	46c1      	mov	r9, r8
    1a4c:	e7eb      	b.n	1a26 <log_output_msg_process+0x36>
	} else if (raw_string) {
    1a4e:	f1b8 0f00 	cmp.w	r8, #0
    1a52:	d126      	bne.n	1aa2 <log_output_msg_process+0xb2>
	size_t offset = 0;
    1a54:	4627      	mov	r7, r4
		length = log_output->size;
    1a56:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1a58:	aa06      	add	r2, sp, #24
		length = log_output->size;
    1a5a:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1a5c:	4630      	mov	r0, r6
    1a5e:	463b      	mov	r3, r7
    1a60:	68a9      	ldr	r1, [r5, #8]
    1a62:	f00a fe87 	bl	c774 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    1a66:	9a06      	ldr	r2, [sp, #24]
    1a68:	686b      	ldr	r3, [r5, #4]
    1a6a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1a6c:	b13a      	cbz	r2, 1a7e <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    1a6e:	68ab      	ldr	r3, [r5, #8]
    1a70:	4413      	add	r3, r2
    1a72:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    1a76:	f1a4 030a 	sub.w	r3, r4, #10
    1a7a:	425c      	negs	r4, r3
    1a7c:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    1a7e:	4628      	mov	r0, r5
    1a80:	f00a ffe9 	bl	ca56 <log_output_flush>
		offset += length;
    1a84:	9b06      	ldr	r3, [sp, #24]
    1a86:	441f      	add	r7, r3
	} while (length > 0);
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d1e4      	bne.n	1a56 <log_output_msg_process+0x66>
	if (eol) {
    1a8c:	b11c      	cbz	r4, 1a96 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    1a8e:	4628      	mov	r0, r5
    1a90:	4913      	ldr	r1, [pc, #76]	; (1ae0 <log_output_msg_process+0xf0>)
    1a92:	f7ff fe81 	bl	1798 <print_formatted>
	}

	log_output_flush(log_output);
    1a96:	4628      	mov	r0, r5
    1a98:	f00a ffdd 	bl	ca56 <log_output_flush>
}
    1a9c:	b00a      	add	sp, #40	; 0x28
    1a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    1aa2:	4630      	mov	r0, r6
    1aa4:	f00a fe10 	bl	c6c8 <log_msg_str_get>
    1aa8:	490e      	ldr	r1, [pc, #56]	; (1ae4 <log_output_msg_process+0xf4>)
    1aaa:	4602      	mov	r2, r0
    1aac:	4628      	mov	r0, r5
    1aae:	f7ff fe73 	bl	1798 <print_formatted>
		length = sizeof(buf);
    1ab2:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1ab6:	aa05      	add	r2, sp, #20
    1ab8:	4623      	mov	r3, r4
    1aba:	4630      	mov	r0, r6
    1abc:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    1abe:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1ac2:	f00a fe57 	bl	c774 <log_msg_hexdump_data_get>
		if (length) {
    1ac6:	9a05      	ldr	r2, [sp, #20]
    1ac8:	2a00      	cmp	r2, #0
    1aca:	d0b8      	beq.n	1a3e <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    1acc:	464b      	mov	r3, r9
    1ace:	4628      	mov	r0, r5
    1ad0:	9700      	str	r7, [sp, #0]
    1ad2:	a906      	add	r1, sp, #24
    1ad4:	f7ff ff1e 	bl	1914 <hexdump_line_print>
			offset += length;
    1ad8:	9b05      	ldr	r3, [sp, #20]
    1ada:	441c      	add	r4, r3
		length = sizeof(buf);
    1adc:	e7eb      	b.n	1ab6 <log_output_msg_process+0xc6>
    1ade:	bf00      	nop
    1ae0:	00010ed7 	.word	0x00010ed7
    1ae4:	00011fa0 	.word	0x00011fa0

00001ae8 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1ae8:	f242 730f 	movw	r3, #9999	; 0x270f
{
    1aec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1aee:	428b      	cmp	r3, r1
    1af0:	bf28      	it	cs
    1af2:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    1af4:	6805      	ldr	r5, [r0, #0]
{
    1af6:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1af8:	2105      	movs	r1, #5
    1afa:	4668      	mov	r0, sp
    1afc:	4a0d      	ldr	r2, [pc, #52]	; (1b34 <log_output_dropped_process+0x4c>)
    1afe:	f00a f8d8 	bl	bcb2 <snprintk>
    1b02:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1b04:	6863      	ldr	r3, [r4, #4]
    1b06:	4628      	mov	r0, r5
    1b08:	220b      	movs	r2, #11
    1b0a:	685b      	ldr	r3, [r3, #4]
    1b0c:	490a      	ldr	r1, [pc, #40]	; (1b38 <log_output_dropped_process+0x50>)
    1b0e:	f00a fe38 	bl	c782 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    1b12:	6863      	ldr	r3, [r4, #4]
    1b14:	4632      	mov	r2, r6
    1b16:	4669      	mov	r1, sp
    1b18:	4628      	mov	r0, r5
    1b1a:	685b      	ldr	r3, [r3, #4]
    1b1c:	f00a fe31 	bl	c782 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1b20:	6863      	ldr	r3, [r4, #4]
    1b22:	221b      	movs	r2, #27
    1b24:	4628      	mov	r0, r5
    1b26:	685b      	ldr	r3, [r3, #4]
    1b28:	4904      	ldr	r1, [pc, #16]	; (1b3c <log_output_dropped_process+0x54>)
    1b2a:	f00a fe2a 	bl	c782 <buffer_write>
		     log_output->control_block->ctx);
}
    1b2e:	b002      	add	sp, #8
    1b30:	bd70      	pop	{r4, r5, r6, pc}
    1b32:	bf00      	nop
    1b34:	000128a4 	.word	0x000128a4
    1b38:	00010f15 	.word	0x00010f15
    1b3c:	00010ef9 	.word	0x00010ef9

00001b40 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1b40:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1b42:	2100      	movs	r1, #0
	timestamp_div = 1U;
    1b44:	4a07      	ldr	r2, [pc, #28]	; (1b64 <log_output_timestamp_freq_set+0x24>)
{
    1b46:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    1b48:	4c07      	ldr	r4, [pc, #28]	; (1b68 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1b4a:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1b4c:	42a0      	cmp	r0, r4
    1b4e:	d804      	bhi.n	1b5a <log_output_timestamp_freq_set+0x1a>
    1b50:	b101      	cbz	r1, 1b54 <log_output_timestamp_freq_set+0x14>
    1b52:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1b54:	4b05      	ldr	r3, [pc, #20]	; (1b6c <log_output_timestamp_freq_set+0x2c>)
    1b56:	6018      	str	r0, [r3, #0]
}
    1b58:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    1b5a:	2101      	movs	r1, #1
		frequency /= 2U;
    1b5c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1b5e:	005b      	lsls	r3, r3, #1
    1b60:	e7f4      	b.n	1b4c <log_output_timestamp_freq_set+0xc>
    1b62:	bf00      	nop
    1b64:	20000f44 	.word	0x20000f44
    1b68:	000f4240 	.word	0x000f4240
    1b6c:	20000f40 	.word	0x20000f40

00001b70 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b72:	460d      	mov	r5, r1
    1b74:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    1b76:	4f06      	ldr	r7, [pc, #24]	; (1b90 <char_out+0x20>)
    1b78:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    1b7a:	42b4      	cmp	r4, r6
    1b7c:	d101      	bne.n	1b82 <char_out+0x12>
	}

	return length;
}
    1b7e:	4628      	mov	r0, r5
    1b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    1b82:	6838      	ldr	r0, [r7, #0]
    1b84:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1b88:	6883      	ldr	r3, [r0, #8]
    1b8a:	685b      	ldr	r3, [r3, #4]
    1b8c:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    1b8e:	e7f4      	b.n	1b7a <char_out+0xa>
    1b90:	20000f5c 	.word	0x20000f5c

00001b94 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1b94:	4801      	ldr	r0, [pc, #4]	; (1b9c <panic+0x8>)
    1b96:	f00a bf5e 	b.w	ca56 <log_output_flush>
    1b9a:	bf00      	nop
    1b9c:	00010510 	.word	0x00010510

00001ba0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    1ba0:	4801      	ldr	r0, [pc, #4]	; (1ba8 <dropped+0x8>)
    1ba2:	f7ff bfa1 	b.w	1ae8 <log_output_dropped_process>
    1ba6:	bf00      	nop
    1ba8:	00010510 	.word	0x00010510

00001bac <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    1bac:	b508      	push	{r3, lr}
    1bae:	4803      	ldr	r0, [pc, #12]	; (1bbc <log_backend_uart_init+0x10>)
    1bb0:	f008 fbea 	bl	a388 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1bb4:	4b02      	ldr	r3, [pc, #8]	; (1bc0 <log_backend_uart_init+0x14>)
    1bb6:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    1bb8:	bd08      	pop	{r3, pc}
    1bba:	bf00      	nop
    1bbc:	00010f21 	.word	0x00010f21
    1bc0:	20000f5c 	.word	0x20000f5c

00001bc4 <put>:
{
    1bc4:	b510      	push	{r4, lr}
    1bc6:	460c      	mov	r4, r1
	log_msg_get(msg);
    1bc8:	4608      	mov	r0, r1
    1bca:	f00a fd43 	bl	c654 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    1bce:	4621      	mov	r1, r4
    1bd0:	4804      	ldr	r0, [pc, #16]	; (1be4 <put+0x20>)
    1bd2:	220f      	movs	r2, #15
    1bd4:	f7ff ff0c 	bl	19f0 <log_output_msg_process>
	log_msg_put(msg);
    1bd8:	4620      	mov	r0, r4
}
    1bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1bde:	f00a bd64 	b.w	c6aa <log_msg_put>
    1be2:	bf00      	nop
    1be4:	00010510 	.word	0x00010510

00001be8 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    1be8:	4b01      	ldr	r3, [pc, #4]	; (1bf0 <virtio_set_status+0x8>)
    1bea:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    1bec:	4770      	bx	lr
    1bee:	bf00      	nop
    1bf0:	20070000 	.word	0x20070000

00001bf4 <init_status_flag>:
    1bf4:	2000      	movs	r0, #0
    1bf6:	4b01      	ldr	r3, [pc, #4]	; (1bfc <init_status_flag+0x8>)
    1bf8:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    1bfa:	4770      	bx	lr
    1bfc:	20070000 	.word	0x20070000

00001c00 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    1c00:	4b01      	ldr	r3, [pc, #4]	; (1c08 <ipm_callback_process+0x8>)
    1c02:	6818      	ldr	r0, [r3, #0]
    1c04:	f00d bb7b 	b.w	f2fe <virtqueue_notification>
    1c08:	20000f70 	.word	0x20000f70

00001c0c <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    1c0c:	4b0d      	ldr	r3, [pc, #52]	; (1c44 <virtio_notify+0x38>)
{
    1c0e:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    1c10:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    1c12:	2300      	movs	r3, #0
    1c14:	6882      	ldr	r2, [r0, #8]
    1c16:	9300      	str	r3, [sp, #0]
    1c18:	4619      	mov	r1, r3
    1c1a:	6814      	ldr	r4, [r2, #0]
    1c1c:	461a      	mov	r2, r3
    1c1e:	47a0      	blx	r4
	if (status != 0) {
    1c20:	4601      	mov	r1, r0
    1c22:	b160      	cbz	r0, 1c3e <virtio_notify+0x32>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    1c24:	4b08      	ldr	r3, [pc, #32]	; (1c48 <virtio_notify+0x3c>)
    1c26:	4a09      	ldr	r2, [pc, #36]	; (1c4c <virtio_notify+0x40>)
		LOG_ERR("ipm_send failed to notify: %d", status);
    1c28:	4809      	ldr	r0, [pc, #36]	; (1c50 <virtio_notify+0x44>)
    1c2a:	1ad2      	subs	r2, r2, r3
    1c2c:	08d2      	lsrs	r2, r2, #3
    1c2e:	0192      	lsls	r2, r2, #6
    1c30:	f042 0201 	orr.w	r2, r2, #1
}
    1c34:	b002      	add	sp, #8
    1c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    1c3a:	f00a bc61 	b.w	c500 <log_1>
}
    1c3e:	b002      	add	sp, #8
    1c40:	bd10      	pop	{r4, pc}
    1c42:	bf00      	nop
    1c44:	20000f60 	.word	0x20000f60
    1c48:	000102f8 	.word	0x000102f8
    1c4c:	000103a8 	.word	0x000103a8
    1c50:	00010f39 	.word	0x00010f39

00001c54 <ipm_callback>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1c54:	4907      	ldr	r1, [pc, #28]	; (1c74 <ipm_callback+0x20>)
    1c56:	e8d1 3fef 	ldaex	r3, [r1]
    1c5a:	f043 0201 	orr.w	r2, r3, #1
    1c5e:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1c62:	2800      	cmp	r0, #0
    1c64:	d1f7      	bne.n	1c56 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    1c66:	07db      	lsls	r3, r3, #31
    1c68:	d403      	bmi.n	1c72 <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    1c6a:	4803      	ldr	r0, [pc, #12]	; (1c78 <ipm_callback+0x24>)
    1c6c:	3908      	subs	r1, #8
    1c6e:	f00d bdcf 	b.w	f810 <k_queue_append>
}
    1c72:	4770      	bx	lr
    1c74:	20000f6c 	.word	0x20000f6c
    1c78:	20000758 	.word	0x20000758

00001c7c <rpmsg_backend_init>:
{
    1c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    1c7e:	4b5f      	ldr	r3, [pc, #380]	; (1dfc <rpmsg_backend_init+0x180>)
{
    1c80:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    1c82:	9302      	str	r3, [sp, #8]
    1c84:	2306      	movs	r3, #6
{
    1c86:	4606      	mov	r6, r0
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    1c88:	f88d 300c 	strb.w	r3, [sp, #12]
{
    1c8c:	460d      	mov	r5, r1
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    1c8e:	f04f 33ff 	mov.w	r3, #4294967295
    1c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1c96:	495a      	ldr	r1, [pc, #360]	; (1e00 <rpmsg_backend_init+0x184>)
    1c98:	485a      	ldr	r0, [pc, #360]	; (1e04 <rpmsg_backend_init+0x188>)
    1c9a:	f009 fb2f 	bl	b2fc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    1c9e:	495a      	ldr	r1, [pc, #360]	; (1e08 <rpmsg_backend_init+0x18c>)
    1ca0:	485a      	ldr	r0, [pc, #360]	; (1e0c <rpmsg_backend_init+0x190>)
    1ca2:	f00d ff1b 	bl	fadc <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    1ca6:	2200      	movs	r2, #0
    1ca8:	4b59      	ldr	r3, [pc, #356]	; (1e10 <rpmsg_backend_init+0x194>)
    1caa:	495a      	ldr	r1, [pc, #360]	; (1e14 <rpmsg_backend_init+0x198>)
	err = metal_init(&metal_params);
    1cac:	a802      	add	r0, sp, #8
    1cae:	e9c3 1201 	strd	r1, r2, [r3, #4]
    1cb2:	601a      	str	r2, [r3, #0]
    1cb4:	f008 f84a 	bl	9d4c <metal_init>
	if (err) {
    1cb8:	4604      	mov	r4, r0
    1cba:	b168      	cbz	r0, 1cd8 <rpmsg_backend_init+0x5c>
    1cbc:	4a56      	ldr	r2, [pc, #344]	; (1e18 <rpmsg_backend_init+0x19c>)
    1cbe:	4b57      	ldr	r3, [pc, #348]	; (1e1c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("metal_init: failed - error code %d", err);
    1cc0:	4601      	mov	r1, r0
    1cc2:	1ad2      	subs	r2, r2, r3
    1cc4:	08d2      	lsrs	r2, r2, #3
    1cc6:	0192      	lsls	r2, r2, #6
    1cc8:	4855      	ldr	r0, [pc, #340]	; (1e20 <rpmsg_backend_init+0x1a4>)
    1cca:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Couldn't register shared memory device: %d", err);
    1cce:	f00a fc17 	bl	c500 <log_1>
}
    1cd2:	4620      	mov	r0, r4
    1cd4:	b005      	add	sp, #20
    1cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    1cd8:	4852      	ldr	r0, [pc, #328]	; (1e24 <rpmsg_backend_init+0x1a8>)
    1cda:	f008 f817 	bl	9d0c <metal_register_generic_device>
	if (err) {
    1cde:	4604      	mov	r4, r0
    1ce0:	b148      	cbz	r0, 1cf6 <rpmsg_backend_init+0x7a>
    1ce2:	4a4d      	ldr	r2, [pc, #308]	; (1e18 <rpmsg_backend_init+0x19c>)
    1ce4:	4b4d      	ldr	r3, [pc, #308]	; (1e1c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    1ce6:	4601      	mov	r1, r0
    1ce8:	1ad2      	subs	r2, r2, r3
    1cea:	08d2      	lsrs	r2, r2, #3
    1cec:	0192      	lsls	r2, r2, #6
    1cee:	484e      	ldr	r0, [pc, #312]	; (1e28 <rpmsg_backend_init+0x1ac>)
    1cf0:	f042 0201 	orr.w	r2, r2, #1
    1cf4:	e7eb      	b.n	1cce <rpmsg_backend_init+0x52>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    1cf6:	494d      	ldr	r1, [pc, #308]	; (1e2c <rpmsg_backend_init+0x1b0>)
    1cf8:	484d      	ldr	r0, [pc, #308]	; (1e30 <rpmsg_backend_init+0x1b4>)
    1cfa:	aa01      	add	r2, sp, #4
    1cfc:	f00d f878 	bl	edf0 <metal_device_open>
	if (err) {
    1d00:	4604      	mov	r4, r0
    1d02:	b148      	cbz	r0, 1d18 <rpmsg_backend_init+0x9c>
    1d04:	4a44      	ldr	r2, [pc, #272]	; (1e18 <rpmsg_backend_init+0x19c>)
    1d06:	4b45      	ldr	r3, [pc, #276]	; (1e1c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("metal_device_open failed: %d", err);
    1d08:	4601      	mov	r1, r0
    1d0a:	1ad2      	subs	r2, r2, r3
    1d0c:	08d2      	lsrs	r2, r2, #3
    1d0e:	0192      	lsls	r2, r2, #6
    1d10:	4848      	ldr	r0, [pc, #288]	; (1e34 <rpmsg_backend_init+0x1b8>)
    1d12:	f042 0201 	orr.w	r2, r2, #1
    1d16:	e7da      	b.n	1cce <rpmsg_backend_init+0x52>
	*io = metal_device_io_region(device, 0);
    1d18:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    1d1a:	689a      	ldr	r2, [r3, #8]
    1d1c:	b95a      	cbnz	r2, 1d36 <rpmsg_backend_init+0xba>
    1d1e:	6030      	str	r0, [r6, #0]
    1d20:	4b3e      	ldr	r3, [pc, #248]	; (1e1c <rpmsg_backend_init+0x1a0>)
    1d22:	493d      	ldr	r1, [pc, #244]	; (1e18 <rpmsg_backend_init+0x19c>)
		LOG_ERR("metal_device_io_region failed to get region");
    1d24:	4844      	ldr	r0, [pc, #272]	; (1e38 <rpmsg_backend_init+0x1bc>)
    1d26:	1ac9      	subs	r1, r1, r3
    1d28:	08c9      	lsrs	r1, r1, #3
    1d2a:	0189      	lsls	r1, r1, #6
    1d2c:	f041 0101 	orr.w	r1, r1, #1
    1d30:	f00a fbd9 	bl	c4e6 <log_0>
		return err;
    1d34:	e7cd      	b.n	1cd2 <rpmsg_backend_init+0x56>
    1d36:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    1d38:	6033      	str	r3, [r6, #0]
	if (!*io) {
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d0f0      	beq.n	1d20 <rpmsg_backend_init+0xa4>
    1d3e:	483f      	ldr	r0, [pc, #252]	; (1e3c <rpmsg_backend_init+0x1c0>)
    1d40:	f008 fb22 	bl	a388 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    1d44:	4f3e      	ldr	r7, [pc, #248]	; (1e40 <rpmsg_backend_init+0x1c4>)
    1d46:	6038      	str	r0, [r7, #0]
    1d48:	483e      	ldr	r0, [pc, #248]	; (1e44 <rpmsg_backend_init+0x1c8>)
    1d4a:	f008 fb1d 	bl	a388 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    1d4e:	683a      	ldr	r2, [r7, #0]
    1d50:	b962      	cbnz	r2, 1d6c <rpmsg_backend_init+0xf0>
    1d52:	4931      	ldr	r1, [pc, #196]	; (1e18 <rpmsg_backend_init+0x19c>)
    1d54:	4b31      	ldr	r3, [pc, #196]	; (1e1c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("Could not get TX IPM device handle");
    1d56:	483c      	ldr	r0, [pc, #240]	; (1e48 <rpmsg_backend_init+0x1cc>)
    1d58:	1ac9      	subs	r1, r1, r3
    1d5a:	08c9      	lsrs	r1, r1, #3
    1d5c:	0189      	lsls	r1, r1, #6
    1d5e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Could not get RX IPM device handle");
    1d62:	f00a fbc0 	bl	c4e6 <log_0>
		return -ENODEV;
    1d66:	f06f 0412 	mvn.w	r4, #18
    1d6a:	e7b2      	b.n	1cd2 <rpmsg_backend_init+0x56>
	if (!ipm_rx_handle) {
    1d6c:	b940      	cbnz	r0, 1d80 <rpmsg_backend_init+0x104>
    1d6e:	492a      	ldr	r1, [pc, #168]	; (1e18 <rpmsg_backend_init+0x19c>)
    1d70:	4b2a      	ldr	r3, [pc, #168]	; (1e1c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("Could not get RX IPM device handle");
    1d72:	4836      	ldr	r0, [pc, #216]	; (1e4c <rpmsg_backend_init+0x1d0>)
    1d74:	1ac9      	subs	r1, r1, r3
    1d76:	08c9      	lsrs	r1, r1, #3
    1d78:	0189      	lsls	r1, r1, #6
    1d7a:	f041 0101 	orr.w	r1, r1, #1
    1d7e:	e7f0      	b.n	1d62 <rpmsg_backend_init+0xe6>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    1d80:	6883      	ldr	r3, [r0, #8]
    1d82:	4622      	mov	r2, r4
    1d84:	685b      	ldr	r3, [r3, #4]
    1d86:	4932      	ldr	r1, [pc, #200]	; (1e50 <rpmsg_backend_init+0x1d4>)
    1d88:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    1d8a:	f00a fe8d 	bl	caa8 <virtqueue_allocate.constprop.0>
    1d8e:	4f31      	ldr	r7, [pc, #196]	; (1e54 <rpmsg_backend_init+0x1d8>)
    1d90:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    1d92:	b960      	cbnz	r0, 1dae <rpmsg_backend_init+0x132>
    1d94:	4920      	ldr	r1, [pc, #128]	; (1e18 <rpmsg_backend_init+0x19c>)
    1d96:	4b21      	ldr	r3, [pc, #132]	; (1e1c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    1d98:	482f      	ldr	r0, [pc, #188]	; (1e58 <rpmsg_backend_init+0x1dc>)
    1d9a:	1ac9      	subs	r1, r1, r3
    1d9c:	08c9      	lsrs	r1, r1, #3
    1d9e:	0189      	lsls	r1, r1, #6
    1da0:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    1da4:	f00a fb9f 	bl	c4e6 <log_0>
		return -ENOMEM;
    1da8:	f06f 040b 	mvn.w	r4, #11
    1dac:	e791      	b.n	1cd2 <rpmsg_backend_init+0x56>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    1dae:	f00a fe7b 	bl	caa8 <virtqueue_allocate.constprop.0>
    1db2:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    1db4:	b940      	cbnz	r0, 1dc8 <rpmsg_backend_init+0x14c>
    1db6:	4918      	ldr	r1, [pc, #96]	; (1e18 <rpmsg_backend_init+0x19c>)
    1db8:	4b18      	ldr	r3, [pc, #96]	; (1e1c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    1dba:	4828      	ldr	r0, [pc, #160]	; (1e5c <rpmsg_backend_init+0x1e0>)
    1dbc:	1ac9      	subs	r1, r1, r3
    1dbe:	08c9      	lsrs	r1, r1, #3
    1dc0:	0189      	lsls	r1, r1, #6
    1dc2:	f041 0101 	orr.w	r1, r1, #1
    1dc6:	e7ed      	b.n	1da4 <rpmsg_backend_init+0x128>
	rvrings[0].io = *io;
    1dc8:	6832      	ldr	r2, [r6, #0]
    1dca:	4b25      	ldr	r3, [pc, #148]	; (1e60 <rpmsg_backend_init+0x1e4>)
	rvrings[0].info.num_descs = VRING_SIZE;
    1dcc:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    1dce:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    1dd0:	4a24      	ldr	r2, [pc, #144]	; (1e64 <rpmsg_backend_init+0x1e8>)
	rvrings[0].vq = vq[0];
    1dd2:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    1dd4:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    1dd6:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    1dd8:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    1dda:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    1ddc:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    1dde:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    1de0:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    1de2:	4e21      	ldr	r6, [pc, #132]	; (1e68 <rpmsg_backend_init+0x1ec>)
	vdev->vrings_num = VRING_COUNT;
    1de4:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    1de6:	4a21      	ldr	r2, [pc, #132]	; (1e6c <rpmsg_backend_init+0x1f0>)
	rvrings[1].info.num_descs = VRING_SIZE;
    1de8:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    1dea:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    1dec:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    1dee:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    1df0:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    1df2:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    1df4:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    1df6:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    1df8:	e76b      	b.n	1cd2 <rpmsg_backend_init+0x56>
    1dfa:	bf00      	nop
    1dfc:	00009d9d 	.word	0x00009d9d
    1e00:	20002d18 	.word	0x20002d18
    1e04:	20000758 	.word	0x20000758
    1e08:	00010f57 	.word	0x00010f57
    1e0c:	20000770 	.word	0x20000770
    1e10:	20000f64 	.word	0x20000f64
    1e14:	00001c01 	.word	0x00001c01
    1e18:	000103a8 	.word	0x000103a8
    1e1c:	000102f8 	.word	0x000102f8
    1e20:	00010f62 	.word	0x00010f62
    1e24:	2000019c 	.word	0x2000019c
    1e28:	00010f85 	.word	0x00010f85
    1e2c:	00010fb0 	.word	0x00010fb0
    1e30:	00010fba 	.word	0x00010fba
    1e34:	00010fc2 	.word	0x00010fc2
    1e38:	00010fdf 	.word	0x00010fdf
    1e3c:	00012a31 	.word	0x00012a31
    1e40:	20000f60 	.word	0x20000f60
    1e44:	0001100b 	.word	0x0001100b
    1e48:	00011011 	.word	0x00011011
    1e4c:	00011034 	.word	0x00011034
    1e50:	00001c55 	.word	0x00001c55
    1e54:	20000f70 	.word	0x20000f70
    1e58:	00011057 	.word	0x00011057
    1e5c:	00011080 	.word	0x00011080
    1e60:	2000016c 	.word	0x2000016c
    1e64:	2007fc00 	.word	0x2007fc00
    1e68:	2007f800 	.word	0x2007f800
    1e6c:	00010520 	.word	0x00010520

00001e70 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    1e70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    1e74:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    1e76:	4c22      	ldr	r4, [pc, #136]	; (1f00 <ns_bind_cb+0x90>)
{
    1e78:	4606      	mov	r6, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    1e7a:	6821      	ldr	r1, [r4, #0]
    1e7c:	4628      	mov	r0, r5
{
    1e7e:	4617      	mov	r7, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    1e80:	f00b fb30 	bl	d4e4 <strcmp>
    1e84:	46a0      	mov	r8, r4
    1e86:	b198      	cbz	r0, 1eb0 <ns_bind_cb+0x40>
    1e88:	4628      	mov	r0, r5
    1e8a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    1e8c:	f00b fb2a 	bl	d4e4 <strcmp>
    1e90:	b168      	cbz	r0, 1eae <ns_bind_cb+0x3e>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    1e92:	4629      	mov	r1, r5
    1e94:	4b1b      	ldr	r3, [pc, #108]	; (1f04 <ns_bind_cb+0x94>)
    1e96:	4a1c      	ldr	r2, [pc, #112]	; (1f08 <ns_bind_cb+0x98>)
    1e98:	481c      	ldr	r0, [pc, #112]	; (1f0c <ns_bind_cb+0x9c>)
    1e9a:	1ad2      	subs	r2, r2, r3
    1e9c:	08d2      	lsrs	r2, r2, #3
    1e9e:	0192      	lsls	r2, r2, #6
    1ea0:	f042 0201 	orr.w	r2, r2, #1
}
    1ea4:	b004      	add	sp, #16
    1ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    1eaa:	f00a bb29 	b.w	c500 <log_1>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    1eae:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    1eb0:	244c      	movs	r4, #76	; 0x4c
    1eb2:	4344      	muls	r4, r0
    1eb4:	4b16      	ldr	r3, [pc, #88]	; (1f10 <ns_bind_cb+0xa0>)
    1eb6:	f104 0008 	add.w	r0, r4, #8
    1eba:	9302      	str	r3, [sp, #8]
    1ebc:	4444      	add	r4, r8
    1ebe:	6863      	ldr	r3, [r4, #4]
    1ec0:	462a      	mov	r2, r5
    1ec2:	e9cd 7300 	strd	r7, r3, [sp]
    1ec6:	4631      	mov	r1, r6
    1ec8:	f04f 33ff 	mov.w	r3, #4294967295
    1ecc:	4440      	add	r0, r8
    1ece:	f008 f801 	bl	9ed4 <rpmsg_create_ept>
			if (err != 0) {
    1ed2:	4602      	mov	r2, r0
    1ed4:	b168      	cbz	r0, 1ef2 <ns_bind_cb+0x82>
    1ed6:	490b      	ldr	r1, [pc, #44]	; (1f04 <ns_bind_cb+0x94>)
    1ed8:	4b0b      	ldr	r3, [pc, #44]	; (1f08 <ns_bind_cb+0x98>)
				LOG_ERR("Creating remote endpoint %s"
    1eda:	480e      	ldr	r0, [pc, #56]	; (1f14 <ns_bind_cb+0xa4>)
    1edc:	1a5b      	subs	r3, r3, r1
    1ede:	4629      	mov	r1, r5
    1ee0:	08db      	lsrs	r3, r3, #3
    1ee2:	019b      	lsls	r3, r3, #6
    1ee4:	f043 0301 	orr.w	r3, r3, #1
}
    1ee8:	b004      	add	sp, #16
    1eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    1eee:	f00a bb1b 	b.w	c528 <log_2>
				endpoints[i].bound = true;
    1ef2:	2301      	movs	r3, #1
    1ef4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    1ef8:	b004      	add	sp, #16
    1efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1efe:	bf00      	nop
    1f00:	20000f78 	.word	0x20000f78
    1f04:	000102f8 	.word	0x000102f8
    1f08:	000103b0 	.word	0x000103b0
    1f0c:	000110b7 	.word	0x000110b7
    1f10:	0000cac3 	.word	0x0000cac3
    1f14:	000110e1 	.word	0x000110e1

00001f18 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    1f18:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    1f1a:	4d19      	ldr	r5, [pc, #100]	; (1f80 <rpmsg_service_init+0x68>)
    1f1c:	4919      	ldr	r1, [pc, #100]	; (1f84 <rpmsg_service_init+0x6c>)
    1f1e:	4628      	mov	r0, r5
    1f20:	f7ff feac 	bl	1c7c <rpmsg_backend_init>
	if (err) {
    1f24:	4604      	mov	r4, r0
    1f26:	b168      	cbz	r0, 1f44 <rpmsg_service_init+0x2c>
    1f28:	4a17      	ldr	r2, [pc, #92]	; (1f88 <rpmsg_service_init+0x70>)
    1f2a:	4b18      	ldr	r3, [pc, #96]	; (1f8c <rpmsg_service_init+0x74>)
		LOG_ERR("RPMsg backend init failed with error %d", err);
    1f2c:	4601      	mov	r1, r0
    1f2e:	1ad2      	subs	r2, r2, r3
    1f30:	08d2      	lsrs	r2, r2, #3
    1f32:	0192      	lsls	r2, r2, #6
    1f34:	4816      	ldr	r0, [pc, #88]	; (1f90 <rpmsg_service_init+0x78>)
    1f36:	f042 0201 	orr.w	r2, r2, #1
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    1f3a:	f00a fae1 	bl	c500 <log_1>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    1f3e:	4620      	mov	r0, r4
    1f40:	b003      	add	sp, #12
    1f42:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    1f44:	4c13      	ldr	r4, [pc, #76]	; (1f94 <rpmsg_service_init+0x7c>)
    1f46:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    1f4a:	4620      	mov	r0, r4
    1f4c:	4912      	ldr	r1, [pc, #72]	; (1f98 <rpmsg_service_init+0x80>)
    1f4e:	f00d fb4d 	bl	f5ec <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    1f52:	9400      	str	r4, [sp, #0]
    1f54:	682b      	ldr	r3, [r5, #0]
    1f56:	4a11      	ldr	r2, [pc, #68]	; (1f9c <rpmsg_service_init+0x84>)
    1f58:	490a      	ldr	r1, [pc, #40]	; (1f84 <rpmsg_service_init+0x6c>)
    1f5a:	4811      	ldr	r0, [pc, #68]	; (1fa0 <rpmsg_service_init+0x88>)
    1f5c:	f008 f8f4 	bl	a148 <rpmsg_init_vdev>
	if (err) {
    1f60:	4604      	mov	r4, r0
    1f62:	b148      	cbz	r0, 1f78 <rpmsg_service_init+0x60>
    1f64:	4a08      	ldr	r2, [pc, #32]	; (1f88 <rpmsg_service_init+0x70>)
    1f66:	4b09      	ldr	r3, [pc, #36]	; (1f8c <rpmsg_service_init+0x74>)
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    1f68:	4601      	mov	r1, r0
    1f6a:	1ad2      	subs	r2, r2, r3
    1f6c:	08d2      	lsrs	r2, r2, #3
    1f6e:	0192      	lsls	r2, r2, #6
    1f70:	480c      	ldr	r0, [pc, #48]	; (1fa4 <rpmsg_service_init+0x8c>)
    1f72:	f042 0201 	orr.w	r2, r2, #1
    1f76:	e7e0      	b.n	1f3a <rpmsg_service_init+0x22>
	ep_crt_started = true;
    1f78:	2201      	movs	r2, #1
    1f7a:	4b0b      	ldr	r3, [pc, #44]	; (1fa8 <rpmsg_service_init+0x90>)
    1f7c:	701a      	strb	r2, [r3, #0]
	return 0;
    1f7e:	e7de      	b.n	1f3e <rpmsg_service_init+0x26>
    1f80:	20001010 	.word	0x20001010
    1f84:	200007f8 	.word	0x200007f8
    1f88:	000103b0 	.word	0x000103b0
    1f8c:	000102f8 	.word	0x000102f8
    1f90:	00011112 	.word	0x00011112
    1f94:	200010a4 	.word	0x200010a4
    1f98:	20070400 	.word	0x20070400
    1f9c:	00001e71 	.word	0x00001e71
    1fa0:	20001014 	.word	0x20001014
    1fa4:	0001113a 	.word	0x0001113a
    1fa8:	20002962 	.word	0x20002962

00001fac <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    1fac:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    1fae:	4b11      	ldr	r3, [pc, #68]	; (1ff4 <rpmsg_service_register_endpoint+0x48>)
{
    1fb0:	4604      	mov	r4, r0
	if (ep_crt_started) {
    1fb2:	781b      	ldrb	r3, [r3, #0]
    1fb4:	b9d3      	cbnz	r3, 1fec <rpmsg_service_register_endpoint+0x40>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    1fb6:	4b10      	ldr	r3, [pc, #64]	; (1ff8 <rpmsg_service_register_endpoint+0x4c>)
    1fb8:	6818      	ldr	r0, [r3, #0]
    1fba:	461a      	mov	r2, r3
    1fbc:	b180      	cbz	r0, 1fe0 <rpmsg_service_register_endpoint+0x34>
    1fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1fc0:	b16b      	cbz	r3, 1fde <rpmsg_service_register_endpoint+0x32>
    1fc2:	4b0e      	ldr	r3, [pc, #56]	; (1ffc <rpmsg_service_register_endpoint+0x50>)
    1fc4:	4a0e      	ldr	r2, [pc, #56]	; (2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>)

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    1fc6:	480f      	ldr	r0, [pc, #60]	; (2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>)
    1fc8:	1ad2      	subs	r2, r2, r3
    1fca:	08d2      	lsrs	r2, r2, #3
    1fcc:	0192      	lsls	r2, r2, #6
    1fce:	4621      	mov	r1, r4
    1fd0:	f042 0201 	orr.w	r2, r2, #1
    1fd4:	f00a fa94 	bl	c500 <log_1>

	return -ENOMEM;
    1fd8:	f06f 000b 	mvn.w	r0, #11
}
    1fdc:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    1fde:	2001      	movs	r0, #1
			endpoints[i].name = name;
    1fe0:	234c      	movs	r3, #76	; 0x4c
    1fe2:	4343      	muls	r3, r0
    1fe4:	18d5      	adds	r5, r2, r3
    1fe6:	50d4      	str	r4, [r2, r3]
			endpoints[i].cb = cb;
    1fe8:	6069      	str	r1, [r5, #4]
			return i;
    1fea:	e7f7      	b.n	1fdc <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
    1fec:	f06f 0043 	mvn.w	r0, #67	; 0x43
    1ff0:	e7f4      	b.n	1fdc <rpmsg_service_register_endpoint+0x30>
    1ff2:	bf00      	nop
    1ff4:	20002962 	.word	0x20002962
    1ff8:	20000f78 	.word	0x20000f78
    1ffc:	000102f8 	.word	0x000102f8
    2000:	000103b0 	.word	0x000103b0
    2004:	00011154 	.word	0x00011154

00002008 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    2008:	224c      	movs	r2, #76	; 0x4c
    200a:	4b03      	ldr	r3, [pc, #12]	; (2018 <rpmsg_service_endpoint_is_bound+0x10>)
    200c:	fb02 3000 	mla	r0, r2, r0, r3
    2010:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
}
    2014:	4770      	bx	lr
    2016:	bf00      	nop
    2018:	20000f78 	.word	0x20000f78

0000201c <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    201c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    201e:	244c      	movs	r4, #76	; 0x4c
    2020:	460b      	mov	r3, r1
    2022:	2101      	movs	r1, #1
    2024:	4344      	muls	r4, r0
    2026:	e9cd 2100 	strd	r2, r1, [sp]
    202a:	4d05      	ldr	r5, [pc, #20]	; (2040 <rpmsg_service_send+0x24>)
    202c:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    202e:	3408      	adds	r4, #8
    2030:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    2034:	1928      	adds	r0, r5, r4
    2036:	f007 ff3b 	bl	9eb0 <rpmsg_send_offchannel_raw>
}
    203a:	b003      	add	sp, #12
    203c:	bd30      	pop	{r4, r5, pc}
    203e:	bf00      	nop
    2040:	20000f78 	.word	0x20000f78

00002044 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    2044:	4604      	mov	r4, r0
    2046:	b508      	push	{r3, lr}
	__asm__ volatile(
    2048:	f04f 0220 	mov.w	r2, #32
    204c:	f3ef 8311 	mrs	r3, BASEPRI
    2050:	f382 8811 	msr	BASEPRI, r2
    2054:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    2058:	f00a fde8 	bl	cc2c <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    205c:	4620      	mov	r0, r4
    205e:	f001 fac3 	bl	35e8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2062:	4803      	ldr	r0, [pc, #12]	; (2070 <sys_reboot+0x2c>)
    2064:	f009 fe18 	bl	bc98 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2068:	f001 f83c 	bl	30e4 <arch_cpu_idle>
    206c:	e7fc      	b.n	2068 <sys_reboot+0x24>
    206e:	bf00      	nop
    2070:	0001118e 	.word	0x0001118e

00002074 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2074:	b510      	push	{r4, lr}
    2076:	4807      	ldr	r0, [pc, #28]	; (2094 <uart_console_init+0x20>)
    2078:	f008 f986 	bl	a388 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    207c:	4c06      	ldr	r4, [pc, #24]	; (2098 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    207e:	4b07      	ldr	r3, [pc, #28]	; (209c <uart_console_init+0x28>)
    2080:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    2082:	4620      	mov	r0, r4
    2084:	f001 fc90 	bl	39a8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2088:	4620      	mov	r0, r4
    208a:	f7fe fb3b 	bl	704 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    208e:	2000      	movs	r0, #0
    2090:	bd10      	pop	{r4, pc}
    2092:	bf00      	nop
    2094:	00010f21 	.word	0x00010f21
    2098:	000020a1 	.word	0x000020a1
    209c:	200010b0 	.word	0x200010b0

000020a0 <console_out>:
	if ('\n' == c) {
    20a0:	280a      	cmp	r0, #10
{
    20a2:	b538      	push	{r3, r4, r5, lr}
    20a4:	4604      	mov	r4, r0
    20a6:	4d07      	ldr	r5, [pc, #28]	; (20c4 <console_out+0x24>)
	if ('\n' == c) {
    20a8:	d104      	bne.n	20b4 <console_out+0x14>
    20aa:	6828      	ldr	r0, [r5, #0]
    20ac:	6883      	ldr	r3, [r0, #8]
    20ae:	210d      	movs	r1, #13
    20b0:	685b      	ldr	r3, [r3, #4]
    20b2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    20b4:	6828      	ldr	r0, [r5, #0]
    20b6:	6883      	ldr	r3, [r0, #8]
    20b8:	b2e1      	uxtb	r1, r4
    20ba:	685b      	ldr	r3, [r3, #4]
    20bc:	4798      	blx	r3
}
    20be:	4620      	mov	r0, r4
    20c0:	bd38      	pop	{r3, r4, r5, pc}
    20c2:	bf00      	nop
    20c4:	200010b0 	.word	0x200010b0

000020c8 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    20c8:	b570      	push	{r4, r5, r6, lr}
    20ca:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    20cc:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    20ce:	480d      	ldr	r0, [pc, #52]	; (2104 <onoff_stop+0x3c>)
{
    20d0:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    20d2:	1a23      	subs	r3, r4, r0
    20d4:	109a      	asrs	r2, r3, #2
    20d6:	4b0c      	ldr	r3, [pc, #48]	; (2108 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    20d8:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    20da:	4353      	muls	r3, r2
    20dc:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    20de:	435d      	muls	r5, r3
    20e0:	f105 0378 	add.w	r3, r5, #120	; 0x78
    20e4:	4418      	add	r0, r3
    20e6:	f00a fcf7 	bl	cad8 <set_off_state>
	if (err < 0) {
    20ea:	1e01      	subs	r1, r0, #0
    20ec:	db04      	blt.n	20f8 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    20ee:	4b07      	ldr	r3, [pc, #28]	; (210c <onoff_stop+0x44>)
    20f0:	442b      	add	r3, r5
    20f2:	685b      	ldr	r3, [r3, #4]
    20f4:	4798      	blx	r3
	return 0;
    20f6:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    20f8:	4620      	mov	r0, r4
    20fa:	4633      	mov	r3, r6
}
    20fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2100:	4718      	bx	r3
    2102:	bf00      	nop
    2104:	200010c4 	.word	0x200010c4
    2108:	b6db6db7 	.word	0xb6db6db7
    210c:	00010558 	.word	0x00010558

00002110 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2114:	4c0f      	ldr	r4, [pc, #60]	; (2154 <onoff_start+0x44>)
    2116:	4d10      	ldr	r5, [pc, #64]	; (2158 <onoff_start+0x48>)
    2118:	1b03      	subs	r3, r0, r4
    211a:	109b      	asrs	r3, r3, #2
    211c:	435d      	muls	r5, r3
    211e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    2120:	250c      	movs	r5, #12
    2122:	435d      	muls	r5, r3
{
    2124:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    2126:	f105 0078 	add.w	r0, r5, #120	; 0x78
{
    212a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    212c:	4420      	add	r0, r4
    212e:	2140      	movs	r1, #64	; 0x40
    2130:	f00a fceb 	bl	cb0a <set_starting_state>
	if (err < 0) {
    2134:	1e01      	subs	r1, r0, #0
    2136:	db08      	blt.n	214a <onoff_start+0x3a>
	subdata->cb = cb;
    2138:	4b08      	ldr	r3, [pc, #32]	; (215c <onoff_start+0x4c>)
    213a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    213c:	e9c4 361c 	strd	r3, r6, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    2140:	4b07      	ldr	r3, [pc, #28]	; (2160 <onoff_start+0x50>)
    2142:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2148:	4718      	bx	r3
		notify(mgr, err);
    214a:	4638      	mov	r0, r7
    214c:	4633      	mov	r3, r6
}
    214e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2152:	4718      	bx	r3
    2154:	200010c4 	.word	0x200010c4
    2158:	b6db6db7 	.word	0xb6db6db7
    215c:	0000cb6d 	.word	0x0000cb6d
    2160:	00010558 	.word	0x00010558

00002164 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    2164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2168:	2200      	movs	r2, #0
    216a:	2101      	movs	r1, #1
{
    216c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    216e:	2005      	movs	r0, #5
    2170:	f000 fed0 	bl	2f14 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2174:	2005      	movs	r0, #5
    2176:	f000 feaf 	bl	2ed8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    217a:	4811      	ldr	r0, [pc, #68]	; (21c0 <clk_init+0x5c>)
    217c:	f007 fb4c 	bl	9818 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2180:	4b10      	ldr	r3, [pc, #64]	; (21c4 <clk_init+0x60>)
    2182:	4298      	cmp	r0, r3
    2184:	d119      	bne.n	21ba <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2186:	f00c fe23 	bl	edd0 <nrfx_clock_enable>
    218a:	2400      	movs	r4, #0
	return &data->mgr[type];
    218c:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2190:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2192:	f8df 9034 	ldr.w	r9, [pc, #52]	; 21c8 <clk_init+0x64>
						get_sub_data(dev, i);
    2196:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2198:	4649      	mov	r1, r9
    219a:	fb08 5004 	mla	r0, r8, r4, r5
    219e:	f009 fde4 	bl	bd6a <onoff_manager_init>
		if (err < 0) {
    21a2:	2800      	cmp	r0, #0
    21a4:	db07      	blt.n	21b6 <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    21a6:	2301      	movs	r3, #1
    21a8:	fb07 5504 	mla	r5, r7, r4, r5
    21ac:	441c      	add	r4, r3
	for (enum clock_control_nrf_type i = 0;
    21ae:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    21b0:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
    21b2:	d1f0      	bne.n	2196 <clk_init+0x32>
	}

	return 0;
    21b4:	2000      	movs	r0, #0
}
    21b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    21ba:	f06f 0004 	mvn.w	r0, #4
    21be:	e7fa      	b.n	21b6 <clk_init+0x52>
    21c0:	00002201 	.word	0x00002201
    21c4:	0bad0000 	.word	0x0bad0000
    21c8:	00010588 	.word	0x00010588

000021cc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    21cc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    21ce:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    21d0:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    21d2:	434b      	muls	r3, r1
    21d4:	4808      	ldr	r0, [pc, #32]	; (21f8 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    21d6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    21d8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    21da:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    21dc:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    21e0:	4418      	add	r0, r3
	sub_data->cb = NULL;
    21e2:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    21e4:	f00a fcaf 	bl	cb46 <set_on_state>
	if (callback) {
    21e8:	b12d      	cbz	r5, 21f6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    21ea:	4632      	mov	r2, r6
    21ec:	462b      	mov	r3, r5
}
    21ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    21f2:	4802      	ldr	r0, [pc, #8]	; (21fc <clkstarted_handle.constprop.0+0x30>)
    21f4:	4718      	bx	r3
}
    21f6:	bd70      	pop	{r4, r5, r6, pc}
    21f8:	200010c4 	.word	0x200010c4
    21fc:	20000410 	.word	0x20000410

00002200 <clock_event_handler>:
	switch (event) {
    2200:	2805      	cmp	r0, #5
    2202:	d811      	bhi.n	2228 <clock_event_handler+0x28>
    2204:	e8df f000 	tbb	[pc, r0]
    2208:	10100e03 	.word	0x10100e03
    220c:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    220e:	4b07      	ldr	r3, [pc, #28]	; (222c <clock_event_handler+0x2c>)
    2210:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2212:	f010 0007 	ands.w	r0, r0, #7
    2216:	d107      	bne.n	2228 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2218:	f7ff bfd8 	b.w	21cc <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    221c:	2002      	movs	r0, #2
    221e:	e7fb      	b.n	2218 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    2220:	2003      	movs	r0, #3
    2222:	e7f9      	b.n	2218 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2224:	2001      	movs	r0, #1
    2226:	e7f7      	b.n	2218 <clock_event_handler+0x18>
}
    2228:	4770      	bx	lr
    222a:	bf00      	nop
    222c:	200010c4 	.word	0x200010c4

00002230 <generic_hfclk_start>:
{
    2230:	b508      	push	{r3, lr}
    2232:	f04f 0320 	mov.w	r3, #32
    2236:	f3ef 8111 	mrs	r1, BASEPRI
    223a:	f383 8811 	msr	BASEPRI, r3
    223e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2242:	4a12      	ldr	r2, [pc, #72]	; (228c <generic_hfclk_start+0x5c>)
    2244:	6813      	ldr	r3, [r2, #0]
    2246:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    224a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    224e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2250:	d00c      	beq.n	226c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2252:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2256:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    225a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    225e:	f013 0301 	ands.w	r3, r3, #1
    2262:	d003      	beq.n	226c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2264:	480a      	ldr	r0, [pc, #40]	; (2290 <generic_hfclk_start+0x60>)
    2266:	f00a fc6e 	bl	cb46 <set_on_state>
			already_started = true;
    226a:	2301      	movs	r3, #1
	__asm__ volatile(
    226c:	f381 8811 	msr	BASEPRI, r1
    2270:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2274:	b123      	cbz	r3, 2280 <generic_hfclk_start+0x50>
}
    2276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    227a:	2000      	movs	r0, #0
    227c:	f7ff bfa6 	b.w	21cc <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2280:	2001      	movs	r0, #1
}
    2282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2286:	f007 bad7 	b.w	9838 <nrfx_clock_start>
    228a:	bf00      	nop
    228c:	20001164 	.word	0x20001164
    2290:	2000113c 	.word	0x2000113c

00002294 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2294:	4b07      	ldr	r3, [pc, #28]	; (22b4 <generic_hfclk_stop+0x20>)
    2296:	e8d3 2fef 	ldaex	r2, [r3]
    229a:	f022 0102 	bic.w	r1, r2, #2
    229e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    22a2:	2800      	cmp	r0, #0
    22a4:	d1f7      	bne.n	2296 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    22a6:	07d3      	lsls	r3, r2, #31
    22a8:	d402      	bmi.n	22b0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    22aa:	2001      	movs	r0, #1
    22ac:	f007 bb18 	b.w	98e0 <nrfx_clock_stop>
}
    22b0:	4770      	bx	lr
    22b2:	bf00      	nop
    22b4:	20001164 	.word	0x20001164

000022b8 <api_blocking_start>:
{
    22b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    22ba:	2200      	movs	r2, #0
    22bc:	2301      	movs	r3, #1
    22be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    22c2:	ab04      	add	r3, sp, #16
    22c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    22c8:	4a09      	ldr	r2, [pc, #36]	; (22f0 <api_blocking_start+0x38>)
    22ca:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    22cc:	f8cd d000 	str.w	sp, [sp]
    22d0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    22d4:	f00a fc7c 	bl	cbd0 <api_start>
	if (err < 0) {
    22d8:	2800      	cmp	r0, #0
    22da:	db05      	blt.n	22e8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    22dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    22e0:	2300      	movs	r3, #0
    22e2:	4668      	mov	r0, sp
    22e4:	f008 fefa 	bl	b0dc <z_impl_k_sem_take>
}
    22e8:	b007      	add	sp, #28
    22ea:	f85d fb04 	ldr.w	pc, [sp], #4
    22ee:	bf00      	nop
    22f0:	0000cba3 	.word	0x0000cba3

000022f4 <z_nrf_clock_control_lf_on>:
{
    22f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    22f8:	2201      	movs	r2, #1
    22fa:	4606      	mov	r6, r0
    22fc:	4939      	ldr	r1, [pc, #228]	; (23e4 <z_nrf_clock_control_lf_on+0xf0>)
    22fe:	e8d1 3fef 	ldaex	r3, [r1]
    2302:	e8c1 2fe0 	stlex	r0, r2, [r1]
    2306:	2800      	cmp	r0, #0
    2308:	d1f9      	bne.n	22fe <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    230a:	b933      	cbnz	r3, 231a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    230c:	4936      	ldr	r1, [pc, #216]	; (23e8 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    230e:	4837      	ldr	r0, [pc, #220]	; (23ec <z_nrf_clock_control_lf_on+0xf8>)
    2310:	604b      	str	r3, [r1, #4]
    2312:	60cb      	str	r3, [r1, #12]
    2314:	608a      	str	r2, [r1, #8]
    2316:	f009 fd3b 	bl	bd90 <onoff_request>
	switch (start_mode) {
    231a:	1e73      	subs	r3, r6, #1
    231c:	2b01      	cmp	r3, #1
    231e:	d832      	bhi.n	2386 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2320:	2e01      	cmp	r6, #1
    2322:	d107      	bne.n	2334 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2324:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2328:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    232c:	f003 0303 	and.w	r3, r3, #3
    2330:	2b02      	cmp	r3, #2
    2332:	d028      	beq.n	2386 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2334:	f00d fbc8 	bl	fac8 <k_is_in_isr>
    2338:	4604      	mov	r4, r0
    233a:	b918      	cbnz	r0, 2344 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    233c:	4b2c      	ldr	r3, [pc, #176]	; (23f0 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	2b00      	cmp	r3, #0
    2342:	d147      	bne.n	23d4 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
    2344:	f04f 0320 	mov.w	r3, #32
    2348:	f3ef 8511 	mrs	r5, BASEPRI
    234c:	f383 8811 	msr	BASEPRI, r3
    2350:	f3bf 8f6f 	isb	sy
    2354:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2356:	4f27      	ldr	r7, [pc, #156]	; (23f4 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2358:	f8df 809c 	ldr.w	r8, [pc, #156]	; 23f8 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    235c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 23fc <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2360:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2364:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2368:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    236c:	03d2      	lsls	r2, r2, #15
    236e:	d50c      	bpl.n	238a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2370:	f003 0303 	and.w	r3, r3, #3
    2374:	2b02      	cmp	r3, #2
    2376:	d001      	beq.n	237c <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2378:	2e01      	cmp	r6, #1
    237a:	d106      	bne.n	238a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    237c:	b324      	cbz	r4, 23c8 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    237e:	f385 8811 	msr	BASEPRI, r5
    2382:	f3bf 8f6f 	isb	sy
}
    2386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    238a:	b1c4      	cbz	r4, 23be <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    238c:	4628      	mov	r0, r5
    238e:	f000 feb7 	bl	3100 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2392:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2396:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    239a:	b2db      	uxtb	r3, r3
    239c:	2b01      	cmp	r3, #1
    239e:	d1df      	bne.n	2360 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    23a0:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    23a2:	2900      	cmp	r1, #0
    23a4:	d0dc      	beq.n	2360 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23a6:	2100      	movs	r1, #0
    23a8:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    23aa:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    23ac:	2102      	movs	r1, #2
    23ae:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    23b2:	2220      	movs	r2, #32
    23b4:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23b8:	f8c9 3000 	str.w	r3, [r9]
}
    23bc:	e7d0      	b.n	2360 <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
    23be:	2100      	movs	r1, #0
    23c0:	2021      	movs	r0, #33	; 0x21
    23c2:	f008 fe3d 	bl	b040 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    23c6:	e7e4      	b.n	2392 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    23c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    23cc:	2202      	movs	r2, #2
    23ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    23d2:	e7d8      	b.n	2386 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    23d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    23d8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    23da:	4605      	mov	r5, r0
    23dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    23e0:	e7b9      	b.n	2356 <z_nrf_clock_control_lf_on+0x62>
    23e2:	bf00      	nop
    23e4:	20001168 	.word	0x20001168
    23e8:	200010b4 	.word	0x200010b4
    23ec:	200010e0 	.word	0x200010e0
    23f0:	20002a15 	.word	0x20002a15
    23f4:	50005104 	.word	0x50005104
    23f8:	e000e100 	.word	0xe000e100
    23fc:	50005008 	.word	0x50005008

00002400 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    2400:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    2402:	f000 f95b 	bl	26bc <bt_rpmsg_platform_init>
	if (err < 0) {
    2406:	1e04      	subs	r4, r0, #0
    2408:	da0c      	bge.n	2424 <bt_rpmsg_init+0x24>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    240a:	4621      	mov	r1, r4
    240c:	4a0d      	ldr	r2, [pc, #52]	; (2444 <bt_rpmsg_init+0x44>)
    240e:	4b0e      	ldr	r3, [pc, #56]	; (2448 <bt_rpmsg_init+0x48>)
    2410:	480e      	ldr	r0, [pc, #56]	; (244c <bt_rpmsg_init+0x4c>)
    2412:	1ad2      	subs	r2, r2, r3
    2414:	08d2      	lsrs	r2, r2, #3
    2416:	0192      	lsls	r2, r2, #6
    2418:	f042 0201 	orr.w	r2, r2, #1
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    241c:	f00a f870 	bl	c500 <log_1>
	}

	return err;
}
    2420:	4620      	mov	r0, r4
    2422:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    2424:	480a      	ldr	r0, [pc, #40]	; (2450 <bt_rpmsg_init+0x50>)
    2426:	f002 fdfd 	bl	5024 <bt_hci_driver_register>
	if (err < 0) {
    242a:	1e04      	subs	r4, r0, #0
    242c:	daf8      	bge.n	2420 <bt_rpmsg_init+0x20>
    242e:	4a05      	ldr	r2, [pc, #20]	; (2444 <bt_rpmsg_init+0x44>)
    2430:	4b05      	ldr	r3, [pc, #20]	; (2448 <bt_rpmsg_init+0x48>)
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    2432:	4621      	mov	r1, r4
    2434:	1ad2      	subs	r2, r2, r3
    2436:	08d2      	lsrs	r2, r2, #3
    2438:	0192      	lsls	r2, r2, #6
    243a:	4806      	ldr	r0, [pc, #24]	; (2454 <bt_rpmsg_init+0x54>)
    243c:	f042 0201 	orr.w	r2, r2, #1
    2440:	e7ec      	b.n	241c <bt_rpmsg_init+0x1c>
    2442:	bf00      	nop
    2444:	00010328 	.word	0x00010328
    2448:	000102f8 	.word	0x000102f8
    244c:	000111ec 	.word	0x000111ec
    2450:	00010594 	.word	0x00010594
    2454:	00011213 	.word	0x00011213

00002458 <bt_rpmsg_send>:
{
    2458:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    245a:	7d01      	ldrb	r1, [r0, #20]
    245c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    245e:	2902      	cmp	r1, #2
    2460:	d012      	beq.n	2488 <bt_rpmsg_send+0x30>
    2462:	2904      	cmp	r1, #4
    2464:	d00f      	beq.n	2486 <bt_rpmsg_send+0x2e>
    2466:	b309      	cbz	r1, 24ac <bt_rpmsg_send+0x54>
    2468:	4a11      	ldr	r2, [pc, #68]	; (24b0 <bt_rpmsg_send+0x58>)
    246a:	4b12      	ldr	r3, [pc, #72]	; (24b4 <bt_rpmsg_send+0x5c>)
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    246c:	4812      	ldr	r0, [pc, #72]	; (24b8 <bt_rpmsg_send+0x60>)
    246e:	1ad2      	subs	r2, r2, r3
    2470:	08d2      	lsrs	r2, r2, #3
    2472:	0192      	lsls	r2, r2, #6
    2474:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Failed to send (err %d)", err);
    2478:	f00a f842 	bl	c500 <log_1>
	net_buf_unref(buf);
    247c:	4620      	mov	r0, r4
    247e:	f006 fc9d 	bl	8dbc <net_buf_unref>
}
    2482:	2000      	movs	r0, #0
    2484:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    2486:	2105      	movs	r1, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    2488:	f104 0008 	add.w	r0, r4, #8
    248c:	f00c fb52 	bl	eb34 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    2490:	4620      	mov	r0, r4
    2492:	f000 f939 	bl	2708 <bt_rpmsg_platform_send>
	if (err < 0) {
    2496:	1e01      	subs	r1, r0, #0
    2498:	daf0      	bge.n	247c <bt_rpmsg_send+0x24>
    249a:	4a05      	ldr	r2, [pc, #20]	; (24b0 <bt_rpmsg_send+0x58>)
    249c:	4b05      	ldr	r3, [pc, #20]	; (24b4 <bt_rpmsg_send+0x5c>)
		BT_ERR("Failed to send (err %d)", err);
    249e:	4807      	ldr	r0, [pc, #28]	; (24bc <bt_rpmsg_send+0x64>)
    24a0:	1ad2      	subs	r2, r2, r3
    24a2:	08d2      	lsrs	r2, r2, #3
    24a4:	0192      	lsls	r2, r2, #6
    24a6:	f042 0201 	orr.w	r2, r2, #1
    24aa:	e7e5      	b.n	2478 <bt_rpmsg_send+0x20>
	switch (bt_buf_get_type(buf)) {
    24ac:	2101      	movs	r1, #1
    24ae:	e7eb      	b.n	2488 <bt_rpmsg_send+0x30>
    24b0:	00010328 	.word	0x00010328
    24b4:	000102f8 	.word	0x000102f8
    24b8:	0001123d 	.word	0x0001123d
    24bc:	0001124d 	.word	0x0001124d

000024c0 <bt_rpmsg_rx>:
{
    24c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    24c4:	4680      	mov	r8, r0
{
    24c6:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    24c8:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    24cc:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    24ce:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    24d0:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    24d4:	d010      	beq.n	24f8 <bt_rpmsg_rx+0x38>
    24d6:	2805      	cmp	r0, #5
    24d8:	f000 8093 	beq.w	2602 <bt_rpmsg_rx+0x142>
    24dc:	2802      	cmp	r0, #2
    24de:	f040 80c9 	bne.w	2674 <bt_rpmsg_rx+0x1b4>
	if (remaining < sizeof(hdr)) {
    24e2:	2b03      	cmp	r3, #3
    24e4:	d85c      	bhi.n	25a0 <bt_rpmsg_rx+0xe0>
    24e6:	4969      	ldr	r1, [pc, #420]	; (268c <bt_rpmsg_rx+0x1cc>)
    24e8:	4b69      	ldr	r3, [pc, #420]	; (2690 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for ACL header");
    24ea:	486a      	ldr	r0, [pc, #424]	; (2694 <bt_rpmsg_rx+0x1d4>)
    24ec:	1ac9      	subs	r1, r1, r3
    24ee:	08c9      	lsrs	r1, r1, #3
    24f0:	0189      	lsls	r1, r1, #6
    24f2:	f041 0101 	orr.w	r1, r1, #1
    24f6:	e009      	b.n	250c <bt_rpmsg_rx+0x4c>
	if (remaining < sizeof(hdr)) {
    24f8:	2b01      	cmp	r3, #1
    24fa:	d80c      	bhi.n	2516 <bt_rpmsg_rx+0x56>
    24fc:	4963      	ldr	r1, [pc, #396]	; (268c <bt_rpmsg_rx+0x1cc>)
    24fe:	4b64      	ldr	r3, [pc, #400]	; (2690 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for event header");
    2500:	4865      	ldr	r0, [pc, #404]	; (2698 <bt_rpmsg_rx+0x1d8>)
    2502:	1ac9      	subs	r1, r1, r3
    2504:	08c9      	lsrs	r1, r1, #3
    2506:	0189      	lsls	r1, r1, #6
    2508:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Event payload length is not correct");
    250c:	f009 ffeb 	bl	c4e6 <log_0>
}
    2510:	b002      	add	sp, #8
    2512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (evt_type) {
    2516:	7873      	ldrb	r3, [r6, #1]
    2518:	2b3e      	cmp	r3, #62	; 0x3e
    251a:	d119      	bne.n	2550 <bt_rpmsg_rx+0x90>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    251c:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    251e:	2f02      	cmp	r7, #2
    2520:	d018      	beq.n	2554 <bt_rpmsg_rx+0x94>
    2522:	f1a7 030d 	sub.w	r3, r7, #13
    2526:	425f      	negs	r7, r3
    2528:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    252a:	2202      	movs	r2, #2
    252c:	4641      	mov	r1, r8
    252e:	a801      	add	r0, sp, #4
    2530:	f00b f803 	bl	d53a <memcpy>
	if (remaining != hdr.len) {
    2534:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    2538:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    253a:	429d      	cmp	r5, r3
    253c:	d00c      	beq.n	2558 <bt_rpmsg_rx+0x98>
    253e:	4953      	ldr	r1, [pc, #332]	; (268c <bt_rpmsg_rx+0x1cc>)
    2540:	4b53      	ldr	r3, [pc, #332]	; (2690 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Event payload length is not correct");
    2542:	4856      	ldr	r0, [pc, #344]	; (269c <bt_rpmsg_rx+0x1dc>)
    2544:	1ac9      	subs	r1, r1, r3
    2546:	08c9      	lsrs	r1, r1, #3
    2548:	0189      	lsls	r1, r1, #6
    254a:	f041 0101 	orr.w	r1, r1, #1
    254e:	e7dd      	b.n	250c <bt_rpmsg_rx+0x4c>
		return false;
    2550:	2700      	movs	r7, #0
    2552:	e7ea      	b.n	252a <bt_rpmsg_rx+0x6a>
			return true;
    2554:	2701      	movs	r7, #1
    2556:	e7e8      	b.n	252a <bt_rpmsg_rx+0x6a>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    2558:	2200      	movs	r2, #0
    255a:	2300      	movs	r3, #0
    255c:	4639      	mov	r1, r7
    255e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2562:	f001 fb1b 	bl	3b9c <bt_buf_get_evt>
	if (!buf) {
    2566:	4604      	mov	r4, r0
    2568:	b950      	cbnz	r0, 2580 <bt_rpmsg_rx+0xc0>
		if (discardable) {
    256a:	2f00      	cmp	r7, #0
    256c:	d1d0      	bne.n	2510 <bt_rpmsg_rx+0x50>
    256e:	4947      	ldr	r1, [pc, #284]	; (268c <bt_rpmsg_rx+0x1cc>)
    2570:	4b47      	ldr	r3, [pc, #284]	; (2690 <bt_rpmsg_rx+0x1d0>)
			BT_ERR("No available event buffers!");
    2572:	484b      	ldr	r0, [pc, #300]	; (26a0 <bt_rpmsg_rx+0x1e0>)
    2574:	1ac9      	subs	r1, r1, r3
    2576:	08c9      	lsrs	r1, r1, #3
    2578:	0189      	lsls	r1, r1, #6
    257a:	f041 0101 	orr.w	r1, r1, #1
    257e:	e7c5      	b.n	250c <bt_rpmsg_rx+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    2580:	f100 0708 	add.w	r7, r0, #8
    2584:	2202      	movs	r2, #2
    2586:	a901      	add	r1, sp, #4
    2588:	4638      	mov	r0, r7
    258a:	f00c fab0 	bl	eaee <net_buf_simple_add_mem>
    258e:	462a      	mov	r2, r5
    2590:	1cf1      	adds	r1, r6, #3
    2592:	4638      	mov	r0, r7
    2594:	f00c faab 	bl	eaee <net_buf_simple_add_mem>
		bt_recv(buf);
    2598:	4620      	mov	r0, r4
    259a:	f002 fd0f 	bl	4fbc <bt_recv>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
    259e:	e7b7      	b.n	2510 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    25a0:	2200      	movs	r2, #0
    25a2:	2300      	movs	r3, #0
    25a4:	2003      	movs	r0, #3
    25a6:	f001 fabd 	bl	3b24 <bt_buf_get_rx>
	if (buf) {
    25aa:	4604      	mov	r4, r0
    25ac:	b300      	cbz	r0, 25f0 <bt_rpmsg_rx+0x130>
		memcpy((void *)&hdr, data, sizeof(hdr));
    25ae:	2204      	movs	r2, #4
    25b0:	4641      	mov	r1, r8
    25b2:	eb0d 0002 	add.w	r0, sp, r2
    25b6:	f00a ffc0 	bl	d53a <memcpy>
    25ba:	2204      	movs	r2, #4
    25bc:	f104 0708 	add.w	r7, r4, #8
    25c0:	4638      	mov	r0, r7
    25c2:	eb0d 0102 	add.w	r1, sp, r2
    25c6:	f00c fa92 	bl	eaee <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    25ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    25ce:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    25d0:	429d      	cmp	r5, r3
    25d2:	d04c      	beq.n	266e <bt_rpmsg_rx+0x1ae>
    25d4:	492d      	ldr	r1, [pc, #180]	; (268c <bt_rpmsg_rx+0x1cc>)
    25d6:	4b2e      	ldr	r3, [pc, #184]	; (2690 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("ACL payload length is not correct");
    25d8:	4832      	ldr	r0, [pc, #200]	; (26a4 <bt_rpmsg_rx+0x1e4>)
    25da:	1ac9      	subs	r1, r1, r3
    25dc:	08c9      	lsrs	r1, r1, #3
    25de:	0189      	lsls	r1, r1, #6
    25e0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("ISO payload length is not correct");
    25e4:	f009 ff7f 	bl	c4e6 <log_0>
		net_buf_unref(buf);
    25e8:	4620      	mov	r0, r4
    25ea:	f006 fbe7 	bl	8dbc <net_buf_unref>
	if (buf) {
    25ee:	e78f      	b.n	2510 <bt_rpmsg_rx+0x50>
    25f0:	4926      	ldr	r1, [pc, #152]	; (268c <bt_rpmsg_rx+0x1cc>)
    25f2:	4b27      	ldr	r3, [pc, #156]	; (2690 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("No available ACL buffers!");
    25f4:	482c      	ldr	r0, [pc, #176]	; (26a8 <bt_rpmsg_rx+0x1e8>)
    25f6:	1ac9      	subs	r1, r1, r3
    25f8:	08c9      	lsrs	r1, r1, #3
    25fa:	0189      	lsls	r1, r1, #6
    25fc:	f041 0101 	orr.w	r1, r1, #1
    2600:	e784      	b.n	250c <bt_rpmsg_rx+0x4c>
	if (remaining < sizeof(hdr)) {
    2602:	2b03      	cmp	r3, #3
    2604:	d808      	bhi.n	2618 <bt_rpmsg_rx+0x158>
    2606:	4921      	ldr	r1, [pc, #132]	; (268c <bt_rpmsg_rx+0x1cc>)
    2608:	4b21      	ldr	r3, [pc, #132]	; (2690 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for ISO header");
    260a:	4828      	ldr	r0, [pc, #160]	; (26ac <bt_rpmsg_rx+0x1ec>)
    260c:	1ac9      	subs	r1, r1, r3
    260e:	08c9      	lsrs	r1, r1, #3
    2610:	0189      	lsls	r1, r1, #6
    2612:	f041 0101 	orr.w	r1, r1, #1
    2616:	e779      	b.n	250c <bt_rpmsg_rx+0x4c>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    2618:	2200      	movs	r2, #0
    261a:	2300      	movs	r3, #0
    261c:	f001 fa82 	bl	3b24 <bt_buf_get_rx>
	if (buf) {
    2620:	4604      	mov	r4, r0
    2622:	b1d8      	cbz	r0, 265c <bt_rpmsg_rx+0x19c>
		memcpy((void *)&hdr, data, sizeof(hdr));
    2624:	2204      	movs	r2, #4
    2626:	4641      	mov	r1, r8
    2628:	eb0d 0002 	add.w	r0, sp, r2
    262c:	f00a ff85 	bl	d53a <memcpy>
    2630:	2204      	movs	r2, #4
    2632:	f104 0708 	add.w	r7, r4, #8
    2636:	4638      	mov	r0, r7
    2638:	eb0d 0102 	add.w	r1, sp, r2
    263c:	f00c fa57 	bl	eaee <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    2640:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    2644:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    2646:	429d      	cmp	r5, r3
    2648:	d011      	beq.n	266e <bt_rpmsg_rx+0x1ae>
    264a:	4910      	ldr	r1, [pc, #64]	; (268c <bt_rpmsg_rx+0x1cc>)
    264c:	4b10      	ldr	r3, [pc, #64]	; (2690 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("ISO payload length is not correct");
    264e:	4818      	ldr	r0, [pc, #96]	; (26b0 <bt_rpmsg_rx+0x1f0>)
    2650:	1ac9      	subs	r1, r1, r3
    2652:	08c9      	lsrs	r1, r1, #3
    2654:	0189      	lsls	r1, r1, #6
    2656:	f041 0101 	orr.w	r1, r1, #1
    265a:	e7c3      	b.n	25e4 <bt_rpmsg_rx+0x124>
    265c:	490b      	ldr	r1, [pc, #44]	; (268c <bt_rpmsg_rx+0x1cc>)
    265e:	4b0c      	ldr	r3, [pc, #48]	; (2690 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("No available ISO buffers!");
    2660:	4814      	ldr	r0, [pc, #80]	; (26b4 <bt_rpmsg_rx+0x1f4>)
    2662:	1ac9      	subs	r1, r1, r3
    2664:	08c9      	lsrs	r1, r1, #3
    2666:	0189      	lsls	r1, r1, #6
    2668:	f041 0101 	orr.w	r1, r1, #1
    266c:	e74e      	b.n	250c <bt_rpmsg_rx+0x4c>
    266e:	462a      	mov	r2, r5
    2670:	1d71      	adds	r1, r6, #5
    2672:	e78e      	b.n	2592 <bt_rpmsg_rx+0xd2>
    2674:	4b06      	ldr	r3, [pc, #24]	; (2690 <bt_rpmsg_rx+0x1d0>)
    2676:	4a05      	ldr	r2, [pc, #20]	; (268c <bt_rpmsg_rx+0x1cc>)
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    2678:	4601      	mov	r1, r0
    267a:	1ad2      	subs	r2, r2, r3
    267c:	08d2      	lsrs	r2, r2, #3
    267e:	0192      	lsls	r2, r2, #6
    2680:	480d      	ldr	r0, [pc, #52]	; (26b8 <bt_rpmsg_rx+0x1f8>)
    2682:	f042 0201 	orr.w	r2, r2, #1
    2686:	f009 ff3b 	bl	c500 <log_1>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
    268a:	e741      	b.n	2510 <bt_rpmsg_rx+0x50>
    268c:	00010328 	.word	0x00010328
    2690:	000102f8 	.word	0x000102f8
    2694:	000112c6 	.word	0x000112c6
    2698:	00011265 	.word	0x00011265
    269c:	00011286 	.word	0x00011286
    26a0:	000112aa 	.word	0x000112aa
    26a4:	000112ff 	.word	0x000112ff
    26a8:	000112e5 	.word	0x000112e5
    26ac:	00011321 	.word	0x00011321
    26b0:	0001135a 	.word	0x0001135a
    26b4:	00011340 	.word	0x00011340
    26b8:	0001137c 	.word	0x0001137c

000026bc <bt_rpmsg_platform_init>:

int bt_rpmsg_platform_init(void)
{
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    26bc:	490b      	ldr	r1, [pc, #44]	; (26ec <bt_rpmsg_platform_init+0x30>)
{
    26be:	b508      	push	{r3, lr}
	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    26c0:	480b      	ldr	r0, [pc, #44]	; (26f0 <bt_rpmsg_platform_init+0x34>)
    26c2:	f7ff fc73 	bl	1fac <rpmsg_service_register_endpoint>

	if (err < 0) {
    26c6:	1e01      	subs	r1, r0, #0
    26c8:	da0b      	bge.n	26e2 <bt_rpmsg_platform_init+0x26>
    26ca:	4b0a      	ldr	r3, [pc, #40]	; (26f4 <bt_rpmsg_platform_init+0x38>)
    26cc:	4a0a      	ldr	r2, [pc, #40]	; (26f8 <bt_rpmsg_platform_init+0x3c>)
		LOG_ERR("Registering endpoint failed with %d", err);
    26ce:	480b      	ldr	r0, [pc, #44]	; (26fc <bt_rpmsg_platform_init+0x40>)
    26d0:	1ad2      	subs	r2, r2, r3
    26d2:	08d2      	lsrs	r2, r2, #3
    26d4:	0192      	lsls	r2, r2, #6
    26d6:	f042 0201 	orr.w	r2, r2, #1
    26da:	f009 ff11 	bl	c500 <log_1>
		return RPMSG_ERR_INIT;
    26de:	4808      	ldr	r0, [pc, #32]	; (2700 <bt_rpmsg_platform_init+0x44>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    26e0:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    26e2:	4b08      	ldr	r3, [pc, #32]	; (2704 <bt_rpmsg_platform_init+0x48>)
	return RPMSG_SUCCESS;
    26e4:	2000      	movs	r0, #0
	endpoint_id = err;
    26e6:	6019      	str	r1, [r3, #0]
	return RPMSG_SUCCESS;
    26e8:	e7fa      	b.n	26e0 <bt_rpmsg_platform_init+0x24>
    26ea:	bf00      	nop
    26ec:	0000cc1b 	.word	0x0000cc1b
    26f0:	000113a4 	.word	0x000113a4
    26f4:	000102f8 	.word	0x000102f8
    26f8:	00010330 	.word	0x00010330
    26fc:	000113af 	.word	0x000113af
    2700:	fffff82a 	.word	0xfffff82a
    2704:	2000116c 	.word	0x2000116c

00002708 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    2708:	4b02      	ldr	r3, [pc, #8]	; (2714 <bt_rpmsg_platform_send+0xc>)
    270a:	8982      	ldrh	r2, [r0, #12]
    270c:	6881      	ldr	r1, [r0, #8]
    270e:	6818      	ldr	r0, [r3, #0]
    2710:	f7ff bc84 	b.w	201c <rpmsg_service_send>
    2714:	2000116c 	.word	0x2000116c

00002718 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    2718:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    271c:	6818      	ldr	r0, [r3, #0]
    271e:	f7ff fc73 	bl	2008 <rpmsg_service_endpoint_is_bound>
}
    2722:	bd08      	pop	{r3, pc}
    2724:	2000116c 	.word	0x2000116c

00002728 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    2728:	4a04      	ldr	r2, [pc, #16]	; (273c <sys_clock_timeout_handler+0x14>)
    272a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    272c:	1ac8      	subs	r0, r1, r3
    272e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2732:	4403      	add	r3, r0
    2734:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2736:	f008 bf4b 	b.w	b5d0 <z_clock_announce>
    273a:	bf00      	nop
    273c:	2000117c 	.word	0x2000117c

00002740 <set_absolute_alarm>:
{
    2740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2744:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2748:	f04f 0900 	mov.w	r9, #0
    274c:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    274e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    2752:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    2756:	00a4      	lsls	r4, r4, #2
    2758:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    275c:	b2a4      	uxth	r4, r4
    275e:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    2762:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2766:	f8df 806c 	ldr.w	r8, [pc, #108]	; 27d4 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    276a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    276e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2772:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    2774:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2778:	eba3 030a 	sub.w	r3, r3, sl
    277c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2780:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    2784:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    2786:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    278a:	d102      	bne.n	2792 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    278c:	2013      	movs	r0, #19
    278e:	f00d f9a1 	bl	fad4 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    2792:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    2796:	1aab      	subs	r3, r5, r2
    2798:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    279c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    27a0:	bf88      	it	hi
    27a2:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27a4:	f8c4 9000 	str.w	r9, [r4]
    27a8:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    27aa:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    27ae:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    27b2:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    27b6:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    27ba:	459a      	cmp	sl, r3
    27bc:	d006      	beq.n	27cc <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    27be:	1aeb      	subs	r3, r5, r3
    27c0:	3b02      	subs	r3, #2
    27c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    27c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    27ca:	d801      	bhi.n	27d0 <set_absolute_alarm+0x90>
}
    27cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    27d0:	462b      	mov	r3, r5
    27d2:	e7cf      	b.n	2774 <set_absolute_alarm+0x34>
    27d4:	50015000 	.word	0x50015000

000027d8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    27d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    27da:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27dc:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    27de:	4e0f      	ldr	r6, [pc, #60]	; (281c <rtc_nrf_isr+0x44>)
    27e0:	4b0f      	ldr	r3, [pc, #60]	; (2820 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    27e2:	4a10      	ldr	r2, [pc, #64]	; (2824 <rtc_nrf_isr+0x4c>)
    27e4:	4618      	mov	r0, r3
    27e6:	681d      	ldr	r5, [r3, #0]
    27e8:	b104      	cbz	r4, 27ec <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    27ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27ec:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    27f0:	03c9      	lsls	r1, r1, #15
    27f2:	d5fa      	bpl.n	27ea <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    27f4:	6831      	ldr	r1, [r6, #0]
    27f6:	2900      	cmp	r1, #0
    27f8:	d0f7      	beq.n	27ea <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27fa:	6034      	str	r4, [r6, #0]
    27fc:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    27fe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2802:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2806:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    2808:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    280c:	b125      	cbz	r5, 2818 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    280e:	2000      	movs	r0, #0
    2810:	685a      	ldr	r2, [r3, #4]
    2812:	601f      	str	r7, [r3, #0]
    2814:	47a8      	blx	r5
    2816:	e7e3      	b.n	27e0 <rtc_nrf_isr+0x8>
    2818:	6005      	str	r5, [r0, #0]
}
    281a:	e7e6      	b.n	27ea <rtc_nrf_isr+0x12>
    281c:	50015140 	.word	0x50015140
    2820:	20001170 	.word	0x20001170
    2824:	50015000 	.word	0x50015000

00002828 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    2828:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    282a:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    282c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2830:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    2834:	4d0d      	ldr	r5, [pc, #52]	; (286c <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2836:	2101      	movs	r1, #1
    2838:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    283c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    2840:	4b0b      	ldr	r3, [pc, #44]	; (2870 <z_clock_driver_init+0x48>)
    2842:	2015      	movs	r0, #21
    2844:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2848:	4622      	mov	r2, r4
    284a:	f000 fb63 	bl	2f14 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    284e:	2015      	movs	r0, #21
    2850:	f000 fb42 	bl	2ed8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2854:	2301      	movs	r3, #1
    2856:	4a07      	ldr	r2, [pc, #28]	; (2874 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    2858:	2002      	movs	r0, #2
    285a:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    285c:	4a06      	ldr	r2, [pc, #24]	; (2878 <z_clock_driver_init+0x50>)
    285e:	602b      	str	r3, [r5, #0]
    2860:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    2862:	f7ff fd47 	bl	22f4 <z_nrf_clock_control_lf_on>

	return 0;
}
    2866:	4620      	mov	r0, r4
    2868:	bd38      	pop	{r3, r4, r5, pc}
    286a:	bf00      	nop
    286c:	50015000 	.word	0x50015000
    2870:	e000e100 	.word	0xe000e100
    2874:	50015008 	.word	0x50015008
    2878:	20001178 	.word	0x20001178

0000287c <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    287c:	4b13      	ldr	r3, [pc, #76]	; (28cc <z_clock_set_timeout+0x50>)
    287e:	f1b0 3fff 	cmp.w	r0, #4294967295
    2882:	bf08      	it	eq
    2884:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2886:	3801      	subs	r0, #1
    2888:	2800      	cmp	r0, #0
    288a:	dd1c      	ble.n	28c6 <z_clock_set_timeout+0x4a>
    288c:	4298      	cmp	r0, r3
    288e:	bfa8      	it	ge
    2890:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    2892:	4b0f      	ldr	r3, [pc, #60]	; (28d0 <z_clock_set_timeout+0x54>)
    2894:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    2898:	4b0e      	ldr	r3, [pc, #56]	; (28d4 <z_clock_set_timeout+0x58>)
    289a:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    289c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    289e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    28a2:	bf18      	it	ne
    28a4:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    28a6:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    28aa:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    28ac:	4a0a      	ldr	r2, [pc, #40]	; (28d8 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    28ae:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    28b0:	480a      	ldr	r0, [pc, #40]	; (28dc <z_clock_set_timeout+0x60>)
    28b2:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    28b4:	2000      	movs	r0, #0
    28b6:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    28b8:	4a04      	ldr	r2, [pc, #16]	; (28cc <z_clock_set_timeout+0x50>)
    28ba:	4293      	cmp	r3, r2
    28bc:	bf94      	ite	ls
    28be:	18c9      	addls	r1, r1, r3
    28c0:	1889      	addhi	r1, r1, r2
    28c2:	f7ff bf3d 	b.w	2740 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    28c6:	2000      	movs	r0, #0
    28c8:	e7e3      	b.n	2892 <z_clock_set_timeout+0x16>
    28ca:	bf00      	nop
    28cc:	007fffff 	.word	0x007fffff
    28d0:	50015000 	.word	0x50015000
    28d4:	2000117c 	.word	0x2000117c
    28d8:	20001170 	.word	0x20001170
    28dc:	00002729 	.word	0x00002729

000028e0 <z_clock_elapsed>:
	__asm__ volatile(
    28e0:	f04f 0220 	mov.w	r2, #32
    28e4:	f3ef 8311 	mrs	r3, BASEPRI
    28e8:	f382 8811 	msr	BASEPRI, r2
    28ec:	f3bf 8f6f 	isb	sy
    28f0:	4a06      	ldr	r2, [pc, #24]	; (290c <z_clock_elapsed+0x2c>)
    28f2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    28f6:	4a06      	ldr	r2, [pc, #24]	; (2910 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    28f8:	6812      	ldr	r2, [r2, #0]
    28fa:	1a80      	subs	r0, r0, r2
    28fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    2900:	f383 8811 	msr	BASEPRI, r3
    2904:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    2908:	4770      	bx	lr
    290a:	bf00      	nop
    290c:	50015000 	.word	0x50015000
    2910:	2000117c 	.word	0x2000117c

00002914 <z_timer_cycle_get_32>:
	__asm__ volatile(
    2914:	f04f 0320 	mov.w	r3, #32
    2918:	f3ef 8211 	mrs	r2, BASEPRI
    291c:	f383 8811 	msr	BASEPRI, r3
    2920:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    2924:	4906      	ldr	r1, [pc, #24]	; (2940 <z_timer_cycle_get_32+0x2c>)
    2926:	4b07      	ldr	r3, [pc, #28]	; (2944 <z_timer_cycle_get_32+0x30>)
    2928:	6808      	ldr	r0, [r1, #0]
    292a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    292e:	f382 8811 	msr	BASEPRI, r2
    2932:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    2936:	1a1b      	subs	r3, r3, r0
    2938:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    293c:	4418      	add	r0, r3
    293e:	4770      	bx	lr
    2940:	2000117c 	.word	0x2000117c
    2944:	50015000 	.word	0x50015000

00002948 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2948:	4801      	ldr	r0, [pc, #4]	; (2950 <nrf_cc3xx_platform_abort_init+0x8>)
    294a:	f009 b839 	b.w	b9c0 <nrf_cc3xx_platform_set_abort>
    294e:	bf00      	nop
    2950:	000105a8 	.word	0x000105a8

00002954 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2954:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2956:	b308      	cbz	r0, 299c <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2958:	6843      	ldr	r3, [r0, #4]
    295a:	2b04      	cmp	r3, #4
    295c:	d007      	beq.n	296e <mutex_unlock_platform+0x1a>
    295e:	2b08      	cmp	r3, #8
    2960:	d013      	beq.n	298a <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2962:	b1f3      	cbz	r3, 29a2 <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2964:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2966:	f007 ff79 	bl	a85c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    296a:	2000      	movs	r0, #0
    296c:	e00c      	b.n	2988 <mutex_unlock_platform+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    296e:	2200      	movs	r2, #0
    2970:	6803      	ldr	r3, [r0, #0]
    2972:	e8d3 1fef 	ldaex	r1, [r3]
    2976:	2901      	cmp	r1, #1
    2978:	d103      	bne.n	2982 <mutex_unlock_platform+0x2e>
    297a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    297e:	2800      	cmp	r0, #0
    2980:	d1f7      	bne.n	2972 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2982:	4809      	ldr	r0, [pc, #36]	; (29a8 <mutex_unlock_platform+0x54>)
    2984:	bf08      	it	eq
    2986:	4610      	moveq	r0, r2
    }
}
    2988:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    298a:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    298c:	2000      	movs	r0, #0
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	4a06      	ldr	r2, [pc, #24]	; (29ac <mutex_unlock_platform+0x58>)
    2992:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2996:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    299a:	e7f5      	b.n	2988 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    299c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    29a0:	e7f2      	b.n	2988 <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    29a2:	4803      	ldr	r0, [pc, #12]	; (29b0 <mutex_unlock_platform+0x5c>)
    29a4:	e7f0      	b.n	2988 <mutex_unlock_platform+0x34>
    29a6:	bf00      	nop
    29a8:	ffff8fe9 	.word	0xffff8fe9
    29ac:	50030000 	.word	0x50030000
    29b0:	ffff8fea 	.word	0xffff8fea

000029b4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    29b4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    29b6:	4604      	mov	r4, r0
    29b8:	b918      	cbnz	r0, 29c2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    29ba:	4b0d      	ldr	r3, [pc, #52]	; (29f0 <mutex_free_platform+0x3c>)
    29bc:	480d      	ldr	r0, [pc, #52]	; (29f4 <mutex_free_platform+0x40>)
    29be:	685b      	ldr	r3, [r3, #4]
    29c0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    29c2:	6861      	ldr	r1, [r4, #4]
    29c4:	2908      	cmp	r1, #8
    29c6:	d00d      	beq.n	29e4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    29c8:	f031 0304 	bics.w	r3, r1, #4
    29cc:	d00a      	beq.n	29e4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    29ce:	f011 0102 	ands.w	r1, r1, #2
    29d2:	d008      	beq.n	29e6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    29d4:	4621      	mov	r1, r4
    29d6:	4808      	ldr	r0, [pc, #32]	; (29f8 <mutex_free_platform+0x44>)
    29d8:	f007 fe9c 	bl	a714 <k_mem_slab_free>
        mutex->mutex = NULL;
    29dc:	2300      	movs	r3, #0
    29de:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    29e0:	2300      	movs	r3, #0
    29e2:	6063      	str	r3, [r4, #4]
}
    29e4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    29e6:	2214      	movs	r2, #20
    29e8:	6820      	ldr	r0, [r4, #0]
    29ea:	f00a fdd1 	bl	d590 <memset>
    29ee:	e7f7      	b.n	29e0 <mutex_free_platform+0x2c>
    29f0:	20000318 	.word	0x20000318
    29f4:	000113f1 	.word	0x000113f1
    29f8:	20001180 	.word	0x20001180

000029fc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    29fc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    29fe:	4604      	mov	r4, r0
    2a00:	b918      	cbnz	r0, 2a0a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2a02:	4b16      	ldr	r3, [pc, #88]	; (2a5c <mutex_init_platform+0x60>)
    2a04:	4816      	ldr	r0, [pc, #88]	; (2a60 <mutex_init_platform+0x64>)
    2a06:	685b      	ldr	r3, [r3, #4]
    2a08:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2a0a:	6863      	ldr	r3, [r4, #4]
    2a0c:	2b04      	cmp	r3, #4
    2a0e:	d023      	beq.n	2a58 <mutex_init_platform+0x5c>
    2a10:	2b08      	cmp	r3, #8
    2a12:	d021      	beq.n	2a58 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2a14:	b9cb      	cbnz	r3, 2a4a <mutex_init_platform+0x4e>
    2a16:	6823      	ldr	r3, [r4, #0]
    2a18:	b9bb      	cbnz	r3, 2a4a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2a1a:	f04f 32ff 	mov.w	r2, #4294967295
    2a1e:	f04f 33ff 	mov.w	r3, #4294967295
    2a22:	4621      	mov	r1, r4
    2a24:	480f      	ldr	r0, [pc, #60]	; (2a64 <mutex_init_platform+0x68>)
    2a26:	f007 fe43 	bl	a6b0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2a2a:	b908      	cbnz	r0, 2a30 <mutex_init_platform+0x34>
    2a2c:	6823      	ldr	r3, [r4, #0]
    2a2e:	b91b      	cbnz	r3, 2a38 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2a30:	4b0a      	ldr	r3, [pc, #40]	; (2a5c <mutex_init_platform+0x60>)
    2a32:	480d      	ldr	r0, [pc, #52]	; (2a68 <mutex_init_platform+0x6c>)
    2a34:	685b      	ldr	r3, [r3, #4]
    2a36:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2a38:	2214      	movs	r2, #20
    2a3a:	2100      	movs	r1, #0
    2a3c:	6820      	ldr	r0, [r4, #0]
    2a3e:	f00a fda7 	bl	d590 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2a42:	6863      	ldr	r3, [r4, #4]
    2a44:	f043 0302 	orr.w	r3, r3, #2
    2a48:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2a4a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2a4c:	f00c fe5c 	bl	f708 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2a50:	6863      	ldr	r3, [r4, #4]
    2a52:	f043 0301 	orr.w	r3, r3, #1
    2a56:	6063      	str	r3, [r4, #4]
}
    2a58:	bd10      	pop	{r4, pc}
    2a5a:	bf00      	nop
    2a5c:	20000318 	.word	0x20000318
    2a60:	000113f1 	.word	0x000113f1
    2a64:	20001180 	.word	0x20001180
    2a68:	00011417 	.word	0x00011417

00002a6c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2a6c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    2a6e:	b340      	cbz	r0, 2ac2 <mutex_lock_platform+0x56>
    switch (mutex->flags) {
    2a70:	6843      	ldr	r3, [r0, #4]
    2a72:	2b04      	cmp	r3, #4
    2a74:	d00b      	beq.n	2a8e <mutex_lock_platform+0x22>
    2a76:	2b08      	cmp	r3, #8
    2a78:	d016      	beq.n	2aa8 <mutex_lock_platform+0x3c>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2a7a:	b303      	cbz	r3, 2abe <mutex_lock_platform+0x52>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2a7c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2a7e:	f04f 32ff 	mov.w	r2, #4294967295
    2a82:	f04f 33ff 	mov.w	r3, #4294967295
    2a86:	f007 fe71 	bl	a76c <z_impl_k_mutex_lock>
        if (ret == 0) {
    2a8a:	b158      	cbz	r0, 2aa4 <mutex_lock_platform+0x38>
    2a8c:	e015      	b.n	2aba <mutex_lock_platform+0x4e>
    2a8e:	2201      	movs	r2, #1
    2a90:	6803      	ldr	r3, [r0, #0]
    2a92:	e8d3 1fef 	ldaex	r1, [r3]
    2a96:	2900      	cmp	r1, #0
    2a98:	d103      	bne.n	2aa2 <mutex_lock_platform+0x36>
    2a9a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2a9e:	2800      	cmp	r0, #0
    2aa0:	d1f7      	bne.n	2a92 <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2aa2:	d10a      	bne.n	2aba <mutex_lock_platform+0x4e>
    2aa4:	2000      	movs	r0, #0
}
    2aa6:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    2aa8:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    2aaa:	4a07      	ldr	r2, [pc, #28]	; (2ac8 <mutex_lock_platform+0x5c>)
    2aac:	781b      	ldrb	r3, [r3, #0]
    2aae:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2ab6:	2b00      	cmp	r3, #0
    2ab8:	d0f4      	beq.n	2aa4 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2aba:	4804      	ldr	r0, [pc, #16]	; (2acc <mutex_lock_platform+0x60>)
    2abc:	e7f3      	b.n	2aa6 <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2abe:	4804      	ldr	r0, [pc, #16]	; (2ad0 <mutex_lock_platform+0x64>)
    2ac0:	e7f1      	b.n	2aa6 <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2ac2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2ac6:	e7ee      	b.n	2aa6 <mutex_lock_platform+0x3a>
    2ac8:	50030000 	.word	0x50030000
    2acc:	ffff8fe9 	.word	0xffff8fe9
    2ad0:	ffff8fea 	.word	0xffff8fea

00002ad4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2ad4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2ad6:	4906      	ldr	r1, [pc, #24]	; (2af0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2ad8:	2340      	movs	r3, #64	; 0x40
    2ada:	2214      	movs	r2, #20
    2adc:	4805      	ldr	r0, [pc, #20]	; (2af4 <nrf_cc3xx_platform_mutex_init+0x20>)
    2ade:	f00c fdf8 	bl	f6d2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2ae6:	4904      	ldr	r1, [pc, #16]	; (2af8 <nrf_cc3xx_platform_mutex_init+0x24>)
    2ae8:	4804      	ldr	r0, [pc, #16]	; (2afc <nrf_cc3xx_platform_mutex_init+0x28>)
    2aea:	f008 bfbb 	b.w	ba64 <nrf_cc3xx_platform_set_mutexes>
    2aee:	bf00      	nop
    2af0:	2000119c 	.word	0x2000119c
    2af4:	20001180 	.word	0x20001180
    2af8:	000105c0 	.word	0x000105c0
    2afc:	000105b0 	.word	0x000105b0

00002b00 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    2b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b02:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    2b04:	4e26      	ldr	r6, [pc, #152]	; (2ba0 <tc_aes128_set_encrypt_key+0xa0>)
{
    2b06:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    2b08:	ad01      	add	r5, sp, #4
{
    2b0a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    2b0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2b10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2b14:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2b18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    2b1c:	4638      	mov	r0, r7
    2b1e:	2f00      	cmp	r7, #0
    2b20:	d039      	beq.n	2b96 <tc_aes128_set_encrypt_key+0x96>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    2b22:	2c00      	cmp	r4, #0
    2b24:	d039      	beq.n	2b9a <tc_aes128_set_encrypt_key+0x9a>
    2b26:	1f38      	subs	r0, r7, #4
    2b28:	4602      	mov	r2, r0
    2b2a:	4621      	mov	r1, r4
    2b2c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2b2e:	784b      	ldrb	r3, [r1, #1]
    2b30:	780d      	ldrb	r5, [r1, #0]
    2b32:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2b34:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    2b38:	78cd      	ldrb	r5, [r1, #3]
    2b3a:	3104      	adds	r1, #4
    2b3c:	432b      	orrs	r3, r5
    2b3e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    2b42:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2b44:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2b48:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    2b4c:	d1ef      	bne.n	2b2e <tc_aes128_set_encrypt_key+0x2e>
    2b4e:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2b50:	4c14      	ldr	r4, [pc, #80]	; (2ba4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    2b52:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    2b54:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    2b56:	d116      	bne.n	2b86 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2b58:	f3c3 4207 	ubfx	r2, r3, #16, #8
    2b5c:	5ca5      	ldrb	r5, [r4, r2]
    2b5e:	0e1a      	lsrs	r2, r3, #24
    2b60:	5ca2      	ldrb	r2, [r4, r2]
    2b62:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    2b66:	f3c3 2507 	ubfx	r5, r3, #8, #8
    2b6a:	5d65      	ldrb	r5, [r4, r5]
    2b6c:	b2db      	uxtb	r3, r3
    2b6e:	5ce3      	ldrb	r3, [r4, r3]
    2b70:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    2b74:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    2b78:	ad0c      	add	r5, sp, #48	; 0x30
    2b7a:	f021 0303 	bic.w	r3, r1, #3
    2b7e:	442b      	add	r3, r5
    2b80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    2b84:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    2b86:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    2b8a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    2b8c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    2b8e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    2b90:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    2b92:	d1de      	bne.n	2b52 <tc_aes128_set_encrypt_key+0x52>
	}

	return TC_CRYPTO_SUCCESS;
    2b94:	2001      	movs	r0, #1
}
    2b96:	b00d      	add	sp, #52	; 0x34
    2b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2b9a:	4620      	mov	r0, r4
    2b9c:	e7fb      	b.n	2b96 <tc_aes128_set_encrypt_key+0x96>
    2b9e:	bf00      	nop
    2ba0:	000103f4 	.word	0x000103f4
    2ba4:	00011444 	.word	0x00011444

00002ba8 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    2ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2bac:	4615      	mov	r5, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    2bae:	4606      	mov	r6, r0
{
    2bb0:	b089      	sub	sp, #36	; 0x24
	if (out == (uint8_t *) 0) {
    2bb2:	2800      	cmp	r0, #0
    2bb4:	d058      	beq.n	2c68 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    2bb6:	2900      	cmp	r1, #0
    2bb8:	d059      	beq.n	2c6e <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    2bba:	2a00      	cmp	r2, #0
    2bbc:	d059      	beq.n	2c72 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    2bbe:	2310      	movs	r3, #16
    2bc0:	460a      	mov	r2, r1
    2bc2:	4668      	mov	r0, sp
    2bc4:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
    2bc6:	4c2c      	ldr	r4, [pc, #176]	; (2c78 <tc_aes_encrypt+0xd0>)
	(void)_copy(state, sizeof(state), in, sizeof(state));
    2bc8:	f00a f834 	bl	cc34 <_copy>
	add_round_key(state, s->words);
    2bcc:	4629      	mov	r1, r5
    2bce:	4668      	mov	r0, sp
    2bd0:	f00a f848 	bl	cc64 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    2bd4:	46a1      	mov	r9, r4
    2bd6:	f105 0710 	add.w	r7, r5, #16
    2bda:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    2bdc:	46e8      	mov	r8, sp
{
    2bde:	466a      	mov	r2, sp
    2be0:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    2be2:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    2be4:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    2be6:	5c61      	ldrb	r1, [r4, r1]
    2be8:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    2bec:	d1f9      	bne.n	2be2 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    2bee:	4668      	mov	r0, sp
    2bf0:	f00a f87d 	bl	ccee <shift_rows>
	mult_row_column(t, s);
    2bf4:	4669      	mov	r1, sp
    2bf6:	a804      	add	r0, sp, #16
    2bf8:	f00a f8b2 	bl	cd60 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    2bfc:	a901      	add	r1, sp, #4
    2bfe:	a805      	add	r0, sp, #20
    2c00:	f00a f8ae 	bl	cd60 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    2c04:	a902      	add	r1, sp, #8
    2c06:	a806      	add	r0, sp, #24
    2c08:	f00a f8aa 	bl	cd60 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    2c0c:	a903      	add	r1, sp, #12
    2c0e:	a807      	add	r0, sp, #28
    2c10:	f00a f8a6 	bl	cd60 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    2c14:	2310      	movs	r3, #16
    2c16:	4668      	mov	r0, sp
    2c18:	4619      	mov	r1, r3
    2c1a:	eb0d 0203 	add.w	r2, sp, r3
    2c1e:	f00a f809 	bl	cc34 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    2c22:	4639      	mov	r1, r7
    2c24:	4668      	mov	r0, sp
    2c26:	3710      	adds	r7, #16
    2c28:	f00a f81c 	bl	cc64 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    2c2c:	42af      	cmp	r7, r5
    2c2e:	d1d5      	bne.n	2bdc <tc_aes_encrypt+0x34>
    2c30:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    2c32:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    2c36:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    2c38:	f819 3003 	ldrb.w	r3, [r9, r3]
    2c3c:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    2c40:	d1f7      	bne.n	2c32 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    2c42:	4668      	mov	r0, sp
    2c44:	f00a f853 	bl	ccee <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    2c48:	4629      	mov	r1, r5
    2c4a:	4668      	mov	r0, sp
    2c4c:	f00a f80a 	bl	cc64 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    2c50:	2310      	movs	r3, #16
    2c52:	466a      	mov	r2, sp
    2c54:	4619      	mov	r1, r3
    2c56:	4630      	mov	r0, r6
    2c58:	f009 ffec 	bl	cc34 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    2c5c:	4668      	mov	r0, sp
    2c5e:	2210      	movs	r2, #16
    2c60:	4621      	mov	r1, r4
    2c62:	f009 fff4 	bl	cc4e <_set>

	return TC_CRYPTO_SUCCESS;
    2c66:	2001      	movs	r0, #1
}
    2c68:	b009      	add	sp, #36	; 0x24
    2c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    2c6e:	4608      	mov	r0, r1
    2c70:	e7fa      	b.n	2c68 <tc_aes_encrypt+0xc0>
    2c72:	4610      	mov	r0, r2
    2c74:	e7f8      	b.n	2c68 <tc_aes_encrypt+0xc0>
    2c76:	bf00      	nop
    2c78:	00011444 	.word	0x00011444

00002c7c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    2c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    2c80:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    2c82:	6803      	ldr	r3, [r0, #0]
{
    2c84:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    2c86:	9303      	str	r3, [sp, #12]
    2c88:	6843      	ldr	r3, [r0, #4]
    2c8a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 2e44 <compress+0x1c8>
    2c8e:	9304      	str	r3, [sp, #16]
    2c90:	6883      	ldr	r3, [r0, #8]
    2c92:	9c03      	ldr	r4, [sp, #12]
    2c94:	9305      	str	r3, [sp, #20]
    2c96:	68c3      	ldr	r3, [r0, #12]
{
    2c98:	9102      	str	r1, [sp, #8]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    2c9a:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    2c9c:	6903      	ldr	r3, [r0, #16]
    2c9e:	9307      	str	r3, [sp, #28]
    2ca0:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    2ca2:	e9dd e206 	ldrd	lr, r2, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    2ca6:	9308      	str	r3, [sp, #32]
    2ca8:	6983      	ldr	r3, [r0, #24]
    2caa:	9309      	str	r3, [sp, #36]	; 0x24
    2cac:	69c3      	ldr	r3, [r0, #28]
    2cae:	e9dd cb08 	ldrd	ip, fp, [sp, #32]
    2cb2:	4698      	mov	r8, r3
    2cb4:	930a      	str	r3, [sp, #40]	; 0x28
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    2cb6:	9b05      	ldr	r3, [sp, #20]
    2cb8:	9301      	str	r3, [sp, #4]
    2cba:	9b04      	ldr	r3, [sp, #16]
    2cbc:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    2cbe:	9b02      	ldr	r3, [sp, #8]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
    2cc0:	9e01      	ldr	r6, [sp, #4]
    2cc2:	59dd      	ldr	r5, [r3, r7]
		t1 = work_space[i] = n;
    2cc4:	ab0c      	add	r3, sp, #48	; 0x30
    2cc6:	ba2d      	rev	r5, r5
    2cc8:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    2cca:	f85a 3b04 	ldr.w	r3, [sl], #4
    2cce:	3704      	adds	r7, #4
    2cd0:	eb05 0903 	add.w	r9, r5, r3
    2cd4:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    2cd8:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    2cdc:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    2ce0:	444d      	add	r5, r9
    2ce2:	ea2b 0302 	bic.w	r3, fp, r2
    2ce6:	ea02 090c 	and.w	r9, r2, ip
    2cea:	ea83 0309 	eor.w	r3, r3, r9
    2cee:	442b      	add	r3, r5
    2cf0:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    2cf2:	e9dd 1500 	ldrd	r1, r5, [sp]
	return (((a) >> n) | ((a) << (32 - n)));
    2cf6:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    2cfa:	404d      	eors	r5, r1
    2cfc:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    2d00:	4025      	ands	r5, r4
    2d02:	ea01 0906 	and.w	r9, r1, r6
    2d06:	ea85 0509 	eor.w	r5, r5, r9
    2d0a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    2d0e:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    2d10:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    2d12:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    2d16:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    2d18:	46b6      	mov	lr, r6
    2d1a:	46d8      	mov	r8, fp
    2d1c:	f040 8081 	bne.w	2e22 <compress+0x1a6>
    2d20:	f04f 0a10 	mov.w	sl, #16
    2d24:	4946      	ldr	r1, [pc, #280]	; (2e40 <compress+0x1c4>)
    2d26:	910b      	str	r1, [sp, #44]	; 0x2c
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    2d28:	4651      	mov	r1, sl
    2d2a:	f10a 0a01 	add.w	sl, sl, #1
    2d2e:	ae1c      	add	r6, sp, #112	; 0x70
    2d30:	f00a 070f 	and.w	r7, sl, #15
    2d34:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    2d38:	f857 6c40 	ldr.w	r6, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2d3c:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    2d40:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s1 = work_space[(i+14)&0x0f];
    2d44:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2d48:	3109      	adds	r1, #9
		s0 = work_space[(i+1)&0x0f];
    2d4a:	9602      	str	r6, [sp, #8]
		s0 = sigma0(s0);
    2d4c:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2d50:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
    2d54:	ae1c      	add	r6, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2d56:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    2d5a:	eb06 0181 	add.w	r1, r6, r1, lsl #2
		s1 = work_space[(i+14)&0x0f];
    2d5e:	f007 070f 	and.w	r7, r7, #15
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2d62:	f851 1c40 	ldr.w	r1, [r1, #-64]
		s1 = work_space[(i+14)&0x0f];
    2d66:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2d6a:	f859 6c40 	ldr.w	r6, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
    2d6e:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2d72:	4431      	add	r1, r6
		s0 = sigma0(s0);
    2d74:	9e02      	ldr	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
    2d76:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
    2d7a:	ea88 08d6 	eor.w	r8, r8, r6, lsr #3
		s1 = sigma1(s1);
    2d7e:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    2d82:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2d86:	4441      	add	r1, r8
    2d88:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    2d8a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2d8c:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    2d90:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    2d94:	ea05 0802 	and.w	r8, r5, r2
    2d98:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    2d9c:	ea2c 0705 	bic.w	r7, ip, r5
    2da0:	f856 eb04 	ldr.w	lr, [r6], #4
    2da4:	ea87 0708 	eor.w	r7, r7, r8
    2da8:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    2dac:	444f      	add	r7, r9
    2dae:	4477      	add	r7, lr
    2db0:	960b      	str	r6, [sp, #44]	; 0x2c
		t2 = Sigma0(a) + Maj(a, b, c);
    2db2:	9e00      	ldr	r6, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    2db4:	4439      	add	r1, r7
    2db6:	4459      	add	r1, fp
		t2 = Sigma0(a) + Maj(a, b, c);
    2db8:	ea04 0e06 	and.w	lr, r4, r6
    2dbc:	ea84 0b06 	eor.w	fp, r4, r6
		h = g; g = f; f = e; e = d + t1;
    2dc0:	9e01      	ldr	r6, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
    2dc2:	ea4f 3773 	mov.w	r7, r3, ror #13
		h = g; g = f; f = e; e = d + t1;
    2dc6:	440e      	add	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
    2dc8:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    2dcc:	ea0b 0b03 	and.w	fp, fp, r3
    2dd0:	ea8b 0b0e 	eor.w	fp, fp, lr
		h = g; g = f; f = e; e = d + t1;
    2dd4:	46b0      	mov	r8, r6
		t2 = Sigma0(a) + Maj(a, b, c);
    2dd6:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    2dda:	9e00      	ldr	r6, [sp, #0]
    2ddc:	445f      	add	r7, fp
	for ( ; i < 64; ++i) {
    2dde:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
    2de2:	46e3      	mov	fp, ip
		d = c; c = b; b = a; a = t1 + t2;
    2de4:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    2de6:	9601      	str	r6, [sp, #4]
    2de8:	d123      	bne.n	2e32 <compress+0x1b6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    2dea:	9e03      	ldr	r6, [sp, #12]
    2dec:	440e      	add	r6, r1
    2dee:	9904      	ldr	r1, [sp, #16]
    2df0:	6006      	str	r6, [r0, #0]
    2df2:	4419      	add	r1, r3
    2df4:	9b05      	ldr	r3, [sp, #20]
    2df6:	6041      	str	r1, [r0, #4]
    2df8:	4423      	add	r3, r4
    2dfa:	9900      	ldr	r1, [sp, #0]
    2dfc:	6083      	str	r3, [r0, #8]
    2dfe:	9b06      	ldr	r3, [sp, #24]
    2e00:	440b      	add	r3, r1
    2e02:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    2e04:	9b07      	ldr	r3, [sp, #28]
    2e06:	4443      	add	r3, r8
    2e08:	6103      	str	r3, [r0, #16]
    2e0a:	9b08      	ldr	r3, [sp, #32]
    2e0c:	442b      	add	r3, r5
    2e0e:	6143      	str	r3, [r0, #20]
    2e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e12:	4413      	add	r3, r2
    2e14:	6183      	str	r3, [r0, #24]
    2e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2e18:	4463      	add	r3, ip
    2e1a:	61c3      	str	r3, [r0, #28]
}
    2e1c:	b01d      	add	sp, #116	; 0x74
    2e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e22:	9900      	ldr	r1, [sp, #0]
    2e24:	46e3      	mov	fp, ip
    2e26:	e9cd 4100 	strd	r4, r1, [sp]
    2e2a:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    2e2c:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    2e2e:	462a      	mov	r2, r5
    2e30:	e745      	b.n	2cbe <compress+0x42>
    2e32:	4694      	mov	ip, r2
    2e34:	9400      	str	r4, [sp, #0]
    2e36:	462a      	mov	r2, r5
    2e38:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    2e3a:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    2e3c:	460b      	mov	r3, r1
    2e3e:	e773      	b.n	2d28 <compress+0xac>
    2e40:	00010614 	.word	0x00010614
    2e44:	000105d4 	.word	0x000105d4

00002e48 <tc_sha256_init>:
{
    2e48:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    2e4a:	4604      	mov	r4, r0
    2e4c:	b1c8      	cbz	r0, 2e82 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    2e4e:	2270      	movs	r2, #112	; 0x70
    2e50:	2100      	movs	r1, #0
    2e52:	f009 fefc 	bl	cc4e <_set>
	s->iv[1] = 0xbb67ae85;
    2e56:	4b0b      	ldr	r3, [pc, #44]	; (2e84 <tc_sha256_init+0x3c>)
    2e58:	4a0b      	ldr	r2, [pc, #44]	; (2e88 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    2e5a:	490c      	ldr	r1, [pc, #48]	; (2e8c <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    2e5c:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    2e60:	4b0b      	ldr	r3, [pc, #44]	; (2e90 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    2e62:	480c      	ldr	r0, [pc, #48]	; (2e94 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    2e64:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    2e68:	4b0b      	ldr	r3, [pc, #44]	; (2e98 <tc_sha256_init+0x50>)
    2e6a:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    2e6e:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    2e70:	4b0a      	ldr	r3, [pc, #40]	; (2e9c <tc_sha256_init+0x54>)
    2e72:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    2e74:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    2e78:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    2e7c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    2e80:	61e3      	str	r3, [r4, #28]
}
    2e82:	bd10      	pop	{r4, pc}
    2e84:	bb67ae85 	.word	0xbb67ae85
    2e88:	6a09e667 	.word	0x6a09e667
    2e8c:	3c6ef372 	.word	0x3c6ef372
    2e90:	a54ff53a 	.word	0xa54ff53a
    2e94:	510e527f 	.word	0x510e527f
    2e98:	9b05688c 	.word	0x9b05688c
    2e9c:	1f83d9ab 	.word	0x1f83d9ab

00002ea0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2ea0:	4a0a      	ldr	r2, [pc, #40]	; (2ecc <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2ea2:	490b      	ldr	r1, [pc, #44]	; (2ed0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2ea4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2ea6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2ea8:	67d8      	str	r0, [r3, #124]	; 0x7c
	_current->arch.swap_return_value = _k_neg_eagain;
    2eaa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2eae:	4909      	ldr	r1, [pc, #36]	; (2ed4 <arch_swap+0x34>)
    2eb0:	684b      	ldr	r3, [r1, #4]
    2eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2eb6:	604b      	str	r3, [r1, #4]
    2eb8:	2300      	movs	r3, #0
    2eba:	f383 8811 	msr	BASEPRI, r3
    2ebe:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2ec2:	6893      	ldr	r3, [r2, #8]
}
    2ec4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    2ec8:	4770      	bx	lr
    2eca:	bf00      	nop
    2ecc:	200018f4 	.word	0x200018f4
    2ed0:	00010bf0 	.word	0x00010bf0
    2ed4:	e000ed00 	.word	0xe000ed00

00002ed8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2ed8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2eda:	2b00      	cmp	r3, #0
    2edc:	db08      	blt.n	2ef0 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ede:	2201      	movs	r2, #1
    2ee0:	f000 001f 	and.w	r0, r0, #31
    2ee4:	fa02 f000 	lsl.w	r0, r2, r0
    2ee8:	4a02      	ldr	r2, [pc, #8]	; (2ef4 <arch_irq_enable+0x1c>)
    2eea:	095b      	lsrs	r3, r3, #5
    2eec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2ef0:	4770      	bx	lr
    2ef2:	bf00      	nop
    2ef4:	e000e100 	.word	0xe000e100

00002ef8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2ef8:	4b05      	ldr	r3, [pc, #20]	; (2f10 <arch_irq_is_enabled+0x18>)
    2efa:	0942      	lsrs	r2, r0, #5
    2efc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f00:	2301      	movs	r3, #1
    2f02:	f000 001f 	and.w	r0, r0, #31
    2f06:	fa03 f000 	lsl.w	r0, r3, r0
}
    2f0a:	4010      	ands	r0, r2
    2f0c:	4770      	bx	lr
    2f0e:	bf00      	nop
    2f10:	e000e100 	.word	0xe000e100

00002f14 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2f14:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2f16:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    2f18:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f1c:	bfac      	ite	ge
    2f1e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f22:	4b06      	ldrlt	r3, [pc, #24]	; (2f3c <z_arm_irq_priority_set+0x28>)
    2f24:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2f28:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f2a:	bfab      	itete	ge
    2f2c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f30:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f34:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f38:	5419      	strblt	r1, [r3, r0]
}
    2f3a:	4770      	bx	lr
    2f3c:	e000ed14 	.word	0xe000ed14

00002f40 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2f40:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2f44:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2f46:	490b      	ldr	r1, [pc, #44]	; (2f74 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    2f48:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2f4c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    2f4e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    2f52:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2f56:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2f58:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    2f5c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2f64:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2f68:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2f6a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2f6c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    2f6e:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2f70:	4770      	bx	lr
    2f72:	bf00      	nop
    2f74:	0000be23 	.word	0x0000be23

00002f78 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2f78:	4604      	mov	r4, r0
    2f7a:	b508      	push	{r3, lr}
    2f7c:	460e      	mov	r6, r1
    2f7e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    2f80:	f000 fb72 	bl	3668 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2f84:	4b08      	ldr	r3, [pc, #32]	; (2fa8 <arch_switch_to_main_thread+0x30>)
    2f86:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2f88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    2f8a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2f8e:	4628      	mov	r0, r5
    2f90:	f386 8809 	msr	PSP, r6
    2f94:	2100      	movs	r1, #0
    2f96:	b663      	cpsie	if
    2f98:	f381 8811 	msr	BASEPRI, r1
    2f9c:	f3bf 8f6f 	isb	sy
    2fa0:	2200      	movs	r2, #0
    2fa2:	2300      	movs	r3, #0
    2fa4:	f008 ff3d 	bl	be22 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2fa8:	200018f4 	.word	0x200018f4

00002fac <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2fac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2fae:	4606      	mov	r6, r0

	if (esf != NULL) {
    2fb0:	460c      	mov	r4, r1
    2fb2:	b301      	cbz	r1, 2ff6 <z_arm_fatal_error+0x4a>
    2fb4:	4b13      	ldr	r3, [pc, #76]	; (3004 <z_arm_fatal_error+0x58>)
    2fb6:	4d14      	ldr	r5, [pc, #80]	; (3008 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2fb8:	4814      	ldr	r0, [pc, #80]	; (300c <z_arm_fatal_error+0x60>)
    2fba:	1aed      	subs	r5, r5, r3
    2fbc:	08ed      	lsrs	r5, r5, #3
    2fbe:	01ad      	lsls	r5, r5, #6
    2fc0:	f045 0501 	orr.w	r5, r5, #1
    2fc4:	f8ad 5000 	strh.w	r5, [sp]
    2fc8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    2fcc:	6809      	ldr	r1, [r1, #0]
    2fce:	f009 fac4 	bl	c55a <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2fd2:	f8ad 5000 	strh.w	r5, [sp]
    2fd6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    2fda:	68e1      	ldr	r1, [r4, #12]
    2fdc:	480c      	ldr	r0, [pc, #48]	; (3010 <z_arm_fatal_error+0x64>)
    2fde:	f009 fabc 	bl	c55a <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2fe2:	462a      	mov	r2, r5
    2fe4:	69e1      	ldr	r1, [r4, #28]
    2fe6:	480b      	ldr	r0, [pc, #44]	; (3014 <z_arm_fatal_error+0x68>)
    2fe8:	f009 fa8a 	bl	c500 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2fec:	462a      	mov	r2, r5
    2fee:	69a1      	ldr	r1, [r4, #24]
    2ff0:	4809      	ldr	r0, [pc, #36]	; (3018 <z_arm_fatal_error+0x6c>)
    2ff2:	f009 fa85 	bl	c500 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2ff6:	4621      	mov	r1, r4
    2ff8:	4630      	mov	r0, r6
}
    2ffa:	b002      	add	sp, #8
    2ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    3000:	f007 b9ea 	b.w	a3d8 <z_fatal_error>
    3004:	000102f8 	.word	0x000102f8
    3008:	00010398 	.word	0x00010398
    300c:	00011544 	.word	0x00011544
    3010:	00011573 	.word	0x00011573
    3014:	000115a2 	.word	0x000115a2
    3018:	000115b1 	.word	0x000115b1

0000301c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    301c:	4a0e      	ldr	r2, [pc, #56]	; (3058 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    301e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3020:	4b0e      	ldr	r3, [pc, #56]	; (305c <z_arm_prep_c+0x40>)
    3022:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3026:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3028:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    302c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3030:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3034:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    303c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3040:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3044:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3048:	f007 fa58 	bl	a4fc <z_bss_zero>
	z_data_copy();
    304c:	f008 f9c8 	bl	b3e0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3050:	f000 fadc 	bl	360c <z_arm_interrupt_init>
	z_cstart();
    3054:	f007 fa76 	bl	a544 <z_cstart>
    3058:	00000000 	.word	0x00000000
    305c:	e000ed00 	.word	0xe000ed00

00003060 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3060:	4913      	ldr	r1, [pc, #76]	; (30b0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3062:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3064:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    3068:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    306a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    306e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3072:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3074:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3078:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    307c:	4f0d      	ldr	r7, [pc, #52]	; (30b4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    307e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3082:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    3084:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3086:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3088:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    308a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    308c:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    308e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3092:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    3096:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    309a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    309e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    30a2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    30a4:	f00a f9c0 	bl	d428 <configure_builtin_stack_guard>
    pop {r2, lr}
    30a8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    30ac:	4770      	bx	lr
    30ae:	0000      	.short	0x0000
    ldr r1, =_kernel
    30b0:	200018f4 	.word	0x200018f4
    ldr v4, =_SCS_ICSR
    30b4:	e000ed04 	.word	0xe000ed04

000030b8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    30b8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    30bc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    30be:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    30c2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    30c6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    30c8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    30cc:	2902      	cmp	r1, #2
    beq _oops
    30ce:	d0ff      	beq.n	30d0 <_oops>

000030d0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    30d0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    30d2:	f00a f9ad 	bl	d430 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    30d6:	bd01      	pop	{r0, pc}

000030d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    30d8:	4901      	ldr	r1, [pc, #4]	; (30e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    30da:	2210      	movs	r2, #16
	str	r2, [r1]
    30dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    30de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    30e0:	e000ed10 	.word	0xe000ed10

000030e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    30e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    30e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    30e8:	f380 8811 	msr	BASEPRI, r0
	isb
    30ec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    30f0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    30f4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    30f6:	b662      	cpsie	i
	isb
    30f8:	f3bf 8f6f 	isb	sy

	bx	lr
    30fc:	4770      	bx	lr
    30fe:	bf00      	nop

00003100 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3100:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3102:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3104:	f381 8811 	msr	BASEPRI, r1

	wfe
    3108:	bf20      	wfe

	msr	BASEPRI, r0
    310a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    310e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3110:	4770      	bx	lr
    3112:	bf00      	nop

00003114 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3114:	bf30      	wfi
    b z_SysNmiOnReset
    3116:	f7ff bffd 	b.w	3114 <z_SysNmiOnReset>
    311a:	bf00      	nop

0000311c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    311c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    311e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3120:	4a0b      	ldr	r2, [pc, #44]	; (3150 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3122:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    3124:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3126:	bf1e      	ittt	ne
	movne	r1, #0
    3128:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    312a:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    312c:	f00c fa63 	blne	f5f6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3130:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3132:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3136:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    313a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    313e:	4905      	ldr	r1, [pc, #20]	; (3154 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3140:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3142:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3144:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3146:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    314a:	4903      	ldr	r1, [pc, #12]	; (3158 <_isr_wrapper+0x3c>)
	bx r1
    314c:	4708      	bx	r1
    314e:	0000      	.short	0x0000
	ldr r2, =_kernel
    3150:	200018f4 	.word	0x200018f4
	ldr r1, =_sw_isr_table
    3154:	00010094 	.word	0x00010094
	ldr r1, =z_arm_int_exit
    3158:	000031a1 	.word	0x000031a1

0000315c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    315c:	f009 f97e 	bl	c45c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3160:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3162:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3166:	4808      	ldr	r0, [pc, #32]	; (3188 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3168:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    316c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    316e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3172:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3176:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3178:	4308      	orrs	r0, r1
    msr CONTROL, r0
    317a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    317e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3182:	f7ff ff4b 	bl	301c <z_arm_prep_c>
    3186:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    3188:	20004388 	.word	0x20004388

0000318c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    318c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3190:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3194:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3196:	4672      	mov	r2, lr
	bl z_arm_fault
    3198:	f000 f94e 	bl	3438 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    319c:	bd01      	pop	{r0, pc}
    319e:	bf00      	nop

000031a0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    31a0:	4b04      	ldr	r3, [pc, #16]	; (31b4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    31a2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    31a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    31a6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    31a8:	d003      	beq.n	31b2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    31aa:	4903      	ldr	r1, [pc, #12]	; (31b8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    31ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    31b0:	600a      	str	r2, [r1, #0]

000031b2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    31b2:	4770      	bx	lr
	ldr r3, =_kernel
    31b4:	200018f4 	.word	0x200018f4
	ldr r1, =_SCS_ICSR
    31b8:	e000ed04 	.word	0xe000ed04

000031bc <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    31bc:	b570      	push	{r4, r5, r6, lr}
    31be:	4b28      	ldr	r3, [pc, #160]	; (3260 <usage_fault.isra.0+0xa4>)
    31c0:	4c28      	ldr	r4, [pc, #160]	; (3264 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    31c2:	4d29      	ldr	r5, [pc, #164]	; (3268 <usage_fault.isra.0+0xac>)
    31c4:	1ae4      	subs	r4, r4, r3
    31c6:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
    31c8:	01a4      	lsls	r4, r4, #6
    31ca:	f044 0601 	orr.w	r6, r4, #1
    31ce:	4631      	mov	r1, r6
    31d0:	4826      	ldr	r0, [pc, #152]	; (326c <usage_fault.isra.0+0xb0>)
    31d2:	f009 f988 	bl	c4e6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    31d6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    31d8:	0193      	lsls	r3, r2, #6
    31da:	d503      	bpl.n	31e4 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    31dc:	4631      	mov	r1, r6
    31de:	4824      	ldr	r0, [pc, #144]	; (3270 <usage_fault.isra.0+0xb4>)
    31e0:	f009 f981 	bl	c4e6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    31e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    31e6:	01dd      	lsls	r5, r3, #7
    31e8:	d504      	bpl.n	31f4 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    31ea:	4822      	ldr	r0, [pc, #136]	; (3274 <usage_fault.isra.0+0xb8>)
    31ec:	f044 0101 	orr.w	r1, r4, #1
    31f0:	f009 f979 	bl	c4e6 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    31f4:	4d1c      	ldr	r5, [pc, #112]	; (3268 <usage_fault.isra.0+0xac>)
    31f6:	6aae      	ldr	r6, [r5, #40]	; 0x28
    31f8:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
    31fc:	d005      	beq.n	320a <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    31fe:	481e      	ldr	r0, [pc, #120]	; (3278 <usage_fault.isra.0+0xbc>)
    3200:	f044 0101 	orr.w	r1, r4, #1
    3204:	f009 f96f 	bl	c4e6 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    3208:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    320a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    320c:	0318      	lsls	r0, r3, #12
    320e:	d504      	bpl.n	321a <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
    3210:	481a      	ldr	r0, [pc, #104]	; (327c <usage_fault.isra.0+0xc0>)
    3212:	f044 0101 	orr.w	r1, r4, #1
    3216:	f009 f966 	bl	c4e6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    321a:	4d13      	ldr	r5, [pc, #76]	; (3268 <usage_fault.isra.0+0xac>)
    321c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    321e:	0351      	lsls	r1, r2, #13
    3220:	d504      	bpl.n	322c <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3222:	4817      	ldr	r0, [pc, #92]	; (3280 <usage_fault.isra.0+0xc4>)
    3224:	f044 0101 	orr.w	r1, r4, #1
    3228:	f009 f95d 	bl	c4e6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    322c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    322e:	039a      	lsls	r2, r3, #14
    3230:	d504      	bpl.n	323c <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3232:	4814      	ldr	r0, [pc, #80]	; (3284 <usage_fault.isra.0+0xc8>)
    3234:	f044 0101 	orr.w	r1, r4, #1
    3238:	f009 f955 	bl	c4e6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    323c:	4d0a      	ldr	r5, [pc, #40]	; (3268 <usage_fault.isra.0+0xac>)
    323e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3240:	03db      	lsls	r3, r3, #15
    3242:	d504      	bpl.n	324e <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3244:	4810      	ldr	r0, [pc, #64]	; (3288 <usage_fault.isra.0+0xcc>)
    3246:	f044 0101 	orr.w	r1, r4, #1
    324a:	f009 f94c 	bl	c4e6 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    324e:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    3250:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3252:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3256:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    325a:	62ab      	str	r3, [r5, #40]	; 0x28
}
    325c:	bd70      	pop	{r4, r5, r6, pc}
    325e:	bf00      	nop
    3260:	000102f8 	.word	0x000102f8
    3264:	00010398 	.word	0x00010398
    3268:	e000ed00 	.word	0xe000ed00
    326c:	000115df 	.word	0x000115df
    3270:	000115f7 	.word	0x000115f7
    3274:	0001160a 	.word	0x0001160a
    3278:	00011624 	.word	0x00011624
    327c:	0001164e 	.word	0x0001164e
    3280:	0001166c 	.word	0x0001166c
    3284:	00011691 	.word	0x00011691
    3288:	000116ab 	.word	0x000116ab

0000328c <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3290:	4b28      	ldr	r3, [pc, #160]	; (3334 <mem_manage_fault.isra.0+0xa8>)
    3292:	4c29      	ldr	r4, [pc, #164]	; (3338 <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3294:	4d29      	ldr	r5, [pc, #164]	; (333c <mem_manage_fault.isra.0+0xb0>)
    3296:	1ae4      	subs	r4, r4, r3
    3298:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    329a:	01a4      	lsls	r4, r4, #6
    329c:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    32a0:	4607      	mov	r7, r0
    32a2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    32a4:	4826      	ldr	r0, [pc, #152]	; (3340 <mem_manage_fault.isra.0+0xb4>)
    32a6:	4641      	mov	r1, r8
    32a8:	f009 f91d 	bl	c4e6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    32ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    32ae:	06d0      	lsls	r0, r2, #27
    32b0:	d503      	bpl.n	32ba <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    32b2:	4641      	mov	r1, r8
    32b4:	4823      	ldr	r0, [pc, #140]	; (3344 <mem_manage_fault.isra.0+0xb8>)
    32b6:	f009 f916 	bl	c4e6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    32ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    32bc:	0719      	lsls	r1, r3, #28
    32be:	d504      	bpl.n	32ca <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    32c0:	4821      	ldr	r0, [pc, #132]	; (3348 <mem_manage_fault.isra.0+0xbc>)
    32c2:	f044 0101 	orr.w	r1, r4, #1
    32c6:	f009 f90e 	bl	c4e6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    32ca:	4d1c      	ldr	r5, [pc, #112]	; (333c <mem_manage_fault.isra.0+0xb0>)
    32cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    32ce:	079a      	lsls	r2, r3, #30
    32d0:	d512      	bpl.n	32f8 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    32d2:	f044 0801 	orr.w	r8, r4, #1
    32d6:	4641      	mov	r1, r8
    32d8:	481c      	ldr	r0, [pc, #112]	; (334c <mem_manage_fault.isra.0+0xc0>)
    32da:	f009 f904 	bl	c4e6 <log_0>
		uint32_t temp = SCB->MMFAR;
    32de:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    32e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    32e2:	061b      	lsls	r3, r3, #24
    32e4:	d508      	bpl.n	32f8 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    32e6:	4642      	mov	r2, r8
    32e8:	4819      	ldr	r0, [pc, #100]	; (3350 <mem_manage_fault.isra.0+0xc4>)
    32ea:	f009 f909 	bl	c500 <log_1>
			if (from_hard_fault) {
    32ee:	b11f      	cbz	r7, 32f8 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    32f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    32f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    32f6:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    32f8:	4d10      	ldr	r5, [pc, #64]	; (333c <mem_manage_fault.isra.0+0xb0>)
    32fa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    32fc:	07d0      	lsls	r0, r2, #31
    32fe:	d504      	bpl.n	330a <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    3300:	4814      	ldr	r0, [pc, #80]	; (3354 <mem_manage_fault.isra.0+0xc8>)
    3302:	f044 0101 	orr.w	r1, r4, #1
    3306:	f009 f8ee 	bl	c4e6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    330a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    330c:	0699      	lsls	r1, r3, #26
    330e:	d504      	bpl.n	331a <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    3310:	4811      	ldr	r0, [pc, #68]	; (3358 <mem_manage_fault.isra.0+0xcc>)
    3312:	f044 0101 	orr.w	r1, r4, #1
    3316:	f009 f8e6 	bl	c4e6 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    331a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    331c:	4b07      	ldr	r3, [pc, #28]	; (333c <mem_manage_fault.isra.0+0xb0>)
    331e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3320:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3322:	bf58      	it	pl
    3324:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3328:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    332c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    332e:	7030      	strb	r0, [r6, #0]
}
    3330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3334:	000102f8 	.word	0x000102f8
    3338:	00010398 	.word	0x00010398
    333c:	e000ed00 	.word	0xe000ed00
    3340:	000116d6 	.word	0x000116d6
    3344:	000116ec 	.word	0x000116ec
    3348:	0001171f 	.word	0x0001171f
    334c:	00011732 	.word	0x00011732
    3350:	0001174a 	.word	0x0001174a
    3354:	00011760 	.word	0x00011760
    3358:	0001177f 	.word	0x0001177f

0000335c <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    335c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3360:	4b2a      	ldr	r3, [pc, #168]	; (340c <bus_fault.isra.0+0xb0>)
    3362:	4c2b      	ldr	r4, [pc, #172]	; (3410 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3364:	4d2b      	ldr	r5, [pc, #172]	; (3414 <bus_fault.isra.0+0xb8>)
    3366:	1ae4      	subs	r4, r4, r3
    3368:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    336a:	01a4      	lsls	r4, r4, #6
    336c:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3370:	4607      	mov	r7, r0
    3372:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3374:	4828      	ldr	r0, [pc, #160]	; (3418 <bus_fault.isra.0+0xbc>)
    3376:	4641      	mov	r1, r8
    3378:	f009 f8b5 	bl	c4e6 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    337c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    337e:	04d1      	lsls	r1, r2, #19
    3380:	d503      	bpl.n	338a <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    3382:	4641      	mov	r1, r8
    3384:	4825      	ldr	r0, [pc, #148]	; (341c <bus_fault.isra.0+0xc0>)
    3386:	f009 f8ae 	bl	c4e6 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    338a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    338c:	051a      	lsls	r2, r3, #20
    338e:	d504      	bpl.n	339a <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    3390:	4823      	ldr	r0, [pc, #140]	; (3420 <bus_fault.isra.0+0xc4>)
    3392:	f044 0101 	orr.w	r1, r4, #1
    3396:	f009 f8a6 	bl	c4e6 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    339a:	4d1e      	ldr	r5, [pc, #120]	; (3414 <bus_fault.isra.0+0xb8>)
    339c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    339e:	059b      	lsls	r3, r3, #22
    33a0:	d512      	bpl.n	33c8 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    33a2:	f044 0801 	orr.w	r8, r4, #1
    33a6:	4641      	mov	r1, r8
    33a8:	481e      	ldr	r0, [pc, #120]	; (3424 <bus_fault.isra.0+0xc8>)
    33aa:	f009 f89c 	bl	c4e6 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    33ae:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    33b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    33b2:	0418      	lsls	r0, r3, #16
    33b4:	d508      	bpl.n	33c8 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    33b6:	4642      	mov	r2, r8
    33b8:	481b      	ldr	r0, [pc, #108]	; (3428 <bus_fault.isra.0+0xcc>)
    33ba:	f009 f8a1 	bl	c500 <log_1>
			if (from_hard_fault) {
    33be:	b11f      	cbz	r7, 33c8 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    33c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    33c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    33c6:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    33c8:	4d12      	ldr	r5, [pc, #72]	; (3414 <bus_fault.isra.0+0xb8>)
    33ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    33cc:	0559      	lsls	r1, r3, #21
    33ce:	d504      	bpl.n	33da <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    33d0:	4816      	ldr	r0, [pc, #88]	; (342c <bus_fault.isra.0+0xd0>)
    33d2:	f044 0101 	orr.w	r1, r4, #1
    33d6:	f009 f886 	bl	c4e6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    33da:	6aab      	ldr	r3, [r5, #40]	; 0x28
    33dc:	05da      	lsls	r2, r3, #23
    33de:	d50d      	bpl.n	33fc <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    33e0:	4813      	ldr	r0, [pc, #76]	; (3430 <bus_fault.isra.0+0xd4>)
    33e2:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    33e6:	f009 f87e 	bl	c4e6 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    33ea:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    33ec:	4a09      	ldr	r2, [pc, #36]	; (3414 <bus_fault.isra.0+0xb8>)
    33ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
    33f0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    33f4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    33f6:	7030      	strb	r0, [r6, #0]
}
    33f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    33fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    33fe:	049b      	lsls	r3, r3, #18
    3400:	d5f3      	bpl.n	33ea <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3402:	480c      	ldr	r0, [pc, #48]	; (3434 <bus_fault.isra.0+0xd8>)
    3404:	f044 0101 	orr.w	r1, r4, #1
    3408:	e7ed      	b.n	33e6 <bus_fault.isra.0+0x8a>
    340a:	bf00      	nop
    340c:	000102f8 	.word	0x000102f8
    3410:	00010398 	.word	0x00010398
    3414:	e000ed00 	.word	0xe000ed00
    3418:	000117ae 	.word	0x000117ae
    341c:	000117c4 	.word	0x000117c4
    3420:	0001171f 	.word	0x0001171f
    3424:	000117d5 	.word	0x000117d5
    3428:	000117ee 	.word	0x000117ee
    342c:	00011803 	.word	0x00011803
    3430:	0001181e 	.word	0x0001181e
    3434:	0001177f 	.word	0x0001177f

00003438 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    343c:	4b56      	ldr	r3, [pc, #344]	; (3598 <z_arm_fault+0x160>)
{
    343e:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3440:	685e      	ldr	r6, [r3, #4]
    3442:	2500      	movs	r5, #0
{
    3444:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3446:	f3c6 0408 	ubfx	r4, r6, #0, #9
    344a:	f385 8811 	msr	BASEPRI, r5
    344e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3452:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3456:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    345a:	d10d      	bne.n	3478 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    345c:	f002 030c 	and.w	r3, r2, #12
    3460:	2b08      	cmp	r3, #8
    3462:	d10b      	bne.n	347c <z_arm_fault+0x44>
    3464:	494d      	ldr	r1, [pc, #308]	; (359c <z_arm_fault+0x164>)
    3466:	4b4e      	ldr	r3, [pc, #312]	; (35a0 <z_arm_fault+0x168>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3468:	484e      	ldr	r0, [pc, #312]	; (35a4 <z_arm_fault+0x16c>)
    346a:	1ac9      	subs	r1, r1, r3
    346c:	08c9      	lsrs	r1, r1, #3
    346e:	0189      	lsls	r1, r1, #6
    3470:	f041 0101 	orr.w	r1, r1, #1
    3474:	f009 f837 	bl	c4e6 <log_0>
		return NULL;
    3478:	462f      	mov	r7, r5
    347a:	e003      	b.n	3484 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    347c:	0712      	lsls	r2, r2, #28
    347e:	d401      	bmi.n	3484 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    3480:	4607      	mov	r7, r0
			*nested_exc = true;
    3482:	2501      	movs	r5, #1
	*recoverable = false;
    3484:	2300      	movs	r3, #0
    3486:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    348a:	1ee3      	subs	r3, r4, #3
    348c:	2b09      	cmp	r3, #9
    348e:	d86a      	bhi.n	3566 <z_arm_fault+0x12e>
    3490:	e8df f003 	tbb	[pc, r3]
    3494:	3c5c5805 	.word	0x3c5c5805
    3498:	69696969 	.word	0x69696969
    349c:	6069      	.short	0x6069
	*recoverable = false;
    349e:	f04f 0800 	mov.w	r8, #0
    34a2:	4b3f      	ldr	r3, [pc, #252]	; (35a0 <z_arm_fault+0x168>)
    34a4:	4e3d      	ldr	r6, [pc, #244]	; (359c <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    34a6:	4840      	ldr	r0, [pc, #256]	; (35a8 <z_arm_fault+0x170>)
    34a8:	1af6      	subs	r6, r6, r3
    34aa:	08f6      	lsrs	r6, r6, #3
    34ac:	01b6      	lsls	r6, r6, #6
    34ae:	f046 0601 	orr.w	r6, r6, #1
    34b2:	4631      	mov	r1, r6
    34b4:	f009 f817 	bl	c4e6 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    34b8:	4b37      	ldr	r3, [pc, #220]	; (3598 <z_arm_fault+0x160>)
	*recoverable = false;
    34ba:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    34be:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    34c0:	f014 0402 	ands.w	r4, r4, #2
    34c4:	d005      	beq.n	34d2 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    34c6:	4631      	mov	r1, r6
    34c8:	4838      	ldr	r0, [pc, #224]	; (35ac <z_arm_fault+0x174>)
	PR_FAULT_INFO(
    34ca:	f009 f80c 	bl	c4e6 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    34ce:	2400      	movs	r4, #0
}
    34d0:	e01f      	b.n	3512 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    34d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    34d4:	005b      	lsls	r3, r3, #1
    34d6:	d51c      	bpl.n	3512 <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    34d8:	4631      	mov	r1, r6
    34da:	4835      	ldr	r0, [pc, #212]	; (35b0 <z_arm_fault+0x178>)
    34dc:	f009 f803 	bl	c4e6 <log_0>
		if (SCB_MMFSR != 0) {
    34e0:	4b34      	ldr	r3, [pc, #208]	; (35b4 <z_arm_fault+0x17c>)
    34e2:	781b      	ldrb	r3, [r3, #0]
    34e4:	b12b      	cbz	r3, 34f2 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    34e6:	2001      	movs	r0, #1
    34e8:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    34ec:	f7ff fece 	bl	328c <mem_manage_fault.isra.0>
    34f0:	e00e      	b.n	3510 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    34f2:	4b31      	ldr	r3, [pc, #196]	; (35b8 <z_arm_fault+0x180>)
    34f4:	781b      	ldrb	r3, [r3, #0]
    34f6:	b12b      	cbz	r3, 3504 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    34f8:	2001      	movs	r0, #1
    34fa:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    34fe:	f7ff ff2d 	bl	335c <bus_fault.isra.0>
    3502:	e005      	b.n	3510 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    3504:	4b2d      	ldr	r3, [pc, #180]	; (35bc <z_arm_fault+0x184>)
    3506:	881b      	ldrh	r3, [r3, #0]
    3508:	b29b      	uxth	r3, r3
    350a:	b113      	cbz	r3, 3512 <z_arm_fault+0xda>
			reason = usage_fault(esf);
    350c:	f7ff fe56 	bl	31bc <usage_fault.isra.0>
    3510:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3512:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3516:	b993      	cbnz	r3, 353e <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3518:	2220      	movs	r2, #32
    351a:	4639      	mov	r1, r7
    351c:	a802      	add	r0, sp, #8
    351e:	f00a f80c 	bl	d53a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3522:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3524:	b39d      	cbz	r5, 358e <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3526:	f3c3 0208 	ubfx	r2, r3, #0, #9
    352a:	b922      	cbnz	r2, 3536 <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    352c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3530:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3534:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3536:	4620      	mov	r0, r4
    3538:	a902      	add	r1, sp, #8
    353a:	f7ff fd37 	bl	2fac <z_arm_fatal_error>
}
    353e:	b00a      	add	sp, #40	; 0x28
    3540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    3544:	2000      	movs	r0, #0
    3546:	f10d 0107 	add.w	r1, sp, #7
    354a:	e7cf      	b.n	34ec <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    354c:	2000      	movs	r0, #0
    354e:	f10d 0107 	add.w	r1, sp, #7
    3552:	e7d4      	b.n	34fe <z_arm_fault+0xc6>
    3554:	4911      	ldr	r1, [pc, #68]	; (359c <z_arm_fault+0x164>)
    3556:	4b12      	ldr	r3, [pc, #72]	; (35a0 <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    3558:	4819      	ldr	r0, [pc, #100]	; (35c0 <z_arm_fault+0x188>)
    355a:	1ac9      	subs	r1, r1, r3
    355c:	08c9      	lsrs	r1, r1, #3
    355e:	0189      	lsls	r1, r1, #6
    3560:	f041 0101 	orr.w	r1, r1, #1
    3564:	e7b1      	b.n	34ca <z_arm_fault+0x92>
    3566:	4a0e      	ldr	r2, [pc, #56]	; (35a0 <z_arm_fault+0x168>)
    3568:	4b0c      	ldr	r3, [pc, #48]	; (359c <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** %s %d) *****",
    356a:	4816      	ldr	r0, [pc, #88]	; (35c4 <z_arm_fault+0x18c>)
    356c:	1a9b      	subs	r3, r3, r2
    356e:	08db      	lsrs	r3, r3, #3
    3570:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    3574:	ea4f 1383 	mov.w	r3, r3, lsl #6
    3578:	4913      	ldr	r1, [pc, #76]	; (35c8 <z_arm_fault+0x190>)
    357a:	f043 0301 	orr.w	r3, r3, #1
    357e:	bf18      	it	ne
    3580:	4601      	movne	r1, r0
    3582:	f1a4 0210 	sub.w	r2, r4, #16
    3586:	4811      	ldr	r0, [pc, #68]	; (35cc <z_arm_fault+0x194>)
    3588:	f008 ffce 	bl	c528 <log_2>
    358c:	e79f      	b.n	34ce <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    358e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3592:	f023 0301 	bic.w	r3, r3, #1
    3596:	e7cd      	b.n	3534 <z_arm_fault+0xfc>
    3598:	e000ed00 	.word	0xe000ed00
    359c:	00010398 	.word	0x00010398
    35a0:	000102f8 	.word	0x000102f8
    35a4:	00011836 	.word	0x00011836
    35a8:	00011861 	.word	0x00011861
    35ac:	00011878 	.word	0x00011878
    35b0:	00011899 	.word	0x00011899
    35b4:	e000ed28 	.word	0xe000ed28
    35b8:	e000ed29 	.word	0xe000ed29
    35bc:	e000ed2a 	.word	0xe000ed2a
    35c0:	000118b8 	.word	0x000118b8
    35c4:	00011903 	.word	0x00011903
    35c8:	000118ee 	.word	0x000118ee
    35cc:	0001191c 	.word	0x0001191c

000035d0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    35d0:	4b04      	ldr	r3, [pc, #16]	; (35e4 <z_arm_fault_init+0x14>)
    35d2:	695a      	ldr	r2, [r3, #20]
    35d4:	f042 0210 	orr.w	r2, r2, #16
    35d8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    35da:	695a      	ldr	r2, [r3, #20]
    35dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    35e0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    35e2:	4770      	bx	lr
    35e4:	e000ed00 	.word	0xe000ed00

000035e8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    35e8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    35ec:	4905      	ldr	r1, [pc, #20]	; (3604 <sys_arch_reboot+0x1c>)
    35ee:	4b06      	ldr	r3, [pc, #24]	; (3608 <sys_arch_reboot+0x20>)
    35f0:	68ca      	ldr	r2, [r1, #12]
    35f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    35f6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    35f8:	60cb      	str	r3, [r1, #12]
    35fa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    35fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3600:	e7fd      	b.n	35fe <sys_arch_reboot+0x16>
    3602:	bf00      	nop
    3604:	e000ed00 	.word	0xe000ed00
    3608:	05fa0004 	.word	0x05fa0004

0000360c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    360c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    360e:	2120      	movs	r1, #32
    3610:	4803      	ldr	r0, [pc, #12]	; (3620 <z_arm_interrupt_init+0x14>)
    3612:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3614:	3301      	adds	r3, #1
    3616:	2b45      	cmp	r3, #69	; 0x45
    3618:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    361c:	d1f9      	bne.n	3612 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    361e:	4770      	bx	lr
    3620:	e000e100 	.word	0xe000e100

00003624 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3624:	b508      	push	{r3, lr}
	if (_current == thread) {
    3626:	4b0e      	ldr	r3, [pc, #56]	; (3660 <z_impl_k_thread_abort+0x3c>)
    3628:	689b      	ldr	r3, [r3, #8]
    362a:	4283      	cmp	r3, r0
    362c:	d107      	bne.n	363e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    362e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3632:	b193      	cbz	r3, 365a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3634:	4a0b      	ldr	r2, [pc, #44]	; (3664 <z_impl_k_thread_abort+0x40>)
    3636:	6853      	ldr	r3, [r2, #4]
    3638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    363c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    363e:	f007 fb51 	bl	ace4 <z_thread_single_abort>
	__asm__ volatile(
    3642:	f04f 0320 	mov.w	r3, #32
    3646:	f3ef 8011 	mrs	r0, BASEPRI
    364a:	f383 8811 	msr	BASEPRI, r3
    364e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    3652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    3656:	f00c b955 	b.w	f904 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    365a:	f007 fe3b 	bl	b2d4 <z_self_abort>
    365e:	bf00      	nop
    3660:	200018f4 	.word	0x200018f4
    3664:	e000ed00 	.word	0xe000ed00

00003668 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    366a:	4c09      	ldr	r4, [pc, #36]	; (3690 <z_arm_configure_static_mpu_regions+0x28>)
    366c:	4a09      	ldr	r2, [pc, #36]	; (3694 <z_arm_configure_static_mpu_regions+0x2c>)
    366e:	4623      	mov	r3, r4
    3670:	2101      	movs	r1, #1
    3672:	4809      	ldr	r0, [pc, #36]	; (3698 <z_arm_configure_static_mpu_regions+0x30>)
    3674:	f000 f938 	bl	38e8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    3678:	2300      	movs	r3, #0
    367a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    367c:	4b07      	ldr	r3, [pc, #28]	; (369c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    367e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    3680:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    3682:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    3684:	9301      	str	r3, [sp, #4]
    3686:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    3688:	f000 f938 	bl	38fc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    368c:	b004      	add	sp, #16
    368e:	bd10      	pop	{r4, pc}
    3690:	20070000 	.word	0x20070000
    3694:	20000000 	.word	0x20000000
    3698:	000106d4 	.word	0x000106d4
    369c:	20000698 	.word	0x20000698

000036a0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    36a0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    36a2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    36a4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    36a6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    36aa:	f004 031f 	and.w	r3, r4, #31
    36ae:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    36b0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    36b2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    36b4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    36b8:	4904      	ldr	r1, [pc, #16]	; (36cc <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    36ba:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    36be:	f043 0301 	orr.w	r3, r3, #1
    36c2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    36c4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    36c6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    36c8:	bd10      	pop	{r4, pc}
    36ca:	bf00      	nop
    36cc:	e000ed90 	.word	0xe000ed90

000036d0 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    36d0:	2807      	cmp	r0, #7
{
    36d2:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
    36d4:	d90d      	bls.n	36f2 <region_allocate_and_init+0x22>
    36d6:	4b08      	ldr	r3, [pc, #32]	; (36f8 <region_allocate_and_init+0x28>)
    36d8:	4a08      	ldr	r2, [pc, #32]	; (36fc <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    36da:	4601      	mov	r1, r0
    36dc:	1ad2      	subs	r2, r2, r3
    36de:	08d2      	lsrs	r2, r2, #3
    36e0:	0192      	lsls	r2, r2, #6
    36e2:	4807      	ldr	r0, [pc, #28]	; (3700 <region_allocate_and_init+0x30>)
    36e4:	f042 0201 	orr.w	r2, r2, #1
    36e8:	f008 ff0a 	bl	c500 <log_1>
		return -EINVAL;
    36ec:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    36f0:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    36f2:	f7ff ffd5 	bl	36a0 <region_init>
	return index;
    36f6:	e7fb      	b.n	36f0 <region_allocate_and_init+0x20>
    36f8:	000102f8 	.word	0x000102f8
    36fc:	00010380 	.word	0x00010380
    3700:	00011933 	.word	0x00011933

00003704 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    3704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3708:	4689      	mov	r9, r1
    370a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    370c:	4606      	mov	r6, r0
    370e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    3712:	4d54      	ldr	r5, [pc, #336]	; (3864 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    3714:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    3716:	45c8      	cmp	r8, r9
    3718:	da33      	bge.n	3782 <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
    371a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    371e:	f1ba 0f00 	cmp.w	sl, #0
    3722:	d04d      	beq.n	37c0 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
    3724:	f1ba 0f1f 	cmp.w	sl, #31
    3728:	d91e      	bls.n	3768 <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
    372a:	f01a 0f1f 	tst.w	sl, #31
    372e:	d11b      	bne.n	3768 <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
    3730:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    3734:	f01b 0f1f 	tst.w	fp, #31
    3738:	d116      	bne.n	3768 <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    373a:	4658      	mov	r0, fp
    373c:	f009 fe9c 	bl	d478 <arm_cmse_mpu_region_get>
    3740:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    3742:	eb0a 000b 	add.w	r0, sl, fp
    3746:	3801      	subs	r0, #1
    3748:	f009 fe96 	bl	d478 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    374c:	4287      	cmp	r7, r0
    374e:	d01c      	beq.n	378a <mpu_configure_regions_and_partition.constprop.0+0x86>
	return -EINVAL;
    3750:	f06f 0715 	mvn.w	r7, #21
    3754:	4a44      	ldr	r2, [pc, #272]	; (3868 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    3756:	4b45      	ldr	r3, [pc, #276]	; (386c <mpu_configure_regions_and_partition.constprop.0+0x168>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    3758:	4639      	mov	r1, r7
    375a:	1ad2      	subs	r2, r2, r3
    375c:	08d2      	lsrs	r2, r2, #3
    375e:	0192      	lsls	r2, r2, #6
    3760:	4843      	ldr	r0, [pc, #268]	; (3870 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    3762:	f042 0201 	orr.w	r2, r2, #1
    3766:	e008      	b.n	377a <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3768:	4641      	mov	r1, r8
    376a:	4a3f      	ldr	r2, [pc, #252]	; (3868 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    376c:	4b3f      	ldr	r3, [pc, #252]	; (386c <mpu_configure_regions_and_partition.constprop.0+0x168>)
    376e:	4841      	ldr	r0, [pc, #260]	; (3874 <mpu_configure_regions_and_partition.constprop.0+0x170>)
    3770:	1ad2      	subs	r2, r2, r3
    3772:	08d2      	lsrs	r2, r2, #3
    3774:	0192      	lsls	r2, r2, #6
    3776:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
    377a:	f008 fec1 	bl	c500 <log_1>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    377e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    3782:	4620      	mov	r0, r4
    3784:	b005      	add	sp, #20
    3786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    378a:	f117 0f16 	cmn.w	r7, #22
    378e:	d0e1      	beq.n	3754 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    3790:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    3792:	42bb      	cmp	r3, r7
    3794:	dbde      	blt.n	3754 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    3796:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    3798:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    379a:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    379c:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    379e:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    37a2:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    37a6:	e9d6 3200 	ldrd	r3, r2, [r6]
    37aa:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    37ac:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    37ae:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    37b2:	d11a      	bne.n	37ea <mpu_configure_regions_and_partition.constprop.0+0xe6>
    37b4:	45d3      	cmp	fp, sl
    37b6:	d107      	bne.n	37c8 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, &regions[i]);
    37b8:	4631      	mov	r1, r6
    37ba:	b2f8      	uxtb	r0, r7
    37bc:	f009 fe43 	bl	d446 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    37c0:	f108 0801 	add.w	r8, r8, #1
    37c4:	360c      	adds	r6, #12
    37c6:	e7a6      	b.n	3716 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    37c8:	4631      	mov	r1, r6
	MPU->RNR = index;
    37ca:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    37cc:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    37ce:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    37d2:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    37d6:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    37d8:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    37da:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    37dc:	f009 fe33 	bl	d446 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    37e0:	f110 0f16 	cmn.w	r0, #22
    37e4:	d0cb      	beq.n	377e <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
    37e6:	1c44      	adds	r4, r0, #1
    37e8:	e7ea      	b.n	37c0 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
    37ea:	3b01      	subs	r3, #1
    37ec:	45d3      	cmp	fp, sl
    37ee:	b2e0      	uxtb	r0, r4
    37f0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    37f4:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
    37f6:	d106      	bne.n	3806 <mpu_configure_regions_and_partition.constprop.0+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    37f8:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    37fa:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    37fc:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    3800:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3802:	612b      	str	r3, [r5, #16]
			reg_index =
    3804:	e7ea      	b.n	37dc <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3806:	6929      	ldr	r1, [r5, #16]
    3808:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    380c:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    380e:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    3810:	4631      	mov	r1, r6
    3812:	f009 fe18 	bl	d446 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    3816:	f110 0f16 	cmn.w	r0, #22
    381a:	d0b0      	beq.n	377e <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
    381c:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
    381e:	68ea      	ldr	r2, [r5, #12]
    3820:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    3824:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    3828:	f362 0304 	bfi	r3, r2, #0, #5
    382c:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    3830:	692b      	ldr	r3, [r5, #16]
    3832:	f89d 2008 	ldrb.w	r2, [sp, #8]
    3836:	085b      	lsrs	r3, r3, #1
    3838:	f363 1247 	bfi	r2, r3, #5, #3
    383c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    3840:	e9d6 3200 	ldrd	r3, r2, [r6]
    3844:	4413      	add	r3, r2
    3846:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    3848:	f023 031f 	bic.w	r3, r3, #31
    384c:	445b      	add	r3, fp
    384e:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
    3852:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    3854:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
    3858:	4669      	mov	r1, sp
    385a:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
    385c:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
    385e:	f7ff ff37 	bl	36d0 <region_allocate_and_init>
    3862:	e7bd      	b.n	37e0 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    3864:	e000ed90 	.word	0xe000ed90
    3868:	00010380 	.word	0x00010380
    386c:	000102f8 	.word	0x000102f8
    3870:	0001197c 	.word	0x0001197c
    3874:	00011959 	.word	0x00011959

00003878 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3878:	2205      	movs	r2, #5
    387a:	4b03      	ldr	r3, [pc, #12]	; (3888 <arm_core_mpu_enable+0x10>)
    387c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    387e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3882:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3886:	4770      	bx	lr
    3888:	e000ed90 	.word	0xe000ed90

0000388c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    388c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3890:	2200      	movs	r2, #0
    3892:	4b01      	ldr	r3, [pc, #4]	; (3898 <arm_core_mpu_disable+0xc>)
    3894:	605a      	str	r2, [r3, #4]
}
    3896:	4770      	bx	lr
    3898:	e000ed90 	.word	0xe000ed90

0000389c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    389c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    389e:	4c0e      	ldr	r4, [pc, #56]	; (38d8 <arm_mpu_init+0x3c>)
    38a0:	6825      	ldr	r5, [r4, #0]
    38a2:	2d08      	cmp	r5, #8
    38a4:	d814      	bhi.n	38d0 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    38a6:	f7ff fff1 	bl	388c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    38aa:	2000      	movs	r0, #0
	MPU->MAIR0 =
    38ac:	4b0b      	ldr	r3, [pc, #44]	; (38dc <arm_mpu_init+0x40>)
    38ae:	4a0c      	ldr	r2, [pc, #48]	; (38e0 <arm_mpu_init+0x44>)
    38b0:	631a      	str	r2, [r3, #48]	; 0x30
    38b2:	4285      	cmp	r5, r0
    38b4:	d105      	bne.n	38c2 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    38b6:	4b0b      	ldr	r3, [pc, #44]	; (38e4 <arm_mpu_init+0x48>)
    38b8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    38ba:	f7ff ffdd 	bl	3878 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    38be:	2000      	movs	r0, #0
}
    38c0:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    38c2:	6861      	ldr	r1, [r4, #4]
    38c4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    38c8:	f7ff feea 	bl	36a0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    38cc:	3001      	adds	r0, #1
    38ce:	e7f0      	b.n	38b2 <arm_mpu_init+0x16>
		return -1;
    38d0:	f04f 30ff 	mov.w	r0, #4294967295
    38d4:	e7f4      	b.n	38c0 <arm_mpu_init+0x24>
    38d6:	bf00      	nop
    38d8:	000106e0 	.word	0x000106e0
    38dc:	e000ed90 	.word	0xe000ed90
    38e0:	0044ffaa 	.word	0x0044ffaa
    38e4:	20002963 	.word	0x20002963

000038e8 <arm_core_mpu_configure_static_mpu_regions>:
{
    38e8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    38ea:	4c03      	ldr	r4, [pc, #12]	; (38f8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    38ec:	7822      	ldrb	r2, [r4, #0]
    38ee:	f7ff ff09 	bl	3704 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    38f2:	7020      	strb	r0, [r4, #0]
}
    38f4:	bd10      	pop	{r4, pc}
    38f6:	bf00      	nop
    38f8:	20002963 	.word	0x20002963

000038fc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    38fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3900:	4d26      	ldr	r5, [pc, #152]	; (399c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    3902:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    3904:	4606      	mov	r6, r0
    3906:	f04f 0800 	mov.w	r8, #0
    390a:	46ab      	mov	fp, r5
	MPU->RNR = index;
    390c:	4f24      	ldr	r7, [pc, #144]	; (39a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    390e:	45d0      	cmp	r8, sl
    3910:	da1b      	bge.n	394a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    3912:	f8d6 9004 	ldr.w	r9, [r6, #4]
    3916:	f1b9 0f00 	cmp.w	r9, #0
    391a:	d039      	beq.n	3990 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    391c:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    391e:	4608      	mov	r0, r1
    3920:	9101      	str	r1, [sp, #4]
    3922:	f009 fda9 	bl	d478 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    3926:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3928:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    392a:	eb09 0001 	add.w	r0, r9, r1
    392e:	3801      	subs	r0, #1
    3930:	f009 fda2 	bl	d478 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    3934:	4284      	cmp	r4, r0
    3936:	f04f 0214 	mov.w	r2, #20
    393a:	4b1a      	ldr	r3, [pc, #104]	; (39a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    393c:	d008      	beq.n	3950 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    393e:	f06f 0315 	mvn.w	r3, #21
    3942:	fb02 f808 	mul.w	r8, r2, r8
    3946:	f84b 3008 	str.w	r3, [fp, r8]
}
    394a:	b003      	add	sp, #12
    394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    3950:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    3954:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    3956:	d0f8      	beq.n	394a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    3958:	7819      	ldrb	r1, [r3, #0]
    395a:	42a1      	cmp	r1, r4
    395c:	ddf5      	ble.n	394a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    395e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    3962:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    3964:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    3966:	68fc      	ldr	r4, [r7, #12]
    3968:	f100 0108 	add.w	r1, r0, #8
    396c:	7b00      	ldrb	r0, [r0, #12]
    396e:	f364 0004 	bfi	r0, r4, #0, #5
    3972:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    3974:	6938      	ldr	r0, [r7, #16]
    3976:	790c      	ldrb	r4, [r1, #4]
    3978:	0840      	lsrs	r0, r0, #1
    397a:	f360 1447 	bfi	r4, r0, #5, #3
    397e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    3980:	68f9      	ldr	r1, [r7, #12]
    3982:	f021 011f 	bic.w	r1, r1, #31
    3986:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    3988:	6939      	ldr	r1, [r7, #16]
    398a:	f021 011f 	bic.w	r1, r1, #31
    398e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    3990:	f108 0801 	add.w	r8, r8, #1
    3994:	3514      	adds	r5, #20
    3996:	360c      	adds	r6, #12
    3998:	e7b9      	b.n	390e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    399a:	bf00      	nop
    399c:	2000169c 	.word	0x2000169c
    39a0:	e000ed90 	.word	0xe000ed90
    39a4:	20002963 	.word	0x20002963

000039a8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    39a8:	4b01      	ldr	r3, [pc, #4]	; (39b0 <__stdout_hook_install+0x8>)
    39aa:	6018      	str	r0, [r3, #0]
}
    39ac:	4770      	bx	lr
    39ae:	bf00      	nop
    39b0:	20000214 	.word	0x20000214

000039b4 <remoteproc_mgr_boot>:
{
	/* UARTE */
	/* Assign specific GPIOs that will be used to get UARTE from
	 * nRF5340 Network MCU.
	 */
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    39b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    39b8:	4a09      	ldr	r2, [pc, #36]	; (39e0 <remoteproc_mgr_boot+0x2c>)
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    39ba:	2000      	movs	r0, #0
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    39bc:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_RX] =
    39c0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RTS] =
    39c4:	f842 3cd4 	str.w	r3, [r2, #-212]
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_CTS] =
    39c8:	f842 3cd8 	str.w	r3, [r2, #-216]
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    39cc:	2210      	movs	r2, #16
    39ce:	4b05      	ldr	r3, [pc, #20]	; (39e4 <remoteproc_mgr_boot+0x30>)
    39d0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    39d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    39d8:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    39dc:	4770      	bx	lr
    39de:	bf00      	nop
    39e0:	50842800 	.word	0x50842800
    39e4:	50003000 	.word	0x50003000

000039e8 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    39e8:	4b0e      	ldr	r3, [pc, #56]	; (3a24 <bt_hex_real+0x3c>)
    39ea:	2940      	cmp	r1, #64	; 0x40
    39ec:	bf28      	it	cs
    39ee:	2140      	movcs	r1, #64	; 0x40
{
    39f0:	b570      	push	{r4, r5, r6, lr}
    39f2:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    39f4:	4c0c      	ldr	r4, [pc, #48]	; (3a28 <bt_hex_real+0x40>)
    39f6:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    39f8:	42b0      	cmp	r0, r6
    39fa:	f103 0302 	add.w	r3, r3, #2
    39fe:	d104      	bne.n	3a0a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    3a00:	2300      	movs	r3, #0
    3a02:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    3a06:	4807      	ldr	r0, [pc, #28]	; (3a24 <bt_hex_real+0x3c>)
    3a08:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    3a0a:	7802      	ldrb	r2, [r0, #0]
    3a0c:	0912      	lsrs	r2, r2, #4
    3a0e:	5ca2      	ldrb	r2, [r4, r2]
    3a10:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    3a14:	f810 2b01 	ldrb.w	r2, [r0], #1
    3a18:	f002 020f 	and.w	r2, r2, #15
    3a1c:	5ca2      	ldrb	r2, [r4, r2]
    3a1e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    3a22:	e7e9      	b.n	39f8 <bt_hex_real+0x10>
    3a24:	20002964 	.word	0x20002964
    3a28:	00011a0d 	.word	0x00011a0d

00003a2c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    3a2c:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    3a2e:	7803      	ldrb	r3, [r0, #0]
    3a30:	b08b      	sub	sp, #44	; 0x2c
    3a32:	4604      	mov	r4, r0
    3a34:	ad07      	add	r5, sp, #28
    3a36:	2b03      	cmp	r3, #3
    3a38:	d821      	bhi.n	3a7e <bt_addr_le_str_real+0x52>
    3a3a:	e8df f003 	tbb	[pc, r3]
    3a3e:	1a02      	.short	0x1a02
    3a40:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    3a42:	4912      	ldr	r1, [pc, #72]	; (3a8c <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    3a44:	4628      	mov	r0, r5
    3a46:	f009 fd20 	bl	d48a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3a4a:	7863      	ldrb	r3, [r4, #1]
    3a4c:	211e      	movs	r1, #30
    3a4e:	9304      	str	r3, [sp, #16]
    3a50:	78a3      	ldrb	r3, [r4, #2]
    3a52:	4a0f      	ldr	r2, [pc, #60]	; (3a90 <bt_addr_le_str_real+0x64>)
    3a54:	9303      	str	r3, [sp, #12]
    3a56:	78e3      	ldrb	r3, [r4, #3]
    3a58:	9505      	str	r5, [sp, #20]
    3a5a:	9302      	str	r3, [sp, #8]
    3a5c:	7923      	ldrb	r3, [r4, #4]
    3a5e:	480d      	ldr	r0, [pc, #52]	; (3a94 <bt_addr_le_str_real+0x68>)
    3a60:	9301      	str	r3, [sp, #4]
    3a62:	7963      	ldrb	r3, [r4, #5]
    3a64:	9300      	str	r3, [sp, #0]
    3a66:	79a3      	ldrb	r3, [r4, #6]
    3a68:	f008 f923 	bl	bcb2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    3a6c:	4809      	ldr	r0, [pc, #36]	; (3a94 <bt_addr_le_str_real+0x68>)
    3a6e:	b00b      	add	sp, #44	; 0x2c
    3a70:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    3a72:	4909      	ldr	r1, [pc, #36]	; (3a98 <bt_addr_le_str_real+0x6c>)
    3a74:	e7e6      	b.n	3a44 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    3a76:	4909      	ldr	r1, [pc, #36]	; (3a9c <bt_addr_le_str_real+0x70>)
    3a78:	e7e4      	b.n	3a44 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    3a7a:	4909      	ldr	r1, [pc, #36]	; (3aa0 <bt_addr_le_str_real+0x74>)
    3a7c:	e7e2      	b.n	3a44 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3a7e:	210a      	movs	r1, #10
    3a80:	4628      	mov	r0, r5
    3a82:	4a08      	ldr	r2, [pc, #32]	; (3aa4 <bt_addr_le_str_real+0x78>)
    3a84:	f008 f915 	bl	bcb2 <snprintk>
		break;
    3a88:	e7df      	b.n	3a4a <bt_addr_le_str_real+0x1e>
    3a8a:	bf00      	nop
    3a8c:	000119c8 	.word	0x000119c8
    3a90:	000119ea 	.word	0x000119ea
    3a94:	200029e5 	.word	0x200029e5
    3a98:	000119cf 	.word	0x000119cf
    3a9c:	000119d6 	.word	0x000119d6
    3aa0:	000119e0 	.word	0x000119e0
    3aa4:	00012808 	.word	0x00012808

00003aa8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3aa8:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    3aaa:	7802      	ldrb	r2, [r0, #0]
{
    3aac:	4604      	mov	r4, r0
	switch (src->type) {
    3aae:	2a01      	cmp	r2, #1
{
    3ab0:	460b      	mov	r3, r1
	switch (src->type) {
    3ab2:	d016      	beq.n	3ae2 <uuid_to_uuid128+0x3a>
    3ab4:	2a02      	cmp	r2, #2
    3ab6:	d02c      	beq.n	3b12 <uuid_to_uuid128+0x6a>
    3ab8:	b98a      	cbnz	r2, 3ade <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    3aba:	460d      	mov	r5, r1
    3abc:	4a18      	ldr	r2, [pc, #96]	; (3b20 <uuid_to_uuid128+0x78>)
    3abe:	f102 0710 	add.w	r7, r2, #16
    3ac2:	462e      	mov	r6, r5
    3ac4:	6810      	ldr	r0, [r2, #0]
    3ac6:	6851      	ldr	r1, [r2, #4]
    3ac8:	3208      	adds	r2, #8
    3aca:	c603      	stmia	r6!, {r0, r1}
    3acc:	42ba      	cmp	r2, r7
    3ace:	4635      	mov	r5, r6
    3ad0:	d1f7      	bne.n	3ac2 <uuid_to_uuid128+0x1a>
    3ad2:	7812      	ldrb	r2, [r2, #0]
    3ad4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    3ad6:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    3ad8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    3ada:	0a12      	lsrs	r2, r2, #8
    3adc:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    3ade:	bcf0      	pop	{r4, r5, r6, r7}
    3ae0:	4770      	bx	lr
		*dst = uuid128_base;
    3ae2:	460d      	mov	r5, r1
    3ae4:	4a0e      	ldr	r2, [pc, #56]	; (3b20 <uuid_to_uuid128+0x78>)
    3ae6:	f102 0710 	add.w	r7, r2, #16
    3aea:	462e      	mov	r6, r5
    3aec:	6810      	ldr	r0, [r2, #0]
    3aee:	6851      	ldr	r1, [r2, #4]
    3af0:	3208      	adds	r2, #8
    3af2:	c603      	stmia	r6!, {r0, r1}
    3af4:	42ba      	cmp	r2, r7
    3af6:	4635      	mov	r5, r6
    3af8:	d1f7      	bne.n	3aea <uuid_to_uuid128+0x42>
    3afa:	7812      	ldrb	r2, [r2, #0]
    3afc:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    3afe:	6862      	ldr	r2, [r4, #4]
    3b00:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    3b04:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    3b06:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    3b08:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    3b0a:	0a12      	lsrs	r2, r2, #8
    3b0c:	7399      	strb	r1, [r3, #14]
    3b0e:	741a      	strb	r2, [r3, #16]
}
    3b10:	e7e5      	b.n	3ade <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    3b12:	4601      	mov	r1, r0
}
    3b14:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    3b16:	2211      	movs	r2, #17
    3b18:	4618      	mov	r0, r3
    3b1a:	f009 bd0e 	b.w	d53a <memcpy>
    3b1e:	bf00      	nop
    3b20:	00011a1e 	.word	0x00011a1e

00003b24 <bt_buf_get_rx>:
	if (IS_ENABLED(CONFIG_BT_ISO) && type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    3b24:	2801      	cmp	r0, #1
{
    3b26:	b538      	push	{r3, r4, r5, lr}
    3b28:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    3b2a:	bf0c      	ite	eq
    3b2c:	4806      	ldreq	r0, [pc, #24]	; (3b48 <bt_buf_get_rx+0x24>)
    3b2e:	4807      	ldrne	r0, [pc, #28]	; (3b4c <bt_buf_get_rx+0x28>)
    3b30:	f00a ff7b 	bl	ea2a <net_buf_alloc_fixed>
    3b34:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    3b36:	b120      	cbz	r0, 3b42 <bt_buf_get_rx+0x1e>
	net_buf_simple_reserve(&buf->b, reserve);
    3b38:	2101      	movs	r1, #1
    3b3a:	3008      	adds	r0, #8
    3b3c:	f00a ff9a 	bl	ea74 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    3b40:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3b42:	4620      	mov	r0, r4
    3b44:	bd38      	pop	{r3, r4, r5, pc}
    3b46:	bf00      	nop
    3b48:	20000644 	.word	0x20000644
    3b4c:	2000057c 	.word	0x2000057c

00003b50 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    3b50:	4602      	mov	r2, r0
    3b52:	460b      	mov	r3, r1
    3b54:	b570      	push	{r4, r5, r6, lr}
    3b56:	f04f 0120 	mov.w	r1, #32
    3b5a:	f3ef 8511 	mrs	r5, BASEPRI
    3b5e:	f381 8811 	msr	BASEPRI, r1
    3b62:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    3b66:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    3b68:	490b      	ldr	r1, [pc, #44]	; (3b98 <bt_buf_get_cmd_complete+0x48>)
    3b6a:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    3b6e:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    3b72:	f385 8811 	msr	BASEPRI, r5
    3b76:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3b7a:	b924      	cbnz	r4, 3b86 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    3b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3b80:	2001      	movs	r0, #1
    3b82:	f7ff bfcf 	b.w	3b24 <bt_buf_get_rx>
    3b86:	2101      	movs	r1, #1
		buf->len = 0U;
    3b88:	81a0      	strh	r0, [r4, #12]
    3b8a:	7521      	strb	r1, [r4, #20]
    3b8c:	f104 0008 	add.w	r0, r4, #8
    3b90:	f00a ff70 	bl	ea74 <net_buf_simple_reserve>
}
    3b94:	4620      	mov	r0, r4
    3b96:	bd70      	pop	{r4, r5, r6, pc}
    3b98:	20000000 	.word	0x20000000

00003b9c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    3b9c:	b570      	push	{r4, r5, r6, lr}
    3b9e:	4604      	mov	r4, r0
	switch (evt) {
    3ba0:	2c0f      	cmp	r4, #15
{
    3ba2:	460d      	mov	r5, r1
    3ba4:	4610      	mov	r0, r2
    3ba6:	4619      	mov	r1, r3
	switch (evt) {
    3ba8:	d805      	bhi.n	3bb6 <bt_buf_get_evt+0x1a>
    3baa:	2c0d      	cmp	r4, #13
    3bac:	d912      	bls.n	3bd4 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    3bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    3bb2:	f7ff bfcd 	b.w	3b50 <bt_buf_get_cmd_complete>
	switch (evt) {
    3bb6:	2c13      	cmp	r4, #19
    3bb8:	d10c      	bne.n	3bd4 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    3bba:	480b      	ldr	r0, [pc, #44]	; (3be8 <bt_buf_get_evt+0x4c>)
    3bbc:	f00a ff35 	bl	ea2a <net_buf_alloc_fixed>
			if (buf) {
    3bc0:	4604      	mov	r4, r0
    3bc2:	b128      	cbz	r0, 3bd0 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    3bc4:	2101      	movs	r1, #1
    3bc6:	3008      	adds	r0, #8
    3bc8:	f00a ff54 	bl	ea74 <net_buf_simple_reserve>
    3bcc:	2301      	movs	r3, #1
    3bce:	7523      	strb	r3, [r4, #20]
}
    3bd0:	4620      	mov	r0, r4
    3bd2:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    3bd4:	4602      	mov	r2, r0
    3bd6:	460b      	mov	r3, r1
		if (discardable) {
    3bd8:	b10d      	cbz	r5, 3bde <bt_buf_get_evt+0x42>
    3bda:	4804      	ldr	r0, [pc, #16]	; (3bec <bt_buf_get_evt+0x50>)
    3bdc:	e7ee      	b.n	3bbc <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3bde:	2001      	movs	r0, #1
}
    3be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3be4:	f7ff bf9e 	b.w	3b24 <bt_buf_get_rx>
    3be8:	2000066c 	.word	0x2000066c
    3bec:	200005cc 	.word	0x200005cc

00003bf0 <ver_str>:
	return 1U;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
    3bf0:	b570      	push	{r4, r5, r6, lr}
    3bf2:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    3bf4:	466c      	mov	r4, sp
{
    3bf6:	4606      	mov	r6, r0
	const char * const str[] = {
    3bf8:	4d09      	ldr	r5, [pc, #36]	; (3c20 <ver_str+0x30>)
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
    3bfa:	2e0b      	cmp	r6, #11
	const char * const str[] = {
    3bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3c04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return str[ver];
    3c0c:	bf9d      	ittte	ls
    3c0e:	ab0c      	addls	r3, sp, #48	; 0x30
    3c10:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
    3c14:	f856 0c30 	ldrls.w	r0, [r6, #-48]
	}

	return "unknown";
    3c18:	4802      	ldrhi	r0, [pc, #8]	; (3c24 <ver_str+0x34>)
}
    3c1a:	b00c      	add	sp, #48	; 0x30
    3c1c:	bd70      	pop	{r4, r5, r6, pc}
    3c1e:	bf00      	nop
    3c20:	00010420 	.word	0x00010420
    3c24:	00011b21 	.word	0x00011b21

00003c28 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    3c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c2a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    3c2c:	2500      	movs	r5, #0
    3c2e:	4f09      	ldr	r7, [pc, #36]	; (3c54 <id_find+0x2c>)
    3c30:	79fb      	ldrb	r3, [r7, #7]
    3c32:	b2ec      	uxtb	r4, r5
    3c34:	42a3      	cmp	r3, r4
    3c36:	d802      	bhi.n	3c3e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    3c38:	f06f 0401 	mvn.w	r4, #1
    3c3c:	e008      	b.n	3c50 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    3c3e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    3c42:	4630      	mov	r0, r6
    3c44:	4439      	add	r1, r7
    3c46:	f009 fd50 	bl	d6ea <bt_addr_le_cmp>
    3c4a:	3501      	adds	r5, #1
    3c4c:	2800      	cmp	r0, #0
    3c4e:	d1ef      	bne.n	3c30 <id_find+0x8>
}
    3c50:	4620      	mov	r0, r4
    3c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c54:	20000000 	.word	0x20000000

00003c58 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    3c58:	6843      	ldr	r3, [r0, #4]
{
    3c5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3c5c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    3c5e:	0558      	lsls	r0, r3, #21
    3c60:	d502      	bpl.n	3c68 <valid_adv_param+0x10>
		return false;
    3c62:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    3c64:	b003      	add	sp, #12
    3c66:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3c68:	6922      	ldr	r2, [r4, #16]
    3c6a:	b10a      	cbz	r2, 3c70 <valid_adv_param+0x18>
    3c6c:	07d9      	lsls	r1, r3, #31
    3c6e:	d5f8      	bpl.n	3c62 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    3c70:	4d1a      	ldr	r5, [pc, #104]	; (3cdc <valid_adv_param+0x84>)
    3c72:	7820      	ldrb	r0, [r4, #0]
    3c74:	79eb      	ldrb	r3, [r5, #7]
    3c76:	4283      	cmp	r3, r0
    3c78:	d9f3      	bls.n	3c62 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    3c7a:	2300      	movs	r3, #0
    3c7c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3c80:	4669      	mov	r1, sp
    3c82:	4428      	add	r0, r5
    3c84:	9300      	str	r3, [sp, #0]
    3c86:	f8cd 3003 	str.w	r3, [sp, #3]
    3c8a:	f009 fd2e 	bl	d6ea <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    3c8e:	2800      	cmp	r0, #0
    3c90:	d0e7      	beq.n	3c62 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3c92:	6860      	ldr	r0, [r4, #4]
    3c94:	07c2      	lsls	r2, r0, #31
    3c96:	d406      	bmi.n	3ca6 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3c98:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3c9c:	2b08      	cmp	r3, #8
    3c9e:	d802      	bhi.n	3ca6 <valid_adv_param+0x4e>
    3ca0:	68a3      	ldr	r3, [r4, #8]
    3ca2:	2b9f      	cmp	r3, #159	; 0x9f
    3ca4:	d9dd      	bls.n	3c62 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    3ca6:	f010 0f30 	tst.w	r0, #48	; 0x30
    3caa:	d002      	beq.n	3cb2 <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    3cac:	6923      	ldr	r3, [r4, #16]
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d0d7      	beq.n	3c62 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    3cb2:	06c3      	lsls	r3, r0, #27
    3cb4:	d401      	bmi.n	3cba <valid_adv_param+0x62>
    3cb6:	6923      	ldr	r3, [r4, #16]
    3cb8:	b943      	cbnz	r3, 3ccc <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    3cba:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    3cbe:	429a      	cmp	r2, r3
    3cc0:	d8cf      	bhi.n	3c62 <valid_adv_param+0xa>
    3cc2:	2a1f      	cmp	r2, #31
    3cc4:	d9cd      	bls.n	3c62 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    3cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    3cca:	d8ca      	bhi.n	3c62 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    3ccc:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    3cd0:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    3cd4:	bf18      	it	ne
    3cd6:	2001      	movne	r0, #1
    3cd8:	e7c4      	b.n	3c64 <valid_adv_param+0xc>
    3cda:	bf00      	nop
    3cdc:	20000000 	.word	0x20000000

00003ce0 <hci_data_buf_overflow>:
    3ce0:	4905      	ldr	r1, [pc, #20]	; (3cf8 <hci_data_buf_overflow+0x18>)
    3ce2:	4a06      	ldr	r2, [pc, #24]	; (3cfc <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    3ce4:	6883      	ldr	r3, [r0, #8]
    3ce6:	1a52      	subs	r2, r2, r1
    3ce8:	08d2      	lsrs	r2, r2, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    3cea:	0192      	lsls	r2, r2, #6
    3cec:	7819      	ldrb	r1, [r3, #0]
    3cee:	4804      	ldr	r0, [pc, #16]	; (3d00 <hci_data_buf_overflow+0x20>)
    3cf0:	f042 0202 	orr.w	r2, r2, #2
    3cf4:	f008 bc04 	b.w	c500 <log_1>
    3cf8:	000102f8 	.word	0x000102f8
    3cfc:	00010320 	.word	0x00010320
    3d00:	00011b29 	.word	0x00011b29

00003d04 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    3d04:	6883      	ldr	r3, [r0, #8]
{
    3d06:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    3d08:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    3d0a:	4620      	mov	r0, r4
    3d0c:	f002 fbd8 	bl	64c0 <bt_conn_lookup_handle>
	if (!conn) {
    3d10:	b960      	cbnz	r0, 3d2c <le_data_len_change+0x28>
    3d12:	4a08      	ldr	r2, [pc, #32]	; (3d34 <le_data_len_change+0x30>)
    3d14:	4b08      	ldr	r3, [pc, #32]	; (3d38 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3d16:	4621      	mov	r1, r4
}
    3d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d1c:	1ad2      	subs	r2, r2, r3
    3d1e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3d20:	0192      	lsls	r2, r2, #6
    3d22:	4806      	ldr	r0, [pc, #24]	; (3d3c <le_data_len_change+0x38>)
    3d24:	f042 0201 	orr.w	r2, r2, #1
    3d28:	f008 bbea 	b.w	c500 <log_1>
}
    3d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    3d30:	f009 be48 	b.w	d9c4 <bt_conn_unref>
    3d34:	00010320 	.word	0x00010320
    3d38:	000102f8 	.word	0x000102f8
    3d3c:	00011b51 	.word	0x00011b51

00003d40 <hci_disconn_complete_prio>:
{
    3d40:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    3d42:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    3d44:	781a      	ldrb	r2, [r3, #0]
    3d46:	b9da      	cbnz	r2, 3d80 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    3d48:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    3d4c:	4628      	mov	r0, r5
    3d4e:	f002 fbb7 	bl	64c0 <bt_conn_lookup_handle>
	if (!conn) {
    3d52:	4604      	mov	r4, r0
    3d54:	b960      	cbnz	r0, 3d70 <hci_disconn_complete_prio+0x30>
    3d56:	4b0b      	ldr	r3, [pc, #44]	; (3d84 <hci_disconn_complete_prio+0x44>)
    3d58:	4a0b      	ldr	r2, [pc, #44]	; (3d88 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    3d5a:	4629      	mov	r1, r5
    3d5c:	1ad2      	subs	r2, r2, r3
    3d5e:	08d2      	lsrs	r2, r2, #3
    3d60:	0192      	lsls	r2, r2, #6
    3d62:	480a      	ldr	r0, [pc, #40]	; (3d8c <hci_disconn_complete_prio+0x4c>)
    3d64:	f042 0201 	orr.w	r2, r2, #1
}
    3d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    3d6c:	f008 bbc8 	b.w	c500 <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    3d70:	2101      	movs	r1, #1
    3d72:	f002 fbb1 	bl	64d8 <bt_conn_set_state>
	bt_conn_unref(conn);
    3d76:	4620      	mov	r0, r4
}
    3d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    3d7c:	f009 be22 	b.w	d9c4 <bt_conn_unref>
}
    3d80:	bd38      	pop	{r3, r4, r5, pc}
    3d82:	bf00      	nop
    3d84:	000102f8 	.word	0x000102f8
    3d88:	00010320 	.word	0x00010320
    3d8c:	00011b75 	.word	0x00011b75

00003d90 <hci_disconn_complete>:
{
    3d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    3d92:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    3d94:	7835      	ldrb	r5, [r6, #0]
    3d96:	b9f5      	cbnz	r5, 3dd6 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    3d98:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    3d9c:	4638      	mov	r0, r7
    3d9e:	f002 fb8f 	bl	64c0 <bt_conn_lookup_handle>
	if (!conn) {
    3da2:	4604      	mov	r4, r0
    3da4:	b960      	cbnz	r0, 3dc0 <hci_disconn_complete+0x30>
    3da6:	4b0c      	ldr	r3, [pc, #48]	; (3dd8 <hci_disconn_complete+0x48>)
    3da8:	4a0c      	ldr	r2, [pc, #48]	; (3ddc <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    3daa:	4639      	mov	r1, r7
    3dac:	1ad2      	subs	r2, r2, r3
    3dae:	08d2      	lsrs	r2, r2, #3
    3db0:	0192      	lsls	r2, r2, #6
    3db2:	480b      	ldr	r0, [pc, #44]	; (3de0 <hci_disconn_complete+0x50>)
    3db4:	f042 0201 	orr.w	r2, r2, #1
}
    3db8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    3dbc:	f008 bba0 	b.w	c500 <log_1>
	conn->err = evt->reason;
    3dc0:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3dc2:	4629      	mov	r1, r5
	conn->err = evt->reason;
    3dc4:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3dc6:	f002 fb87 	bl	64d8 <bt_conn_set_state>
		bt_conn_unref(conn);
    3dca:	4620      	mov	r0, r4
	conn->handle = 0U;
    3dcc:	8025      	strh	r5, [r4, #0]
}
    3dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    3dd2:	f009 bdf7 	b.w	d9c4 <bt_conn_unref>
}
    3dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dd8:	000102f8 	.word	0x000102f8
    3ddc:	00010320 	.word	0x00010320
    3de0:	00011b75 	.word	0x00011b75

00003de4 <hci_hardware_error>:
{
    3de4:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    3de6:	2101      	movs	r1, #1
    3de8:	3008      	adds	r0, #8
    3dea:	f00a feb4 	bl	eb56 <net_buf_simple_pull_mem>
    3dee:	4b06      	ldr	r3, [pc, #24]	; (3e08 <hci_hardware_error+0x24>)
    3df0:	4a06      	ldr	r2, [pc, #24]	; (3e0c <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    3df2:	7801      	ldrb	r1, [r0, #0]
    3df4:	1ad2      	subs	r2, r2, r3
    3df6:	08d2      	lsrs	r2, r2, #3
    3df8:	0192      	lsls	r2, r2, #6
    3dfa:	4805      	ldr	r0, [pc, #20]	; (3e10 <hci_hardware_error+0x2c>)
    3dfc:	f042 0201 	orr.w	r2, r2, #1
}
    3e00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    3e04:	f008 bb7c 	b.w	c500 <log_1>
    3e08:	000102f8 	.word	0x000102f8
    3e0c:	00010320 	.word	0x00010320
    3e10:	00011b9b 	.word	0x00011b9b

00003e14 <hci_vendor_event>:
{
    3e14:	b510      	push	{r4, lr}
    3e16:	4a0a      	ldr	r2, [pc, #40]	; (3e40 <hci_vendor_event+0x2c>)
    3e18:	4c0a      	ldr	r4, [pc, #40]	; (3e44 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    3e1a:	8981      	ldrh	r1, [r0, #12]
    3e1c:	6880      	ldr	r0, [r0, #8]
    3e1e:	1aa4      	subs	r4, r4, r2
    3e20:	f7ff fde2 	bl	39e8 <bt_hex_real>
    3e24:	f7fd fa94 	bl	1350 <log_strdup>
    3e28:	08e4      	lsrs	r4, r4, #3
    3e2a:	01a4      	lsls	r4, r4, #6
    3e2c:	f044 0402 	orr.w	r4, r4, #2
    3e30:	4601      	mov	r1, r0
    3e32:	4622      	mov	r2, r4
}
    3e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    3e38:	4803      	ldr	r0, [pc, #12]	; (3e48 <hci_vendor_event+0x34>)
    3e3a:	f008 bb61 	b.w	c500 <log_1>
    3e3e:	bf00      	nop
    3e40:	000102f8 	.word	0x000102f8
    3e44:	00010320 	.word	0x00010320
    3e48:	00011bbd 	.word	0x00011bbd

00003e4c <le_conn_update_complete>:
{
    3e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    3e4e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    3e50:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    3e54:	4630      	mov	r0, r6
    3e56:	f002 fb33 	bl	64c0 <bt_conn_lookup_handle>
	if (!conn) {
    3e5a:	4604      	mov	r4, r0
    3e5c:	b960      	cbnz	r0, 3e78 <le_conn_update_complete+0x2c>
    3e5e:	4a1f      	ldr	r2, [pc, #124]	; (3edc <le_conn_update_complete+0x90>)
    3e60:	4b1f      	ldr	r3, [pc, #124]	; (3ee0 <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3e62:	4631      	mov	r1, r6
    3e64:	1ad2      	subs	r2, r2, r3
    3e66:	08d2      	lsrs	r2, r2, #3
    3e68:	0192      	lsls	r2, r2, #6
    3e6a:	481e      	ldr	r0, [pc, #120]	; (3ee4 <le_conn_update_complete+0x98>)
    3e6c:	f042 0201 	orr.w	r2, r2, #1
    3e70:	f008 fb46 	bl	c500 <log_1>
}
    3e74:	b002      	add	sp, #8
    3e76:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    3e78:	782b      	ldrb	r3, [r5, #0]
    3e7a:	b9bb      	cbnz	r3, 3eac <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3e7c:	792a      	ldrb	r2, [r5, #4]
    3e7e:	78eb      	ldrb	r3, [r5, #3]
    3e80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3e84:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3e88:	79aa      	ldrb	r2, [r5, #6]
    3e8a:	796b      	ldrb	r3, [r5, #5]
    3e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3e90:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3e94:	79eb      	ldrb	r3, [r5, #7]
    3e96:	7a2a      	ldrb	r2, [r5, #8]
    3e98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3e9c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    3ea0:	f002 f93a 	bl	6118 <notify_le_param_updated>
	bt_conn_unref(conn);
    3ea4:	4620      	mov	r0, r4
    3ea6:	f009 fd8d 	bl	d9c4 <bt_conn_unref>
    3eaa:	e7e3      	b.n	3e74 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    3eac:	2b1a      	cmp	r3, #26
    3eae:	d1f9      	bne.n	3ea4 <le_conn_update_complete+0x58>
    3eb0:	78c3      	ldrb	r3, [r0, #3]
    3eb2:	2b01      	cmp	r3, #1
    3eb4:	d1f6      	bne.n	3ea4 <le_conn_update_complete+0x58>
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3eba:	3004      	adds	r0, #4
    3ebc:	f009 fc18 	bl	d6f0 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    3ec0:	0543      	lsls	r3, r0, #21
    3ec2:	d4ef      	bmi.n	3ea4 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    3ec4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    3ec8:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    3eca:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
    3ecc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    3ed0:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    3ed2:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    3ed4:	f002 ff2a 	bl	6d2c <bt_l2cap_update_conn_param>
    3ed8:	e7e4      	b.n	3ea4 <le_conn_update_complete+0x58>
    3eda:	bf00      	nop
    3edc:	00010320 	.word	0x00010320
    3ee0:	000102f8 	.word	0x000102f8
    3ee4:	00011b51 	.word	0x00011b51

00003ee8 <hci_cmd_done>:
{
    3ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3eec:	4607      	mov	r7, r0
    3eee:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3ef0:	7990      	ldrb	r0, [r2, #6]
{
    3ef2:	4688      	mov	r8, r1
    3ef4:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3ef6:	f004 fea5 	bl	8c44 <net_buf_pool_get>
    3efa:	4e32      	ldr	r6, [pc, #200]	; (3fc4 <hci_cmd_done+0xdc>)
    3efc:	4286      	cmp	r6, r0
    3efe:	d016      	beq.n	3f2e <hci_cmd_done+0x46>
    3f00:	4b31      	ldr	r3, [pc, #196]	; (3fc8 <hci_cmd_done+0xe0>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    3f02:	79a0      	ldrb	r0, [r4, #6]
    3f04:	4d31      	ldr	r5, [pc, #196]	; (3fcc <hci_cmd_done+0xe4>)
    3f06:	9700      	str	r7, [sp, #0]
    3f08:	1aed      	subs	r5, r5, r3
    3f0a:	9001      	str	r0, [sp, #4]
    3f0c:	f004 fe9a 	bl	8c44 <net_buf_pool_get>
    3f10:	08ed      	lsrs	r5, r5, #3
    3f12:	01ad      	lsls	r5, r5, #6
    3f14:	f045 0502 	orr.w	r5, r5, #2
    3f18:	e9cd 0602 	strd	r0, r6, [sp, #8]
    3f1c:	462b      	mov	r3, r5
    3f1e:	2204      	movs	r2, #4
    3f20:	4669      	mov	r1, sp
    3f22:	482b      	ldr	r0, [pc, #172]	; (3fd0 <hci_cmd_done+0xe8>)
    3f24:	f008 fb35 	bl	c592 <log_n>
}
    3f28:	b005      	add	sp, #20
    3f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    3f2e:	4620      	mov	r0, r4
    3f30:	f004 fe90 	bl	8c54 <net_buf_id>
    3f34:	f04f 090c 	mov.w	r9, #12
    3f38:	4d26      	ldr	r5, [pc, #152]	; (3fd4 <hci_cmd_done+0xec>)
    3f3a:	fb09 5300 	mla	r3, r9, r0, r5
    3f3e:	885b      	ldrh	r3, [r3, #2]
    3f40:	42bb      	cmp	r3, r7
    3f42:	d011      	beq.n	3f68 <hci_cmd_done+0x80>
    3f44:	4b20      	ldr	r3, [pc, #128]	; (3fc8 <hci_cmd_done+0xe0>)
    3f46:	4e21      	ldr	r6, [pc, #132]	; (3fcc <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    3f48:	4620      	mov	r0, r4
    3f4a:	1af6      	subs	r6, r6, r3
    3f4c:	f004 fe82 	bl	8c54 <net_buf_id>
    3f50:	fb09 5000 	mla	r0, r9, r0, r5
    3f54:	08f6      	lsrs	r6, r6, #3
    3f56:	01b6      	lsls	r6, r6, #6
    3f58:	f046 0602 	orr.w	r6, r6, #2
    3f5c:	8842      	ldrh	r2, [r0, #2]
    3f5e:	4633      	mov	r3, r6
    3f60:	4639      	mov	r1, r7
    3f62:	481d      	ldr	r0, [pc, #116]	; (3fd8 <hci_cmd_done+0xf0>)
    3f64:	f008 fae0 	bl	c528 <log_2>
	if (cmd(buf)->state && !status) {
    3f68:	4620      	mov	r0, r4
    3f6a:	f004 fe73 	bl	8c54 <net_buf_id>
    3f6e:	260c      	movs	r6, #12
    3f70:	fb06 5000 	mla	r0, r6, r0, r5
    3f74:	6843      	ldr	r3, [r0, #4]
    3f76:	b16b      	cbz	r3, 3f94 <hci_cmd_done+0xac>
    3f78:	f1b8 0f00 	cmp.w	r8, #0
    3f7c:	d10a      	bne.n	3f94 <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    3f7e:	4620      	mov	r0, r4
    3f80:	f004 fe68 	bl	8c54 <net_buf_id>
    3f84:	fb06 5000 	mla	r0, r6, r0, r5
    3f88:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    3f8a:	7a1a      	ldrb	r2, [r3, #8]
    3f8c:	e9d3 0100 	ldrd	r0, r1, [r3]
    3f90:	f009 fbc4 	bl	d71c <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    3f94:	4620      	mov	r0, r4
    3f96:	f004 fe5d 	bl	8c54 <net_buf_id>
    3f9a:	260c      	movs	r6, #12
    3f9c:	fb06 5000 	mla	r0, r6, r0, r5
    3fa0:	6883      	ldr	r3, [r0, #8]
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d0c0      	beq.n	3f28 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    3fa6:	4620      	mov	r0, r4
    3fa8:	f004 fe54 	bl	8c54 <net_buf_id>
    3fac:	4370      	muls	r0, r6
    3fae:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    3fb2:	4620      	mov	r0, r4
    3fb4:	f004 fe4e 	bl	8c54 <net_buf_id>
    3fb8:	fb06 5500 	mla	r5, r6, r0, r5
    3fbc:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    3fbe:	f007 f867 	bl	b090 <z_impl_k_sem_give>
}
    3fc2:	e7b1      	b.n	3f28 <hci_cmd_done+0x40>
    3fc4:	2000061c 	.word	0x2000061c
    3fc8:	000102f8 	.word	0x000102f8
    3fcc:	00010320 	.word	0x00010320
    3fd0:	00011be1 	.word	0x00011be1
    3fd4:	200016b0 	.word	0x200016b0
    3fd8:	00011c16 	.word	0x00011c16

00003fdc <handle_event>:
{
    3fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3fde:	4605      	mov	r5, r0
    3fe0:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    3fe2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    3fe6:	7811      	ldrb	r1, [r2, #0]
    3fe8:	42a9      	cmp	r1, r5
    3fea:	d01a      	beq.n	4022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
	for (i = 0; i < num_handlers; i++) {
    3fec:	3208      	adds	r2, #8
    3fee:	429a      	cmp	r2, r3
    3ff0:	d1f9      	bne.n	3fe6 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    3ff2:	8986      	ldrh	r6, [r0, #12]
    3ff4:	4b16      	ldr	r3, [pc, #88]	; (4050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
    3ff6:	4c17      	ldr	r4, [pc, #92]	; (4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
    3ff8:	4631      	mov	r1, r6
    3ffa:	6880      	ldr	r0, [r0, #8]
    3ffc:	1ae4      	subs	r4, r4, r3
    3ffe:	f7ff fcf3 	bl	39e8 <bt_hex_real>
    4002:	f7fd f9a5 	bl	1350 <log_strdup>
    4006:	08e4      	lsrs	r4, r4, #3
    4008:	01a4      	lsls	r4, r4, #6
    400a:	f044 0402 	orr.w	r4, r4, #2
    400e:	4603      	mov	r3, r0
    4010:	4632      	mov	r2, r6
    4012:	4629      	mov	r1, r5
    4014:	4810      	ldr	r0, [pc, #64]	; (4058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
    4016:	f8ad 4000 	strh.w	r4, [sp]
    401a:	f008 fa9e 	bl	c55a <log_3>
}
    401e:	b002      	add	sp, #8
    4020:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    4022:	8981      	ldrh	r1, [r0, #12]
    4024:	7853      	ldrb	r3, [r2, #1]
    4026:	428b      	cmp	r3, r1
    4028:	d90d      	bls.n	4046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    402a:	4a09      	ldr	r2, [pc, #36]	; (4050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
    402c:	4b09      	ldr	r3, [pc, #36]	; (4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    402e:	480b      	ldr	r0, [pc, #44]	; (405c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
    4030:	1a9b      	subs	r3, r3, r2
    4032:	462a      	mov	r2, r5
    4034:	08db      	lsrs	r3, r3, #3
    4036:	019b      	lsls	r3, r3, #6
    4038:	f043 0301 	orr.w	r3, r3, #1
}
    403c:	b002      	add	sp, #8
    403e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4042:	f008 ba71 	b.w	c528 <log_2>
		handler->handler(buf);
    4046:	6853      	ldr	r3, [r2, #4]
}
    4048:	b002      	add	sp, #8
    404a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    404e:	4718      	bx	r3
    4050:	000102f8 	.word	0x000102f8
    4054:	00010320 	.word	0x00010320
    4058:	00011c6b 	.word	0x00011c6b
    405c:	00011c49 	.word	0x00011c49

00004060 <hci_rx_thread>:
{
    4060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4064:	4b47      	ldr	r3, [pc, #284]	; (4184 <hci_rx_thread+0x124>)
    4066:	4d48      	ldr	r5, [pc, #288]	; (4188 <hci_rx_thread+0x128>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    4068:	f8df 813c 	ldr.w	r8, [pc, #316]	; 41a8 <hci_rx_thread+0x148>
    406c:	1aed      	subs	r5, r5, r3
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    406e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 41ac <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    4072:	4f46      	ldr	r7, [pc, #280]	; (418c <hci_rx_thread+0x12c>)
    4074:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    4076:	f04f 32ff 	mov.w	r2, #4294967295
    407a:	f04f 33ff 	mov.w	r3, #4294967295
    407e:	4640      	mov	r0, r8
    4080:	f00a fcd8 	bl	ea34 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    4084:	7d01      	ldrb	r1, [r0, #20]
    4086:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    4088:	2901      	cmp	r1, #1
    408a:	d046      	beq.n	411a <hci_rx_thread+0xba>
    408c:	2903      	cmp	r1, #3
    408e:	d173      	bne.n	4178 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4090:	8983      	ldrh	r3, [r0, #12]
    4092:	2b03      	cmp	r3, #3
    4094:	d80c      	bhi.n	40b0 <hci_rx_thread+0x50>
    4096:	f240 43ac 	movw	r3, #1196	; 0x4ac
    409a:	463a      	mov	r2, r7
    409c:	493c      	ldr	r1, [pc, #240]	; (4190 <hci_rx_thread+0x130>)
    409e:	483d      	ldr	r0, [pc, #244]	; (4194 <hci_rx_thread+0x134>)
    40a0:	f007 fdfa 	bl	bc98 <printk>
    40a4:	4040      	eors	r0, r0
    40a6:	f380 8811 	msr	BASEPRI, r0
    40aa:	f04f 0003 	mov.w	r0, #3
    40ae:	df02      	svc	2
    40b0:	2104      	movs	r1, #4
    40b2:	f104 0008 	add.w	r0, r4, #8
    40b6:	f00a fd4e 	bl	eb56 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    40ba:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    40bc:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    40be:	f8b0 a000 	ldrh.w	sl, [r0]
	if (buf->len != len) {
    40c2:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    40c4:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
    40c8:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    40ca:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    40cc:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    40ce:	d009      	beq.n	40e4 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    40d0:	01ab      	lsls	r3, r5, #6
    40d2:	4831      	ldr	r0, [pc, #196]	; (4198 <hci_rx_thread+0x138>)
    40d4:	f043 0301 	orr.w	r3, r3, #1
    40d8:	f008 fa26 	bl	c528 <log_2>
			net_buf_unref(buf);
    40dc:	4620      	mov	r0, r4
    40de:	f004 fe6d 	bl	8dbc <net_buf_unref>
			break;
    40e2:	e017      	b.n	4114 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    40e4:	f002 f9ec 	bl	64c0 <bt_conn_lookup_handle>
	if (!conn) {
    40e8:	4606      	mov	r6, r0
    40ea:	b938      	cbnz	r0, 40fc <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    40ec:	01aa      	lsls	r2, r5, #6
    40ee:	8ae1      	ldrh	r1, [r4, #22]
    40f0:	482a      	ldr	r0, [pc, #168]	; (419c <hci_rx_thread+0x13c>)
    40f2:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    40f6:	f008 fa03 	bl	c500 <log_1>
    40fa:	e7ef      	b.n	40dc <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
    40fc:	f002 fc7a 	bl	69f4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    4100:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    4102:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    4104:	ea4f 321a 	mov.w	r2, sl, lsr #12
    4108:	4630      	mov	r0, r6
    410a:	f002 f87f 	bl	620c <bt_conn_recv>
	bt_conn_unref(conn);
    410e:	4630      	mov	r0, r6
    4110:	f009 fc58 	bl	d9c4 <bt_conn_unref>
	z_impl_k_yield();
    4114:	f006 ff46 	bl	afa4 <z_impl_k_yield>
	while (1) {
    4118:	e7ad      	b.n	4076 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    411a:	8983      	ldrh	r3, [r0, #12]
    411c:	2b01      	cmp	r3, #1
    411e:	d80c      	bhi.n	413a <hci_rx_thread+0xda>
    4120:	f241 33fb 	movw	r3, #5115	; 0x13fb
    4124:	463a      	mov	r2, r7
    4126:	491a      	ldr	r1, [pc, #104]	; (4190 <hci_rx_thread+0x130>)
    4128:	481a      	ldr	r0, [pc, #104]	; (4194 <hci_rx_thread+0x134>)
    412a:	f007 fdb5 	bl	bc98 <printk>
    412e:	4040      	eors	r0, r0
    4130:	f380 8811 	msr	BASEPRI, r0
    4134:	f04f 0003 	mov.w	r0, #3
    4138:	df02      	svc	2
    413a:	2102      	movs	r1, #2
    413c:	f104 0008 	add.w	r0, r4, #8
    4140:	f00a fd09 	bl	eb56 <net_buf_simple_pull_mem>
    4144:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    4146:	7800      	ldrb	r0, [r0, #0]
    4148:	f009 faa8 	bl	d69c <bt_hci_evt_get_flags>
    414c:	0783      	lsls	r3, r0, #30
    414e:	d40c      	bmi.n	416a <hci_rx_thread+0x10a>
    4150:	f241 33ff 	movw	r3, #5119	; 0x13ff
    4154:	463a      	mov	r2, r7
    4156:	4912      	ldr	r1, [pc, #72]	; (41a0 <hci_rx_thread+0x140>)
    4158:	480e      	ldr	r0, [pc, #56]	; (4194 <hci_rx_thread+0x134>)
    415a:	f007 fd9d 	bl	bc98 <printk>
    415e:	4040      	eors	r0, r0
    4160:	f380 8811 	msr	BASEPRI, r0
    4164:	f04f 0003 	mov.w	r0, #3
    4168:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    416a:	2304      	movs	r3, #4
    416c:	464a      	mov	r2, r9
    416e:	4621      	mov	r1, r4
    4170:	7830      	ldrb	r0, [r6, #0]
    4172:	f7ff ff33 	bl	3fdc <handle_event>
	net_buf_unref(buf);
    4176:	e7b1      	b.n	40dc <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    4178:	01aa      	lsls	r2, r5, #6
    417a:	480a      	ldr	r0, [pc, #40]	; (41a4 <hci_rx_thread+0x144>)
    417c:	f042 0201 	orr.w	r2, r2, #1
    4180:	e7b9      	b.n	40f6 <hci_rx_thread+0x96>
    4182:	bf00      	nop
    4184:	000102f8 	.word	0x000102f8
    4188:	00010320 	.word	0x00010320
    418c:	00011c8d 	.word	0x00011c8d
    4190:	00011cc1 	.word	0x00011cc1
    4194:	00011cda 	.word	0x00011cda
    4198:	00011cf7 	.word	0x00011cf7
    419c:	00011d1b 	.word	0x00011d1b
    41a0:	00011d3d 	.word	0x00011d3d
    41a4:	00011d6b 	.word	0x00011d6b
    41a8:	200000fc 	.word	0x200000fc
    41ac:	000107a0 	.word	0x000107a0

000041b0 <hci_le_meta_event>:
{
    41b0:	b510      	push	{r4, lr}
    41b2:	2101      	movs	r1, #1
    41b4:	4604      	mov	r4, r0
    41b6:	3008      	adds	r0, #8
    41b8:	f00a fccd 	bl	eb56 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    41bc:	4621      	mov	r1, r4
}
    41be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    41c2:	2307      	movs	r3, #7
    41c4:	4a01      	ldr	r2, [pc, #4]	; (41cc <hci_le_meta_event+0x1c>)
    41c6:	7800      	ldrb	r0, [r0, #0]
    41c8:	f7ff bf08 	b.w	3fdc <handle_event>
    41cc:	00010748 	.word	0x00010748

000041d0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    41d0:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    41d2:	4c0c      	ldr	r4, [pc, #48]	; (4204 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    41d4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    41d6:	2205      	movs	r2, #5
    41d8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    41dc:	f002 faae 	bl	673c <bt_conn_lookup_state_le>
		if (!conn) {
    41e0:	b970      	cbnz	r0, 4200 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    41e2:	4b09      	ldr	r3, [pc, #36]	; (4208 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    41e4:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    41e6:	6818      	ldr	r0, [r3, #0]
    41e8:	889a      	ldrh	r2, [r3, #4]
    41ea:	799b      	ldrb	r3, [r3, #6]
    41ec:	9000      	str	r0, [sp, #0]
    41ee:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    41f2:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    41f6:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    41f8:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    41fc:	f002 fa9e 	bl	673c <bt_conn_lookup_state_le>
}
    4200:	b002      	add	sp, #8
    4202:	bd10      	pop	{r4, pc}
    4204:	20000000 	.word	0x20000000
    4208:	00010450 	.word	0x00010450

0000420c <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    420c:	b530      	push	{r4, r5, lr}
    420e:	4d13      	ldr	r5, [pc, #76]	; (425c <id_create.isra.0+0x50>)
    4210:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    4214:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    4216:	b085      	sub	sp, #20
    4218:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    421a:	b171      	cbz	r1, 423a <id_create.isra.0+0x2e>
    421c:	2300      	movs	r3, #0
    421e:	4669      	mov	r1, sp
    4220:	4620      	mov	r0, r4
    4222:	9300      	str	r3, [sp, #0]
    4224:	f8cd 3003 	str.w	r3, [sp, #3]
    4228:	f009 fa5f 	bl	d6ea <bt_addr_le_cmp>
    422c:	b128      	cbz	r0, 423a <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    422e:	4621      	mov	r1, r4
    4230:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    4232:	f009 fa57 	bl	d6e4 <bt_addr_le_copy>
}
    4236:	b005      	add	sp, #20
    4238:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    423a:	a802      	add	r0, sp, #8
    423c:	f009 fa20 	bl	d680 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    4240:	a802      	add	r0, sp, #8
    4242:	f7ff fcf1 	bl	3c28 <id_find>
    4246:	2800      	cmp	r0, #0
    4248:	daf7      	bge.n	423a <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    424a:	4628      	mov	r0, r5
    424c:	a902      	add	r1, sp, #8
    424e:	f009 fa49 	bl	d6e4 <bt_addr_le_copy>
		if (addr) {
    4252:	2c00      	cmp	r4, #0
    4254:	d0ef      	beq.n	4236 <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    4256:	4629      	mov	r1, r5
    4258:	4620      	mov	r0, r4
    425a:	e7ea      	b.n	4232 <id_create.isra.0+0x26>
    425c:	20000000 	.word	0x20000000

00004260 <hci_num_completed_packets>:
{
    4260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    4264:	2600      	movs	r6, #0
			tx->pending_no_cb = 0U;
    4266:	46b1      	mov	r9, r6
    4268:	4d3c      	ldr	r5, [pc, #240]	; (435c <hci_num_completed_packets+0xfc>)
    426a:	4b3d      	ldr	r3, [pc, #244]	; (4360 <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    426c:	f8d0 8008 	ldr.w	r8, [r0, #8]
    4270:	1aed      	subs	r5, r5, r3
		k_queue_append(&work_q->queue, work);
    4272:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 436c <hci_num_completed_packets+0x10c>
    4276:	08ed      	lsrs	r5, r5, #3
	for (i = 0; i < evt->num_handles; i++) {
    4278:	f898 3000 	ldrb.w	r3, [r8]
    427c:	429e      	cmp	r6, r3
    427e:	db01      	blt.n	4284 <hci_num_completed_packets+0x24>
}
    4280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4284:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    4288:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    428c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    4290:	4658      	mov	r0, fp
    4292:	f002 f915 	bl	64c0 <bt_conn_lookup_handle>
		if (!conn) {
    4296:	4604      	mov	r4, r0
    4298:	b1d8      	cbz	r0, 42d2 <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    429a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    429e:	2f00      	cmp	r7, #0
    42a0:	d033      	beq.n	430a <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    42a2:	f04f 0320 	mov.w	r3, #32
    42a6:	f3ef 8211 	mrs	r2, BASEPRI
    42aa:	f383 8811 	msr	BASEPRI, r3
    42ae:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    42b2:	69e3      	ldr	r3, [r4, #28]
    42b4:	b1b3      	cbz	r3, 42e4 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    42b6:	3b01      	subs	r3, #1
    42b8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    42ba:	f382 8811 	msr	BASEPRI, r2
    42be:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    42c2:	4620      	mov	r0, r4
    42c4:	f001 ff24 	bl	6110 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    42c8:	3f01      	subs	r7, #1
    42ca:	f006 fee1 	bl	b090 <z_impl_k_sem_give>
    42ce:	b2bf      	uxth	r7, r7
    42d0:	e7e5      	b.n	429e <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    42d2:	01aa      	lsls	r2, r5, #6
    42d4:	4659      	mov	r1, fp
    42d6:	4823      	ldr	r0, [pc, #140]	; (4364 <hci_num_completed_packets+0x104>)
    42d8:	f042 0201 	orr.w	r2, r2, #1
    42dc:	f008 f910 	bl	c500 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    42e0:	3601      	adds	r6, #1
    42e2:	e7c9      	b.n	4278 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
    42e4:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    42e6:	b12b      	cbz	r3, 42f4 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    42e8:	69a1      	ldr	r1, [r4, #24]
    42ea:	6818      	ldr	r0, [r3, #0]
    42ec:	428b      	cmp	r3, r1
	list->head = node;
    42ee:	6160      	str	r0, [r4, #20]
	list->tail = node;
    42f0:	bf08      	it	eq
    42f2:	61a0      	streq	r0, [r4, #24]
    42f4:	f382 8811 	msr	BASEPRI, r2
    42f8:	f3bf 8f6f 	isb	sy
			if (!node) {
    42fc:	b94b      	cbnz	r3, 4312 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    42fe:	01a9      	lsls	r1, r5, #6
    4300:	4819      	ldr	r0, [pc, #100]	; (4368 <hci_num_completed_packets+0x108>)
    4302:	f041 0101 	orr.w	r1, r1, #1
    4306:	f008 f8ee 	bl	c4e6 <log_0>
		bt_conn_unref(conn);
    430a:	4620      	mov	r0, r4
    430c:	f009 fb5a 	bl	d9c4 <bt_conn_unref>
    4310:	e7e6      	b.n	42e0 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    4312:	f04f 0220 	mov.w	r2, #32
    4316:	f3ef 8111 	mrs	r1, BASEPRI
    431a:	f382 8811 	msr	BASEPRI, r2
    431e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    4322:	68da      	ldr	r2, [r3, #12]
    4324:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    4326:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    432a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    432c:	f8c3 900c 	str.w	r9, [r3, #12]
    4330:	b98a      	cbnz	r2, 4356 <hci_num_completed_packets+0xf6>
	list->head = node;
    4332:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    4336:	f381 8811 	msr	BASEPRI, r1
    433a:	f3bf 8f6f 	isb	sy
    433e:	2101      	movs	r1, #1
    4340:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4344:	f009 f9d4 	bl	d6f0 <atomic_or>
    4348:	07c3      	lsls	r3, r0, #31
    434a:	d4ba      	bmi.n	42c2 <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    434c:	4659      	mov	r1, fp
    434e:	4650      	mov	r0, sl
    4350:	f00b fa5e 	bl	f810 <k_queue_append>
    4354:	e7b5      	b.n	42c2 <hci_num_completed_packets+0x62>
	parent->next = child;
    4356:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4358:	6263      	str	r3, [r4, #36]	; 0x24
}
    435a:	e7ec      	b.n	4336 <hci_num_completed_packets+0xd6>
    435c:	00010320 	.word	0x00010320
    4360:	000102f8 	.word	0x000102f8
    4364:	00011d7f 	.word	0x00011d7f
    4368:	00011d9b 	.word	0x00011d9b
    436c:	20000e38 	.word	0x20000e38

00004370 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    4370:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4372:	4b28      	ldr	r3, [pc, #160]	; (4414 <le_adv_start_add_conn+0xa4>)
    4374:	4605      	mov	r5, r0
    4376:	460f      	mov	r7, r1
    4378:	b085      	sub	sp, #20
	struct adv_id_check_data check_data = {
		.id = adv->id,
    437a:	7801      	ldrb	r1, [r0, #0]
    437c:	f103 0028 	add.w	r0, r3, #40	; 0x28
    4380:	f009 f9ad 	bl	d6de <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    4384:	f010 0f40 	tst.w	r0, #64	; 0x40
    4388:	461a      	mov	r2, r3
    438a:	d008      	beq.n	439e <le_adv_start_add_conn+0x2e>
    438c:	f103 0028 	add.w	r0, r3, #40	; 0x28
    4390:	f009 f9a5 	bl	d6de <atomic_get>
    4394:	05c0      	lsls	r0, r0, #23
    4396:	d502      	bpl.n	439e <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    4398:	7e1b      	ldrb	r3, [r3, #24]
    439a:	428b      	cmp	r3, r1
    439c:	d131      	bne.n	4402 <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    439e:	462e      	mov	r6, r5
    43a0:	f816 3b09 	ldrb.w	r3, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    43a4:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    43a6:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    43aa:	2300      	movs	r3, #0
    43ac:	4630      	mov	r0, r6
    43ae:	9300      	str	r3, [sp, #0]
    43b0:	f8cd 3003 	str.w	r3, [sp, #3]
    43b4:	f009 f999 	bl	d6ea <bt_addr_le_cmp>
    43b8:	4604      	mov	r4, r0
    43ba:	7828      	ldrb	r0, [r5, #0]
    43bc:	b164      	cbz	r4, 43d8 <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    43be:	4631      	mov	r1, r6
    43c0:	f002 f994 	bl	66ec <bt_conn_exists_le>
    43c4:	4604      	mov	r4, r0
    43c6:	b9f8      	cbnz	r0, 4408 <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    43c8:	7828      	ldrb	r0, [r5, #0]
    43ca:	4631      	mov	r1, r6
    43cc:	f002 f84c 	bl	6468 <bt_conn_add_le>
	if (!conn) {
    43d0:	4605      	mov	r5, r0
    43d2:	b1e0      	cbz	r0, 440e <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    43d4:	2105      	movs	r1, #5
    43d6:	e00e      	b.n	43f6 <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    43d8:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    43dc:	9302      	str	r3, [sp, #8]
    43de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    43e2:	a902      	add	r1, sp, #8
    43e4:	f8ad 300c 	strh.w	r3, [sp, #12]
    43e8:	f88d 300e 	strb.w	r3, [sp, #14]
    43ec:	f002 f83c 	bl	6468 <bt_conn_add_le>
		if (!conn) {
    43f0:	4605      	mov	r5, r0
    43f2:	b160      	cbz	r0, 440e <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    43f4:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    43f6:	f002 f86f 	bl	64d8 <bt_conn_set_state>
	*out_conn = conn;
    43fa:	603d      	str	r5, [r7, #0]
	return 0;
}
    43fc:	4620      	mov	r0, r4
    43fe:	b005      	add	sp, #20
    4400:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    4402:	f06f 0422 	mvn.w	r4, #34	; 0x22
    4406:	e7f9      	b.n	43fc <le_adv_start_add_conn+0x8c>
		return -EINVAL;
    4408:	f06f 0415 	mvn.w	r4, #21
    440c:	e7f6      	b.n	43fc <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
    440e:	f06f 040b 	mvn.w	r4, #11
    4412:	e7f3      	b.n	43fc <le_adv_start_add_conn+0x8c>
    4414:	20000000 	.word	0x20000000

00004418 <hci_cmd_status>:
{
    4418:	b538      	push	{r3, r4, r5, lr}
    441a:	2104      	movs	r1, #4
    441c:	4604      	mov	r4, r0
    441e:	3008      	adds	r0, #8
    4420:	f00a fb99 	bl	eb56 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    4424:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    4426:	7801      	ldrb	r1, [r0, #0]
    4428:	4622      	mov	r2, r4
    442a:	8840      	ldrh	r0, [r0, #2]
    442c:	f7ff fd5c 	bl	3ee8 <hci_cmd_done>
	if (ncmd) {
    4430:	b125      	cbz	r5, 443c <hci_cmd_status+0x24>
}
    4432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4436:	4802      	ldr	r0, [pc, #8]	; (4440 <hci_cmd_status+0x28>)
    4438:	f006 be2a 	b.w	b090 <z_impl_k_sem_give>
    443c:	bd38      	pop	{r3, r4, r5, pc}
    443e:	bf00      	nop
    4440:	200000e0 	.word	0x200000e0

00004444 <hci_cmd_complete>:
{
    4444:	b538      	push	{r3, r4, r5, lr}
    4446:	2103      	movs	r1, #3
    4448:	4604      	mov	r4, r0
    444a:	3008      	adds	r0, #8
    444c:	f00a fb83 	bl	eb56 <net_buf_simple_pull_mem>
	status = buf->data[0];
    4450:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    4452:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    4454:	4622      	mov	r2, r4
    4456:	7819      	ldrb	r1, [r3, #0]
    4458:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    445c:	f7ff fd44 	bl	3ee8 <hci_cmd_done>
	if (ncmd) {
    4460:	b125      	cbz	r5, 446c <hci_cmd_complete+0x28>
}
    4462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4466:	4802      	ldr	r0, [pc, #8]	; (4470 <hci_cmd_complete+0x2c>)
    4468:	f006 be12 	b.w	b090 <z_impl_k_sem_give>
    446c:	bd38      	pop	{r3, r4, r5, pc}
    446e:	bf00      	nop
    4470:	200000e0 	.word	0x200000e0

00004474 <bt_hci_cmd_create>:
{
    4474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    4478:	f04f 32ff 	mov.w	r2, #4294967295
    447c:	f04f 33ff 	mov.w	r3, #4294967295
    4480:	4605      	mov	r5, r0
    4482:	4816      	ldr	r0, [pc, #88]	; (44dc <bt_hci_cmd_create+0x68>)
    4484:	460e      	mov	r6, r1
    4486:	f00a fad0 	bl	ea2a <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    448a:	2700      	movs	r7, #0
    448c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    448e:	f100 0b08 	add.w	fp, r0, #8
    4492:	2101      	movs	r1, #1
    4494:	4658      	mov	r0, fp
    4496:	f00a faed 	bl	ea74 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    449a:	4620      	mov	r0, r4
    449c:	7527      	strb	r7, [r4, #20]
    449e:	f004 fbd9 	bl	8c54 <net_buf_id>
    44a2:	f04f 0a0c 	mov.w	sl, #12
    44a6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 44e0 <bt_hci_cmd_create+0x6c>
    44aa:	fb0a 8000 	mla	r0, sl, r0, r8
    44ae:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    44b0:	4620      	mov	r0, r4
    44b2:	f004 fbcf 	bl	8c54 <net_buf_id>
    44b6:	fb0a 8000 	mla	r0, sl, r0, r8
    44ba:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    44bc:	4620      	mov	r0, r4
    44be:	f004 fbc9 	bl	8c54 <net_buf_id>
    44c2:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    44c6:	2103      	movs	r1, #3
    44c8:	6047      	str	r7, [r0, #4]
    44ca:	4658      	mov	r0, fp
    44cc:	f00a fb09 	bl	eae2 <net_buf_simple_add>
	hdr->param_len = param_len;
    44d0:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    44d2:	8005      	strh	r5, [r0, #0]
}
    44d4:	4620      	mov	r0, r4
    44d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44da:	bf00      	nop
    44dc:	2000061c 	.word	0x2000061c
    44e0:	200016b0 	.word	0x200016b0

000044e4 <bt_hci_cmd_send_sync>:
{
    44e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44e8:	4607      	mov	r7, r0
    44ea:	4615      	mov	r5, r2
	if (!buf) {
    44ec:	460c      	mov	r4, r1
{
    44ee:	b086      	sub	sp, #24
	if (!buf) {
    44f0:	b921      	cbnz	r1, 44fc <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    44f2:	f7ff ffbf 	bl	4474 <bt_hci_cmd_create>
		if (!buf) {
    44f6:	4604      	mov	r4, r0
    44f8:	2800      	cmp	r0, #0
    44fa:	d055      	beq.n	45a8 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    44fc:	2201      	movs	r2, #1
    44fe:	2100      	movs	r1, #0
    4500:	4668      	mov	r0, sp
    4502:	f00b fad1 	bl	faa8 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    4506:	4620      	mov	r0, r4
    4508:	f004 fba4 	bl	8c54 <net_buf_id>
    450c:	230c      	movs	r3, #12
    450e:	4e28      	ldr	r6, [pc, #160]	; (45b0 <bt_hci_cmd_send_sync+0xcc>)
    4510:	fb03 6000 	mla	r0, r3, r0, r6
    4514:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    4518:	4620      	mov	r0, r4
    451a:	f00a fabc 	bl	ea96 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    451e:	4621      	mov	r1, r4
    4520:	4824      	ldr	r0, [pc, #144]	; (45b4 <bt_hci_cmd_send_sync+0xd0>)
    4522:	f00a faab 	bl	ea7c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    4526:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    452a:	2300      	movs	r3, #0
    452c:	4668      	mov	r0, sp
    452e:	f006 fdd5 	bl	b0dc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    4532:	4680      	mov	r8, r0
    4534:	b180      	cbz	r0, 4558 <bt_hci_cmd_send_sync+0x74>
    4536:	f240 134d 	movw	r3, #333	; 0x14d
    453a:	4a1f      	ldr	r2, [pc, #124]	; (45b8 <bt_hci_cmd_send_sync+0xd4>)
    453c:	491f      	ldr	r1, [pc, #124]	; (45bc <bt_hci_cmd_send_sync+0xd8>)
    453e:	4820      	ldr	r0, [pc, #128]	; (45c0 <bt_hci_cmd_send_sync+0xdc>)
    4540:	f007 fbaa 	bl	bc98 <printk>
    4544:	4641      	mov	r1, r8
    4546:	481f      	ldr	r0, [pc, #124]	; (45c4 <bt_hci_cmd_send_sync+0xe0>)
    4548:	f007 fba6 	bl	bc98 <printk>
    454c:	4040      	eors	r0, r0
    454e:	f380 8811 	msr	BASEPRI, r0
    4552:	f04f 0003 	mov.w	r0, #3
    4556:	df02      	svc	2
	status = cmd(buf)->status;
    4558:	4620      	mov	r0, r4
    455a:	f004 fb7b 	bl	8c54 <net_buf_id>
    455e:	230c      	movs	r3, #12
    4560:	4343      	muls	r3, r0
    4562:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    4564:	b1be      	cbz	r6, 4596 <bt_hci_cmd_send_sync+0xb2>
    4566:	4a18      	ldr	r2, [pc, #96]	; (45c8 <bt_hci_cmd_send_sync+0xe4>)
    4568:	4b18      	ldr	r3, [pc, #96]	; (45cc <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    456a:	4639      	mov	r1, r7
    456c:	1a9b      	subs	r3, r3, r2
    456e:	08db      	lsrs	r3, r3, #3
    4570:	019b      	lsls	r3, r3, #6
    4572:	4632      	mov	r2, r6
    4574:	4816      	ldr	r0, [pc, #88]	; (45d0 <bt_hci_cmd_send_sync+0xec>)
    4576:	f043 0302 	orr.w	r3, r3, #2
    457a:	f007 ffd5 	bl	c528 <log_2>
		net_buf_unref(buf);
    457e:	4620      	mov	r0, r4
    4580:	f004 fc1c 	bl	8dbc <net_buf_unref>
			return -EIO;
    4584:	2e09      	cmp	r6, #9
    4586:	bf0c      	ite	eq
    4588:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    458c:	f06f 0004 	mvnne.w	r0, #4
}
    4590:	b006      	add	sp, #24
    4592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    4596:	b115      	cbz	r5, 459e <bt_hci_cmd_send_sync+0xba>
	return 0;
    4598:	4630      	mov	r0, r6
		*rsp = buf;
    459a:	602c      	str	r4, [r5, #0]
    459c:	e7f8      	b.n	4590 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    459e:	4620      	mov	r0, r4
    45a0:	f004 fc0c 	bl	8dbc <net_buf_unref>
	return 0;
    45a4:	4628      	mov	r0, r5
    45a6:	e7f3      	b.n	4590 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    45a8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    45ac:	e7f0      	b.n	4590 <bt_hci_cmd_send_sync+0xac>
    45ae:	bf00      	nop
    45b0:	200016b0 	.word	0x200016b0
    45b4:	20000114 	.word	0x20000114
    45b8:	00011c8d 	.word	0x00011c8d
    45bc:	00011db2 	.word	0x00011db2
    45c0:	00011cda 	.word	0x00011cda
    45c4:	00011dbb 	.word	0x00011dbb
    45c8:	000102f8 	.word	0x000102f8
    45cc:	00010320 	.word	0x00010320
    45d0:	00011ddb 	.word	0x00011ddb

000045d4 <hci_le_read_max_data_len>:
{
    45d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    45d6:	4606      	mov	r6, r0
    45d8:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    45da:	f242 002f 	movw	r0, #8239	; 0x202f
    45de:	2100      	movs	r1, #0
    45e0:	aa01      	add	r2, sp, #4
    45e2:	f7ff ff7f 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    45e6:	4604      	mov	r4, r0
    45e8:	b160      	cbz	r0, 4604 <hci_le_read_max_data_len+0x30>
    45ea:	490c      	ldr	r1, [pc, #48]	; (461c <hci_le_read_max_data_len+0x48>)
    45ec:	4b0c      	ldr	r3, [pc, #48]	; (4620 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    45ee:	480d      	ldr	r0, [pc, #52]	; (4624 <hci_le_read_max_data_len+0x50>)
    45f0:	1ac9      	subs	r1, r1, r3
    45f2:	08c9      	lsrs	r1, r1, #3
    45f4:	0189      	lsls	r1, r1, #6
    45f6:	f041 0101 	orr.w	r1, r1, #1
    45fa:	f007 ff74 	bl	c4e6 <log_0>
}
    45fe:	4620      	mov	r0, r4
    4600:	b002      	add	sp, #8
    4602:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    4604:	9801      	ldr	r0, [sp, #4]
    4606:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4608:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    460c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    460e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    4612:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    4614:	f004 fbd2 	bl	8dbc <net_buf_unref>
	return 0;
    4618:	e7f1      	b.n	45fe <hci_le_read_max_data_len+0x2a>
    461a:	bf00      	nop
    461c:	00010320 	.word	0x00010320
    4620:	000102f8 	.word	0x000102f8
    4624:	00011df7 	.word	0x00011df7

00004628 <set_random_address>:
{
    4628:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    462a:	4e15      	ldr	r6, [pc, #84]	; (4680 <set_random_address+0x58>)
    462c:	2206      	movs	r2, #6
    462e:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    4632:	4605      	mov	r5, r0
    4634:	f008 ff71 	bl	d51a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    4638:	4604      	mov	r4, r0
    463a:	b1e0      	cbz	r0, 4676 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    463c:	2106      	movs	r1, #6
    463e:	f242 0005 	movw	r0, #8197	; 0x2005
    4642:	f7ff ff17 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    4646:	4604      	mov	r4, r0
    4648:	b1b8      	cbz	r0, 467a <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    464a:	2206      	movs	r2, #6
    464c:	4629      	mov	r1, r5
    464e:	3008      	adds	r0, #8
    4650:	f00a fa4d 	bl	eaee <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    4654:	4621      	mov	r1, r4
    4656:	2200      	movs	r2, #0
    4658:	f242 0005 	movw	r0, #8197	; 0x2005
    465c:	f7ff ff42 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    4660:	4604      	mov	r4, r0
    4662:	b940      	cbnz	r0, 4676 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    4664:	2206      	movs	r2, #6
    4666:	4629      	mov	r1, r5
    4668:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    466c:	f008 ff65 	bl	d53a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    4670:	2301      	movs	r3, #1
    4672:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    4676:	4620      	mov	r0, r4
    4678:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    467a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    467e:	e7fa      	b.n	4676 <set_random_address+0x4e>
    4680:	20000000 	.word	0x20000000

00004684 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    4684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4688:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    468a:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    468e:	460e      	mov	r6, r1
    4690:	4690      	mov	r8, r2
    4692:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    4694:	d027      	beq.n	46e6 <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    4696:	4f27      	ldr	r7, [pc, #156]	; (4734 <le_adv_set_random_addr.isra.0+0xb0>)
    4698:	b12a      	cbz	r2, 46a6 <le_adv_set_random_addr.isra.0+0x22>
    469a:	0688      	lsls	r0, r1, #26
    469c:	d503      	bpl.n	46a6 <le_adv_set_random_addr.isra.0+0x22>
    469e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
    46a2:	0659      	lsls	r1, r3, #25
    46a4:	d542      	bpl.n	472c <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    46a6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    46aa:	5cfb      	ldrb	r3, [r7, r3]
    46ac:	ea4f 09c4 	mov.w	r9, r4, lsl #3
    46b0:	2b01      	cmp	r3, #1
    46b2:	d008      	beq.n	46c6 <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
    46b4:	eba9 0404 	sub.w	r4, r9, r4
    46b8:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    46ba:	f1b8 0f00 	cmp.w	r8, #0
    46be:	d10d      	bne.n	46dc <le_adv_set_random_addr.isra.0+0x58>
	return 0;
    46c0:	2000      	movs	r0, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    46c2:	702b      	strb	r3, [r5, #0]
    46c4:	e007      	b.n	46d6 <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
    46c6:	2007      	movs	r0, #7
    46c8:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    46cc:	4438      	add	r0, r7
    46ce:	f7ff ffab 	bl	4628 <set_random_address>
				if (err) {
    46d2:	2800      	cmp	r0, #0
    46d4:	d0ee      	beq.n	46b4 <le_adv_set_random_addr.isra.0+0x30>
}
    46d6:	b003      	add	sp, #12
    46d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    46dc:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    46de:	bf48      	it	mi
    46e0:	f043 0302 	orrmi.w	r3, r3, #2
    46e4:	e7ec      	b.n	46c0 <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    46e6:	074b      	lsls	r3, r1, #29
    46e8:	d510      	bpl.n	470c <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    46ea:	4e12      	ldr	r6, [pc, #72]	; (4734 <le_adv_set_random_addr.isra.0+0xb0>)
    46ec:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    46f0:	5cf3      	ldrb	r3, [r6, r3]
    46f2:	00e7      	lsls	r7, r4, #3
    46f4:	2b01      	cmp	r3, #1
    46f6:	d105      	bne.n	4704 <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
    46f8:	2007      	movs	r0, #7
    46fa:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    46fe:	4430      	add	r0, r6
    4700:	f7ff ff92 	bl	4628 <set_random_address>
			*own_addr_type = id_addr->type;
    4704:	1b3c      	subs	r4, r7, r4
    4706:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    4708:	702b      	strb	r3, [r5, #0]
		if (err) {
    470a:	e7e4      	b.n	46d6 <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    470c:	2106      	movs	r1, #6
    470e:	4668      	mov	r0, sp
    4710:	f001 fc2a 	bl	5f68 <bt_rand>
	if (err) {
    4714:	b940      	cbnz	r0, 4728 <le_adv_set_random_addr.isra.0+0xa4>
	BT_ADDR_SET_NRPA(&nrpa);
    4716:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    471a:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    471c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4720:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    4724:	f7ff ff80 	bl	4628 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    4728:	2301      	movs	r3, #1
    472a:	e7ed      	b.n	4708 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
    472c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    4730:	e7d1      	b.n	46d6 <le_adv_set_random_addr.isra.0+0x52>
    4732:	bf00      	nop
    4734:	20000000 	.word	0x20000000

00004738 <hci_set_ad>:
{
    4738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    473c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    473e:	2120      	movs	r1, #32
{
    4740:	4682      	mov	sl, r0
    4742:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    4744:	f7ff fe96 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    4748:	4606      	mov	r6, r0
    474a:	2800      	cmp	r0, #0
    474c:	d05c      	beq.n	4808 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
    474e:	2120      	movs	r1, #32
    4750:	3008      	adds	r0, #8
    4752:	f00a f9c6 	bl	eae2 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    4756:	2220      	movs	r2, #32
    4758:	4681      	mov	r9, r0
    475a:	2100      	movs	r1, #0
    475c:	f008 ff18 	bl	d590 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    4760:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    4764:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    4766:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    476a:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    476c:	2300      	movs	r3, #0
    476e:	f8d4 8000 	ldr.w	r8, [r4]
    4772:	6862      	ldr	r2, [r4, #4]
    4774:	4293      	cmp	r3, r2
    4776:	d30d      	bcc.n	4794 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    4778:	9b00      	ldr	r3, [sp, #0]
    477a:	3408      	adds	r4, #8
    477c:	429c      	cmp	r4, r3
    477e:	d1f5      	bne.n	476c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    4780:	2200      	movs	r2, #0
    4782:	4631      	mov	r1, r6
    4784:	4650      	mov	r0, sl
	*data_len = set_data_len;
    4786:	f889 5000 	strb.w	r5, [r9]
}
    478a:	b003      	add	sp, #12
    478c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    4790:	f7ff bea8 	b.w	44e4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    4794:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    4798:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    479a:	1881      	adds	r1, r0, r2
    479c:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    479e:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    47a2:	d91a      	bls.n	47da <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    47a4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    47a8:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    47ac:	d101      	bne.n	47b2 <hci_set_ad+0x7a>
    47ae:	2a00      	cmp	r2, #0
    47b0:	dc11      	bgt.n	47d6 <hci_set_ad+0x9e>
    47b2:	4b17      	ldr	r3, [pc, #92]	; (4810 <hci_set_ad+0xd8>)
    47b4:	4917      	ldr	r1, [pc, #92]	; (4814 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    47b6:	4818      	ldr	r0, [pc, #96]	; (4818 <hci_set_ad+0xe0>)
    47b8:	1ac9      	subs	r1, r1, r3
    47ba:	08c9      	lsrs	r1, r1, #3
    47bc:	0189      	lsls	r1, r1, #6
    47be:	f041 0101 	orr.w	r1, r1, #1
    47c2:	f007 fe90 	bl	c4e6 <log_0>
		net_buf_unref(buf);
    47c6:	4630      	mov	r0, r6
    47c8:	f004 faf8 	bl	8dbc <net_buf_unref>
					return -EINVAL;
    47cc:	f06f 0015 	mvn.w	r0, #21
}
    47d0:	b003      	add	sp, #12
    47d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    47d6:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    47da:	b2d7      	uxtb	r7, r2
    47dc:	1c79      	adds	r1, r7, #1
    47de:	f80b 1005 	strb.w	r1, [fp, r5]
    47e2:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    47e4:	b2c9      	uxtb	r1, r1
    47e6:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    47ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
    47ee:	fa5b f080 	uxtab	r0, fp, r0
    47f2:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    47f4:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    47f6:	f008 fea0 	bl	d53a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    47fa:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    47fc:	443d      	add	r5, r7
    47fe:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    4800:	3301      	adds	r3, #1
    4802:	f108 0808 	add.w	r8, r8, #8
    4806:	e7b4      	b.n	4772 <hci_set_ad+0x3a>
		return -ENOBUFS;
    4808:	f06f 0036 	mvn.w	r0, #54	; 0x36
    480c:	e7e0      	b.n	47d0 <hci_set_ad+0x98>
    480e:	bf00      	nop
    4810:	000102f8 	.word	0x000102f8
    4814:	00010320 	.word	0x00010320
    4818:	00011e17 	.word	0x00011e17

0000481c <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4820:	b087      	sub	sp, #28
    4822:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    4826:	4606      	mov	r6, r0
    4828:	460c      	mov	r4, r1
    482a:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    482c:	2100      	movs	r1, #0
    482e:	2210      	movs	r2, #16
    4830:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    4832:	461d      	mov	r5, r3
    4834:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    4838:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    483c:	f008 fea8 	bl	d590 <memset>
	if (use_name) {
    4840:	f1b8 0f00 	cmp.w	r8, #0
    4844:	d00e      	beq.n	4864 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    4846:	bbb4      	cbnz	r4, 48b6 <le_adv_update.constprop.0+0x9a>
    4848:	2d00      	cmp	r5, #0
    484a:	d13f      	bne.n	48cc <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    484c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 4900 <le_adv_update.constprop.0+0xe4>
    4850:	4658      	mov	r0, fp
    4852:	f008 fe37 	bl	d4c4 <strlen>
    4856:	2309      	movs	r3, #9
    4858:	f88d 0001 	strb.w	r0, [sp, #1]
    485c:	f88d 3000 	strb.w	r3, [sp]
    4860:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    4864:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    4868:	f1b8 0f00 	cmp.w	r8, #0
    486c:	d030      	beq.n	48d0 <le_adv_update.constprop.0+0xb4>
    486e:	f1ba 0f00 	cmp.w	sl, #0
    4872:	d12d      	bne.n	48d0 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    4874:	2301      	movs	r3, #1
			d_len = 2;
    4876:	2202      	movs	r2, #2
			d[1].data = &data;
    4878:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    487c:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    487e:	f242 0008 	movw	r0, #8200	; 0x2008
    4882:	a902      	add	r1, sp, #8
    4884:	f7ff ff58 	bl	4738 <hci_set_ad>
		if (err) {
    4888:	4604      	mov	r4, r0
    488a:	b938      	cbnz	r0, 489c <le_adv_update.constprop.0+0x80>
	if (scannable) {
    488c:	f1ba 0f00 	cmp.w	sl, #0
    4890:	d120      	bne.n	48d4 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4892:	2104      	movs	r1, #4
    4894:	f106 0010 	add.w	r0, r6, #16
    4898:	f008 ff2a 	bl	d6f0 <atomic_or>
}
    489c:	4620      	mov	r0, r4
    489e:	b007      	add	sp, #28
    48a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    48a4:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    48a8:	3a08      	subs	r2, #8
    48aa:	2a01      	cmp	r2, #1
    48ac:	d925      	bls.n	48fa <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    48ae:	3301      	adds	r3, #1
    48b0:	429f      	cmp	r7, r3
    48b2:	d1f7      	bne.n	48a4 <le_adv_update.constprop.0+0x88>
    48b4:	e7c8      	b.n	4848 <le_adv_update.constprop.0+0x2c>
    48b6:	2300      	movs	r3, #0
    48b8:	e7fa      	b.n	48b0 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    48ba:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    48be:	3a08      	subs	r2, #8
    48c0:	2a01      	cmp	r2, #1
    48c2:	d91a      	bls.n	48fa <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    48c4:	3301      	adds	r3, #1
    48c6:	4599      	cmp	r9, r3
    48c8:	d1f7      	bne.n	48ba <le_adv_update.constprop.0+0x9e>
    48ca:	e7bf      	b.n	484c <le_adv_update.constprop.0+0x30>
    48cc:	2300      	movs	r3, #0
    48ce:	e7fa      	b.n	48c6 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    48d0:	2201      	movs	r2, #1
    48d2:	e7d4      	b.n	487e <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    48d4:	2201      	movs	r2, #1
		d[0].len = sd_len;
    48d6:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    48da:	f1b8 0f00 	cmp.w	r8, #0
    48de:	d003      	beq.n	48e8 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    48e0:	9205      	str	r2, [sp, #20]
			d_len = 2;
    48e2:	2202      	movs	r2, #2
			d[1].data = &data;
    48e4:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    48e8:	f242 0009 	movw	r0, #8201	; 0x2009
    48ec:	a902      	add	r1, sp, #8
    48ee:	f7ff ff23 	bl	4738 <hci_set_ad>
		if (err) {
    48f2:	2800      	cmp	r0, #0
    48f4:	d0cd      	beq.n	4892 <le_adv_update.constprop.0+0x76>
    48f6:	4604      	mov	r4, r0
    48f8:	e7d0      	b.n	489c <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    48fa:	f06f 0415 	mvn.w	r4, #21
    48fe:	e7cd      	b.n	489c <le_adv_update.constprop.0+0x80>
    4900:	00010d97 	.word	0x00010d97

00004904 <set_le_adv_enable_legacy>:
{
    4904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4906:	4606      	mov	r6, r0
    4908:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    490a:	f242 000a 	movw	r0, #8202	; 0x200a
    490e:	2101      	movs	r1, #1
    4910:	f7ff fdb0 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    4914:	4604      	mov	r4, r0
    4916:	b1e8      	cbz	r0, 4954 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    4918:	3008      	adds	r0, #8
    491a:	b1cd      	cbz	r5, 4950 <set_le_adv_enable_legacy+0x4c>
	return net_buf_simple_add_u8(&buf->b, val);
    491c:	2101      	movs	r1, #1
    491e:	f00a f8ef 	bl	eb00 <net_buf_simple_add_u8>
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    4922:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    4924:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    4926:	3610      	adds	r6, #16
    4928:	9302      	str	r3, [sp, #8]
	state->target = target;
    492a:	9601      	str	r6, [sp, #4]
	state->val = val;
    492c:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    4930:	f004 f990 	bl	8c54 <net_buf_id>
    4934:	220c      	movs	r2, #12
    4936:	4b09      	ldr	r3, [pc, #36]	; (495c <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    4938:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    493a:	fb02 3000 	mla	r0, r2, r0, r3
    493e:	ab01      	add	r3, sp, #4
    4940:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    4942:	2200      	movs	r2, #0
    4944:	f242 000a 	movw	r0, #8202	; 0x200a
    4948:	f7ff fdcc 	bl	44e4 <bt_hci_cmd_send_sync>
}
    494c:	b004      	add	sp, #16
    494e:	bd70      	pop	{r4, r5, r6, pc}
    4950:	4629      	mov	r1, r5
    4952:	e7e4      	b.n	491e <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    4954:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4958:	e7f8      	b.n	494c <set_le_adv_enable_legacy+0x48>
    495a:	bf00      	nop
    495c:	200016b0 	.word	0x200016b0

00004960 <bt_send>:
	return bt_dev.drv->send(buf);
    4960:	4b02      	ldr	r3, [pc, #8]	; (496c <bt_send+0xc>)
    4962:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
    4966:	691b      	ldr	r3, [r3, #16]
    4968:	4718      	bx	r3
    496a:	bf00      	nop
    496c:	20000000 	.word	0x20000000

00004970 <bt_hci_cmd_send>:
{
    4970:	b538      	push	{r3, r4, r5, lr}
    4972:	4605      	mov	r5, r0
	if (!buf) {
    4974:	460c      	mov	r4, r1
    4976:	b919      	cbnz	r1, 4980 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    4978:	f7ff fd7c 	bl	4474 <bt_hci_cmd_create>
		if (!buf) {
    497c:	4604      	mov	r4, r0
    497e:	b1f0      	cbz	r0, 49be <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4980:	f640 4335 	movw	r3, #3125	; 0xc35
    4984:	429d      	cmp	r5, r3
    4986:	d114      	bne.n	49b2 <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
    4988:	4620      	mov	r0, r4
    498a:	f7ff ffe9 	bl	4960 <bt_send>
		if (err) {
    498e:	4605      	mov	r5, r0
    4990:	b168      	cbz	r0, 49ae <bt_hci_cmd_send+0x3e>
    4992:	4b0c      	ldr	r3, [pc, #48]	; (49c4 <bt_hci_cmd_send+0x54>)
    4994:	4a0c      	ldr	r2, [pc, #48]	; (49c8 <bt_hci_cmd_send+0x58>)
			BT_ERR("Unable to send to driver (err %d)", err);
    4996:	4601      	mov	r1, r0
    4998:	1ad2      	subs	r2, r2, r3
    499a:	08d2      	lsrs	r2, r2, #3
    499c:	0192      	lsls	r2, r2, #6
    499e:	480b      	ldr	r0, [pc, #44]	; (49cc <bt_hci_cmd_send+0x5c>)
    49a0:	f042 0201 	orr.w	r2, r2, #1
    49a4:	f007 fdac 	bl	c500 <log_1>
			net_buf_unref(buf);
    49a8:	4620      	mov	r0, r4
    49aa:	f004 fa07 	bl	8dbc <net_buf_unref>
}
    49ae:	4628      	mov	r0, r5
    49b0:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    49b2:	4621      	mov	r1, r4
    49b4:	4806      	ldr	r0, [pc, #24]	; (49d0 <bt_hci_cmd_send+0x60>)
    49b6:	f00a f861 	bl	ea7c <net_buf_put>
	return 0;
    49ba:	2500      	movs	r5, #0
    49bc:	e7f7      	b.n	49ae <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    49be:	f06f 0536 	mvn.w	r5, #54	; 0x36
    49c2:	e7f4      	b.n	49ae <bt_hci_cmd_send+0x3e>
    49c4:	000102f8 	.word	0x000102f8
    49c8:	00010320 	.word	0x00010320
    49cc:	00011e30 	.word	0x00011e30
    49d0:	20000114 	.word	0x20000114

000049d4 <bt_hci_host_num_completed_packets>:
{
    49d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49d6:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    49d8:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    49da:	7980      	ldrb	r0, [r0, #6]
    49dc:	f004 f932 	bl	8c44 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    49e0:	4621      	mov	r1, r4
    49e2:	f00a ff20 	bl	f826 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    49e6:	4b2d      	ldr	r3, [pc, #180]	; (4a9c <bt_hci_host_num_completed_packets+0xc8>)
    49e8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    49ec:	069b      	lsls	r3, r3, #26
    49ee:	d553      	bpl.n	4a98 <bt_hci_host_num_completed_packets+0xc4>
	conn = bt_conn_lookup_index(acl(buf)->index);
    49f0:	7d60      	ldrb	r0, [r4, #21]
    49f2:	f002 f80b 	bl	6a0c <bt_conn_lookup_index>
	if (!conn) {
    49f6:	4605      	mov	r5, r0
    49f8:	b960      	cbnz	r0, 4a14 <bt_hci_host_num_completed_packets+0x40>
    49fa:	4b29      	ldr	r3, [pc, #164]	; (4aa0 <bt_hci_host_num_completed_packets+0xcc>)
    49fc:	4a29      	ldr	r2, [pc, #164]	; (4aa4 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Unable to look up conn with index 0x%02x",
    49fe:	7d61      	ldrb	r1, [r4, #21]
    4a00:	1ad2      	subs	r2, r2, r3
    4a02:	08d2      	lsrs	r2, r2, #3
    4a04:	0192      	lsls	r2, r2, #6
    4a06:	4828      	ldr	r0, [pc, #160]	; (4aa8 <bt_hci_host_num_completed_packets+0xd4>)
    4a08:	f042 0202 	orr.w	r2, r2, #2
}
    4a0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    4a10:	f007 bd76 	b.w	c500 <log_1>
	if (!bt_conn_is_handle_valid(conn)) {
    4a14:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    4a16:	2b01      	cmp	r3, #1
    4a18:	d002      	beq.n	4a20 <bt_hci_host_num_completed_packets+0x4c>
    4a1a:	3b07      	subs	r3, #7
    4a1c:	2b01      	cmp	r3, #1
    4a1e:	d815      	bhi.n	4a4c <bt_hci_host_num_completed_packets+0x78>
	bt_conn_unref(conn);
    4a20:	4628      	mov	r0, r5
    4a22:	f008 ffcf 	bl	d9c4 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    4a26:	2105      	movs	r1, #5
    4a28:	f640 4035 	movw	r0, #3125	; 0xc35
    4a2c:	f7ff fd22 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    4a30:	4604      	mov	r4, r0
    4a32:	b9d0      	cbnz	r0, 4a6a <bt_hci_host_num_completed_packets+0x96>
    4a34:	4b1a      	ldr	r3, [pc, #104]	; (4aa0 <bt_hci_host_num_completed_packets+0xcc>)
    4a36:	491b      	ldr	r1, [pc, #108]	; (4aa4 <bt_hci_host_num_completed_packets+0xd0>)
		BT_ERR("Unable to allocate new HCI command");
    4a38:	481c      	ldr	r0, [pc, #112]	; (4aac <bt_hci_host_num_completed_packets+0xd8>)
    4a3a:	1ac9      	subs	r1, r1, r3
    4a3c:	08c9      	lsrs	r1, r1, #3
    4a3e:	0189      	lsls	r1, r1, #6
    4a40:	f041 0101 	orr.w	r1, r1, #1
}
    4a44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    4a48:	f007 bd4d 	b.w	c4e6 <log_0>
    4a4c:	4b14      	ldr	r3, [pc, #80]	; (4aa0 <bt_hci_host_num_completed_packets+0xcc>)
    4a4e:	4915      	ldr	r1, [pc, #84]	; (4aa4 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Not reporting packet for non-connected conn");
    4a50:	4817      	ldr	r0, [pc, #92]	; (4ab0 <bt_hci_host_num_completed_packets+0xdc>)
    4a52:	1ac9      	subs	r1, r1, r3
    4a54:	08c9      	lsrs	r1, r1, #3
    4a56:	0189      	lsls	r1, r1, #6
    4a58:	f041 0102 	orr.w	r1, r1, #2
    4a5c:	f007 fd43 	bl	c4e6 <log_0>
		bt_conn_unref(conn);
    4a60:	4628      	mov	r0, r5
}
    4a62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    4a66:	f008 bfad 	b.w	d9c4 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    4a6a:	f100 0708 	add.w	r7, r0, #8
    4a6e:	2101      	movs	r1, #1
    4a70:	4638      	mov	r0, r7
    4a72:	f00a f836 	bl	eae2 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    4a76:	2501      	movs	r5, #1
    4a78:	2104      	movs	r1, #4
    4a7a:	7005      	strb	r5, [r0, #0]
    4a7c:	4638      	mov	r0, r7
    4a7e:	f00a f830 	bl	eae2 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    4a82:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    4a84:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    4a86:	7085      	strb	r5, [r0, #2]
    4a88:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    4a8a:	4621      	mov	r1, r4
}
    4a8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    4a90:	f640 4035 	movw	r0, #3125	; 0xc35
    4a94:	f7ff bf6c 	b.w	4970 <bt_hci_cmd_send>
}
    4a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a9a:	bf00      	nop
    4a9c:	20000000 	.word	0x20000000
    4aa0:	000102f8 	.word	0x000102f8
    4aa4:	00010320 	.word	0x00010320
    4aa8:	00011e52 	.word	0x00011e52
    4aac:	00011ea7 	.word	0x00011ea7
    4ab0:	00011e7b 	.word	0x00011e7b

00004ab4 <conn_auto_initiate>:
{
    4ab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    4ab6:	7a83      	ldrb	r3, [r0, #10]
{
    4ab8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    4aba:	2b07      	cmp	r3, #7
    4abc:	d11e      	bne.n	4afc <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    4abe:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4ac0:	4630      	mov	r0, r6
    4ac2:	f008 fe0c 	bl	d6de <atomic_get>
    4ac6:	0483      	lsls	r3, r0, #18
    4ac8:	d41a      	bmi.n	4b00 <conn_auto_initiate+0x4c>
    4aca:	78e3      	ldrb	r3, [r4, #3]
    4acc:	b123      	cbz	r3, 4ad8 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    4ace:	4b31      	ldr	r3, [pc, #196]	; (4b94 <conn_auto_initiate+0xe0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    4ad0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    4ad4:	071d      	lsls	r5, r3, #28
    4ad6:	d513      	bpl.n	4b00 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    4ad8:	2102      	movs	r1, #2
    4ada:	f242 0016 	movw	r0, #8214	; 0x2016
    4ade:	f7ff fcc9 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    4ae2:	4605      	mov	r5, r0
    4ae4:	b160      	cbz	r0, 4b00 <conn_auto_initiate+0x4c>
    4ae6:	2102      	movs	r1, #2
    4ae8:	3008      	adds	r0, #8
    4aea:	f009 fffa 	bl	eae2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4aee:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4af0:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    4af2:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4af4:	f242 0016 	movw	r0, #8214	; 0x2016
    4af8:	f7ff ff3a 	bl	4970 <bt_hci_cmd_send>
}
    4afc:	b004      	add	sp, #16
    4afe:	bd70      	pop	{r4, r5, r6, pc}
    4b00:	4630      	mov	r0, r6
    4b02:	f008 fdec 	bl	d6de <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    4b06:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    4b0a:	4d22      	ldr	r5, [pc, #136]	; (4b94 <conn_auto_initiate+0xe0>)
    4b0c:	f3c0 3100 	ubfx	r1, r0, #12, #1
    4b10:	d11a      	bne.n	4b48 <conn_auto_initiate+0x94>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    4b12:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    4b16:	07d8      	lsls	r0, r3, #31
    4b18:	d516      	bpl.n	4b48 <conn_auto_initiate+0x94>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    4b1a:	2302      	movs	r3, #2
    4b1c:	9100      	str	r1, [sp, #0]
    4b1e:	461a      	mov	r2, r3
    4b20:	4620      	mov	r0, r4
    4b22:	f008 fe64 	bl	d7ee <bt_le_set_phy>
		if (!err) {
    4b26:	4601      	mov	r1, r0
    4b28:	b920      	cbnz	r0, 4b34 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4b2a:	2180      	movs	r1, #128	; 0x80
    4b2c:	4630      	mov	r0, r6
    4b2e:	f008 fddf 	bl	d6f0 <atomic_or>
			return;
    4b32:	e7e3      	b.n	4afc <conn_auto_initiate+0x48>
    4b34:	4a18      	ldr	r2, [pc, #96]	; (4b98 <conn_auto_initiate+0xe4>)
    4b36:	4b19      	ldr	r3, [pc, #100]	; (4b9c <conn_auto_initiate+0xe8>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    4b38:	4819      	ldr	r0, [pc, #100]	; (4ba0 <conn_auto_initiate+0xec>)
    4b3a:	1ad2      	subs	r2, r2, r3
    4b3c:	08d2      	lsrs	r2, r2, #3
    4b3e:	0192      	lsls	r2, r2, #6
    4b40:	f042 0201 	orr.w	r2, r2, #1
    4b44:	f007 fcdc 	bl	c500 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    4b48:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    4b4c:	069a      	lsls	r2, r3, #26
    4b4e:	d5d5      	bpl.n	4afc <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    4b50:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
    4b54:	689b      	ldr	r3, [r3, #8]
    4b56:	079b      	lsls	r3, r3, #30
    4b58:	d5d0      	bpl.n	4afc <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    4b5a:	f10d 010e 	add.w	r1, sp, #14
    4b5e:	a803      	add	r0, sp, #12
    4b60:	f7ff fd38 	bl	45d4 <hci_le_read_max_data_len>
			if (!err) {
    4b64:	2800      	cmp	r0, #0
    4b66:	d1c9      	bne.n	4afc <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
    4b68:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    4b6c:	4620      	mov	r0, r4
    4b6e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    4b72:	f008 fe1f 	bl	d7b4 <bt_le_set_data_len>
				if (err) {
    4b76:	4601      	mov	r1, r0
    4b78:	2800      	cmp	r0, #0
    4b7a:	d0bf      	beq.n	4afc <conn_auto_initiate+0x48>
    4b7c:	4b07      	ldr	r3, [pc, #28]	; (4b9c <conn_auto_initiate+0xe8>)
    4b7e:	4a06      	ldr	r2, [pc, #24]	; (4b98 <conn_auto_initiate+0xe4>)
					BT_ERR("Failed to set data len (%d)", err);
    4b80:	4808      	ldr	r0, [pc, #32]	; (4ba4 <conn_auto_initiate+0xf0>)
    4b82:	1ad2      	subs	r2, r2, r3
    4b84:	08d2      	lsrs	r2, r2, #3
    4b86:	0192      	lsls	r2, r2, #6
    4b88:	f042 0201 	orr.w	r2, r2, #1
    4b8c:	f007 fcb8 	bl	c500 <log_1>
		}
    4b90:	e7b4      	b.n	4afc <conn_auto_initiate+0x48>
    4b92:	bf00      	nop
    4b94:	20000000 	.word	0x20000000
    4b98:	00010320 	.word	0x00010320
    4b9c:	000102f8 	.word	0x000102f8
    4ba0:	00011eca 	.word	0x00011eca
    4ba4:	00011ee4 	.word	0x00011ee4

00004ba8 <le_phy_update_complete>:
{
    4ba8:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4baa:	6883      	ldr	r3, [r0, #8]
    4bac:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    4bb0:	4628      	mov	r0, r5
    4bb2:	f001 fc85 	bl	64c0 <bt_conn_lookup_handle>
	if (!conn) {
    4bb6:	4604      	mov	r4, r0
    4bb8:	b960      	cbnz	r0, 4bd4 <le_phy_update_complete+0x2c>
    4bba:	4b11      	ldr	r3, [pc, #68]	; (4c00 <le_phy_update_complete+0x58>)
    4bbc:	4a11      	ldr	r2, [pc, #68]	; (4c04 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4bbe:	4629      	mov	r1, r5
    4bc0:	1ad2      	subs	r2, r2, r3
    4bc2:	08d2      	lsrs	r2, r2, #3
    4bc4:	0192      	lsls	r2, r2, #6
    4bc6:	4810      	ldr	r0, [pc, #64]	; (4c08 <le_phy_update_complete+0x60>)
    4bc8:	f042 0201 	orr.w	r2, r2, #1
}
    4bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4bd0:	f007 bc96 	b.w	c500 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    4bd4:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4bd6:	f06f 0180 	mvn.w	r1, #128	; 0x80
    4bda:	4628      	mov	r0, r5
    4bdc:	f008 fd93 	bl	d706 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    4be0:	0603      	lsls	r3, r0, #24
    4be2:	d507      	bpl.n	4bf4 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4be8:	4628      	mov	r0, r5
    4bea:	f008 fd81 	bl	d6f0 <atomic_or>
		conn_auto_initiate(conn);
    4bee:	4620      	mov	r0, r4
    4bf0:	f7ff ff60 	bl	4ab4 <conn_auto_initiate>
	bt_conn_unref(conn);
    4bf4:	4620      	mov	r0, r4
}
    4bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4bfa:	f008 bee3 	b.w	d9c4 <bt_conn_unref>
    4bfe:	bf00      	nop
    4c00:	000102f8 	.word	0x000102f8
    4c04:	00010320 	.word	0x00010320
    4c08:	00011b51 	.word	0x00011b51

00004c0c <le_remote_feat_complete>:
{
    4c0c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    4c0e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4c10:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4c14:	4630      	mov	r0, r6
    4c16:	f001 fc53 	bl	64c0 <bt_conn_lookup_handle>
	if (!conn) {
    4c1a:	4604      	mov	r4, r0
    4c1c:	b960      	cbnz	r0, 4c38 <le_remote_feat_complete+0x2c>
    4c1e:	4a10      	ldr	r2, [pc, #64]	; (4c60 <le_remote_feat_complete+0x54>)
    4c20:	4b10      	ldr	r3, [pc, #64]	; (4c64 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4c22:	4631      	mov	r1, r6
}
    4c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4c28:	1ad2      	subs	r2, r2, r3
    4c2a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4c2c:	0192      	lsls	r2, r2, #6
    4c2e:	480e      	ldr	r0, [pc, #56]	; (4c68 <le_remote_feat_complete+0x5c>)
    4c30:	f042 0201 	orr.w	r2, r2, #1
    4c34:	f007 bc64 	b.w	c500 <log_1>
	if (!evt->status) {
    4c38:	782b      	ldrb	r3, [r5, #0]
    4c3a:	b923      	cbnz	r3, 4c46 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    4c3c:	2208      	movs	r2, #8
    4c3e:	1ce9      	adds	r1, r5, #3
    4c40:	30ac      	adds	r0, #172	; 0xac
    4c42:	f008 fc7a 	bl	d53a <memcpy>
    4c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    4c4a:	1d20      	adds	r0, r4, #4
    4c4c:	f008 fd50 	bl	d6f0 <atomic_or>
	conn_auto_initiate(conn);
    4c50:	4620      	mov	r0, r4
    4c52:	f7ff ff2f 	bl	4ab4 <conn_auto_initiate>
	bt_conn_unref(conn);
    4c56:	4620      	mov	r0, r4
}
    4c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    4c5c:	f008 beb2 	b.w	d9c4 <bt_conn_unref>
    4c60:	00010320 	.word	0x00010320
    4c64:	000102f8 	.word	0x000102f8
    4c68:	00011b51 	.word	0x00011b51

00004c6c <le_conn_param_neg_reply>:
{
    4c6c:	b570      	push	{r4, r5, r6, lr}
    4c6e:	4606      	mov	r6, r0
    4c70:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    4c72:	f242 0021 	movw	r0, #8225	; 0x2021
    4c76:	2103      	movs	r1, #3
    4c78:	f7ff fbfc 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    4c7c:	4604      	mov	r4, r0
    4c7e:	b958      	cbnz	r0, 4c98 <le_conn_param_neg_reply+0x2c>
}
    4c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4c84:	490b      	ldr	r1, [pc, #44]	; (4cb4 <le_conn_param_neg_reply+0x48>)
    4c86:	4b0c      	ldr	r3, [pc, #48]	; (4cb8 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    4c88:	480c      	ldr	r0, [pc, #48]	; (4cbc <le_conn_param_neg_reply+0x50>)
    4c8a:	1ac9      	subs	r1, r1, r3
    4c8c:	08c9      	lsrs	r1, r1, #3
    4c8e:	0189      	lsls	r1, r1, #6
    4c90:	f041 0101 	orr.w	r1, r1, #1
    4c94:	f007 bc27 	b.w	c4e6 <log_0>
    4c98:	2103      	movs	r1, #3
    4c9a:	3008      	adds	r0, #8
    4c9c:	f009 ff21 	bl	eae2 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    4ca0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    4ca2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4ca4:	4621      	mov	r1, r4
}
    4ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4caa:	f242 0021 	movw	r0, #8225	; 0x2021
    4cae:	f7ff be5f 	b.w	4970 <bt_hci_cmd_send>
    4cb2:	bf00      	nop
    4cb4:	00010320 	.word	0x00010320
    4cb8:	000102f8 	.word	0x000102f8
    4cbc:	00011f00 	.word	0x00011f00

00004cc0 <le_conn_param_req>:
{
    4cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    4cc2:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4cc4:	78d9      	ldrb	r1, [r3, #3]
    4cc6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    4cc8:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4cca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4cce:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    4cd2:	7959      	ldrb	r1, [r3, #5]
    4cd4:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    4cd6:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    4cd8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4cdc:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    4ce0:	799a      	ldrb	r2, [r3, #6]
    4ce2:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    4ce4:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    4ce6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4cea:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4cee:	7a1a      	ldrb	r2, [r3, #8]
    4cf0:	7a5b      	ldrb	r3, [r3, #9]
    4cf2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    4cf6:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    4cfa:	f001 fbe1 	bl	64c0 <bt_conn_lookup_handle>
	if (!conn) {
    4cfe:	4606      	mov	r6, r0
    4d00:	b980      	cbnz	r0, 4d24 <le_conn_param_req+0x64>
    4d02:	4b20      	ldr	r3, [pc, #128]	; (4d84 <le_conn_param_req+0xc4>)
    4d04:	4a20      	ldr	r2, [pc, #128]	; (4d88 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4d06:	4621      	mov	r1, r4
    4d08:	1ad2      	subs	r2, r2, r3
    4d0a:	08d2      	lsrs	r2, r2, #3
    4d0c:	0192      	lsls	r2, r2, #6
    4d0e:	481f      	ldr	r0, [pc, #124]	; (4d8c <le_conn_param_req+0xcc>)
    4d10:	f042 0201 	orr.w	r2, r2, #1
    4d14:	f007 fbf4 	bl	c500 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    4d18:	2102      	movs	r1, #2
    4d1a:	4620      	mov	r0, r4
    4d1c:	f7ff ffa6 	bl	4c6c <le_conn_param_neg_reply>
}
    4d20:	b003      	add	sp, #12
    4d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    4d24:	4669      	mov	r1, sp
    4d26:	f001 fa27 	bl	6178 <le_param_req>
    4d2a:	b938      	cbnz	r0, 4d3c <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    4d2c:	211e      	movs	r1, #30
    4d2e:	4620      	mov	r0, r4
    4d30:	f7ff ff9c 	bl	4c6c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    4d34:	4630      	mov	r0, r6
    4d36:	f008 fe45 	bl	d9c4 <bt_conn_unref>
    4d3a:	e7f1      	b.n	4d20 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    4d3c:	210e      	movs	r1, #14
    4d3e:	f242 0020 	movw	r0, #8224	; 0x2020
    4d42:	f7ff fb97 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    4d46:	4605      	mov	r5, r0
    4d48:	2800      	cmp	r0, #0
    4d4a:	d0f3      	beq.n	4d34 <le_conn_param_req+0x74>
    4d4c:	210e      	movs	r1, #14
    4d4e:	3008      	adds	r0, #8
    4d50:	f009 fec7 	bl	eae2 <net_buf_simple_add>
    4d54:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    4d56:	220e      	movs	r2, #14
    4d58:	2100      	movs	r1, #0
    4d5a:	f008 fc19 	bl	d590 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    4d5e:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    4d62:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    4d64:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    4d66:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    4d6a:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    4d6c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    4d6e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    4d72:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    4d76:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    4d78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4d7c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    4d7e:	f7ff fdf7 	bl	4970 <bt_hci_cmd_send>
    4d82:	e7d7      	b.n	4d34 <le_conn_param_req+0x74>
    4d84:	000102f8 	.word	0x000102f8
    4d88:	00010320 	.word	0x00010320
    4d8c:	00011b51 	.word	0x00011b51

00004d90 <hci_tx_thread>:
{
    4d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d94:	4d51      	ldr	r5, [pc, #324]	; (4edc <hci_tx_thread+0x14c>)
    4d96:	4b52      	ldr	r3, [pc, #328]	; (4ee0 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    4d98:	f8df 914c 	ldr.w	r9, [pc, #332]	; 4ee8 <hci_tx_thread+0x158>
    4d9c:	1aed      	subs	r5, r5, r3
		BT_ASSERT(err == 0);
    4d9e:	f8df a174 	ldr.w	sl, [pc, #372]	; 4f14 <hci_tx_thread+0x184>
    4da2:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    4da4:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4da8:	484e      	ldr	r0, [pc, #312]	; (4ee4 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    4daa:	f36f 3310 	bfc	r3, #12, #5
    4dae:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4db2:	f001 fb21 	bl	63f8 <bt_conn_prepare_events>
    4db6:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    4db8:	f04f 32ff 	mov.w	r2, #4294967295
    4dbc:	f04f 33ff 	mov.w	r3, #4294967295
    4dc0:	4639      	mov	r1, r7
    4dc2:	4849      	ldr	r0, [pc, #292]	; (4ee8 <hci_tx_thread+0x158>)
    4dc4:	f006 fd0a 	bl	b7dc <z_impl_k_poll>
		BT_ASSERT(err == 0);
    4dc8:	b160      	cbz	r0, 4de4 <hci_tx_thread+0x54>
    4dca:	f241 4371 	movw	r3, #5233	; 0x1471
    4dce:	4652      	mov	r2, sl
    4dd0:	4946      	ldr	r1, [pc, #280]	; (4eec <hci_tx_thread+0x15c>)
    4dd2:	4847      	ldr	r0, [pc, #284]	; (4ef0 <hci_tx_thread+0x160>)
    4dd4:	f006 ff60 	bl	bc98 <printk>
    4dd8:	4040      	eors	r0, r0
    4dda:	f380 8811 	msr	BASEPRI, r0
    4dde:	f04f 0003 	mov.w	r0, #3
    4de2:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    4de4:	4e43      	ldr	r6, [pc, #268]	; (4ef4 <hci_tx_thread+0x164>)
{
    4de6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 4ee8 <hci_tx_thread+0x158>
    4dea:	f106 0be0 	add.w	fp, r6, #224	; 0xe0
	for (; count; ev++, count--) {
    4dee:	b917      	cbnz	r7, 4df6 <hci_tx_thread+0x66>
	z_impl_k_yield();
    4df0:	f006 f8d8 	bl	afa4 <z_impl_k_yield>
	while (1) {
    4df4:	e7d6      	b.n	4da4 <hci_tx_thread+0x14>
		switch (ev->state) {
    4df6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    4dfa:	f3c1 3104 	ubfx	r1, r1, #12, #5
    4dfe:	2901      	cmp	r1, #1
    4e00:	d959      	bls.n	4eb6 <hci_tx_thread+0x126>
    4e02:	2904      	cmp	r1, #4
    4e04:	d163      	bne.n	4ece <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    4e06:	f898 300c 	ldrb.w	r3, [r8, #12]
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d157      	bne.n	4ebe <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4e0e:	2200      	movs	r2, #0
    4e10:	2300      	movs	r3, #0
    4e12:	4839      	ldr	r0, [pc, #228]	; (4ef8 <hci_tx_thread+0x168>)
    4e14:	f009 fe0e 	bl	ea34 <net_buf_get>
	BT_ASSERT(buf);
    4e18:	4604      	mov	r4, r0
    4e1a:	b960      	cbnz	r0, 4e36 <hci_tx_thread+0xa6>
    4e1c:	f241 430e 	movw	r3, #5134	; 0x140e
    4e20:	4652      	mov	r2, sl
    4e22:	4936      	ldr	r1, [pc, #216]	; (4efc <hci_tx_thread+0x16c>)
    4e24:	4832      	ldr	r0, [pc, #200]	; (4ef0 <hci_tx_thread+0x160>)
    4e26:	f006 ff37 	bl	bc98 <printk>
    4e2a:	4040      	eors	r0, r0
    4e2c:	f380 8811 	msr	BASEPRI, r0
    4e30:	f04f 0003 	mov.w	r0, #3
    4e34:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    4e36:	f04f 33ff 	mov.w	r3, #4294967295
    4e3a:	f04f 32ff 	mov.w	r2, #4294967295
    4e3e:	4658      	mov	r0, fp
    4e40:	f006 f94c 	bl	b0dc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    4e44:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    4e48:	b163      	cbz	r3, 4e64 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    4e4a:	01a9      	lsls	r1, r5, #6
    4e4c:	482c      	ldr	r0, [pc, #176]	; (4f00 <hci_tx_thread+0x170>)
    4e4e:	f041 0101 	orr.w	r1, r1, #1
    4e52:	f007 fb48 	bl	c4e6 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    4e56:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
    4e5a:	f003 ffaf 	bl	8dbc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4e5e:	2300      	movs	r3, #0
    4e60:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    4e64:	4620      	mov	r0, r4
    4e66:	f009 fe16 	bl	ea96 <net_buf_ref>
    4e6a:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
	err = bt_send(buf);
    4e6e:	4620      	mov	r0, r4
    4e70:	f7ff fd76 	bl	4960 <bt_send>
	if (err) {
    4e74:	4601      	mov	r1, r0
    4e76:	b1f0      	cbz	r0, 4eb6 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    4e78:	01aa      	lsls	r2, r5, #6
    4e7a:	4822      	ldr	r0, [pc, #136]	; (4f04 <hci_tx_thread+0x174>)
    4e7c:	f042 0201 	orr.w	r2, r2, #1
    4e80:	f007 fb3e 	bl	c500 <log_1>
	z_impl_k_sem_give(sem);
    4e84:	4820      	ldr	r0, [pc, #128]	; (4f08 <hci_tx_thread+0x178>)
    4e86:	f006 f903 	bl	b090 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    4e8a:	4620      	mov	r0, r4
    4e8c:	f003 fee2 	bl	8c54 <net_buf_id>
    4e90:	220c      	movs	r2, #12
    4e92:	4b1e      	ldr	r3, [pc, #120]	; (4f0c <hci_tx_thread+0x17c>)
    4e94:	211f      	movs	r1, #31
    4e96:	fb02 3000 	mla	r0, r2, r0, r3
    4e9a:	4622      	mov	r2, r4
    4e9c:	8840      	ldrh	r0, [r0, #2]
    4e9e:	f7ff f823 	bl	3ee8 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    4ea2:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
    4ea6:	f003 ff89 	bl	8dbc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4eaa:	2300      	movs	r3, #0
		net_buf_unref(buf);
    4eac:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    4eae:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
		net_buf_unref(buf);
    4eb2:	f003 ff83 	bl	8dbc <net_buf_unref>
	for (; count; ev++, count--) {
    4eb6:	f108 0814 	add.w	r8, r8, #20
    4eba:	3f01      	subs	r7, #1
    4ebc:	e797      	b.n	4dee <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    4ebe:	2b01      	cmp	r3, #1
    4ec0:	d1f9      	bne.n	4eb6 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    4ec2:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    4ec6:	3834      	subs	r0, #52	; 0x34
    4ec8:	f001 fd30 	bl	692c <bt_conn_process_tx>
    4ecc:	e7f3      	b.n	4eb6 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    4ece:	01aa      	lsls	r2, r5, #6
    4ed0:	480f      	ldr	r0, [pc, #60]	; (4f10 <hci_tx_thread+0x180>)
    4ed2:	f042 0202 	orr.w	r2, r2, #2
    4ed6:	f007 fb13 	bl	c500 <log_1>
    4eda:	e7ec      	b.n	4eb6 <hci_tx_thread+0x126>
    4edc:	00010320 	.word	0x00010320
    4ee0:	000102f8 	.word	0x000102f8
    4ee4:	2000022c 	.word	0x2000022c
    4ee8:	20000218 	.word	0x20000218
    4eec:	00011db2 	.word	0x00011db2
    4ef0:	00011cda 	.word	0x00011cda
    4ef4:	20000000 	.word	0x20000000
    4ef8:	20000114 	.word	0x20000114
    4efc:	00011a32 	.word	0x00011a32
    4f00:	00011f1a 	.word	0x00011f1a
    4f04:	00011e30 	.word	0x00011e30
    4f08:	200000e0 	.word	0x200000e0
    4f0c:	200016b0 	.word	0x200016b0
    4f10:	00011f35 	.word	0x00011f35
    4f14:	00011c8d 	.word	0x00011c8d

00004f18 <hci_event_prio>:
{
    4f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f1c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    4f1e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    4f22:	4630      	mov	r0, r6
    4f24:	f009 fe27 	bl	eb76 <net_buf_simple_headroom>
	state->len = buf->len;
    4f28:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    4f2c:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4f2e:	f1b8 0f01 	cmp.w	r8, #1
    4f32:	d80c      	bhi.n	4f4e <hci_event_prio+0x36>
    4f34:	f641 03ae 	movw	r3, #6318	; 0x18ae
    4f38:	4a1b      	ldr	r2, [pc, #108]	; (4fa8 <hci_event_prio+0x90>)
    4f3a:	491c      	ldr	r1, [pc, #112]	; (4fac <hci_event_prio+0x94>)
    4f3c:	481c      	ldr	r0, [pc, #112]	; (4fb0 <hci_event_prio+0x98>)
    4f3e:	f006 feab 	bl	bc98 <printk>
    4f42:	4040      	eors	r0, r0
    4f44:	f380 8811 	msr	BASEPRI, r0
    4f48:	f04f 0003 	mov.w	r0, #3
    4f4c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    4f4e:	2102      	movs	r1, #2
    4f50:	4630      	mov	r0, r6
    4f52:	f009 fe00 	bl	eb56 <net_buf_simple_pull_mem>
    4f56:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4f58:	7800      	ldrb	r0, [r0, #0]
    4f5a:	f008 fb9f 	bl	d69c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    4f5e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4f60:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    4f62:	d40c      	bmi.n	4f7e <hci_event_prio+0x66>
    4f64:	f641 03b2 	movw	r3, #6322	; 0x18b2
    4f68:	4a0f      	ldr	r2, [pc, #60]	; (4fa8 <hci_event_prio+0x90>)
    4f6a:	4912      	ldr	r1, [pc, #72]	; (4fb4 <hci_event_prio+0x9c>)
    4f6c:	4810      	ldr	r0, [pc, #64]	; (4fb0 <hci_event_prio+0x98>)
    4f6e:	f006 fe93 	bl	bc98 <printk>
    4f72:	4040      	eors	r0, r0
    4f74:	f380 8811 	msr	BASEPRI, r0
    4f78:	f04f 0003 	mov.w	r0, #3
    4f7c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    4f7e:	2305      	movs	r3, #5
    4f80:	4621      	mov	r1, r4
    4f82:	4a0d      	ldr	r2, [pc, #52]	; (4fb8 <hci_event_prio+0xa0>)
    4f84:	7838      	ldrb	r0, [r7, #0]
    4f86:	f7ff f829 	bl	3fdc <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    4f8a:	07b3      	lsls	r3, r6, #30
    4f8c:	d507      	bpl.n	4f9e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    4f8e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    4f90:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    4f94:	fa10 f585 	uxtah	r5, r0, r5
    4f98:	60a5      	str	r5, [r4, #8]
}
    4f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    4f9e:	4620      	mov	r0, r4
}
    4fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    4fa4:	f003 bf0a 	b.w	8dbc <net_buf_unref>
    4fa8:	00011c8d 	.word	0x00011c8d
    4fac:	00011cc1 	.word	0x00011cc1
    4fb0:	00011cda 	.word	0x00011cda
    4fb4:	00011f56 	.word	0x00011f56
    4fb8:	000107d0 	.word	0x000107d0

00004fbc <bt_recv>:
{
    4fbc:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    4fbe:	7d01      	ldrb	r1, [r0, #20]
    4fc0:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    4fc2:	2901      	cmp	r1, #1
    4fc4:	d007      	beq.n	4fd6 <bt_recv+0x1a>
    4fc6:	2903      	cmp	r1, #3
    4fc8:	d113      	bne.n	4ff2 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    4fca:	4812      	ldr	r0, [pc, #72]	; (5014 <bt_recv+0x58>)
    4fcc:	4629      	mov	r1, r5
    4fce:	f009 fd55 	bl	ea7c <net_buf_put>
		return 0;
    4fd2:	2000      	movs	r0, #0
    4fd4:	e00c      	b.n	4ff0 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4fd6:	6883      	ldr	r3, [r0, #8]
    4fd8:	7818      	ldrb	r0, [r3, #0]
    4fda:	f008 fb5f 	bl	d69c <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    4fde:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4fe0:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    4fe2:	d502      	bpl.n	4fea <bt_recv+0x2e>
			hci_event_prio(buf);
    4fe4:	4628      	mov	r0, r5
    4fe6:	f7ff ff97 	bl	4f18 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    4fea:	f014 0002 	ands.w	r0, r4, #2
    4fee:	d1ec      	bne.n	4fca <bt_recv+0xe>
}
    4ff0:	bd38      	pop	{r3, r4, r5, pc}
    4ff2:	4b09      	ldr	r3, [pc, #36]	; (5018 <bt_recv+0x5c>)
    4ff4:	4a09      	ldr	r2, [pc, #36]	; (501c <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    4ff6:	480a      	ldr	r0, [pc, #40]	; (5020 <bt_recv+0x64>)
    4ff8:	1ad2      	subs	r2, r2, r3
    4ffa:	08d2      	lsrs	r2, r2, #3
    4ffc:	0192      	lsls	r2, r2, #6
    4ffe:	f042 0201 	orr.w	r2, r2, #1
    5002:	f007 fa7d 	bl	c500 <log_1>
		net_buf_unref(buf);
    5006:	4628      	mov	r0, r5
    5008:	f003 fed8 	bl	8dbc <net_buf_unref>
		return -EINVAL;
    500c:	f06f 0015 	mvn.w	r0, #21
    5010:	e7ee      	b.n	4ff0 <bt_recv+0x34>
    5012:	bf00      	nop
    5014:	200000fc 	.word	0x200000fc
    5018:	000102f8 	.word	0x000102f8
    501c:	00010320 	.word	0x00010320
    5020:	00011f6f 	.word	0x00011f6f

00005024 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    5024:	4a08      	ldr	r2, [pc, #32]	; (5048 <bt_hci_driver_register+0x24>)
{
    5026:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    5028:	f8d2 012c 	ldr.w	r0, [r2, #300]	; 0x12c
    502c:	b930      	cbnz	r0, 503c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    502e:	68d9      	ldr	r1, [r3, #12]
    5030:	b139      	cbz	r1, 5042 <bt_hci_driver_register+0x1e>
    5032:	6919      	ldr	r1, [r3, #16]
    5034:	b129      	cbz	r1, 5042 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    5036:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
	return 0;
    503a:	4770      	bx	lr
		return -EALREADY;
    503c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    5040:	4770      	bx	lr
		return -EINVAL;
    5042:	f06f 0015 	mvn.w	r0, #21
}
    5046:	4770      	bx	lr
    5048:	20000000 	.word	0x20000000

0000504c <bt_finalize_init>:
{
    504c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5050:	4c2b      	ldr	r4, [pc, #172]	; (5100 <bt_finalize_init+0xb4>)
    5052:	b087      	sub	sp, #28
    5054:	2102      	movs	r1, #2
    5056:	f104 0094 	add.w	r0, r4, #148	; 0x94
    505a:	f008 fb49 	bl	d6f0 <atomic_or>
    505e:	4d29      	ldr	r5, [pc, #164]	; (5104 <bt_finalize_init+0xb8>)
    5060:	4b29      	ldr	r3, [pc, #164]	; (5108 <bt_finalize_init+0xbc>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    5062:	492a      	ldr	r1, [pc, #168]	; (510c <bt_finalize_init+0xc0>)
    5064:	1aed      	subs	r5, r5, r3
    5066:	4e2a      	ldr	r6, [pc, #168]	; (5110 <bt_finalize_init+0xc4>)
    5068:	79e3      	ldrb	r3, [r4, #7]
    506a:	4620      	mov	r0, r4
    506c:	2b01      	cmp	r3, #1
    506e:	bf88      	it	hi
    5070:	460e      	movhi	r6, r1
    5072:	f7fe fcdb 	bl	3a2c <bt_addr_le_str_real>
    5076:	f7fc f96b 	bl	1350 <log_strdup>
    507a:	08ed      	lsrs	r5, r5, #3
    507c:	01ad      	lsls	r5, r5, #6
    507e:	f045 0703 	orr.w	r7, r5, #3
    5082:	4602      	mov	r2, r0
    5084:	4631      	mov	r1, r6
    5086:	463b      	mov	r3, r7
    5088:	4822      	ldr	r0, [pc, #136]	; (5114 <bt_finalize_init+0xc8>)
    508a:	f007 fa4d 	bl	c528 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    508e:	46a0      	mov	r8, r4
    5090:	2601      	movs	r6, #1
		BT_INFO("Identity[%d]: %s",
    5092:	f8df 908c 	ldr.w	r9, [pc, #140]	; 5120 <bt_finalize_init+0xd4>
	for (i = 1; i < bt_dev.id_count; i++) {
    5096:	79e3      	ldrb	r3, [r4, #7]
    5098:	f108 0807 	add.w	r8, r8, #7
    509c:	429e      	cmp	r6, r3
    509e:	db22      	blt.n	50e6 <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    50a0:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    50a4:	f045 0503 	orr.w	r5, r5, #3
    50a8:	4630      	mov	r0, r6
    50aa:	f7fe fda1 	bl	3bf0 <ver_str>
    50ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    50b0:	e9cd 0602 	strd	r0, r6, [sp, #8]
    50b4:	9304      	str	r3, [sp, #16]
    50b6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    50b8:	a902      	add	r1, sp, #8
    50ba:	2204      	movs	r2, #4
    50bc:	9305      	str	r3, [sp, #20]
    50be:	4816      	ldr	r0, [pc, #88]	; (5118 <bt_finalize_init+0xcc>)
    50c0:	462b      	mov	r3, r5
    50c2:	f007 fa66 	bl	c592 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    50c6:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
    50ca:	4630      	mov	r0, r6
    50cc:	f7fe fd90 	bl	3bf0 <ver_str>
    50d0:	4632      	mov	r2, r6
    50d2:	4601      	mov	r1, r0
    50d4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    50d6:	4811      	ldr	r0, [pc, #68]	; (511c <bt_finalize_init+0xd0>)
    50d8:	f8ad 5000 	strh.w	r5, [sp]
    50dc:	f007 fa3d 	bl	c55a <log_3>
}
    50e0:	b007      	add	sp, #28
    50e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    50e6:	4640      	mov	r0, r8
    50e8:	f7fe fca0 	bl	3a2c <bt_addr_le_str_real>
    50ec:	f7fc f930 	bl	1350 <log_strdup>
    50f0:	4631      	mov	r1, r6
    50f2:	4602      	mov	r2, r0
    50f4:	463b      	mov	r3, r7
    50f6:	4648      	mov	r0, r9
    50f8:	f007 fa16 	bl	c528 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    50fc:	3601      	adds	r6, #1
    50fe:	e7ca      	b.n	5096 <bt_finalize_init+0x4a>
    5100:	20000000 	.word	0x20000000
    5104:	00010320 	.word	0x00010320
    5108:	000102f8 	.word	0x000102f8
    510c:	0001107c 	.word	0x0001107c
    5110:	00010ecb 	.word	0x00010ecb
    5114:	00011f83 	.word	0x00011f83
    5118:	00011fa3 	.word	0x00011fa3
    511c:	00011fe1 	.word	0x00011fe1
    5120:	00011f92 	.word	0x00011f92

00005124 <bt_get_name>:
}
    5124:	4800      	ldr	r0, [pc, #0]	; (5128 <bt_get_name+0x4>)
    5126:	4770      	bx	lr
    5128:	00010d97 	.word	0x00010d97

0000512c <bt_id_create>:
{
    512c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    512e:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5130:	4605      	mov	r5, r0
    5132:	b918      	cbnz	r0, 513c <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    5134:	b344      	cbz	r4, 5188 <bt_id_create+0x5c>
		return -EINVAL;
    5136:	f06f 0415 	mvn.w	r4, #21
    513a:	e022      	b.n	5182 <bt_id_create+0x56>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    513c:	2300      	movs	r3, #0
    513e:	4669      	mov	r1, sp
    5140:	9300      	str	r3, [sp, #0]
    5142:	f8cd 3003 	str.w	r3, [sp, #3]
    5146:	f008 fad0 	bl	d6ea <bt_addr_le_cmp>
    514a:	2800      	cmp	r0, #0
    514c:	d0f2      	beq.n	5134 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    514e:	782b      	ldrb	r3, [r5, #0]
    5150:	2b01      	cmp	r3, #1
    5152:	d104      	bne.n	515e <bt_id_create+0x32>
    5154:	79ab      	ldrb	r3, [r5, #6]
    5156:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    515a:	2bc0      	cmp	r3, #192	; 0xc0
    515c:	d00a      	beq.n	5174 <bt_id_create+0x48>
    515e:	4b11      	ldr	r3, [pc, #68]	; (51a4 <bt_id_create+0x78>)
    5160:	4911      	ldr	r1, [pc, #68]	; (51a8 <bt_id_create+0x7c>)
			BT_ERR("Only static random identity address supported");
    5162:	4812      	ldr	r0, [pc, #72]	; (51ac <bt_id_create+0x80>)
    5164:	1ac9      	subs	r1, r1, r3
    5166:	08c9      	lsrs	r1, r1, #3
    5168:	0189      	lsls	r1, r1, #6
    516a:	f041 0101 	orr.w	r1, r1, #1
    516e:	f007 f9ba 	bl	c4e6 <log_0>
			return -EINVAL;
    5172:	e7e0      	b.n	5136 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    5174:	4628      	mov	r0, r5
    5176:	f7fe fd57 	bl	3c28 <id_find>
    517a:	2800      	cmp	r0, #0
    517c:	dbda      	blt.n	5134 <bt_id_create+0x8>
			return -EALREADY;
    517e:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    5182:	4620      	mov	r0, r4
    5184:	b003      	add	sp, #12
    5186:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    5188:	4b09      	ldr	r3, [pc, #36]	; (51b0 <bt_id_create+0x84>)
    518a:	79dc      	ldrb	r4, [r3, #7]
    518c:	2c01      	cmp	r4, #1
    518e:	d006      	beq.n	519e <bt_id_create+0x72>
	new_id = bt_dev.id_count++;
    5190:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    5192:	4629      	mov	r1, r5
    5194:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    5196:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    5198:	f7ff f838 	bl	420c <id_create.isra.0>
	return new_id;
    519c:	e7f1      	b.n	5182 <bt_id_create+0x56>
		return -ENOMEM;
    519e:	f06f 040b 	mvn.w	r4, #11
    51a2:	e7ee      	b.n	5182 <bt_id_create+0x56>
    51a4:	000102f8 	.word	0x000102f8
    51a8:	00010320 	.word	0x00010320
    51ac:	00012008 	.word	0x00012008
    51b0:	20000000 	.word	0x20000000

000051b4 <bt_setup_public_id_addr>:
{
    51b4:	b570      	push	{r4, r5, r6, lr}
    51b6:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    51b8:	2100      	movs	r1, #0
    51ba:	f241 0009 	movw	r0, #4105	; 0x1009
    51be:	aa01      	add	r2, sp, #4
    51c0:	f7ff f990 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    51c4:	4e1f      	ldr	r6, [pc, #124]	; (5244 <bt_setup_public_id_addr+0x90>)
    51c6:	4604      	mov	r4, r0
    51c8:	b168      	cbz	r0, 51e6 <bt_setup_public_id_addr+0x32>
    51ca:	491f      	ldr	r1, [pc, #124]	; (5248 <bt_setup_public_id_addr+0x94>)
    51cc:	4b1f      	ldr	r3, [pc, #124]	; (524c <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
    51ce:	4820      	ldr	r0, [pc, #128]	; (5250 <bt_setup_public_id_addr+0x9c>)
    51d0:	1ac9      	subs	r1, r1, r3
    51d2:	08c9      	lsrs	r1, r1, #3
    51d4:	0189      	lsls	r1, r1, #6
    51d6:	f041 0102 	orr.w	r1, r1, #2
    51da:	f007 f984 	bl	c4e6 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    51de:	2300      	movs	r3, #0
    51e0:	71f3      	strb	r3, [r6, #7]
}
    51e2:	b006      	add	sp, #24
    51e4:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    51e6:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    51e8:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    51ea:	689d      	ldr	r5, [r3, #8]
    51ec:	a904      	add	r1, sp, #16
    51ee:	3501      	adds	r5, #1
    51f0:	9004      	str	r0, [sp, #16]
    51f2:	f8ad 0014 	strh.w	r0, [sp, #20]
    51f6:	4628      	mov	r0, r5
    51f8:	f008 f98f 	bl	d51a <memcmp>
    51fc:	b918      	cbnz	r0, 5206 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    51fe:	9801      	ldr	r0, [sp, #4]
    5200:	f003 fddc 	bl	8dbc <net_buf_unref>
    5204:	e7eb      	b.n	51de <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    5206:	f04f 33ff 	mov.w	r3, #4294967295
    520a:	2206      	movs	r2, #6
    520c:	4628      	mov	r0, r5
    520e:	a902      	add	r1, sp, #8
    5210:	9302      	str	r3, [sp, #8]
    5212:	f8ad 300c 	strh.w	r3, [sp, #12]
    5216:	f008 f980 	bl	d51a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    521a:	2800      	cmp	r0, #0
    521c:	d0ef      	beq.n	51fe <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    521e:	4629      	mov	r1, r5
    5220:	2206      	movs	r2, #6
    5222:	f10d 0011 	add.w	r0, sp, #17
    5226:	f008 f988 	bl	d53a <memcpy>
	net_buf_unref(rsp);
    522a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    522c:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    5230:	f003 fdc4 	bl	8dbc <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    5234:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    5236:	4620      	mov	r0, r4
    5238:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
    523a:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    523c:	f7fe ffe6 	bl	420c <id_create.isra.0>
    5240:	e7cf      	b.n	51e2 <bt_setup_public_id_addr+0x2e>
    5242:	bf00      	nop
    5244:	20000000 	.word	0x20000000
    5248:	00010320 	.word	0x00010320
    524c:	000102f8 	.word	0x000102f8
    5250:	00012036 	.word	0x00012036

00005254 <bt_read_static_addr>:
{
    5254:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5258:	4b25      	ldr	r3, [pc, #148]	; (52f0 <bt_read_static_addr+0x9c>)
{
    525a:	4607      	mov	r7, r0
    525c:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    5260:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5262:	f014 0401 	ands.w	r4, r4, #1
    5266:	d10a      	bne.n	527e <bt_read_static_addr+0x2a>
    5268:	4922      	ldr	r1, [pc, #136]	; (52f4 <bt_read_static_addr+0xa0>)
    526a:	4b23      	ldr	r3, [pc, #140]	; (52f8 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    526c:	4823      	ldr	r0, [pc, #140]	; (52fc <bt_read_static_addr+0xa8>)
    526e:	1ac9      	subs	r1, r1, r3
    5270:	08c9      	lsrs	r1, r1, #3
    5272:	0189      	lsls	r1, r1, #6
    5274:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    5278:	f007 f935 	bl	c4e6 <log_0>
    527c:	e012      	b.n	52a4 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    527e:	2100      	movs	r1, #0
    5280:	f64f 4009 	movw	r0, #64521	; 0xfc09
    5284:	aa01      	add	r2, sp, #4
    5286:	f7ff f92d 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    528a:	4605      	mov	r5, r0
    528c:	b170      	cbz	r0, 52ac <bt_read_static_addr+0x58>
    528e:	4b1a      	ldr	r3, [pc, #104]	; (52f8 <bt_read_static_addr+0xa4>)
    5290:	4918      	ldr	r1, [pc, #96]	; (52f4 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    5292:	481b      	ldr	r0, [pc, #108]	; (5300 <bt_read_static_addr+0xac>)
    5294:	1ac9      	subs	r1, r1, r3
    5296:	08c9      	lsrs	r1, r1, #3
    5298:	0189      	lsls	r1, r1, #6
    529a:	f041 0102 	orr.w	r1, r1, #2
    529e:	f007 f922 	bl	c4e6 <log_0>
		return 0;
    52a2:	2400      	movs	r4, #0
}
    52a4:	4620      	mov	r0, r4
    52a6:	b002      	add	sp, #8
    52a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    52ac:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
    52b0:	9b01      	ldr	r3, [sp, #4]
    52b2:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    52b4:	785c      	ldrb	r4, [r3, #1]
    52b6:	42b4      	cmp	r4, r6
    52b8:	bf28      	it	cs
    52ba:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    52bc:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    52be:	42a5      	cmp	r5, r4
    52c0:	db0d      	blt.n	52de <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    52c2:	9801      	ldr	r0, [sp, #4]
    52c4:	f003 fd7a 	bl	8dbc <net_buf_unref>
	if (!cnt) {
    52c8:	2c00      	cmp	r4, #0
    52ca:	d1eb      	bne.n	52a4 <bt_read_static_addr+0x50>
    52cc:	4909      	ldr	r1, [pc, #36]	; (52f4 <bt_read_static_addr+0xa0>)
    52ce:	4b0a      	ldr	r3, [pc, #40]	; (52f8 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    52d0:	480c      	ldr	r0, [pc, #48]	; (5304 <bt_read_static_addr+0xb0>)
    52d2:	1ac9      	subs	r1, r1, r3
    52d4:	08c9      	lsrs	r1, r1, #3
    52d6:	0189      	lsls	r1, r1, #6
    52d8:	f041 0102 	orr.w	r1, r1, #2
    52dc:	e7cc      	b.n	5278 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    52de:	fb08 7005 	mla	r0, r8, r5, r7
    52e2:	2216      	movs	r2, #22
    52e4:	4631      	mov	r1, r6
    52e6:	f008 f928 	bl	d53a <memcpy>
	for (i = 0; i < cnt; i++) {
    52ea:	3501      	adds	r5, #1
    52ec:	e7e7      	b.n	52be <bt_read_static_addr+0x6a>
    52ee:	bf00      	nop
    52f0:	20000000 	.word	0x20000000
    52f4:	00010320 	.word	0x00010320
    52f8:	000102f8 	.word	0x000102f8
    52fc:	00012054 	.word	0x00012054
    5300:	00012080 	.word	0x00012080
    5304:	000120a0 	.word	0x000120a0

00005308 <bt_setup_random_id_addr>:
{
    5308:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    530a:	4d14      	ldr	r5, [pc, #80]	; (535c <bt_setup_random_id_addr+0x54>)
{
    530c:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    530e:	79ec      	ldrb	r4, [r5, #7]
    5310:	b9f4      	cbnz	r4, 5350 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    5312:	2101      	movs	r1, #1
    5314:	a802      	add	r0, sp, #8
    5316:	f7ff ff9d 	bl	5254 <bt_read_static_addr>
    531a:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    531c:	b1c0      	cbz	r0, 5350 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    531e:	2716      	movs	r7, #22
    5320:	e00f      	b.n	5342 <bt_setup_random_id_addr+0x3a>
    5322:	ab02      	add	r3, sp, #8
    5324:	fb07 3106 	mla	r1, r7, r6, r3
    5328:	2206      	movs	r2, #6
    532a:	f10d 0001 	add.w	r0, sp, #1
    532e:	f008 f904 	bl	d53a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    5332:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    5334:	4669      	mov	r1, sp
    5336:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    5338:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    533c:	f7fe ff66 	bl	420c <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    5340:	3401      	adds	r4, #1
    5342:	79eb      	ldrb	r3, [r5, #7]
    5344:	b2e6      	uxtb	r6, r4
    5346:	42b3      	cmp	r3, r6
    5348:	d8eb      	bhi.n	5322 <bt_setup_random_id_addr+0x1a>
			return 0;
    534a:	2000      	movs	r0, #0
}
    534c:	b009      	add	sp, #36	; 0x24
    534e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    5350:	2100      	movs	r1, #0
    5352:	4608      	mov	r0, r1
    5354:	f7ff feea 	bl	512c <bt_id_create>
    5358:	e7f8      	b.n	534c <bt_setup_random_id_addr+0x44>
    535a:	bf00      	nop
    535c:	20000000 	.word	0x20000000

00005360 <hci_init>:
{
    5360:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    5362:	4d66      	ldr	r5, [pc, #408]	; (54fc <hci_init+0x19c>)
{
    5364:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    5366:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
    536a:	6899      	ldr	r1, [r3, #8]
    536c:	f011 0101 	ands.w	r1, r1, #1
    5370:	d11c      	bne.n	53ac <hci_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    5372:	f640 4003 	movw	r0, #3075	; 0xc03
    5376:	aa03      	add	r2, sp, #12
    5378:	f7ff f8b4 	bl	44e4 <bt_hci_cmd_send_sync>
		if (err) {
    537c:	4604      	mov	r4, r0
    537e:	2800      	cmp	r0, #0
    5380:	f040 80b8 	bne.w	54f4 <hci_init+0x194>
		hci_reset_complete(rsp);
    5384:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
    5386:	689b      	ldr	r3, [r3, #8]
	if (status) {
    5388:	781b      	ldrb	r3, [r3, #0]
    538a:	b963      	cbnz	r3, 53a6 <hci_init+0x46>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    538c:	f105 0394 	add.w	r3, r5, #148	; 0x94
    5390:	4618      	mov	r0, r3
    5392:	f008 f9a4 	bl	d6de <atomic_get>
    5396:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    539a:	e8d3 2fef 	ldaex	r2, [r3]
    539e:	e8c3 0fe1 	stlex	r1, r0, [r3]
    53a2:	2900      	cmp	r1, #0
    53a4:	d1f9      	bne.n	539a <hci_init+0x3a>
		net_buf_unref(rsp);
    53a6:	9803      	ldr	r0, [sp, #12]
    53a8:	f003 fd08 	bl	8dbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    53ac:	2100      	movs	r1, #0
    53ae:	f241 0003 	movw	r0, #4099	; 0x1003
    53b2:	aa03      	add	r2, sp, #12
    53b4:	f7ff f896 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    53b8:	4604      	mov	r4, r0
    53ba:	2800      	cmp	r0, #0
    53bc:	f040 809a 	bne.w	54f4 <hci_init+0x194>
	read_local_features_complete(rsp);
    53c0:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    53c2:	2208      	movs	r2, #8
    53c4:	6899      	ldr	r1, [r3, #8]
    53c6:	484e      	ldr	r0, [pc, #312]	; (5500 <hci_init+0x1a0>)
    53c8:	3101      	adds	r1, #1
    53ca:	f008 f8b6 	bl	d53a <memcpy>
	net_buf_unref(rsp);
    53ce:	9803      	ldr	r0, [sp, #12]
    53d0:	f003 fcf4 	bl	8dbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    53d4:	4621      	mov	r1, r4
    53d6:	f241 0001 	movw	r0, #4097	; 0x1001
    53da:	aa03      	add	r2, sp, #12
    53dc:	f7ff f882 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    53e0:	4604      	mov	r4, r0
    53e2:	2800      	cmp	r0, #0
    53e4:	f040 8086 	bne.w	54f4 <hci_init+0x194>
	read_local_ver_complete(rsp);
    53e8:	9803      	ldr	r0, [sp, #12]
    53ea:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    53ec:	785a      	ldrb	r2, [r3, #1]
    53ee:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    53f2:	78d9      	ldrb	r1, [r3, #3]
    53f4:	789a      	ldrb	r2, [r3, #2]
    53f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    53fa:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    53fc:	791a      	ldrb	r2, [r3, #4]
    53fe:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    5402:	7a19      	ldrb	r1, [r3, #8]
    5404:	79da      	ldrb	r2, [r3, #7]
    5406:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    540a:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    540c:	795a      	ldrb	r2, [r3, #5]
    540e:	799b      	ldrb	r3, [r3, #6]
    5410:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    5414:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    5416:	f003 fcd1 	bl	8dbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    541a:	4621      	mov	r1, r4
    541c:	f241 0002 	movw	r0, #4098	; 0x1002
    5420:	aa03      	add	r2, sp, #12
    5422:	f7ff f85f 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    5426:	4604      	mov	r4, r0
    5428:	2800      	cmp	r0, #0
    542a:	d163      	bne.n	54f4 <hci_init+0x194>
	read_supported_commands_complete(rsp);
    542c:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    542e:	2240      	movs	r2, #64	; 0x40
    5430:	6899      	ldr	r1, [r3, #8]
    5432:	4834      	ldr	r0, [pc, #208]	; (5504 <hci_init+0x1a4>)
    5434:	3101      	adds	r1, #1
    5436:	f008 f880 	bl	d53a <memcpy>
	net_buf_unref(rsp);
    543a:	9803      	ldr	r0, [sp, #12]
    543c:	f003 fcbe 	bl	8dbc <net_buf_unref>
		err = prng_init();
    5440:	f000 fd5a 	bl	5ef8 <prng_init>
		if (err) {
    5444:	4604      	mov	r4, r0
    5446:	2800      	cmp	r0, #0
    5448:	d154      	bne.n	54f4 <hci_init+0x194>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    544a:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    544e:	069f      	lsls	r7, r3, #26
    5450:	d41a      	bmi.n	5488 <hci_init+0x128>
    5452:	492d      	ldr	r1, [pc, #180]	; (5508 <hci_init+0x1a8>)
    5454:	4b2d      	ldr	r3, [pc, #180]	; (550c <hci_init+0x1ac>)
		BT_WARN("Controller to host flow control not supported");
    5456:	482e      	ldr	r0, [pc, #184]	; (5510 <hci_init+0x1b0>)
    5458:	1ac9      	subs	r1, r1, r3
    545a:	08c9      	lsrs	r1, r1, #3
    545c:	0189      	lsls	r1, r1, #6
    545e:	f041 0102 	orr.w	r1, r1, #2
    5462:	f007 f840 	bl	c4e6 <log_0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    5466:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    546a:	065e      	lsls	r6, r3, #25
    546c:	d454      	bmi.n	5518 <hci_init+0x1b8>
    546e:	4b27      	ldr	r3, [pc, #156]	; (550c <hci_init+0x1ac>)
    5470:	4925      	ldr	r1, [pc, #148]	; (5508 <hci_init+0x1a8>)
		BT_ERR("Non-LE capable controller detected!");
    5472:	4828      	ldr	r0, [pc, #160]	; (5514 <hci_init+0x1b4>)
    5474:	1ac9      	subs	r1, r1, r3
    5476:	08c9      	lsrs	r1, r1, #3
    5478:	0189      	lsls	r1, r1, #6
    547a:	f041 0101 	orr.w	r1, r1, #1
    547e:	f007 f832 	bl	c4e6 <log_0>
		return -ENODEV;
    5482:	f06f 0412 	mvn.w	r4, #18
    5486:	e035      	b.n	54f4 <hci_init+0x194>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    5488:	2107      	movs	r1, #7
    548a:	f640 4033 	movw	r0, #3123	; 0xc33
    548e:	f7fe fff1 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    5492:	4607      	mov	r7, r0
    5494:	b910      	cbnz	r0, 549c <hci_init+0x13c>
		return -ENOBUFS;
    5496:	f06f 0436 	mvn.w	r4, #54	; 0x36
    549a:	e02b      	b.n	54f4 <hci_init+0x194>
	return net_buf_simple_add(&buf->b, len);
    549c:	2107      	movs	r1, #7
    549e:	3008      	adds	r0, #8
    54a0:	f009 fb1f 	bl	eae2 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    54a4:	4621      	mov	r1, r4
    54a6:	2207      	movs	r2, #7
    54a8:	4606      	mov	r6, r0
    54aa:	f008 f871 	bl	d590 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    54ae:	231b      	movs	r3, #27
    54b0:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    54b2:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    54b4:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    54b6:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    54b8:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    54ba:	4639      	mov	r1, r7
    54bc:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    54c0:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    54c2:	f7ff f80f 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    54c6:	4604      	mov	r4, r0
    54c8:	b9a0      	cbnz	r0, 54f4 <hci_init+0x194>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    54ca:	2101      	movs	r1, #1
    54cc:	f640 4031 	movw	r0, #3121	; 0xc31
    54d0:	f7fe ffd0 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    54d4:	4606      	mov	r6, r0
    54d6:	2800      	cmp	r0, #0
    54d8:	d0dd      	beq.n	5496 <hci_init+0x136>
	return net_buf_simple_add_u8(&buf->b, val);
    54da:	2101      	movs	r1, #1
    54dc:	3008      	adds	r0, #8
    54de:	f009 fb0f 	bl	eb00 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    54e2:	4622      	mov	r2, r4
    54e4:	4631      	mov	r1, r6
    54e6:	f640 4031 	movw	r0, #3121	; 0xc31
    54ea:	f7fe fffb 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    54ee:	4604      	mov	r4, r0
    54f0:	2800      	cmp	r0, #0
    54f2:	d0b8      	beq.n	5466 <hci_init+0x106>
}
    54f4:	4620      	mov	r0, r4
    54f6:	b009      	add	sp, #36	; 0x24
    54f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54fa:	bf00      	nop
    54fc:	20000000 	.word	0x20000000
    5500:	2000003c 	.word	0x2000003c
    5504:	20000044 	.word	0x20000044
    5508:	00010320 	.word	0x00010320
    550c:	000102f8 	.word	0x000102f8
    5510:	000120c9 	.word	0x000120c9
    5514:	000120f7 	.word	0x000120f7
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    5518:	2100      	movs	r1, #0
    551a:	f242 0003 	movw	r0, #8195	; 0x2003
    551e:	aa03      	add	r2, sp, #12
    5520:	f7fe ffe0 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    5524:	4604      	mov	r4, r0
    5526:	2800      	cmp	r0, #0
    5528:	d1e4      	bne.n	54f4 <hci_init+0x194>
	read_le_features_complete(rsp);
    552a:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    552c:	2208      	movs	r2, #8
    552e:	6899      	ldr	r1, [r3, #8]
    5530:	48c1      	ldr	r0, [pc, #772]	; (5838 <hci_init+0x4d8>)
    5532:	3101      	adds	r1, #1
    5534:	f008 f801 	bl	d53a <memcpy>
	net_buf_unref(rsp);
    5538:	9803      	ldr	r0, [sp, #12]
    553a:	f003 fc3f 	bl	8dbc <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    553e:	4621      	mov	r1, r4
    5540:	f242 0002 	movw	r0, #8194	; 0x2002
    5544:	aa03      	add	r2, sp, #12
    5546:	f7fe ffcd 	bl	44e4 <bt_hci_cmd_send_sync>
		if (err) {
    554a:	4604      	mov	r4, r0
    554c:	2800      	cmp	r0, #0
    554e:	d1d1      	bne.n	54f4 <hci_init+0x194>
		le_read_buffer_size_complete(rsp);
    5550:	9b03      	ldr	r3, [sp, #12]
    5552:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    5554:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    5558:	b291      	uxth	r1, r2
    555a:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
    555e:	b121      	cbz	r1, 556a <hci_init+0x20a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    5560:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    5562:	48b6      	ldr	r0, [pc, #728]	; (583c <hci_init+0x4dc>)
    5564:	4611      	mov	r1, r2
    5566:	f00a fa9f 	bl	faa8 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    556a:	9803      	ldr	r0, [sp, #12]
    556c:	f003 fc26 	bl	8dbc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5570:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    5574:	f016 0620 	ands.w	r6, r6, #32
    5578:	f000 80e0 	beq.w	573c <hci_init+0x3dc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    557c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    5580:	071c      	lsls	r4, r3, #28
    5582:	d511      	bpl.n	55a8 <hci_init+0x248>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    5584:	2100      	movs	r1, #0
    5586:	f242 001c 	movw	r0, #8220	; 0x201c
    558a:	aa03      	add	r2, sp, #12
    558c:	f7fe ffaa 	bl	44e4 <bt_hci_cmd_send_sync>
		if (err) {
    5590:	4604      	mov	r4, r0
    5592:	2800      	cmp	r0, #0
    5594:	d1ae      	bne.n	54f4 <hci_init+0x194>
		le_read_supp_states_complete(rsp);
    5596:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5598:	6883      	ldr	r3, [r0, #8]
    559a:	f853 2f01 	ldr.w	r2, [r3, #1]!
    559e:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    55a0:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    55a4:	f003 fc0a 	bl	8dbc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    55a8:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    55ac:	0698      	lsls	r0, r3, #26
    55ae:	d524      	bpl.n	55fa <hci_init+0x29a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    55b0:	a902      	add	r1, sp, #8
    55b2:	f10d 0006 	add.w	r0, sp, #6
    55b6:	f7ff f80d 	bl	45d4 <hci_le_read_max_data_len>
		if (err) {
    55ba:	4604      	mov	r4, r0
    55bc:	2800      	cmp	r0, #0
    55be:	d199      	bne.n	54f4 <hci_init+0x194>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    55c0:	2104      	movs	r1, #4
    55c2:	f242 0024 	movw	r0, #8228	; 0x2024
    55c6:	f7fe ff55 	bl	4474 <bt_hci_cmd_create>
		if (!buf) {
    55ca:	4606      	mov	r6, r0
    55cc:	2800      	cmp	r0, #0
    55ce:	f43f af62 	beq.w	5496 <hci_init+0x136>
	return net_buf_simple_add(&buf->b, len);
    55d2:	2104      	movs	r1, #4
    55d4:	3008      	adds	r0, #8
    55d6:	f009 fa84 	bl	eae2 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    55da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    55de:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    55e0:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    55e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    55e6:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    55e8:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    55ea:	f242 0024 	movw	r0, #8228	; 0x2024
    55ee:	f7fe ff79 	bl	44e4 <bt_hci_cmd_send_sync>
		if (err) {
    55f2:	4604      	mov	r4, r0
    55f4:	2800      	cmp	r0, #0
    55f6:	f47f af7d 	bne.w	54f4 <hci_init+0x194>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    55fa:	2108      	movs	r1, #8
    55fc:	f242 0001 	movw	r0, #8193	; 0x2001
    5600:	f7fe ff38 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    5604:	4604      	mov	r4, r0
    5606:	2800      	cmp	r0, #0
    5608:	f43f af45 	beq.w	5496 <hci_init+0x136>
    560c:	2108      	movs	r1, #8
    560e:	4408      	add	r0, r1
    5610:	f009 fa67 	bl	eae2 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    5614:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    5618:	f012 0f02 	tst.w	r2, #2
    561c:	bf14      	ite	ne
    561e:	232f      	movne	r3, #47	; 0x2f
    5620:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    5622:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    5624:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    5628:	bf48      	it	mi
    562a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    562e:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    5632:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    5636:	bf18      	it	ne
    5638:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    563c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    563e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    5642:	4621      	mov	r1, r4
    5644:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    5646:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    5648:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    564a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    564c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    564e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    5650:	71c2      	strb	r2, [r0, #7]
    5652:	f242 0001 	movw	r0, #8193	; 0x2001
    5656:	f7fe ff45 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    565a:	4604      	mov	r4, r0
    565c:	2800      	cmp	r0, #0
    565e:	f47f af49 	bne.w	54f4 <hci_init+0x194>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5662:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    5666:	069a      	lsls	r2, r3, #26
    5668:	d41e      	bmi.n	56a8 <hci_init+0x348>
	if (bt_dev.le.acl_mtu) {
    566a:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    566e:	b9d9      	cbnz	r1, 56a8 <hci_init+0x348>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    5670:	f241 0005 	movw	r0, #4101	; 0x1005
    5674:	aa03      	add	r2, sp, #12
    5676:	f7fe ff35 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    567a:	4604      	mov	r4, r0
    567c:	2800      	cmp	r0, #0
    567e:	f47f af39 	bne.w	54f4 <hci_init+0x194>
	if (bt_dev.le.acl_mtu) {
    5682:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    5686:	b963      	cbnz	r3, 56a2 <hci_init+0x342>
	read_buffer_size_complete(rsp);
    5688:	9b03      	ldr	r3, [sp, #12]
    568a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    568c:	785a      	ldrb	r2, [r3, #1]
    568e:	7899      	ldrb	r1, [r3, #2]
    5690:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5694:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    5698:	889a      	ldrh	r2, [r3, #4]
    569a:	4868      	ldr	r0, [pc, #416]	; (583c <hci_init+0x4dc>)
    569c:	4611      	mov	r1, r2
    569e:	f00a fa03 	bl	faa8 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    56a2:	9803      	ldr	r0, [sp, #12]
    56a4:	f003 fb8a 	bl	8dbc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    56a8:	2108      	movs	r1, #8
    56aa:	f640 4001 	movw	r0, #3073	; 0xc01
    56ae:	f7fe fee1 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    56b2:	4604      	mov	r4, r0
    56b4:	2800      	cmp	r0, #0
    56b6:	f43f aeee 	beq.w	5496 <hci_init+0x136>
    56ba:	2108      	movs	r1, #8
    56bc:	4408      	add	r0, r1
    56be:	f009 fa10 	bl	eae2 <net_buf_simple_add>
	dst[0] = val;
    56c2:	2310      	movs	r3, #16
    56c4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    56c6:	2388      	movs	r3, #136	; 0x88
    56c8:	7043      	strb	r3, [r0, #1]
    56ca:	2302      	movs	r3, #2
	dst[0] = val;
    56cc:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    56ce:	70c3      	strb	r3, [r0, #3]
    56d0:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    56d2:	4621      	mov	r1, r4
	dst[0] = val;
    56d4:	7082      	strb	r2, [r0, #2]
    56d6:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    56d8:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    56da:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    56dc:	71c3      	strb	r3, [r0, #7]
    56de:	f640 4001 	movw	r0, #3073	; 0xc01
    56e2:	f7fe feff 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    56e6:	4604      	mov	r4, r0
    56e8:	2800      	cmp	r0, #0
    56ea:	f47f af03 	bne.w	54f4 <hci_init+0x194>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    56ee:	4601      	mov	r1, r0
    56f0:	aa02      	add	r2, sp, #8
    56f2:	f64f 4001 	movw	r0, #64513	; 0xfc01
    56f6:	f7fe fef5 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    56fa:	4e51      	ldr	r6, [pc, #324]	; (5840 <hci_init+0x4e0>)
    56fc:	4b51      	ldr	r3, [pc, #324]	; (5844 <hci_init+0x4e4>)
    56fe:	1af6      	subs	r6, r6, r3
    5700:	08f6      	lsrs	r6, r6, #3
    5702:	01b6      	lsls	r6, r6, #6
    5704:	b3a8      	cbz	r0, 5772 <hci_init+0x412>
		BT_WARN("Vendor HCI extensions not available");
    5706:	4850      	ldr	r0, [pc, #320]	; (5848 <hci_init+0x4e8>)
    5708:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    570c:	f006 feeb 	bl	c4e6 <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    5710:	79eb      	ldrb	r3, [r5, #7]
    5712:	2b00      	cmp	r3, #0
    5714:	f47f aeee 	bne.w	54f4 <hci_init+0x194>
		bt_setup_public_id_addr();
    5718:	f7ff fd4c 	bl	51b4 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    571c:	79eb      	ldrb	r3, [r5, #7]
    571e:	2b00      	cmp	r3, #0
    5720:	f47f aee8 	bne.w	54f4 <hci_init+0x194>
		err = bt_setup_random_id_addr();
    5724:	f7ff fdf0 	bl	5308 <bt_setup_random_id_addr>
		if (err) {
    5728:	4604      	mov	r4, r0
    572a:	2800      	cmp	r0, #0
    572c:	f000 80af 	beq.w	588e <hci_init+0x52e>
			BT_ERR("Unable to set identity address");
    5730:	4846      	ldr	r0, [pc, #280]	; (584c <hci_init+0x4ec>)
    5732:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
    5736:	f006 fed6 	bl	c4e6 <log_0>
			return err;
    573a:	e6db      	b.n	54f4 <hci_init+0x194>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    573c:	2102      	movs	r1, #2
    573e:	f640 406d 	movw	r0, #3181	; 0xc6d
    5742:	f7fe fe97 	bl	4474 <bt_hci_cmd_create>
		if (!buf) {
    5746:	4604      	mov	r4, r0
    5748:	2800      	cmp	r0, #0
    574a:	f43f aea4 	beq.w	5496 <hci_init+0x136>
    574e:	2102      	movs	r1, #2
    5750:	3008      	adds	r0, #8
    5752:	f009 f9c6 	bl	eae2 <net_buf_simple_add>
		cp_le->le = 0x01;
    5756:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    5758:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    575a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    575c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    575e:	4632      	mov	r2, r6
    5760:	f640 406d 	movw	r0, #3181	; 0xc6d
    5764:	f7fe febe 	bl	44e4 <bt_hci_cmd_send_sync>
		if (err) {
    5768:	4604      	mov	r4, r0
    576a:	2800      	cmp	r0, #0
    576c:	f43f af06 	beq.w	557c <hci_init+0x21c>
    5770:	e6c0      	b.n	54f4 <hci_init+0x194>
	rp.info = (void *)rsp->data;
    5772:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    5774:	4836      	ldr	r0, [pc, #216]	; (5850 <hci_init+0x4f0>)
	rp.info = (void *)rsp->data;
    5776:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    5778:	f046 0303 	orr.w	r3, r6, #3
    577c:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    5780:	2a03      	cmp	r2, #3
		return plat_str[platform];
    5782:	bf96      	itet	ls
    5784:	4933      	ldrls	r1, [pc, #204]	; (5854 <hci_init+0x4f4>)
	return "unknown";
    5786:	4934      	ldrhi	r1, [pc, #208]	; (5858 <hci_init+0x4f8>)
		return plat_str[platform];
    5788:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    578c:	f006 fecc 	bl	c528 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    5790:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    5794:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    5798:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    579a:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    579e:	d12e      	bne.n	57fe <hci_init+0x49e>
	if (variant < ARRAY_SIZE(nordic_str)) {
    57a0:	2a03      	cmp	r2, #3
    57a2:	d82c      	bhi.n	57fe <hci_init+0x49e>
		return nordic_str[variant];
    57a4:	492d      	ldr	r1, [pc, #180]	; (585c <hci_init+0x4fc>)
    57a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    57aa:	482d      	ldr	r0, [pc, #180]	; (5860 <hci_init+0x500>)
    57ac:	f006 febc 	bl	c528 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    57b0:	797a      	ldrb	r2, [r7, #5]
    57b2:	f046 0303 	orr.w	r3, r6, #3
	if (variant < ARRAY_SIZE(var_str)) {
    57b6:	2a03      	cmp	r2, #3
		return var_str[variant];
    57b8:	bf96      	itet	ls
    57ba:	492a      	ldrls	r1, [pc, #168]	; (5864 <hci_init+0x504>)
	return "unknown";
    57bc:	4926      	ldrhi	r1, [pc, #152]	; (5858 <hci_init+0x4f8>)
		return var_str[variant];
    57be:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    57c2:	4829      	ldr	r0, [pc, #164]	; (5868 <hci_init+0x508>)
    57c4:	e9cd 1203 	strd	r1, r2, [sp, #12]
    57c8:	79ba      	ldrb	r2, [r7, #6]
    57ca:	a903      	add	r1, sp, #12
    57cc:	9205      	str	r2, [sp, #20]
    57ce:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    57d2:	9206      	str	r2, [sp, #24]
    57d4:	f8d7 2009 	ldr.w	r2, [r7, #9]
    57d8:	9207      	str	r2, [sp, #28]
    57da:	2205      	movs	r2, #5
    57dc:	f006 fed9 	bl	c592 <log_n>
	net_buf_unref(rsp);
    57e0:	9802      	ldr	r0, [sp, #8]
    57e2:	f003 faeb 	bl	8dbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    57e6:	2100      	movs	r1, #0
    57e8:	f64f 4002 	movw	r0, #64514	; 0xfc02
    57ec:	aa02      	add	r2, sp, #8
    57ee:	f7fe fe79 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    57f2:	4607      	mov	r7, r0
    57f4:	b128      	cbz	r0, 5802 <hci_init+0x4a2>
		BT_WARN("Failed to read supported vendor commands");
    57f6:	481d      	ldr	r0, [pc, #116]	; (586c <hci_init+0x50c>)
    57f8:	f046 0102 	orr.w	r1, r6, #2
    57fc:	e786      	b.n	570c <hci_init+0x3ac>
		return "unknown";
    57fe:	4916      	ldr	r1, [pc, #88]	; (5858 <hci_init+0x4f8>)
    5800:	e7d3      	b.n	57aa <hci_init+0x44a>
	rp.cmds = (void *)rsp->data;
    5802:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    5804:	2202      	movs	r2, #2
    5806:	6899      	ldr	r1, [r3, #8]
    5808:	4819      	ldr	r0, [pc, #100]	; (5870 <hci_init+0x510>)
    580a:	3101      	adds	r1, #1
    580c:	f007 fe95 	bl	d53a <memcpy>
	net_buf_unref(rsp);
    5810:	9802      	ldr	r0, [sp, #8]
    5812:	f003 fad3 	bl	8dbc <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    5816:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    581a:	075b      	lsls	r3, r3, #29
    581c:	f57f af78 	bpl.w	5710 <hci_init+0x3b0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    5820:	4639      	mov	r1, r7
    5822:	f64f 4003 	movw	r0, #64515	; 0xfc03
    5826:	aa02      	add	r2, sp, #8
    5828:	f7fe fe5c 	bl	44e4 <bt_hci_cmd_send_sync>
		if (err) {
    582c:	b320      	cbz	r0, 5878 <hci_init+0x518>
			BT_WARN("Failed to read supported vendor features");
    582e:	4811      	ldr	r0, [pc, #68]	; (5874 <hci_init+0x514>)
    5830:	f046 0102 	orr.w	r1, r6, #2
    5834:	e76a      	b.n	570c <hci_init+0x3ac>
    5836:	bf00      	nop
    5838:	20000098 	.word	0x20000098
    583c:	200000c8 	.word	0x200000c8
    5840:	00010320 	.word	0x00010320
    5844:	000102f8 	.word	0x000102f8
    5848:	0001211b 	.word	0x0001211b
    584c:	000121ef 	.word	0x000121ef
    5850:	0001213f 	.word	0x0001213f
    5854:	000107c0 	.word	0x000107c0
    5858:	00011b21 	.word	0x00011b21
    585c:	00010790 	.word	0x00010790
    5860:	00012158 	.word	0x00012158
    5864:	000107f8 	.word	0x000107f8
    5868:	00012170 	.word	0x00012170
    586c:	0001219d 	.word	0x0001219d
    5870:	20000085 	.word	0x20000085
    5874:	000121c6 	.word	0x000121c6
		memcpy(bt_dev.vs_features, rp.feat->features,
    5878:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    587a:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    587c:	4809      	ldr	r0, [pc, #36]	; (58a4 <hci_init+0x544>)
    587e:	6899      	ldr	r1, [r3, #8]
    5880:	4411      	add	r1, r2
    5882:	f007 fe5a 	bl	d53a <memcpy>
		net_buf_unref(rsp);
    5886:	9802      	ldr	r0, [sp, #8]
    5888:	f003 fa98 	bl	8dbc <net_buf_unref>
    588c:	e740      	b.n	5710 <hci_init+0x3b0>
		err = set_random_address(&bt_dev.id_addr[0].a);
    588e:	4806      	ldr	r0, [pc, #24]	; (58a8 <hci_init+0x548>)
    5890:	f7fe feca 	bl	4628 <set_random_address>
		if (err) {
    5894:	4604      	mov	r4, r0
    5896:	2800      	cmp	r0, #0
    5898:	f43f ae2c 	beq.w	54f4 <hci_init+0x194>
			BT_ERR("Unable to set random address");
    589c:	4803      	ldr	r0, [pc, #12]	; (58ac <hci_init+0x54c>)
    589e:	f046 0101 	orr.w	r1, r6, #1
    58a2:	e748      	b.n	5736 <hci_init+0x3d6>
    58a4:	20000084 	.word	0x20000084
    58a8:	20000001 	.word	0x20000001
    58ac:	0001220e 	.word	0x0001220e

000058b0 <bt_enable>:
{
    58b0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
    58b4:	4d3d      	ldr	r5, [pc, #244]	; (59ac <bt_enable+0xfc>)
{
    58b6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    58b8:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
{
    58bc:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    58be:	b97b      	cbnz	r3, 58e0 <bt_enable+0x30>
    58c0:	4b3b      	ldr	r3, [pc, #236]	; (59b0 <bt_enable+0x100>)
    58c2:	493c      	ldr	r1, [pc, #240]	; (59b4 <bt_enable+0x104>)
		BT_ERR("No HCI driver registered");
    58c4:	483c      	ldr	r0, [pc, #240]	; (59b8 <bt_enable+0x108>)
    58c6:	1ac9      	subs	r1, r1, r3
    58c8:	08c9      	lsrs	r1, r1, #3
    58ca:	0189      	lsls	r1, r1, #6
    58cc:	f041 0101 	orr.w	r1, r1, #1
    58d0:	f006 fe09 	bl	c4e6 <log_0>
		return -ENODEV;
    58d4:	f06f 0412 	mvn.w	r4, #18
}
    58d8:	4620      	mov	r0, r4
    58da:	b008      	add	sp, #32
    58dc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    58e0:	2101      	movs	r1, #1
    58e2:	f105 0094 	add.w	r0, r5, #148	; 0x94
    58e6:	f007 ff03 	bl	d6f0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    58ea:	f010 0401 	ands.w	r4, r0, #1
    58ee:	d15a      	bne.n	59a6 <bt_enable+0xf6>
	ready_cb = cb;
    58f0:	4b32      	ldr	r3, [pc, #200]	; (59bc <bt_enable+0x10c>)
    58f2:	f04f 0800 	mov.w	r8, #0
    58f6:	f04f 0900 	mov.w	r9, #0
    58fa:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    58fc:	f06f 0308 	mvn.w	r3, #8
    5900:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5904:	e9cd 4302 	strd	r4, r3, [sp, #8]
    5908:	e9cd 8906 	strd	r8, r9, [sp, #24]
    590c:	e9cd 4400 	strd	r4, r4, [sp]
    5910:	4b2b      	ldr	r3, [pc, #172]	; (59c0 <bt_enable+0x110>)
    5912:	492c      	ldr	r1, [pc, #176]	; (59c4 <bt_enable+0x114>)
    5914:	9404      	str	r4, [sp, #16]
    5916:	482c      	ldr	r0, [pc, #176]	; (59c8 <bt_enable+0x118>)
    5918:	f005 fc52 	bl	b1c0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    591c:	492b      	ldr	r1, [pc, #172]	; (59cc <bt_enable+0x11c>)
    591e:	482a      	ldr	r0, [pc, #168]	; (59c8 <bt_enable+0x118>)
    5920:	f00a f8dc 	bl	fadc <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5924:	f06f 0307 	mvn.w	r3, #7
    5928:	f44f 6280 	mov.w	r2, #1024	; 0x400
    592c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    5930:	e9cd 8906 	strd	r8, r9, [sp, #24]
    5934:	e9cd 4400 	strd	r4, r4, [sp]
    5938:	4b25      	ldr	r3, [pc, #148]	; (59d0 <bt_enable+0x120>)
    593a:	4926      	ldr	r1, [pc, #152]	; (59d4 <bt_enable+0x124>)
    593c:	9404      	str	r4, [sp, #16]
    593e:	4826      	ldr	r0, [pc, #152]	; (59d8 <bt_enable+0x128>)
    5940:	f005 fc3e 	bl	b1c0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5944:	4925      	ldr	r1, [pc, #148]	; (59dc <bt_enable+0x12c>)
    5946:	4824      	ldr	r0, [pc, #144]	; (59d8 <bt_enable+0x128>)
    5948:	f00a f8c8 	bl	fadc <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    594c:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
    5950:	68db      	ldr	r3, [r3, #12]
    5952:	4798      	blx	r3
	if (err) {
    5954:	4604      	mov	r4, r0
    5956:	b158      	cbz	r0, 5970 <bt_enable+0xc0>
    5958:	4b15      	ldr	r3, [pc, #84]	; (59b0 <bt_enable+0x100>)
    595a:	4a16      	ldr	r2, [pc, #88]	; (59b4 <bt_enable+0x104>)
		BT_ERR("HCI driver open failed (%d)", err);
    595c:	4601      	mov	r1, r0
    595e:	1ad2      	subs	r2, r2, r3
    5960:	08d2      	lsrs	r2, r2, #3
    5962:	0192      	lsls	r2, r2, #6
    5964:	481e      	ldr	r0, [pc, #120]	; (59e0 <bt_enable+0x130>)
    5966:	f042 0201 	orr.w	r2, r2, #1
    596a:	f006 fdc9 	bl	c500 <log_1>
		return err;
    596e:	e7b3      	b.n	58d8 <bt_enable+0x28>
	if (!cb) {
    5970:	b966      	cbnz	r6, 598c <bt_enable+0xdc>
	err = hci_init();
    5972:	f7ff fcf5 	bl	5360 <hci_init>
	if (err) {
    5976:	4604      	mov	r4, r0
    5978:	2800      	cmp	r0, #0
    597a:	d1ad      	bne.n	58d8 <bt_enable+0x28>
		err = bt_conn_init();
    597c:	f001 f84e 	bl	6a1c <bt_conn_init>
		if (err) {
    5980:	4604      	mov	r4, r0
    5982:	2800      	cmp	r0, #0
    5984:	d1a8      	bne.n	58d8 <bt_enable+0x28>
	bt_finalize_init();
    5986:	f7ff fb61 	bl	504c <bt_finalize_init>
	return 0;
    598a:	e7a5      	b.n	58d8 <bt_enable+0x28>
    598c:	2101      	movs	r1, #1
    598e:	f105 0090 	add.w	r0, r5, #144	; 0x90
    5992:	f007 fead 	bl	d6f0 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5996:	07c3      	lsls	r3, r0, #31
    5998:	d49e      	bmi.n	58d8 <bt_enable+0x28>
		k_queue_append(&work_q->queue, work);
    599a:	4812      	ldr	r0, [pc, #72]	; (59e4 <bt_enable+0x134>)
    599c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    59a0:	f009 ff36 	bl	f810 <k_queue_append>
    59a4:	e798      	b.n	58d8 <bt_enable+0x28>
		return -EALREADY;
    59a6:	f06f 0444 	mvn.w	r4, #68	; 0x44
    59aa:	e795      	b.n	58d8 <bt_enable+0x28>
    59ac:	20000000 	.word	0x20000000
    59b0:	000102f8 	.word	0x000102f8
    59b4:	00010320 	.word	0x00010320
    59b8:	0001222b 	.word	0x0001222b
    59bc:	200016c8 	.word	0x200016c8
    59c0:	00004d91 	.word	0x00004d91
    59c4:	20003918 	.word	0x20003918
    59c8:	200008b0 	.word	0x200008b0
    59cc:	00012244 	.word	0x00012244
    59d0:	00004061 	.word	0x00004061
    59d4:	20003518 	.word	0x20003518
    59d8:	20000828 	.word	0x20000828
    59dc:	0001224a 	.word	0x0001224a
    59e0:	00012250 	.word	0x00012250
    59e4:	20000e38 	.word	0x20000e38

000059e8 <init_work>:
{
    59e8:	b510      	push	{r4, lr}
	err = hci_init();
    59ea:	f7ff fcb9 	bl	5360 <hci_init>
	if (err) {
    59ee:	4604      	mov	r4, r0
    59f0:	b928      	cbnz	r0, 59fe <init_work+0x16>
		err = bt_conn_init();
    59f2:	f001 f813 	bl	6a1c <bt_conn_init>
		if (err) {
    59f6:	4604      	mov	r4, r0
    59f8:	b908      	cbnz	r0, 59fe <init_work+0x16>
	bt_finalize_init();
    59fa:	f7ff fb27 	bl	504c <bt_finalize_init>
	if (ready_cb) {
    59fe:	4b04      	ldr	r3, [pc, #16]	; (5a10 <init_work+0x28>)
    5a00:	681b      	ldr	r3, [r3, #0]
    5a02:	b11b      	cbz	r3, 5a0c <init_work+0x24>
		ready_cb(err);
    5a04:	4620      	mov	r0, r4
}
    5a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    5a0a:	4718      	bx	r3
}
    5a0c:	bd10      	pop	{r4, pc}
    5a0e:	bf00      	nop
    5a10:	200016c8 	.word	0x200016c8

00005a14 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    5a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a18:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    5a1a:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    5a1c:	690d      	ldr	r5, [r1, #16]
{
    5a1e:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
    5a20:	ebb5 0b03 	subs.w	fp, r5, r3
{
    5a24:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5a26:	4883      	ldr	r0, [pc, #524]	; (5c34 <bt_le_adv_start_legacy+0x220>)
	bool dir_adv = (param->peer != NULL), scannable;
    5a28:	bf18      	it	ne
    5a2a:	f04f 0b01 	movne.w	fp, #1
{
    5a2e:	460c      	mov	r4, r1
    5a30:	4691      	mov	r9, r2
	struct bt_conn *conn = NULL;
    5a32:	9307      	str	r3, [sp, #28]
    5a34:	f007 fe53 	bl	d6de <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5a38:	0787      	lsls	r7, r0, #30
    5a3a:	f140 80ed 	bpl.w	5c18 <bt_le_adv_start_legacy+0x204>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    5a3e:	4608      	mov	r0, r1
    5a40:	f7fe f90a 	bl	3c58 <valid_adv_param>
    5a44:	4607      	mov	r7, r0
    5a46:	2800      	cmp	r0, #0
    5a48:	f000 80e9 	beq.w	5c1e <bt_le_adv_start_legacy+0x20a>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    5a4c:	f106 0810 	add.w	r8, r6, #16
    5a50:	4640      	mov	r0, r8
    5a52:	f007 fe44 	bl	d6de <atomic_get>
    5a56:	f3c0 1180 	ubfx	r1, r0, #6, #1
    5a5a:	0640      	lsls	r0, r0, #25
    5a5c:	f100 80e2 	bmi.w	5c24 <bt_le_adv_start_legacy+0x210>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    5a60:	220f      	movs	r2, #15
    5a62:	a80a      	add	r0, sp, #40	; 0x28
    5a64:	9105      	str	r1, [sp, #20]
    5a66:	f007 fd93 	bl	d590 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    5a6a:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    5a6c:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    5a6e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    5a72:	68e3      	ldr	r3, [r4, #12]
    5a74:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    5a78:	f007 fe22 	bl	d6c0 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    5a7c:	7832      	ldrb	r2, [r6, #0]
    5a7e:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    5a80:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
    5a82:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
    5a84:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
    5a88:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    5a8c:	d004      	beq.n	5a98 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5a8e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    5a92:	4868      	ldr	r0, [pc, #416]	; (5c34 <bt_le_adv_start_legacy+0x220>)
    5a94:	f007 fe37 	bl	d706 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    5a98:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
    5a9a:	4b67      	ldr	r3, [pc, #412]	; (5c38 <bt_le_adv_start_legacy+0x224>)
	adv->id = param->id;
    5a9c:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    5a9e:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    5aa2:	465a      	mov	r2, fp
    5aa4:	6861      	ldr	r1, [r4, #4]
    5aa6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    5aaa:	f7fe fdeb 	bl	4684 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    5aae:	4683      	mov	fp, r0
    5ab0:	2800      	cmp	r0, #0
    5ab2:	d16f      	bne.n	5b94 <bt_le_adv_start_legacy+0x180>
		return err;
	}

	if (dir_adv) {
    5ab4:	f106 0009 	add.w	r0, r6, #9
    5ab8:	2d00      	cmp	r5, #0
    5aba:	d048      	beq.n	5b4e <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    5abc:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    5abe:	f007 fe11 	bl	d6e4 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    5ac2:	6860      	ldr	r0, [r4, #4]
    5ac4:	07c1      	lsls	r1, r0, #31
    5ac6:	d54a      	bpl.n	5b5e <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
    5ac8:	2d00      	cmp	r5, #0
    5aca:	d045      	beq.n	5b58 <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    5acc:	f010 0f10 	tst.w	r0, #16
    5ad0:	bf14      	ite	ne
    5ad2:	2304      	movne	r3, #4
    5ad4:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    5ad6:	6921      	ldr	r1, [r4, #16]
    5ad8:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    5adc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    5ae0:	f007 fe00 	bl	d6e4 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    5ae4:	210f      	movs	r1, #15
    5ae6:	f242 0006 	movw	r0, #8198	; 0x2006
    5aea:	f7fe fcc3 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    5aee:	4683      	mov	fp, r0
    5af0:	2800      	cmp	r0, #0
    5af2:	f000 809a 	beq.w	5c2a <bt_le_adv_start_legacy+0x216>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5af6:	220f      	movs	r2, #15
    5af8:	a90a      	add	r1, sp, #40	; 0x28
    5afa:	3008      	adds	r0, #8
    5afc:	f008 fff7 	bl	eaee <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    5b00:	2200      	movs	r2, #0
    5b02:	4659      	mov	r1, fp
    5b04:	f242 0006 	movw	r0, #8198	; 0x2006
    5b08:	f7fe fcec 	bl	44e4 <bt_hci_cmd_send_sync>
	if (err) {
    5b0c:	2800      	cmp	r0, #0
    5b0e:	f040 808f 	bne.w	5c30 <bt_le_adv_start_legacy+0x21c>
		return err;
	}

	if (!dir_adv) {
    5b12:	b37d      	cbz	r5, 5b74 <bt_le_adv_start_legacy+0x160>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5b14:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5b16:	07da      	lsls	r2, r3, #31
    5b18:	d440      	bmi.n	5b9c <bt_le_adv_start_legacy+0x188>
	return set_le_adv_enable_legacy(adv, enable);
    5b1a:	2101      	movs	r1, #1
    5b1c:	4630      	mov	r0, r6
    5b1e:	f7fe fef1 	bl	4904 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    5b22:	4683      	mov	fp, r0
    5b24:	2800      	cmp	r0, #0
    5b26:	d070      	beq.n	5c0a <bt_le_adv_start_legacy+0x1f6>
    5b28:	4b44      	ldr	r3, [pc, #272]	; (5c3c <bt_le_adv_start_legacy+0x228>)
    5b2a:	4945      	ldr	r1, [pc, #276]	; (5c40 <bt_le_adv_start_legacy+0x22c>)
		BT_ERR("Failed to start advertiser");
    5b2c:	4845      	ldr	r0, [pc, #276]	; (5c44 <bt_le_adv_start_legacy+0x230>)
    5b2e:	1ac9      	subs	r1, r1, r3
    5b30:	08c9      	lsrs	r1, r1, #3
    5b32:	0189      	lsls	r1, r1, #6
    5b34:	f041 0101 	orr.w	r1, r1, #1
    5b38:	f006 fcd5 	bl	c4e6 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    5b3c:	9807      	ldr	r0, [sp, #28]
    5b3e:	b348      	cbz	r0, 5b94 <bt_le_adv_start_legacy+0x180>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5b40:	2100      	movs	r1, #0
    5b42:	f000 fcc9 	bl	64d8 <bt_conn_set_state>
			bt_conn_unref(conn);
    5b46:	9807      	ldr	r0, [sp, #28]
    5b48:	f007 ff3c 	bl	d9c4 <bt_conn_unref>
    5b4c:	e022      	b.n	5b94 <bt_le_adv_start_legacy+0x180>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    5b4e:	9508      	str	r5, [sp, #32]
    5b50:	a908      	add	r1, sp, #32
    5b52:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    5b56:	e7b2      	b.n	5abe <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
    5b58:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    5b5c:	e7c2      	b.n	5ae4 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    5b5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5b60:	b933      	cbnz	r3, 5b70 <bt_le_adv_start_legacy+0x15c>
    5b62:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    5b66:	f1c7 0303 	rsb	r3, r7, #3
    5b6a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    5b6e:	e7b9      	b.n	5ae4 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    5b70:	2701      	movs	r7, #1
    5b72:	e7f8      	b.n	5b66 <bt_le_adv_start_legacy+0x152>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    5b74:	6863      	ldr	r3, [r4, #4]
    5b76:	4652      	mov	r2, sl
    5b78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    5b7c:	e9cd 7301 	strd	r7, r3, [sp, #4]
    5b80:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5b82:	4649      	mov	r1, r9
    5b84:	9300      	str	r3, [sp, #0]
    5b86:	4630      	mov	r0, r6
    5b88:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5b8a:	f7fe fe47 	bl	481c <le_adv_update.constprop.0>
		if (err) {
    5b8e:	4683      	mov	fp, r0
    5b90:	2800      	cmp	r0, #0
    5b92:	d0bf      	beq.n	5b14 <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    5b94:	4658      	mov	r0, fp
    5b96:	b00f      	add	sp, #60	; 0x3c
    5b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    5b9c:	4630      	mov	r0, r6
    5b9e:	a907      	add	r1, sp, #28
    5ba0:	f7fe fbe6 	bl	4370 <le_adv_start_add_conn>
		if (err) {
    5ba4:	4683      	mov	fp, r0
    5ba6:	2800      	cmp	r0, #0
    5ba8:	d0b7      	beq.n	5b1a <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
    5baa:	f110 0f0c 	cmn.w	r0, #12
    5bae:	d1f1      	bne.n	5b94 <bt_le_adv_start_legacy+0x180>
    5bb0:	2d00      	cmp	r5, #0
    5bb2:	d1ef      	bne.n	5b94 <bt_le_adv_start_legacy+0x180>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    5bb4:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    5bb6:	079b      	lsls	r3, r3, #30
    5bb8:	d4ec      	bmi.n	5b94 <bt_le_adv_start_legacy+0x180>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    5bba:	6860      	ldr	r0, [r4, #4]
    5bbc:	f080 0002 	eor.w	r0, r0, #2
    5bc0:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    5bc4:	f00b 0201 	and.w	r2, fp, #1
    5bc8:	210c      	movs	r1, #12
    5bca:	4640      	mov	r0, r8
    5bcc:	f007 fda6 	bl	d71c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    5bd0:	6862      	ldr	r2, [r4, #4]
    5bd2:	2107      	movs	r1, #7
    5bd4:	4640      	mov	r0, r8
    5bd6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    5bda:	f007 fd9f 	bl	d71c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    5bde:	6862      	ldr	r2, [r4, #4]
    5be0:	2108      	movs	r1, #8
    5be2:	4640      	mov	r0, r8
    5be4:	f002 0201 	and.w	r2, r2, #1
    5be8:	f007 fd98 	bl	d71c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    5bec:	463a      	mov	r2, r7
    5bee:	2109      	movs	r1, #9
    5bf0:	4640      	mov	r0, r8
    5bf2:	f007 fd93 	bl	d71c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    5bf6:	6862      	ldr	r2, [r4, #4]
    5bf8:	210b      	movs	r1, #11
    5bfa:	4640      	mov	r0, r8
    5bfc:	f3c2 0280 	ubfx	r2, r2, #2, #1
    5c00:	f007 fd8c 	bl	d71c <atomic_set_bit_to>
	return 0;
    5c04:	f04f 0b00 	mov.w	fp, #0
    5c08:	e7c4      	b.n	5b94 <bt_le_adv_start_legacy+0x180>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    5c0a:	9807      	ldr	r0, [sp, #28]
    5c0c:	b108      	cbz	r0, 5c12 <bt_le_adv_start_legacy+0x1fe>
		bt_conn_unref(conn);
    5c0e:	f007 fed9 	bl	d9c4 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    5c12:	2d00      	cmp	r5, #0
    5c14:	d1d6      	bne.n	5bc4 <bt_le_adv_start_legacy+0x1b0>
    5c16:	e7d0      	b.n	5bba <bt_le_adv_start_legacy+0x1a6>
		return -EAGAIN;
    5c18:	f06f 0b0a 	mvn.w	fp, #10
    5c1c:	e7ba      	b.n	5b94 <bt_le_adv_start_legacy+0x180>
		return -EINVAL;
    5c1e:	f06f 0b15 	mvn.w	fp, #21
    5c22:	e7b7      	b.n	5b94 <bt_le_adv_start_legacy+0x180>
		return -EALREADY;
    5c24:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    5c28:	e7b4      	b.n	5b94 <bt_le_adv_start_legacy+0x180>
		return -ENOBUFS;
    5c2a:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    5c2e:	e7b1      	b.n	5b94 <bt_le_adv_start_legacy+0x180>
    5c30:	4683      	mov	fp, r0
    5c32:	e7af      	b.n	5b94 <bt_le_adv_start_legacy+0x180>
    5c34:	20000094 	.word	0x20000094
    5c38:	20000000 	.word	0x20000000
    5c3c:	000102f8 	.word	0x000102f8
    5c40:	00010320 	.word	0x00010320
    5c44:	0001226c 	.word	0x0001226c

00005c48 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    5c48:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    5c4a:	9c04      	ldr	r4, [sp, #16]
    5c4c:	e9cd 3400 	strd	r3, r4, [sp]
    5c50:	4613      	mov	r3, r2
    5c52:	460a      	mov	r2, r1
    5c54:	4601      	mov	r1, r0
    5c56:	4802      	ldr	r0, [pc, #8]	; (5c60 <bt_le_adv_start+0x18>)
    5c58:	f7ff fedc 	bl	5a14 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    5c5c:	b002      	add	sp, #8
    5c5e:	bd10      	pop	{r4, pc}
    5c60:	20000018 	.word	0x20000018

00005c64 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    5c64:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5c66:	4818      	ldr	r0, [pc, #96]	; (5cc8 <bt_le_adv_resume+0x64>)
    5c68:	f007 fd39 	bl	d6de <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    5c6c:	04c1      	lsls	r1, r0, #19
    5c6e:	d529      	bpl.n	5cc4 <bt_le_adv_resume+0x60>
    5c70:	4815      	ldr	r0, [pc, #84]	; (5cc8 <bt_le_adv_resume+0x64>)
    5c72:	f007 fd34 	bl	d6de <atomic_get>
    5c76:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5c78:	f3c0 1480 	ubfx	r4, r0, #6, #1
    5c7c:	d422      	bmi.n	5cc4 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5c7e:	4812      	ldr	r0, [pc, #72]	; (5cc8 <bt_le_adv_resume+0x64>)
    5c80:	f007 fd2d 	bl	d6de <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    5c84:	05c3      	lsls	r3, r0, #23
    5c86:	d51d      	bpl.n	5cc4 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    5c88:	4810      	ldr	r0, [pc, #64]	; (5ccc <bt_le_adv_resume+0x68>)
    5c8a:	a901      	add	r1, sp, #4
    5c8c:	f7fe fb70 	bl	4370 <le_adv_start_add_conn>
	if (err) {
    5c90:	b9c0      	cbnz	r0, 5cc4 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    5c92:	2101      	movs	r1, #1
    5c94:	480d      	ldr	r0, [pc, #52]	; (5ccc <bt_le_adv_resume+0x68>)
    5c96:	f7fe fe35 	bl	4904 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    5c9a:	b150      	cbz	r0, 5cb2 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5c9c:	4621      	mov	r1, r4
    5c9e:	9801      	ldr	r0, [sp, #4]
    5ca0:	f000 fc1a 	bl	64d8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5ca4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    5ca8:	4807      	ldr	r0, [pc, #28]	; (5cc8 <bt_le_adv_resume+0x64>)
    5caa:	f007 fd2c 	bl	d706 <atomic_and>
	return (old & mask) != 0;
    5cae:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    5cb2:	9801      	ldr	r0, [sp, #4]
    5cb4:	f007 fe86 	bl	d9c4 <bt_conn_unref>
	if (persist_paused) {
    5cb8:	b124      	cbz	r4, 5cc4 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5cba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5cbe:	4802      	ldr	r0, [pc, #8]	; (5cc8 <bt_le_adv_resume+0x64>)
    5cc0:	f007 fd16 	bl	d6f0 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    5cc4:	b002      	add	sp, #8
    5cc6:	bd10      	pop	{r4, pc}
    5cc8:	20000028 	.word	0x20000028
    5ccc:	20000018 	.word	0x20000018

00005cd0 <enh_conn_complete>:
{
    5cd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    5cd4:	7805      	ldrb	r5, [r0, #0]
{
    5cd6:	4604      	mov	r4, r0
	if (evt->status) {
    5cd8:	b365      	cbz	r5, 5d34 <enh_conn_complete+0x64>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5cda:	2d3c      	cmp	r5, #60	; 0x3c
    5cdc:	d11e      	bne.n	5d1c <enh_conn_complete+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5cde:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5ce2:	4858      	ldr	r0, [pc, #352]	; (5e44 <enh_conn_complete+0x174>)
    5ce4:	f007 fd0f 	bl	d706 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    5ce8:	2000      	movs	r0, #0
    5cea:	f7fe fa71 	bl	41d0 <find_pending_connect.part.0>
		if (!conn) {
    5cee:	4604      	mov	r4, r0
    5cf0:	b960      	cbnz	r0, 5d0c <enh_conn_complete+0x3c>
    5cf2:	4955      	ldr	r1, [pc, #340]	; (5e48 <enh_conn_complete+0x178>)
    5cf4:	4b55      	ldr	r3, [pc, #340]	; (5e4c <enh_conn_complete+0x17c>)
			BT_ERR("No pending slave connection");
    5cf6:	4856      	ldr	r0, [pc, #344]	; (5e50 <enh_conn_complete+0x180>)
    5cf8:	1ac9      	subs	r1, r1, r3
    5cfa:	08c9      	lsrs	r1, r1, #3
    5cfc:	0189      	lsls	r1, r1, #6
    5cfe:	f041 0101 	orr.w	r1, r1, #1
    5d02:	f006 fbf0 	bl	c4e6 <log_0>
}
    5d06:	b004      	add	sp, #16
    5d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    5d0c:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5d0e:	2100      	movs	r1, #0
    5d10:	f000 fbe2 	bl	64d8 <bt_conn_set_state>
		bt_conn_unref(conn);
    5d14:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    5d16:	f007 fe55 	bl	d9c4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5d1a:	e7f4      	b.n	5d06 <enh_conn_complete+0x36>
    5d1c:	4b4b      	ldr	r3, [pc, #300]	; (5e4c <enh_conn_complete+0x17c>)
    5d1e:	4a4a      	ldr	r2, [pc, #296]	; (5e48 <enh_conn_complete+0x178>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    5d20:	4629      	mov	r1, r5
    5d22:	1ad2      	subs	r2, r2, r3
    5d24:	08d2      	lsrs	r2, r2, #3
    5d26:	0192      	lsls	r2, r2, #6
    5d28:	484a      	ldr	r0, [pc, #296]	; (5e54 <enh_conn_complete+0x184>)
    5d2a:	f042 0202 	orr.w	r2, r2, #2
    5d2e:	f006 fbe7 	bl	c500 <log_1>
		return;
    5d32:	e7e8      	b.n	5d06 <enh_conn_complete+0x36>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5d34:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5d36:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5d3a:	3b02      	subs	r3, #2
    5d3c:	1d06      	adds	r6, r0, #4
    5d3e:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    5d40:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5d42:	fa1f f788 	uxth.w	r7, r8
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    5d46:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5d48:	d836      	bhi.n	5db8 <enh_conn_complete+0xe8>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    5d4a:	f007 fccb 	bl	d6e4 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5d4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5d52:	2206      	movs	r2, #6
    5d54:	3b02      	subs	r3, #2
    5d56:	f104 0111 	add.w	r1, r4, #17
    5d5a:	f10d 0001 	add.w	r0, sp, #1
    5d5e:	f88d 3008 	strb.w	r3, [sp, #8]
    5d62:	f007 fbea 	bl	d53a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    5d66:	2301      	movs	r3, #1
    5d68:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    5d6c:	78e3      	ldrb	r3, [r4, #3]
    5d6e:	2b01      	cmp	r3, #1
    5d70:	d10c      	bne.n	5d8c <enh_conn_complete+0xbc>
    5d72:	a802      	add	r0, sp, #8
    5d74:	f7fe fa2c 	bl	41d0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5d78:	78e3      	ldrb	r3, [r4, #3]
    5d7a:	4605      	mov	r5, r0
    5d7c:	2b01      	cmp	r3, #1
    5d7e:	d104      	bne.n	5d8a <enh_conn_complete+0xba>
    5d80:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5d84:	482f      	ldr	r0, [pc, #188]	; (5e44 <enh_conn_complete+0x174>)
    5d86:	f007 fcbe 	bl	d706 <atomic_and>
	if (!conn) {
    5d8a:	b9e5      	cbnz	r5, 5dc6 <enh_conn_complete+0xf6>
    5d8c:	4a2f      	ldr	r2, [pc, #188]	; (5e4c <enh_conn_complete+0x17c>)
    5d8e:	4c2e      	ldr	r4, [pc, #184]	; (5e48 <enh_conn_complete+0x178>)
		BT_ERR("No pending conn for peer %s",
    5d90:	4630      	mov	r0, r6
    5d92:	1aa4      	subs	r4, r4, r2
    5d94:	f7fd fe4a 	bl	3a2c <bt_addr_le_str_real>
    5d98:	f7fb fada 	bl	1350 <log_strdup>
    5d9c:	08e4      	lsrs	r4, r4, #3
    5d9e:	01a4      	lsls	r4, r4, #6
    5da0:	f044 0401 	orr.w	r4, r4, #1
    5da4:	4601      	mov	r1, r0
    5da6:	4622      	mov	r2, r4
    5da8:	482b      	ldr	r0, [pc, #172]	; (5e58 <enh_conn_complete+0x188>)
    5daa:	f006 fba9 	bl	c500 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    5dae:	211f      	movs	r1, #31
    5db0:	4638      	mov	r0, r7
    5db2:	f007 fcc4 	bl	d73e <bt_hci_disconnect>
		return;
    5db6:	e7a6      	b.n	5d06 <enh_conn_complete+0x36>
		bt_addr_le_copy(&id_addr,
    5db8:	f007 fc94 	bl	d6e4 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    5dbc:	4631      	mov	r1, r6
    5dbe:	4668      	mov	r0, sp
    5dc0:	f007 fc90 	bl	d6e4 <bt_addr_le_copy>
    5dc4:	e7d2      	b.n	5d6c <enh_conn_complete+0x9c>
	conn->handle = handle;
    5dc6:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    5dc8:	a902      	add	r1, sp, #8
	conn->handle = handle;
    5dca:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    5dce:	f007 fc89 	bl	d6e4 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    5dd2:	7e22      	ldrb	r2, [r4, #24]
    5dd4:	7de3      	ldrb	r3, [r4, #23]
    5dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5dda:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5dde:	7ea2      	ldrb	r2, [r4, #26]
    5de0:	7e63      	ldrb	r3, [r4, #25]
    5de2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5de6:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5dea:	7ee3      	ldrb	r3, [r4, #27]
    5dec:	7f22      	ldrb	r2, [r4, #28]
    5dee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5df2:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    5df6:	78e3      	ldrb	r3, [r4, #3]
	conn->err = 0U;
    5df8:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5dfa:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    5dfc:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    5dfe:	726c      	strb	r4, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5e00:	d116      	bne.n	5e30 <enh_conn_complete+0x160>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    5e02:	4669      	mov	r1, sp
    5e04:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    5e08:	f007 fc6c 	bl	d6e4 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    5e0c:	7a29      	ldrb	r1, [r5, #8]
    5e0e:	4e13      	ldr	r6, [pc, #76]	; (5e5c <enh_conn_complete+0x18c>)
    5e10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    5e14:	4431      	add	r1, r6
    5e16:	f105 0096 	add.w	r0, r5, #150	; 0x96
    5e1a:	f007 fc63 	bl	d6e4 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5e1e:	4622      	mov	r2, r4
    5e20:	f8d6 10a4 	ldr.w	r1, [r6, #164]	; 0xa4
    5e24:	f001 0340 	and.w	r3, r1, #64	; 0x40
    5e28:	4313      	orrs	r3, r2
    5e2a:	d001      	beq.n	5e30 <enh_conn_complete+0x160>
			bt_le_adv_resume();
    5e2c:	f7ff ff1a 	bl	5c64 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5e30:	2107      	movs	r1, #7
    5e32:	4628      	mov	r0, r5
    5e34:	f000 fb50 	bl	64d8 <bt_conn_set_state>
	conn_auto_initiate(conn);
    5e38:	4628      	mov	r0, r5
    5e3a:	f7fe fe3b 	bl	4ab4 <conn_auto_initiate>
	bt_conn_unref(conn);
    5e3e:	4628      	mov	r0, r5
    5e40:	e769      	b.n	5d16 <enh_conn_complete+0x46>
    5e42:	bf00      	nop
    5e44:	20000028 	.word	0x20000028
    5e48:	00010320 	.word	0x00010320
    5e4c:	000102f8 	.word	0x000102f8
    5e50:	00012287 	.word	0x00012287
    5e54:	000122a3 	.word	0x000122a3
    5e58:	000122bc 	.word	0x000122bc
    5e5c:	20000000 	.word	0x20000000

00005e60 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    5e60:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
    5e64:	2500      	movs	r5, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
    5e66:	b08c      	sub	sp, #48	; 0x30
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    5e68:	2100      	movs	r1, #0
    5e6a:	f242 0018 	movw	r0, #8216	; 0x2018
    5e6e:	aa02      	add	r2, sp, #8
    5e70:	f7fe fb38 	bl	44e4 <bt_hci_cmd_send_sync>
		if (ret) {
    5e74:	4604      	mov	r4, r0
    5e76:	bb98      	cbnz	r0, 5ee0 <prng_reseed.constprop.0+0x80>
			return ret;
		}

		rp = (void *)rsp->data;
    5e78:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
    5e7a:	2208      	movs	r2, #8
    5e7c:	6899      	ldr	r1, [r3, #8]
    5e7e:	ab04      	add	r3, sp, #16
    5e80:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
    5e84:	3101      	adds	r1, #1
    5e86:	f007 fb58 	bl	d53a <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    5e8a:	3501      	adds	r5, #1

		net_buf_unref(rsp);
    5e8c:	9802      	ldr	r0, [sp, #8]
    5e8e:	f002 ff95 	bl	8dbc <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    5e92:	2d04      	cmp	r5, #4
    5e94:	d1e8      	bne.n	5e68 <prng_reseed.constprop.0+0x8>
	return z_impl_k_uptime_ticks();
    5e96:	f009 fed8 	bl	fc4a <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    5e9a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    5e9e:	fba0 bc05 	umull	fp, ip, r0, r5
    5ea2:	fb05 cc01 	mla	ip, r5, r1, ip
    5ea6:	ea4f 32db 	mov.w	r2, fp, lsr #15
    5eaa:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
    5eae:	ea4f 33dc 	mov.w	r3, ip, lsr #15
	}

	extra = k_uptime_get();
    5eb2:	e9cd 2302 	strd	r2, r3, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    5eb6:	2308      	movs	r3, #8
    5eb8:	2220      	movs	r2, #32
    5eba:	9300      	str	r3, [sp, #0]
    5ebc:	480a      	ldr	r0, [pc, #40]	; (5ee8 <prng_reseed.constprop.0+0x88>)
    5ebe:	446b      	add	r3, sp
    5ec0:	a904      	add	r1, sp, #16
    5ec2:	f007 fa4d 	bl	d360 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    5ec6:	b958      	cbnz	r0, 5ee0 <prng_reseed.constprop.0+0x80>
    5ec8:	4b08      	ldr	r3, [pc, #32]	; (5eec <prng_reseed.constprop.0+0x8c>)
    5eca:	4909      	ldr	r1, [pc, #36]	; (5ef0 <prng_reseed.constprop.0+0x90>)
		BT_ERR("Failed to re-seed PRNG");
    5ecc:	4809      	ldr	r0, [pc, #36]	; (5ef4 <prng_reseed.constprop.0+0x94>)
    5ece:	1ac9      	subs	r1, r1, r3
    5ed0:	08c9      	lsrs	r1, r1, #3
    5ed2:	0189      	lsls	r1, r1, #6
    5ed4:	f041 0101 	orr.w	r1, r1, #1
    5ed8:	f006 fb05 	bl	c4e6 <log_0>
		return -EIO;
    5edc:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
    5ee0:	4620      	mov	r0, r4
    5ee2:	b00c      	add	sp, #48	; 0x30
    5ee4:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
    5ee8:	20000938 	.word	0x20000938
    5eec:	000102f8 	.word	0x000102f8
    5ef0:	00010310 	.word	0x00010310
    5ef4:	000122d8 	.word	0x000122d8

00005ef8 <prng_init>:

int prng_init(void)
{
    5ef8:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    5efa:	4b16      	ldr	r3, [pc, #88]	; (5f54 <prng_init+0x5c>)
    5efc:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
    5f00:	2b00      	cmp	r3, #0
    5f02:	da23      	bge.n	5f4c <prng_init+0x54>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    5f04:	2100      	movs	r1, #0
    5f06:	f242 0018 	movw	r0, #8216	; 0x2018
    5f0a:	aa01      	add	r2, sp, #4
    5f0c:	f7fe faea 	bl	44e4 <bt_hci_cmd_send_sync>
	if (ret) {
    5f10:	b9b8      	cbnz	r0, 5f42 <prng_init+0x4a>
		return ret;
	}

	rp = (void *)rsp->data;
    5f12:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
    5f14:	2208      	movs	r2, #8
    5f16:	6899      	ldr	r1, [r3, #8]
    5f18:	480f      	ldr	r0, [pc, #60]	; (5f58 <prng_init+0x60>)
    5f1a:	3101      	adds	r1, #1
    5f1c:	f007 fa00 	bl	d320 <tc_hmac_prng_init>
    5f20:	4604      	mov	r4, r0

	net_buf_unref(rsp);
    5f22:	9801      	ldr	r0, [sp, #4]
    5f24:	f002 ff4a 	bl	8dbc <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
    5f28:	b96c      	cbnz	r4, 5f46 <prng_init+0x4e>
    5f2a:	4b0c      	ldr	r3, [pc, #48]	; (5f5c <prng_init+0x64>)
    5f2c:	490c      	ldr	r1, [pc, #48]	; (5f60 <prng_init+0x68>)
		BT_ERR("Failed to initialize PRNG");
    5f2e:	480d      	ldr	r0, [pc, #52]	; (5f64 <prng_init+0x6c>)
    5f30:	1ac9      	subs	r1, r1, r3
    5f32:	08c9      	lsrs	r1, r1, #3
    5f34:	0189      	lsls	r1, r1, #6
    5f36:	f041 0101 	orr.w	r1, r1, #1
    5f3a:	f006 fad4 	bl	c4e6 <log_0>
		return -EIO;
    5f3e:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    5f42:	b002      	add	sp, #8
    5f44:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    5f46:	f7ff ff8b 	bl	5e60 <prng_reseed.constprop.0>
    5f4a:	e7fa      	b.n	5f42 <prng_init+0x4a>
		return -ENOTSUP;
    5f4c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5f50:	e7f7      	b.n	5f42 <prng_init+0x4a>
    5f52:	bf00      	nop
    5f54:	20000000 	.word	0x20000000
    5f58:	20000938 	.word	0x20000938
    5f5c:	000102f8 	.word	0x000102f8
    5f60:	00010310 	.word	0x00010310
    5f64:	000122ef 	.word	0x000122ef

00005f68 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
    5f68:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
    5f6a:	4a0a      	ldr	r2, [pc, #40]	; (5f94 <bt_rand+0x2c>)
{
    5f6c:	4604      	mov	r4, r0
    5f6e:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
    5f70:	f007 fa0f 	bl	d392 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    5f74:	1c43      	adds	r3, r0, #1
    5f76:	d107      	bne.n	5f88 <bt_rand+0x20>
		ret = prng_reseed(&prng);
    5f78:	f7ff ff72 	bl	5e60 <prng_reseed.constprop.0>
		if (ret) {
    5f7c:	b948      	cbnz	r0, 5f92 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    5f7e:	4629      	mov	r1, r5
    5f80:	4620      	mov	r0, r4
    5f82:	4a04      	ldr	r2, [pc, #16]	; (5f94 <bt_rand+0x2c>)
    5f84:	f007 fa05 	bl	d392 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
    5f88:	2801      	cmp	r0, #1
    5f8a:	bf14      	ite	ne
    5f8c:	f06f 0004 	mvnne.w	r0, #4
    5f90:	2000      	moveq	r0, #0
	}

	return -EIO;
}
    5f92:	bd38      	pop	{r3, r4, r5, pc}
    5f94:	20000938 	.word	0x20000938

00005f98 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    5f98:	2300      	movs	r3, #0
{
    5f9a:	4601      	mov	r1, r0
	tx->user_data = NULL;
    5f9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    5fa0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    5fa2:	4801      	ldr	r0, [pc, #4]	; (5fa8 <tx_free+0x10>)
    5fa4:	f009 bc34 	b.w	f810 <k_queue_append>
    5fa8:	20000564 	.word	0x20000564

00005fac <notify_connected>:
{
    5fac:	b538      	push	{r3, r4, r5, lr}
    5fae:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5fb0:	4b08      	ldr	r3, [pc, #32]	; (5fd4 <notify_connected+0x28>)
    5fb2:	681d      	ldr	r5, [r3, #0]
    5fb4:	7a61      	ldrb	r1, [r4, #9]
    5fb6:	b92d      	cbnz	r5, 5fc4 <notify_connected+0x18>
	if (!conn->err) {
    5fb8:	b951      	cbnz	r1, 5fd0 <notify_connected+0x24>
		bt_gatt_connected(conn);
    5fba:	4620      	mov	r0, r4
}
    5fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    5fc0:	f002 bd5e 	b.w	8a80 <bt_gatt_connected>
		if (cb->connected) {
    5fc4:	682b      	ldr	r3, [r5, #0]
    5fc6:	b10b      	cbz	r3, 5fcc <notify_connected+0x20>
			cb->connected(conn, conn->err);
    5fc8:	4620      	mov	r0, r4
    5fca:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5fcc:	692d      	ldr	r5, [r5, #16]
    5fce:	e7f1      	b.n	5fb4 <notify_connected+0x8>
}
    5fd0:	bd38      	pop	{r3, r4, r5, pc}
    5fd2:	bf00      	nop
    5fd4:	200016cc 	.word	0x200016cc

00005fd8 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    5fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5fdc:	4604      	mov	r4, r0
    5fde:	460e      	mov	r6, r1
    5fe0:	4691      	mov	r9, r2
    5fe2:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    5fe4:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    5fe6:	f04f 33ff 	mov.w	r3, #4294967295
    5fea:	f04f 32ff 	mov.w	r2, #4294967295
    5fee:	4844      	ldr	r0, [pc, #272]	; (6100 <send_frag+0x128>)
    5ff0:	f005 f874 	bl	b0dc <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    5ff4:	7aa3      	ldrb	r3, [r4, #10]
    5ff6:	2b07      	cmp	r3, #7
    5ff8:	d151      	bne.n	609e <send_frag+0xc6>
	__asm__ volatile(
    5ffa:	f04f 0320 	mov.w	r3, #32
    5ffe:	f3ef 8211 	mrs	r2, BASEPRI
    6002:	f383 8811 	msr	BASEPRI, r3
    6006:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    600a:	2d00      	cmp	r5, #0
    600c:	d059      	beq.n	60c2 <send_frag+0xea>
	parent->next = child;
    600e:	2300      	movs	r3, #0
    6010:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    6012:	69a3      	ldr	r3, [r4, #24]
    6014:	2b00      	cmp	r3, #0
    6016:	d151      	bne.n	60bc <send_frag+0xe4>
	list->head = node;
    6018:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    601c:	f382 8811 	msr	BASEPRI, r2
    6020:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    6024:	2104      	movs	r1, #4
    6026:	f106 0008 	add.w	r0, r6, #8
    602a:	f008 fd7b 	bl	eb24 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    602e:	8823      	ldrh	r3, [r4, #0]
    6030:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    6034:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6038:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    603a:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    603e:	3b04      	subs	r3, #4
    6040:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    6042:	2302      	movs	r3, #2
	return bt_send(buf);
    6044:	4630      	mov	r0, r6
    6046:	7533      	strb	r3, [r6, #20]
    6048:	f7fe fc8a 	bl	4960 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    604c:	4601      	mov	r1, r0
    604e:	2800      	cmp	r0, #0
    6050:	d053      	beq.n	60fa <send_frag+0x122>
    6052:	4b2c      	ldr	r3, [pc, #176]	; (6104 <send_frag+0x12c>)
    6054:	4a2c      	ldr	r2, [pc, #176]	; (6108 <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
    6056:	482d      	ldr	r0, [pc, #180]	; (610c <send_frag+0x134>)
    6058:	1ad2      	subs	r2, r2, r3
    605a:	08d2      	lsrs	r2, r2, #3
    605c:	0192      	lsls	r2, r2, #6
    605e:	f042 0201 	orr.w	r2, r2, #1
    6062:	f006 fa4d 	bl	c500 <log_1>
	__asm__ volatile(
    6066:	f04f 0320 	mov.w	r3, #32
    606a:	f3ef 8111 	mrs	r1, BASEPRI
    606e:	f383 8811 	msr	BASEPRI, r3
    6072:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    6076:	2d00      	cmp	r5, #0
    6078:	d039      	beq.n	60ee <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    607a:	2200      	movs	r2, #0
    607c:	6963      	ldr	r3, [r4, #20]
    607e:	b153      	cbz	r3, 6096 <send_frag+0xbe>
    6080:	429d      	cmp	r5, r3
    6082:	d131      	bne.n	60e8 <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
    6084:	682b      	ldr	r3, [r5, #0]
    6086:	bb4a      	cbnz	r2, 60dc <send_frag+0x104>
    6088:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    608a:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    608c:	4295      	cmp	r5, r2
    608e:	d100      	bne.n	6092 <send_frag+0xba>
	list->tail = node;
    6090:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    6092:	2300      	movs	r3, #0
    6094:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    6096:	f381 8811 	msr	BASEPRI, r1
    609a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    609e:	4818      	ldr	r0, [pc, #96]	; (6100 <send_frag+0x128>)
    60a0:	f004 fff6 	bl	b090 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    60a4:	b115      	cbz	r5, 60ac <send_frag+0xd4>
		tx_free(tx);
    60a6:	4628      	mov	r0, r5
    60a8:	f7ff ff76 	bl	5f98 <tx_free>
	}

	if (always_consume) {
    60ac:	b11f      	cbz	r7, 60b6 <send_frag+0xde>
		net_buf_unref(buf);
    60ae:	4630      	mov	r0, r6
    60b0:	f002 fe84 	bl	8dbc <net_buf_unref>
	}
	return false;
    60b4:	2700      	movs	r7, #0
}
    60b6:	4638      	mov	r0, r7
    60b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    60bc:	601d      	str	r5, [r3, #0]
	list->tail = node;
    60be:	61a5      	str	r5, [r4, #24]
}
    60c0:	e7ac      	b.n	601c <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    60c2:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    60c4:	b133      	cbz	r3, 60d4 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
    60c6:	f103 080c 	add.w	r8, r3, #12
    60ca:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    60cc:	3301      	adds	r3, #1
    60ce:	f8c8 3000 	str.w	r3, [r8]
    60d2:	e7a3      	b.n	601c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    60d4:	69e3      	ldr	r3, [r4, #28]
    60d6:	f104 081c 	add.w	r8, r4, #28
    60da:	e7f7      	b.n	60cc <send_frag+0xf4>
	parent->next = child;
    60dc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    60de:	69a3      	ldr	r3, [r4, #24]
    60e0:	429d      	cmp	r5, r3
	list->tail = node;
    60e2:	bf08      	it	eq
    60e4:	61a2      	streq	r2, [r4, #24]
}
    60e6:	e7d4      	b.n	6092 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    60e8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    60ea:	681b      	ldr	r3, [r3, #0]
    60ec:	e7c7      	b.n	607e <send_frag+0xa6>
			(*pending_no_cb)--;
    60ee:	f8d8 3000 	ldr.w	r3, [r8]
    60f2:	3b01      	subs	r3, #1
    60f4:	f8c8 3000 	str.w	r3, [r8]
    60f8:	e7cd      	b.n	6096 <send_frag+0xbe>
	return true;
    60fa:	2701      	movs	r7, #1
    60fc:	e7db      	b.n	60b6 <send_frag+0xde>
    60fe:	bf00      	nop
    6100:	200000c8 	.word	0x200000c8
    6104:	000102f8 	.word	0x000102f8
    6108:	00010308 	.word	0x00010308
    610c:	00011e30 	.word	0x00011e30

00006110 <bt_conn_get_pkts>:
}
    6110:	4800      	ldr	r0, [pc, #0]	; (6114 <bt_conn_get_pkts+0x4>)
    6112:	4770      	bx	lr
    6114:	200000c8 	.word	0x200000c8

00006118 <notify_le_param_updated>:
{
    6118:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    611a:	1d03      	adds	r3, r0, #4
{
    611c:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    611e:	e8d3 2faf 	lda	r2, [r3]
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6122:	0592      	lsls	r2, r2, #22
    6124:	d515      	bpl.n	6152 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    6126:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    612a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    612e:	4291      	cmp	r1, r2
    6130:	d80f      	bhi.n	6152 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    6132:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    6136:	4291      	cmp	r1, r2
    6138:	d30b      	bcc.n	6152 <notify_le_param_updated+0x3a>
	    conn->le.latency == conn->le.pending_latency &&
    613a:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    613e:	4291      	cmp	r1, r2
    6140:	d107      	bne.n	6152 <notify_le_param_updated+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6142:	e8d3 2fef 	ldaex	r2, [r3]
    6146:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    614a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    614e:	2900      	cmp	r1, #0
    6150:	d1f7      	bne.n	6142 <notify_le_param_updated+0x2a>
	for (cb = callback_list; cb; cb = cb->_next) {
    6152:	4b08      	ldr	r3, [pc, #32]	; (6174 <notify_le_param_updated+0x5c>)
    6154:	681d      	ldr	r5, [r3, #0]
    6156:	b905      	cbnz	r5, 615a <notify_le_param_updated+0x42>
}
    6158:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    615a:	68ee      	ldr	r6, [r5, #12]
    615c:	b13e      	cbz	r6, 616e <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
    615e:	4620      	mov	r0, r4
    6160:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    6164:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    6168:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    616c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    616e:	692d      	ldr	r5, [r5, #16]
    6170:	e7f1      	b.n	6156 <notify_le_param_updated+0x3e>
    6172:	bf00      	nop
    6174:	200016cc 	.word	0x200016cc

00006178 <le_param_req>:
{
    6178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    617a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    617c:	4608      	mov	r0, r1
{
    617e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6180:	f007 faf8 	bl	d774 <bt_le_conn_params_valid>
    6184:	4604      	mov	r4, r0
    6186:	b910      	cbnz	r0, 618e <le_param_req+0x16>
		return false;
    6188:	2400      	movs	r4, #0
}
    618a:	4620      	mov	r0, r4
    618c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    618e:	4b09      	ldr	r3, [pc, #36]	; (61b4 <le_param_req+0x3c>)
    6190:	681e      	ldr	r6, [r3, #0]
    6192:	2e00      	cmp	r6, #0
    6194:	d0f9      	beq.n	618a <le_param_req+0x12>
		if (!cb->le_param_req) {
    6196:	68b3      	ldr	r3, [r6, #8]
    6198:	b90b      	cbnz	r3, 619e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    619a:	6936      	ldr	r6, [r6, #16]
    619c:	e7f9      	b.n	6192 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    619e:	4629      	mov	r1, r5
    61a0:	4638      	mov	r0, r7
    61a2:	4798      	blx	r3
    61a4:	2800      	cmp	r0, #0
    61a6:	d0ef      	beq.n	6188 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    61a8:	4628      	mov	r0, r5
    61aa:	f007 fae3 	bl	d774 <bt_le_conn_params_valid>
    61ae:	2800      	cmp	r0, #0
    61b0:	d1f3      	bne.n	619a <le_param_req+0x22>
    61b2:	e7e9      	b.n	6188 <le_param_req+0x10>
    61b4:	200016cc 	.word	0x200016cc

000061b8 <bt_conn_cb_register>:
	cb->_next = callback_list;
    61b8:	4b02      	ldr	r3, [pc, #8]	; (61c4 <bt_conn_cb_register+0xc>)
    61ba:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    61bc:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
    61be:	6102      	str	r2, [r0, #16]
}
    61c0:	4770      	bx	lr
    61c2:	bf00      	nop
    61c4:	200016cc 	.word	0x200016cc

000061c8 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    61c8:	b570      	push	{r4, r5, r6, lr}
    61ca:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    61cc:	f100 0634 	add.w	r6, r0, #52	; 0x34
    61d0:	2200      	movs	r2, #0
    61d2:	2300      	movs	r3, #0
    61d4:	4630      	mov	r0, r6
    61d6:	f008 fc2d 	bl	ea34 <net_buf_get>
    61da:	4605      	mov	r5, r0
    61dc:	b958      	cbnz	r0, 61f6 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    61de:	4620      	mov	r0, r4
    61e0:	f007 fbb3 	bl	d94a <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    61e4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    61e8:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    61ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    61ee:	2300      	movs	r3, #0
    61f0:	4805      	ldr	r0, [pc, #20]	; (6208 <conn_cleanup+0x40>)
    61f2:	f005 b8a9 	b.w	b348 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    61f6:	6968      	ldr	r0, [r5, #20]
    61f8:	b108      	cbz	r0, 61fe <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    61fa:	f7ff fecd 	bl	5f98 <tx_free>
		net_buf_unref(buf);
    61fe:	4628      	mov	r0, r5
    6200:	f002 fddc 	bl	8dbc <net_buf_unref>
    6204:	e7e4      	b.n	61d0 <conn_cleanup+0x8>
    6206:	bf00      	nop
    6208:	20000e38 	.word	0x20000e38

0000620c <bt_conn_recv>:
{
    620c:	b570      	push	{r4, r5, r6, lr}
    620e:	4616      	mov	r6, r2
    6210:	4604      	mov	r4, r0
    6212:	460d      	mov	r5, r1
	tx_notify(conn);
    6214:	f007 fb4f 	bl	d8b6 <tx_notify>
	switch (flags) {
    6218:	2e01      	cmp	r6, #1
    621a:	d02e      	beq.n	627a <bt_conn_recv+0x6e>
    621c:	2e02      	cmp	r6, #2
    621e:	d15b      	bne.n	62d8 <bt_conn_recv+0xcc>
		if (conn->rx) {
    6220:	6923      	ldr	r3, [r4, #16]
    6222:	b163      	cbz	r3, 623e <bt_conn_recv+0x32>
    6224:	4b37      	ldr	r3, [pc, #220]	; (6304 <bt_conn_recv+0xf8>)
    6226:	4938      	ldr	r1, [pc, #224]	; (6308 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
    6228:	4838      	ldr	r0, [pc, #224]	; (630c <bt_conn_recv+0x100>)
    622a:	1ac9      	subs	r1, r1, r3
    622c:	08c9      	lsrs	r1, r1, #3
    622e:	0189      	lsls	r1, r1, #6
    6230:	f041 0101 	orr.w	r1, r1, #1
    6234:	f006 f957 	bl	c4e6 <log_0>
			bt_conn_reset_rx_state(conn);
    6238:	4620      	mov	r0, r4
    623a:	f007 fb86 	bl	d94a <bt_conn_reset_rx_state>
		conn->rx = buf;
    623e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    6240:	6923      	ldr	r3, [r4, #16]
    6242:	8999      	ldrh	r1, [r3, #12]
    6244:	2901      	cmp	r1, #1
    6246:	d95b      	bls.n	6300 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    6248:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    624a:	7845      	ldrb	r5, [r0, #1]
    624c:	7802      	ldrb	r2, [r0, #0]
    624e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    6252:	3204      	adds	r2, #4
    6254:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    6256:	428a      	cmp	r2, r1
    6258:	d852      	bhi.n	6300 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
    625a:	d249      	bcs.n	62f0 <bt_conn_recv+0xe4>
    625c:	4829      	ldr	r0, [pc, #164]	; (6304 <bt_conn_recv+0xf8>)
    625e:	4b2a      	ldr	r3, [pc, #168]	; (6308 <bt_conn_recv+0xfc>)
    6260:	1a1b      	subs	r3, r3, r0
    6262:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    6264:	019b      	lsls	r3, r3, #6
    6266:	482a      	ldr	r0, [pc, #168]	; (6310 <bt_conn_recv+0x104>)
    6268:	f043 0301 	orr.w	r3, r3, #1
    626c:	f006 f95c 	bl	c528 <log_2>
		bt_conn_reset_rx_state(conn);
    6270:	4620      	mov	r0, r4
}
    6272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    6276:	f007 bb68 	b.w	d94a <bt_conn_reset_rx_state>
		if (!conn->rx) {
    627a:	6920      	ldr	r0, [r4, #16]
    627c:	b968      	cbnz	r0, 629a <bt_conn_recv+0x8e>
    627e:	4922      	ldr	r1, [pc, #136]	; (6308 <bt_conn_recv+0xfc>)
    6280:	4b20      	ldr	r3, [pc, #128]	; (6304 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
    6282:	4824      	ldr	r0, [pc, #144]	; (6314 <bt_conn_recv+0x108>)
    6284:	1ac9      	subs	r1, r1, r3
    6286:	08c9      	lsrs	r1, r1, #3
    6288:	0189      	lsls	r1, r1, #6
    628a:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    628e:	f006 f92a 	bl	c4e6 <log_0>
			bt_conn_reset_rx_state(conn);
    6292:	4620      	mov	r0, r4
    6294:	f007 fb59 	bl	d94a <bt_conn_reset_rx_state>
    6298:	e001      	b.n	629e <bt_conn_recv+0x92>
		if (!buf->len) {
    629a:	89ae      	ldrh	r6, [r5, #12]
    629c:	b926      	cbnz	r6, 62a8 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
    629e:	4628      	mov	r0, r5
}
    62a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    62a4:	f002 bd8a 	b.w	8dbc <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    62a8:	3008      	adds	r0, #8
    62aa:	f008 fc68 	bl	eb7e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    62ae:	4286      	cmp	r6, r0
    62b0:	d908      	bls.n	62c4 <bt_conn_recv+0xb8>
    62b2:	4915      	ldr	r1, [pc, #84]	; (6308 <bt_conn_recv+0xfc>)
    62b4:	4b13      	ldr	r3, [pc, #76]	; (6304 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
    62b6:	4818      	ldr	r0, [pc, #96]	; (6318 <bt_conn_recv+0x10c>)
    62b8:	1ac9      	subs	r1, r1, r3
    62ba:	08c9      	lsrs	r1, r1, #3
    62bc:	0189      	lsls	r1, r1, #6
    62be:	f041 0101 	orr.w	r1, r1, #1
    62c2:	e7e4      	b.n	628e <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    62c4:	6920      	ldr	r0, [r4, #16]
    62c6:	89aa      	ldrh	r2, [r5, #12]
    62c8:	68a9      	ldr	r1, [r5, #8]
    62ca:	3008      	adds	r0, #8
    62cc:	f008 fc0f 	bl	eaee <net_buf_simple_add_mem>
		net_buf_unref(buf);
    62d0:	4628      	mov	r0, r5
    62d2:	f002 fd73 	bl	8dbc <net_buf_unref>
		break;
    62d6:	e7b3      	b.n	6240 <bt_conn_recv+0x34>
    62d8:	4a0a      	ldr	r2, [pc, #40]	; (6304 <bt_conn_recv+0xf8>)
    62da:	4b0b      	ldr	r3, [pc, #44]	; (6308 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    62dc:	4631      	mov	r1, r6
    62de:	1a9b      	subs	r3, r3, r2
    62e0:	08db      	lsrs	r3, r3, #3
    62e2:	019b      	lsls	r3, r3, #6
    62e4:	480d      	ldr	r0, [pc, #52]	; (631c <bt_conn_recv+0x110>)
    62e6:	f043 0201 	orr.w	r2, r3, #1
    62ea:	f006 f909 	bl	c500 <log_1>
		bt_conn_reset_rx_state(conn);
    62ee:	e7d0      	b.n	6292 <bt_conn_recv+0x86>
	conn->rx = NULL;
    62f0:	2200      	movs	r2, #0
	bt_l2cap_recv(conn, buf);
    62f2:	4620      	mov	r0, r4
	conn->rx = NULL;
    62f4:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    62f6:	4619      	mov	r1, r3
}
    62f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    62fc:	f000 bcde 	b.w	6cbc <bt_l2cap_recv>
}
    6300:	bd70      	pop	{r4, r5, r6, pc}
    6302:	bf00      	nop
    6304:	000102f8 	.word	0x000102f8
    6308:	00010308 	.word	0x00010308
    630c:	00012313 	.word	0x00012313
    6310:	00012393 	.word	0x00012393
    6314:	00012330 	.word	0x00012330
    6318:	0001234e 	.word	0x0001234e
    631c:	00012375 	.word	0x00012375

00006320 <bt_conn_send_cb>:
{
    6320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6324:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    6326:	7a83      	ldrb	r3, [r0, #10]
{
    6328:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
    632a:	2b07      	cmp	r3, #7
{
    632c:	460d      	mov	r5, r1
    632e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    6330:	d00f      	beq.n	6352 <bt_conn_send_cb+0x32>
    6332:	4b2a      	ldr	r3, [pc, #168]	; (63dc <bt_conn_send_cb+0xbc>)
    6334:	492a      	ldr	r1, [pc, #168]	; (63e0 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    6336:	482b      	ldr	r0, [pc, #172]	; (63e4 <bt_conn_send_cb+0xc4>)
    6338:	1ac9      	subs	r1, r1, r3
    633a:	08c9      	lsrs	r1, r1, #3
    633c:	0189      	lsls	r1, r1, #6
    633e:	f041 0101 	orr.w	r1, r1, #1
    6342:	f006 f8d0 	bl	c4e6 <log_0>
		net_buf_unref(buf);
    6346:	4628      	mov	r0, r5
    6348:	f002 fd38 	bl	8dbc <net_buf_unref>
			return -ENOTCONN;
    634c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    6350:	e020      	b.n	6394 <bt_conn_send_cb+0x74>
	if (cb) {
    6352:	2a00      	cmp	r2, #0
    6354:	d040      	beq.n	63d8 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    6356:	f004 fe95 	bl	b084 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    635a:	4b23      	ldr	r3, [pc, #140]	; (63e8 <bt_conn_send_cb+0xc8>)
    635c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    635e:	4823      	ldr	r0, [pc, #140]	; (63ec <bt_conn_send_cb+0xcc>)
    6360:	bf07      	ittee	eq
    6362:	2200      	moveq	r2, #0
    6364:	2300      	moveq	r3, #0
    6366:	f04f 32ff 	movne.w	r2, #4294967295
    636a:	f04f 33ff 	movne.w	r3, #4294967295
    636e:	f004 fabd 	bl	a8ec <z_impl_k_queue_get>
    6372:	4604      	mov	r4, r0
		if (!tx) {
    6374:	b980      	cbnz	r0, 6398 <bt_conn_send_cb+0x78>
    6376:	4b19      	ldr	r3, [pc, #100]	; (63dc <bt_conn_send_cb+0xbc>)
    6378:	4919      	ldr	r1, [pc, #100]	; (63e0 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    637a:	481d      	ldr	r0, [pc, #116]	; (63f0 <bt_conn_send_cb+0xd0>)
    637c:	1ac9      	subs	r1, r1, r3
    637e:	08c9      	lsrs	r1, r1, #3
    6380:	0189      	lsls	r1, r1, #6
    6382:	f041 0101 	orr.w	r1, r1, #1
    6386:	f006 f8ae 	bl	c4e6 <log_0>
			net_buf_unref(buf);
    638a:	4628      	mov	r0, r5
    638c:	f002 fd16 	bl	8dbc <net_buf_unref>
			return -ENOBUFS;
    6390:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    6394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    6398:	7ab3      	ldrb	r3, [r6, #10]
    639a:	2b07      	cmp	r3, #7
    639c:	d010      	beq.n	63c0 <bt_conn_send_cb+0xa0>
    639e:	4b0f      	ldr	r3, [pc, #60]	; (63dc <bt_conn_send_cb+0xbc>)
    63a0:	490f      	ldr	r1, [pc, #60]	; (63e0 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    63a2:	4814      	ldr	r0, [pc, #80]	; (63f4 <bt_conn_send_cb+0xd4>)
    63a4:	1ac9      	subs	r1, r1, r3
    63a6:	08c9      	lsrs	r1, r1, #3
    63a8:	0189      	lsls	r1, r1, #6
    63aa:	f041 0102 	orr.w	r1, r1, #2
    63ae:	f006 f89a 	bl	c4e6 <log_0>
			net_buf_unref(buf);
    63b2:	4628      	mov	r0, r5
    63b4:	f002 fd02 	bl	8dbc <net_buf_unref>
			tx_free(tx);
    63b8:	4620      	mov	r0, r4
    63ba:	f7ff fded 	bl	5f98 <tx_free>
    63be:	e7c5      	b.n	634c <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    63c0:	2300      	movs	r3, #0
		tx->user_data = user_data;
    63c2:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    63c6:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    63c8:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    63ca:	f106 0034 	add.w	r0, r6, #52	; 0x34
    63ce:	4629      	mov	r1, r5
    63d0:	f008 fb54 	bl	ea7c <net_buf_put>
	return 0;
    63d4:	2000      	movs	r0, #0
    63d6:	e7dd      	b.n	6394 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    63d8:	614a      	str	r2, [r1, #20]
    63da:	e7f6      	b.n	63ca <bt_conn_send_cb+0xaa>
    63dc:	000102f8 	.word	0x000102f8
    63e0:	00010308 	.word	0x00010308
    63e4:	000123ae 	.word	0x000123ae
    63e8:	20000e50 	.word	0x20000e50
    63ec:	20000564 	.word	0x20000564
    63f0:	000123bd 	.word	0x000123bd
    63f4:	000123db 	.word	0x000123db

000063f8 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    63f8:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    63fa:	2200      	movs	r2, #0
{
    63fc:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    63fe:	4b17      	ldr	r3, [pc, #92]	; (645c <bt_conn_prepare_events+0x64>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    6400:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    6402:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    6404:	f009 fdab 	bl	ff5e <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6408:	4b15      	ldr	r3, [pc, #84]	; (6460 <bt_conn_prepare_events+0x68>)
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    640a:	f104 0014 	add.w	r0, r4, #20
    640e:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
    6412:	e8d2 2faf 	lda	r2, [r2]
    6416:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
    6418:	b90a      	cbnz	r2, 641e <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
    641a:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    641c:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    641e:	7a9a      	ldrb	r2, [r3, #10]
    6420:	b97a      	cbnz	r2, 6442 <bt_conn_prepare_events+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6422:	1d1a      	adds	r2, r3, #4
    6424:	e8d2 5fef 	ldaex	r5, [r2]
    6428:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
    642c:	e8c2 cfee 	stlex	lr, ip, [r2]
    6430:	f1be 0f00 	cmp.w	lr, #0
    6434:	d1f6      	bne.n	6424 <bt_conn_prepare_events+0x2c>
    6436:	066a      	lsls	r2, r5, #25
    6438:	d503      	bpl.n	6442 <bt_conn_prepare_events+0x4a>
		conn_cleanup(conn);
    643a:	4618      	mov	r0, r3
    643c:	f7ff fec4 	bl	61c8 <conn_cleanup>
    6440:	e7eb      	b.n	641a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    6442:	7a8b      	ldrb	r3, [r1, #10]
    6444:	2b07      	cmp	r3, #7
    6446:	d1e8      	bne.n	641a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
    6448:	4b06      	ldr	r3, [pc, #24]	; (6464 <bt_conn_prepare_events+0x6c>)
    644a:	2200      	movs	r2, #0
    644c:	2104      	movs	r1, #4
    644e:	f009 fd86 	bl	ff5e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    6452:	2301      	movs	r3, #1
			ev_count++;
    6454:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    6456:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    645a:	e7df      	b.n	641c <bt_conn_prepare_events+0x24>
    645c:	20000254 	.word	0x20000254
    6460:	20000a70 	.word	0x20000a70
    6464:	20000aa4 	.word	0x20000aa4

00006468 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    6468:	b570      	push	{r4, r5, r6, lr}
    646a:	4606      	mov	r6, r0
    646c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    646e:	4810      	ldr	r0, [pc, #64]	; (64b0 <bt_conn_add_le+0x48>)
    6470:	2101      	movs	r1, #1
    6472:	f007 fa46 	bl	d902 <bt_conn_new>
	if (!conn) {
    6476:	4604      	mov	r4, r0
    6478:	b1b8      	cbz	r0, 64aa <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    647a:	2230      	movs	r2, #48	; 0x30
    647c:	2100      	movs	r1, #0
    647e:	3058      	adds	r0, #88	; 0x58
    6480:	f007 f886 	bl	d590 <memset>
    6484:	4b0b      	ldr	r3, [pc, #44]	; (64b4 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    6486:	4a0c      	ldr	r2, [pc, #48]	; (64b8 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    6488:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    648a:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
    648c:	4629      	mov	r1, r5
    648e:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    6492:	62a3      	str	r3, [r4, #40]	; 0x28
    6494:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    6496:	7226      	strb	r6, [r4, #8]
    6498:	f104 0088 	add.w	r0, r4, #136	; 0x88
    649c:	f007 f84d 	bl	d53a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    64a0:	2301      	movs	r3, #1
    64a2:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    64a4:	4b05      	ldr	r3, [pc, #20]	; (64bc <bt_conn_add_le+0x54>)
    64a6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    64aa:	4620      	mov	r0, r4
    64ac:	bd70      	pop	{r4, r5, r6, pc}
    64ae:	bf00      	nop
    64b0:	20000a70 	.word	0x20000a70
    64b4:	000067e1 	.word	0x000067e1
    64b8:	0000d8fd 	.word	0x0000d8fd
    64bc:	00280018 	.word	0x00280018

000064c0 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    64c0:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    64c2:	2101      	movs	r1, #1
{
    64c4:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    64c6:	4803      	ldr	r0, [pc, #12]	; (64d4 <bt_conn_lookup_handle+0x14>)
    64c8:	f007 fa8a 	bl	d9e0 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    64cc:	2800      	cmp	r0, #0
    64ce:	bf38      	it	cc
    64d0:	2000      	movcc	r0, #0
    64d2:	bd08      	pop	{r3, pc}
    64d4:	20000a70 	.word	0x20000a70

000064d8 <bt_conn_set_state>:
{
    64d8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    64da:	7a86      	ldrb	r6, [r0, #10]
{
    64dc:	4604      	mov	r4, r0
	if (conn->state == state) {
    64de:	428e      	cmp	r6, r1
{
    64e0:	460d      	mov	r5, r1
	if (conn->state == state) {
    64e2:	d115      	bne.n	6510 <bt_conn_set_state+0x38>
    64e4:	4b68      	ldr	r3, [pc, #416]	; (6688 <bt_conn_set_state+0x1b0>)
    64e6:	4a69      	ldr	r2, [pc, #420]	; (668c <bt_conn_set_state+0x1b4>)
    64e8:	2e08      	cmp	r6, #8
    64ea:	eba2 0203 	sub.w	r2, r2, r3
    64ee:	bf98      	it	ls
    64f0:	4b67      	ldrls	r3, [pc, #412]	; (6690 <bt_conn_set_state+0x1b8>)
    64f2:	ea4f 02d2 	mov.w	r2, r2, lsr #3
		BT_WARN("no transition %s", state2str(state));
    64f6:	ea4f 1282 	mov.w	r2, r2, lsl #6
    64fa:	bf94      	ite	ls
    64fc:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    6500:	4964      	ldrhi	r1, [pc, #400]	; (6694 <bt_conn_set_state+0x1bc>)
    6502:	4865      	ldr	r0, [pc, #404]	; (6698 <bt_conn_set_state+0x1c0>)
    6504:	f042 0202 	orr.w	r2, r2, #2
}
    6508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    650c:	f005 bff8 	b.w	c500 <log_1>
	conn->state = state;
    6510:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    6512:	b90e      	cbnz	r6, 6518 <bt_conn_set_state+0x40>
		bt_conn_ref(conn);
    6514:	f007 fa42 	bl	d99c <bt_conn_ref>
	switch (conn->state) {
    6518:	7aa3      	ldrb	r3, [r4, #10]
    651a:	2b08      	cmp	r3, #8
    651c:	f200 80a9 	bhi.w	6672 <bt_conn_set_state+0x19a>
    6520:	e8df f003 	tbb	[pc, r3]
    6524:	b1b1053e 	.word	0xb1b1053e
    6528:	1cb1b1b1 	.word	0x1cb1b1b1
    652c:	b1          	.byte	0xb1
    652d:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
    652e:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
    6530:	4d5a      	ldr	r5, [pc, #360]	; (669c <bt_conn_set_state+0x1c4>)
	__asm__ volatile(
    6532:	f04f 0320 	mov.w	r3, #32
    6536:	f3ef 8211 	mrs	r2, BASEPRI
    653a:	f383 8811 	msr	BASEPRI, r3
    653e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    6542:	69e3      	ldr	r3, [r4, #28]
    6544:	2b00      	cmp	r3, #0
    6546:	d075      	beq.n	6634 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
    6548:	3b01      	subs	r3, #1
    654a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    654c:	f382 8811 	msr	BASEPRI, r2
    6550:	f3bf 8f6f 	isb	sy
    6554:	4628      	mov	r0, r5
    6556:	f004 fd9b 	bl	b090 <z_impl_k_sem_give>
}
    655a:	e7ea      	b.n	6532 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    655c:	78a3      	ldrb	r3, [r4, #2]
    655e:	2b04      	cmp	r3, #4
    6560:	f000 8091 	beq.w	6686 <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
    6564:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6568:	f009 f946 	bl	f7f8 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    656c:	2100      	movs	r1, #0
    656e:	484c      	ldr	r0, [pc, #304]	; (66a0 <bt_conn_set_state+0x1c8>)
    6570:	f005 f990 	bl	b894 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    6574:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    6576:	4620      	mov	r0, r4
	list->tail = NULL;
    6578:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    657c:	f000 fad6 	bl	6b2c <bt_l2cap_connected>
		notify_connected(conn);
    6580:	4620      	mov	r0, r4
    6582:	f7ff fd13 	bl	5fac <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6586:	78e3      	ldrb	r3, [r4, #3]
    6588:	2b01      	cmp	r3, #1
    658a:	d17c      	bne.n	6686 <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    658c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6590:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    6594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6598:	2300      	movs	r3, #0
    659a:	4842      	ldr	r0, [pc, #264]	; (66a4 <bt_conn_set_state+0x1cc>)
    659c:	f004 bed4 	b.w	b348 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    65a0:	78a3      	ldrb	r3, [r4, #2]
    65a2:	2b04      	cmp	r3, #4
    65a4:	d104      	bne.n	65b0 <bt_conn_set_state+0xd8>
			bt_conn_unref(conn);
    65a6:	4620      	mov	r0, r4
}
    65a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    65ac:	f007 ba0a 	b.w	d9c4 <bt_conn_unref>
		switch (old_state) {
    65b0:	2e08      	cmp	r6, #8
    65b2:	d868      	bhi.n	6686 <bt_conn_set_state+0x1ae>
    65b4:	a301      	add	r3, pc, #4	; (adr r3, 65bc <bt_conn_set_state+0xe4>)
    65b6:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    65ba:	bf00      	nop
    65bc:	00006621 	.word	0x00006621
    65c0:	000065e1 	.word	0x000065e1
    65c4:	00006613 	.word	0x00006613
    65c8:	000065a7 	.word	0x000065a7
    65cc:	000065a7 	.word	0x000065a7
    65d0:	00006613 	.word	0x00006613
    65d4:	00006613 	.word	0x00006613
    65d8:	00006621 	.word	0x00006621
    65dc:	00006621 	.word	0x00006621
			tx_notify(conn);
    65e0:	4620      	mov	r0, r4
    65e2:	f007 f968 	bl	d8b6 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    65e6:	78a3      	ldrb	r3, [r4, #2]
    65e8:	2b01      	cmp	r3, #1
    65ea:	d103      	bne.n	65f4 <bt_conn_set_state+0x11c>
				k_delayed_work_cancel(&conn->deferred_work);
    65ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
    65f0:	f009 fad2 	bl	fb98 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    65f4:	3404      	adds	r4, #4
    65f6:	e8d4 3fef 	ldaex	r3, [r4]
    65fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    65fe:	e8c4 3fe2 	stlex	r2, r3, [r4]
    6602:	2a00      	cmp	r2, #0
    6604:	d1f7      	bne.n	65f6 <bt_conn_set_state+0x11e>
}
    6606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    660a:	2100      	movs	r1, #0
    660c:	4824      	ldr	r0, [pc, #144]	; (66a0 <bt_conn_set_state+0x1c8>)
    660e:	f005 b941 	b.w	b894 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    6612:	7a63      	ldrb	r3, [r4, #9]
    6614:	2b00      	cmp	r3, #0
    6616:	d0c6      	beq.n	65a6 <bt_conn_set_state+0xce>
				notify_connected(conn);
    6618:	4620      	mov	r0, r4
    661a:	f7ff fcc7 	bl	5fac <notify_connected>
    661e:	e7c2      	b.n	65a6 <bt_conn_set_state+0xce>
    6620:	4a1a      	ldr	r2, [pc, #104]	; (668c <bt_conn_set_state+0x1b4>)
    6622:	4b19      	ldr	r3, [pc, #100]	; (6688 <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
    6624:	4629      	mov	r1, r5
    6626:	1ad2      	subs	r2, r2, r3
    6628:	08d2      	lsrs	r2, r2, #3
    662a:	0192      	lsls	r2, r2, #6
    662c:	481e      	ldr	r0, [pc, #120]	; (66a8 <bt_conn_set_state+0x1d0>)
    662e:	f042 0202 	orr.w	r2, r2, #2
    6632:	e769      	b.n	6508 <bt_conn_set_state+0x30>
Z_GENLIST_IS_EMPTY(slist)
    6634:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    6636:	b128      	cbz	r0, 6644 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6638:	69a1      	ldr	r1, [r4, #24]
    663a:	6803      	ldr	r3, [r0, #0]
    663c:	4288      	cmp	r0, r1
	list->head = node;
    663e:	6163      	str	r3, [r4, #20]
	list->tail = node;
    6640:	bf08      	it	eq
    6642:	61a3      	streq	r3, [r4, #24]
    6644:	f382 8811 	msr	BASEPRI, r2
    6648:	f3bf 8f6f 	isb	sy
		if (!node) {
    664c:	b1d8      	cbz	r0, 6686 <bt_conn_set_state+0x1ae>
	__asm__ volatile(
    664e:	f04f 0220 	mov.w	r2, #32
    6652:	f3ef 8311 	mrs	r3, BASEPRI
    6656:	f382 8811 	msr	BASEPRI, r2
    665a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    665e:	68c2      	ldr	r2, [r0, #12]
    6660:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    6662:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    6664:	f383 8811 	msr	BASEPRI, r3
    6668:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    666c:	f7ff fc94 	bl	5f98 <tx_free>
    6670:	e770      	b.n	6554 <bt_conn_set_state+0x7c>
    6672:	4a06      	ldr	r2, [pc, #24]	; (668c <bt_conn_set_state+0x1b4>)
    6674:	4b04      	ldr	r3, [pc, #16]	; (6688 <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
    6676:	4629      	mov	r1, r5
    6678:	1ad2      	subs	r2, r2, r3
    667a:	08d2      	lsrs	r2, r2, #3
    667c:	0192      	lsls	r2, r2, #6
    667e:	480b      	ldr	r0, [pc, #44]	; (66ac <bt_conn_set_state+0x1d4>)
    6680:	f042 0202 	orr.w	r2, r2, #2
    6684:	e740      	b.n	6508 <bt_conn_set_state+0x30>
}
    6686:	bd70      	pop	{r4, r5, r6, pc}
    6688:	000102f8 	.word	0x000102f8
    668c:	00010308 	.word	0x00010308
    6690:	00010808 	.word	0x00010808
    6694:	00012401 	.word	0x00012401
    6698:	0001240b 	.word	0x0001240b
    669c:	200000c8 	.word	0x200000c8
    66a0:	20000254 	.word	0x20000254
    66a4:	20000e38 	.word	0x20000e38
    66a8:	0001241c 	.word	0x0001241c
    66ac:	00012433 	.word	0x00012433

000066b0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    66b0:	b570      	push	{r4, r5, r6, lr}
    66b2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    66b4:	480c      	ldr	r0, [pc, #48]	; (66e8 <bt_conn_lookup_addr_le+0x38>)
{
    66b6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    66b8:	f007 f970 	bl	d99c <bt_conn_ref>

		if (!conn) {
    66bc:	4604      	mov	r4, r0
    66be:	b128      	cbz	r0, 66cc <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    66c0:	7883      	ldrb	r3, [r0, #2]
    66c2:	2b01      	cmp	r3, #1
    66c4:	d004      	beq.n	66d0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    66c6:	f007 f97d 	bl	d9c4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    66ca:	2400      	movs	r4, #0
}
    66cc:	4620      	mov	r0, r4
    66ce:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    66d0:	4629      	mov	r1, r5
    66d2:	4632      	mov	r2, r6
    66d4:	f007 f942 	bl	d95c <bt_conn_is_peer_addr_le>
    66d8:	4605      	mov	r5, r0
    66da:	2800      	cmp	r0, #0
    66dc:	d1f6      	bne.n	66cc <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    66de:	4620      	mov	r0, r4
    66e0:	f007 f970 	bl	d9c4 <bt_conn_unref>
	return NULL;
    66e4:	462c      	mov	r4, r5
			continue;
    66e6:	e7f1      	b.n	66cc <bt_conn_lookup_addr_le+0x1c>
    66e8:	20000a70 	.word	0x20000a70

000066ec <bt_conn_exists_le>:
{
    66ec:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    66ee:	f7ff ffdf 	bl	66b0 <bt_conn_lookup_addr_le>
	if (conn) {
    66f2:	4604      	mov	r4, r0
    66f4:	b1b0      	cbz	r0, 6724 <bt_conn_exists_le+0x38>
    66f6:	4b0c      	ldr	r3, [pc, #48]	; (6728 <bt_conn_exists_le+0x3c>)
    66f8:	4a0c      	ldr	r2, [pc, #48]	; (672c <bt_conn_exists_le+0x40>)
    66fa:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    66fc:	7a83      	ldrb	r3, [r0, #10]
    66fe:	08d2      	lsrs	r2, r2, #3
    6700:	2b08      	cmp	r3, #8
    6702:	bf98      	it	ls
    6704:	490a      	ldrls	r1, [pc, #40]	; (6730 <bt_conn_exists_le+0x44>)
    6706:	ea4f 1282 	mov.w	r2, r2, lsl #6
    670a:	bf94      	ite	ls
    670c:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    6710:	4908      	ldrhi	r1, [pc, #32]	; (6734 <bt_conn_exists_le+0x48>)
    6712:	4809      	ldr	r0, [pc, #36]	; (6738 <bt_conn_exists_le+0x4c>)
    6714:	f042 0202 	orr.w	r2, r2, #2
    6718:	f005 fef2 	bl	c500 <log_1>
		bt_conn_unref(conn);
    671c:	4620      	mov	r0, r4
    671e:	f007 f951 	bl	d9c4 <bt_conn_unref>
		return true;
    6722:	2001      	movs	r0, #1
}
    6724:	bd10      	pop	{r4, pc}
    6726:	bf00      	nop
    6728:	000102f8 	.word	0x000102f8
    672c:	00010308 	.word	0x00010308
    6730:	00010808 	.word	0x00010808
    6734:	00012401 	.word	0x00012401
    6738:	0001244f 	.word	0x0001244f

0000673c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    673e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6740:	480f      	ldr	r0, [pc, #60]	; (6780 <bt_conn_lookup_state_le+0x44>)
{
    6742:	460e      	mov	r6, r1
    6744:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6746:	f007 f929 	bl	d99c <bt_conn_ref>

		if (!conn) {
    674a:	4604      	mov	r4, r0
    674c:	b1b0      	cbz	r0, 677c <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    674e:	7883      	ldrb	r3, [r0, #2]
    6750:	2b01      	cmp	r3, #1
    6752:	d003      	beq.n	675c <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    6754:	f007 f922 	bl	d99c <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    6758:	2400      	movs	r4, #0
			continue;
    675a:	e00f      	b.n	677c <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    675c:	b146      	cbz	r6, 6770 <bt_conn_lookup_state_le+0x34>
    675e:	4632      	mov	r2, r6
    6760:	4629      	mov	r1, r5
    6762:	f007 f8fb 	bl	d95c <bt_conn_is_peer_addr_le>
    6766:	b918      	cbnz	r0, 6770 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    6768:	4620      	mov	r0, r4
    676a:	f007 f92b 	bl	d9c4 <bt_conn_unref>
    676e:	e7f3      	b.n	6758 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    6770:	7aa3      	ldrb	r3, [r4, #10]
    6772:	42bb      	cmp	r3, r7
    6774:	d1f8      	bne.n	6768 <bt_conn_lookup_state_le+0x2c>
    6776:	7a23      	ldrb	r3, [r4, #8]
    6778:	42ab      	cmp	r3, r5
    677a:	d1f5      	bne.n	6768 <bt_conn_lookup_state_le+0x2c>
}
    677c:	4620      	mov	r0, r4
    677e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6780:	20000a70 	.word	0x20000a70

00006784 <send_conn_le_param_update>:
{
    6784:	b538      	push	{r3, r4, r5, lr}
    6786:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    6788:	4608      	mov	r0, r1
{
    678a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    678c:	f006 fff2 	bl	d774 <bt_le_conn_params_valid>
    6790:	b308      	cbz	r0, 67d6 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6792:	4b12      	ldr	r3, [pc, #72]	; (67dc <send_conn_le_param_update+0x58>)
    6794:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    6798:	0799      	lsls	r1, r3, #30
    679a:	d407      	bmi.n	67ac <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    679c:	78e3      	ldrb	r3, [r4, #3]
    679e:	b173      	cbz	r3, 67be <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    67a0:	4629      	mov	r1, r5
    67a2:	4620      	mov	r0, r4
}
    67a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    67a8:	f000 bac0 	b.w	6d2c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    67ac:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    67b0:	079a      	lsls	r2, r3, #30
    67b2:	d5f3      	bpl.n	679c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    67b4:	1d23      	adds	r3, r4, #4
    67b6:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    67ba:	055b      	lsls	r3, r3, #21
    67bc:	d4ee      	bmi.n	679c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    67be:	4629      	mov	r1, r5
    67c0:	4620      	mov	r0, r4
    67c2:	f007 f92f 	bl	da24 <bt_conn_le_conn_update>
		if (rc == 0) {
    67c6:	b928      	cbnz	r0, 67d4 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    67c8:	88ab      	ldrh	r3, [r5, #4]
    67ca:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    67ce:	88eb      	ldrh	r3, [r5, #6]
    67d0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    67d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    67d6:	f06f 0015 	mvn.w	r0, #21
    67da:	e7fb      	b.n	67d4 <send_conn_le_param_update+0x50>
    67dc:	20000000 	.word	0x20000000

000067e0 <deferred_work>:
{
    67e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    67e2:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    67e6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    67e8:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    67ec:	b993      	cbnz	r3, 6814 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    67ee:	4630      	mov	r0, r6
    67f0:	f007 f979 	bl	dae6 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    67f4:	4b1b      	ldr	r3, [pc, #108]	; (6864 <deferred_work+0x84>)
    67f6:	681d      	ldr	r5, [r3, #0]
    67f8:	b925      	cbnz	r5, 6804 <deferred_work+0x24>
		bt_conn_unref(conn);
    67fa:	4630      	mov	r0, r6
    67fc:	f007 f8e2 	bl	d9c4 <bt_conn_unref>
}
    6800:	b002      	add	sp, #8
    6802:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    6804:	686b      	ldr	r3, [r5, #4]
    6806:	b11b      	cbz	r3, 6810 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    6808:	4630      	mov	r0, r6
    680a:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    680e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6810:	692d      	ldr	r5, [r5, #16]
    6812:	e7f1      	b.n	67f8 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    6814:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    6818:	2b01      	cmp	r3, #1
    681a:	d1f1      	bne.n	6800 <deferred_work+0x20>
	if (atomic_test_and_clear_bit(conn->flags,
    681c:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6820:	e8d5 3fef 	ldaex	r3, [r5]
    6824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    6828:	e8c5 2fe1 	stlex	r1, r2, [r5]
    682c:	2900      	cmp	r1, #0
    682e:	d1f7      	bne.n	6820 <deferred_work+0x40>
    6830:	059b      	lsls	r3, r3, #22
    6832:	d510      	bpl.n	6856 <deferred_work+0x76>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6834:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6836:	9300      	str	r3, [sp, #0]
    6838:	6d23      	ldr	r3, [r4, #80]	; 0x50
    683a:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    683c:	4669      	mov	r1, sp
    683e:	4630      	mov	r0, r6
    6840:	f7ff ffa0 	bl	6784 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6844:	e8d5 3fef 	ldaex	r3, [r5]
    6848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    684c:	e8c5 3fe2 	stlex	r2, r3, [r5]
    6850:	2a00      	cmp	r2, #0
    6852:	d0d5      	beq.n	6800 <deferred_work+0x20>
    6854:	e7f6      	b.n	6844 <deferred_work+0x64>
		param = BT_LE_CONN_PARAM(
    6856:	466b      	mov	r3, sp
    6858:	4a03      	ldr	r2, [pc, #12]	; (6868 <deferred_work+0x88>)
    685a:	6810      	ldr	r0, [r2, #0]
    685c:	6851      	ldr	r1, [r2, #4]
    685e:	c303      	stmia	r3!, {r0, r1}
    6860:	e7ec      	b.n	683c <deferred_work+0x5c>
    6862:	bf00      	nop
    6864:	200016cc 	.word	0x200016cc
    6868:	00010458 	.word	0x00010458

0000686c <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    686c:	b538      	push	{r3, r4, r5, lr}
    686e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    6870:	490c      	ldr	r1, [pc, #48]	; (68a4 <bt_conn_create_pdu_timeout+0x38>)
    6872:	2800      	cmp	r0, #0
    6874:	bf08      	it	eq
    6876:	4608      	moveq	r0, r1
    6878:	f008 f8d7 	bl	ea2a <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    687c:	4604      	mov	r4, r0
    687e:	b958      	cbnz	r0, 6898 <bt_conn_create_pdu_timeout+0x2c>
    6880:	4909      	ldr	r1, [pc, #36]	; (68a8 <bt_conn_create_pdu_timeout+0x3c>)
    6882:	4b0a      	ldr	r3, [pc, #40]	; (68ac <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    6884:	480a      	ldr	r0, [pc, #40]	; (68b0 <bt_conn_create_pdu_timeout+0x44>)
    6886:	1ac9      	subs	r1, r1, r3
    6888:	08c9      	lsrs	r1, r1, #3
    688a:	0189      	lsls	r1, r1, #6
    688c:	f041 0102 	orr.w	r1, r1, #2
    6890:	f005 fe29 	bl	c4e6 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    6894:	4620      	mov	r0, r4
    6896:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    6898:	1d69      	adds	r1, r5, #5
    689a:	3008      	adds	r0, #8
    689c:	f008 f8ea 	bl	ea74 <net_buf_simple_reserve>
	return buf;
    68a0:	e7f8      	b.n	6894 <bt_conn_create_pdu_timeout+0x28>
    68a2:	bf00      	nop
    68a4:	200005a4 	.word	0x200005a4
    68a8:	00010308 	.word	0x00010308
    68ac:	000102f8 	.word	0x000102f8
    68b0:	00012472 	.word	0x00012472

000068b4 <bt_conn_create_frag_timeout>:
{
    68b4:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    68b6:	4801      	ldr	r0, [pc, #4]	; (68bc <bt_conn_create_frag_timeout+0x8>)
    68b8:	f7ff bfd8 	b.w	686c <bt_conn_create_pdu_timeout>
    68bc:	200005f4 	.word	0x200005f4

000068c0 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    68c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68c4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    68c6:	f04f 33ff 	mov.w	r3, #4294967295
    68ca:	f04f 32ff 	mov.w	r2, #4294967295
    68ce:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    68d0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    68d2:	f7ff ffef 	bl	68b4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    68d6:	7833      	ldrb	r3, [r6, #0]
		frag = bt_conn_create_frag(0);
    68d8:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    68da:	2b07      	cmp	r3, #7
    68dc:	f04f 0600 	mov.w	r6, #0
    68e0:	d005      	beq.n	68ee <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    68e2:	f002 fa6b 	bl	8dbc <net_buf_unref>
		return NULL;
    68e6:	4635      	mov	r5, r6
}
    68e8:	4628      	mov	r0, r5
    68ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    68ee:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    68f0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    68f4:	4e0c      	ldr	r6, [pc, #48]	; (6928 <create_frag.isra.0+0x68>)
    68f6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    68f8:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    68fc:	f008 f93f 	bl	eb7e <net_buf_simple_tailroom>
    6900:	4580      	cmp	r8, r0
    6902:	d20c      	bcs.n	691e <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    6904:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6908:	f854 1f08 	ldr.w	r1, [r4, #8]!
    690c:	4632      	mov	r2, r6
    690e:	4638      	mov	r0, r7
    6910:	f008 f8ed 	bl	eaee <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    6914:	4631      	mov	r1, r6
    6916:	4620      	mov	r0, r4
    6918:	f008 f915 	bl	eb46 <net_buf_simple_pull>
    691c:	e7e4      	b.n	68e8 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
    691e:	4638      	mov	r0, r7
    6920:	f008 f92d 	bl	eb7e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6924:	b286      	uxth	r6, r0
    6926:	e7ef      	b.n	6908 <create_frag.isra.0+0x48>
    6928:	20000000 	.word	0x20000000

0000692c <bt_conn_process_tx>:
{
    692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    692e:	7a83      	ldrb	r3, [r0, #10]
{
    6930:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    6932:	b973      	cbnz	r3, 6952 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6934:	1d03      	adds	r3, r0, #4
    6936:	e8d3 2fef 	ldaex	r2, [r3]
    693a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    693e:	e8c3 1fe4 	stlex	r4, r1, [r3]
    6942:	2c00      	cmp	r4, #0
    6944:	d1f7      	bne.n	6936 <bt_conn_process_tx+0xa>
    6946:	0653      	lsls	r3, r2, #25
    6948:	d503      	bpl.n	6952 <bt_conn_process_tx+0x26>
}
    694a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    694e:	f7ff bc3b 	b.w	61c8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    6952:	2200      	movs	r2, #0
    6954:	2300      	movs	r3, #0
    6956:	f105 0034 	add.w	r0, r5, #52	; 0x34
    695a:	f008 f86b 	bl	ea34 <net_buf_get>
	BT_ASSERT(buf);
    695e:	4604      	mov	r4, r0
    6960:	b960      	cbnz	r0, 697c <bt_conn_process_tx+0x50>
    6962:	f240 535f 	movw	r3, #1375	; 0x55f
    6966:	4a1f      	ldr	r2, [pc, #124]	; (69e4 <bt_conn_process_tx+0xb8>)
    6968:	491f      	ldr	r1, [pc, #124]	; (69e8 <bt_conn_process_tx+0xbc>)
    696a:	4820      	ldr	r0, [pc, #128]	; (69ec <bt_conn_process_tx+0xc0>)
    696c:	f005 f994 	bl	bc98 <printk>
    6970:	4040      	eors	r0, r0
    6972:	f380 8811 	msr	BASEPRI, r0
    6976:	f04f 0003 	mov.w	r0, #3
    697a:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    697c:	4f1c      	ldr	r7, [pc, #112]	; (69f0 <bt_conn_process_tx+0xc4>)
	if (buf->len <= conn_mtu(conn)) {
    697e:	89a1      	ldrh	r1, [r4, #12]
    6980:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
    6984:	4291      	cmp	r1, r2
    6986:	d807      	bhi.n	6998 <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    6988:	2300      	movs	r3, #0
    698a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    698c:	4621      	mov	r1, r4
    698e:	4628      	mov	r0, r5
    6990:	f7ff fb22 	bl	5fd8 <send_frag>
	if (!send_buf(conn, buf)) {
    6994:	b140      	cbz	r0, 69a8 <bt_conn_process_tx+0x7c>
}
    6996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    6998:	f105 060a 	add.w	r6, r5, #10
    699c:	4621      	mov	r1, r4
    699e:	4630      	mov	r0, r6
    69a0:	f7ff ff8e 	bl	68c0 <create_frag.isra.0>
	if (!frag) {
    69a4:	4601      	mov	r1, r0
    69a6:	b920      	cbnz	r0, 69b2 <bt_conn_process_tx+0x86>
		net_buf_unref(buf);
    69a8:	4620      	mov	r0, r4
}
    69aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    69ae:	f002 ba05 	b.w	8dbc <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    69b2:	2301      	movs	r3, #1
    69b4:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    69b6:	4628      	mov	r0, r5
    69b8:	f7ff fb0e 	bl	5fd8 <send_frag>
    69bc:	2800      	cmp	r0, #0
    69be:	d0f3      	beq.n	69a8 <bt_conn_process_tx+0x7c>
	while (buf->len > conn_mtu(conn)) {
    69c0:	89a2      	ldrh	r2, [r4, #12]
    69c2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
    69c6:	429a      	cmp	r2, r3
    69c8:	d802      	bhi.n	69d0 <bt_conn_process_tx+0xa4>
	return send_frag(conn, buf, FRAG_END, false);
    69ca:	2300      	movs	r3, #0
    69cc:	2203      	movs	r2, #3
    69ce:	e7dd      	b.n	698c <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
    69d0:	4621      	mov	r1, r4
    69d2:	4630      	mov	r0, r6
    69d4:	f7ff ff74 	bl	68c0 <create_frag.isra.0>
		if (!frag) {
    69d8:	4601      	mov	r1, r0
    69da:	2800      	cmp	r0, #0
    69dc:	d0e4      	beq.n	69a8 <bt_conn_process_tx+0x7c>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    69de:	2301      	movs	r3, #1
    69e0:	461a      	mov	r2, r3
    69e2:	e7e8      	b.n	69b6 <bt_conn_process_tx+0x8a>
    69e4:	0001249b 	.word	0x0001249b
    69e8:	00011a32 	.word	0x00011a32
    69ec:	00011cda 	.word	0x00011cda
    69f0:	20000000 	.word	0x20000000

000069f4 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    69f4:	4b03      	ldr	r3, [pc, #12]	; (6a04 <bt_conn_index+0x10>)
    69f6:	1ac0      	subs	r0, r0, r3
    69f8:	4b03      	ldr	r3, [pc, #12]	; (6a08 <bt_conn_index+0x14>)
    69fa:	1180      	asrs	r0, r0, #6
    69fc:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    69fe:	b2c0      	uxtb	r0, r0
    6a00:	4770      	bx	lr
    6a02:	bf00      	nop
    6a04:	20000a70 	.word	0x20000a70
    6a08:	aaaaaaab 	.word	0xaaaaaaab

00006a0c <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
    6a0c:	b910      	cbnz	r0, 6a14 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
    6a0e:	4802      	ldr	r0, [pc, #8]	; (6a18 <bt_conn_lookup_index+0xc>)
    6a10:	f006 bfc4 	b.w	d99c <bt_conn_ref>
}
    6a14:	2000      	movs	r0, #0
    6a16:	4770      	bx	lr
    6a18:	20000a70 	.word	0x20000a70

00006a1c <bt_conn_init>:

int bt_conn_init(void)
{
    6a1c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    6a1e:	490b      	ldr	r1, [pc, #44]	; (6a4c <bt_conn_init+0x30>)
    6a20:	480b      	ldr	r0, [pc, #44]	; (6a50 <bt_conn_init+0x34>)
    6a22:	f008 fef5 	bl	f810 <k_queue_append>
    6a26:	490b      	ldr	r1, [pc, #44]	; (6a54 <bt_conn_init+0x38>)
    6a28:	4809      	ldr	r0, [pc, #36]	; (6a50 <bt_conn_init+0x34>)
    6a2a:	f008 fef1 	bl	f810 <k_queue_append>
    6a2e:	490a      	ldr	r1, [pc, #40]	; (6a58 <bt_conn_init+0x3c>)
    6a30:	4807      	ldr	r0, [pc, #28]	; (6a50 <bt_conn_init+0x34>)
    6a32:	f008 feed 	bl	f810 <k_queue_append>
	}

	bt_att_init();
    6a36:	f007 fbb6 	bl	e1a6 <bt_att_init>

	err = bt_smp_init();
    6a3a:	f007 fff3 	bl	ea24 <bt_smp_init>
	if (err) {
    6a3e:	4604      	mov	r4, r0
    6a40:	b908      	cbnz	r0, 6a46 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    6a42:	f007 f8a2 	bl	db8a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    6a46:	4620      	mov	r0, r4
    6a48:	bd10      	pop	{r4, pc}
    6a4a:	bf00      	nop
    6a4c:	200016d0 	.word	0x200016d0
    6a50:	20000564 	.word	0x20000564
    6a54:	200016e0 	.word	0x200016e0
    6a58:	200016f0 	.word	0x200016f0

00006a5c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    6a5c:	4a0b      	ldr	r2, [pc, #44]	; (6a8c <l2cap_accept+0x30>)
{
    6a5e:	b508      	push	{r3, lr}
    6a60:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    6a62:	6810      	ldr	r0, [r2, #0]
    6a64:	b918      	cbnz	r0, 6a6e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    6a66:	4b0a      	ldr	r3, [pc, #40]	; (6a90 <l2cap_accept+0x34>)
    6a68:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    6a6a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    6a6c:	bd08      	pop	{r3, pc}
    6a6e:	4909      	ldr	r1, [pc, #36]	; (6a94 <l2cap_accept+0x38>)
    6a70:	4a09      	ldr	r2, [pc, #36]	; (6a98 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    6a72:	480a      	ldr	r0, [pc, #40]	; (6a9c <l2cap_accept+0x40>)
    6a74:	1a52      	subs	r2, r2, r1
    6a76:	08d2      	lsrs	r2, r2, #3
    6a78:	0192      	lsls	r2, r2, #6
    6a7a:	4619      	mov	r1, r3
    6a7c:	f042 0201 	orr.w	r2, r2, #1
    6a80:	f005 fd3e 	bl	c500 <log_1>
	return -ENOMEM;
    6a84:	f06f 000b 	mvn.w	r0, #11
    6a88:	e7f0      	b.n	6a6c <l2cap_accept+0x10>
    6a8a:	bf00      	nop
    6a8c:	20000b30 	.word	0x20000b30
    6a90:	0001084c 	.word	0x0001084c
    6a94:	000102f8 	.word	0x000102f8
    6a98:	00010338 	.word	0x00010338
    6a9c:	00012528 	.word	0x00012528

00006aa0 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    6aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6aa2:	4605      	mov	r5, r0
    6aa4:	460f      	mov	r7, r1
    6aa6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    6aa8:	2300      	movs	r3, #0
    6aaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6aae:	2104      	movs	r1, #4
    6ab0:	2000      	movs	r0, #0
    6ab2:	f7ff fedb 	bl	686c <bt_conn_create_pdu_timeout>
	if (!buf) {
    6ab6:	4604      	mov	r4, r0
    6ab8:	b960      	cbnz	r0, 6ad4 <l2cap_create_le_sig_pdu.isra.0+0x34>
    6aba:	4a0a      	ldr	r2, [pc, #40]	; (6ae4 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    6abc:	4b0a      	ldr	r3, [pc, #40]	; (6ae8 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    6abe:	4629      	mov	r1, r5
    6ac0:	1ad2      	subs	r2, r2, r3
    6ac2:	08d2      	lsrs	r2, r2, #3
    6ac4:	0192      	lsls	r2, r2, #6
    6ac6:	4809      	ldr	r0, [pc, #36]	; (6aec <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    6ac8:	f042 0201 	orr.w	r2, r2, #1
    6acc:	f005 fd18 	bl	c500 <log_1>
}
    6ad0:	4620      	mov	r0, r4
    6ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    6ad4:	2104      	movs	r1, #4
    6ad6:	3008      	adds	r0, #8
    6ad8:	f008 f803 	bl	eae2 <net_buf_simple_add>
	hdr->code = code;
    6adc:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    6ade:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    6ae0:	8046      	strh	r6, [r0, #2]
	return buf;
    6ae2:	e7f5      	b.n	6ad0 <l2cap_create_le_sig_pdu.isra.0+0x30>
    6ae4:	00010338 	.word	0x00010338
    6ae8:	000102f8 	.word	0x000102f8
    6aec:	0001254f 	.word	0x0001254f

00006af0 <l2cap_rtx_timeout>:
{
    6af0:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    6af2:	4604      	mov	r4, r0
    6af4:	4b0a      	ldr	r3, [pc, #40]	; (6b20 <l2cap_rtx_timeout+0x30>)
    6af6:	4a0b      	ldr	r2, [pc, #44]	; (6b24 <l2cap_rtx_timeout+0x34>)
    6af8:	f854 5d10 	ldr.w	r5, [r4, #-16]!
    6afc:	1ad2      	subs	r2, r2, r3
    6afe:	08d2      	lsrs	r2, r2, #3
	BT_ERR("chan %p timeout", chan);
    6b00:	0192      	lsls	r2, r2, #6
    6b02:	4621      	mov	r1, r4
    6b04:	4808      	ldr	r0, [pc, #32]	; (6b28 <l2cap_rtx_timeout+0x38>)
    6b06:	f042 0201 	orr.w	r2, r2, #1
    6b0a:	f005 fcf9 	bl	c500 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    6b0e:	4628      	mov	r0, r5
    6b10:	4621      	mov	r1, r4
    6b12:	f006 ffb1 	bl	da78 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    6b16:	4620      	mov	r0, r4
}
    6b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    6b1c:	f006 bfce 	b.w	dabc <bt_l2cap_chan_del>
    6b20:	000102f8 	.word	0x000102f8
    6b24:	00010338 	.word	0x00010338
    6b28:	00012577 	.word	0x00012577

00006b2c <bt_l2cap_connected>:
{
    6b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6b30:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6b32:	4e26      	ldr	r6, [pc, #152]	; (6bcc <bt_l2cap_connected+0xa0>)
    6b34:	4f26      	ldr	r7, [pc, #152]	; (6bd0 <bt_l2cap_connected+0xa4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    6b36:	f8df 809c 	ldr.w	r8, [pc, #156]	; 6bd4 <bt_l2cap_connected+0xa8>
    6b3a:	42be      	cmp	r6, r7
    6b3c:	d302      	bcc.n	6b44 <bt_l2cap_connected+0x18>
}
    6b3e:	b003      	add	sp, #12
    6b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    6b44:	4628      	mov	r0, r5
    6b46:	6873      	ldr	r3, [r6, #4]
    6b48:	a901      	add	r1, sp, #4
    6b4a:	4798      	blx	r3
    6b4c:	2800      	cmp	r0, #0
    6b4e:	db38      	blt.n	6bc2 <bt_l2cap_connected+0x96>
		ch = BT_L2CAP_LE_CHAN(chan);
    6b50:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    6b52:	8833      	ldrh	r3, [r6, #0]
    6b54:	2230      	movs	r2, #48	; 0x30
    6b56:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    6b5a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    6b5e:	2100      	movs	r1, #0
    6b60:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    6b64:	f8d6 9008 	ldr.w	r9, [r6, #8]
    6b68:	f006 fd12 	bl	d590 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6b6c:	2200      	movs	r2, #0
    6b6e:	f8c4 8014 	str.w	r8, [r4, #20]
    6b72:	f104 0340 	add.w	r3, r4, #64	; 0x40
    6b76:	e8d3 1fef 	ldaex	r1, [r3]
    6b7a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    6b7e:	2800      	cmp	r0, #0
    6b80:	d1f9      	bne.n	6b76 <bt_l2cap_connected+0x4a>
	parent->next = child;
    6b82:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    6b84:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    6b86:	f104 0308 	add.w	r3, r4, #8
    6b8a:	b9e2      	cbnz	r2, 6bc6 <bt_l2cap_connected+0x9a>
	list->head = node;
    6b8c:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    6b90:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    6b92:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    6b94:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    6b96:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    6b9a:	681b      	ldr	r3, [r3, #0]
    6b9c:	b103      	cbz	r3, 6ba0 <bt_l2cap_connected+0x74>
			chan->ops->connected(chan);
    6b9e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6ba0:	9b01      	ldr	r3, [sp, #4]
    6ba2:	3340      	adds	r3, #64	; 0x40
    6ba4:	e8d3 2fef 	ldaex	r2, [r3]
    6ba8:	f042 0201 	orr.w	r2, r2, #1
    6bac:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6bb0:	2900      	cmp	r1, #0
    6bb2:	d1f7      	bne.n	6ba4 <bt_l2cap_connected+0x78>
		if (chan->ops->status) {
    6bb4:	9801      	ldr	r0, [sp, #4]
    6bb6:	6843      	ldr	r3, [r0, #4]
    6bb8:	699b      	ldr	r3, [r3, #24]
    6bba:	b113      	cbz	r3, 6bc2 <bt_l2cap_connected+0x96>
			chan->ops->status(chan, chan->status);
    6bbc:	f100 0140 	add.w	r1, r0, #64	; 0x40
    6bc0:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6bc2:	360c      	adds	r6, #12
    6bc4:	e7b9      	b.n	6b3a <bt_l2cap_connected+0xe>
	parent->next = child;
    6bc6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6bc8:	652b      	str	r3, [r5, #80]	; 0x50
}
    6bca:	e7e1      	b.n	6b90 <bt_l2cap_connected+0x64>
    6bcc:	000102bc 	.word	0x000102bc
    6bd0:	000102e0 	.word	0x000102e0
    6bd4:	00006af1 	.word	0x00006af1

00006bd8 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    6bd8:	898b      	ldrh	r3, [r1, #12]
{
    6bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    6bdc:	2b03      	cmp	r3, #3
{
    6bde:	4606      	mov	r6, r0
    6be0:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    6be2:	d80a      	bhi.n	6bfa <l2cap_recv+0x22>
    6be4:	492e      	ldr	r1, [pc, #184]	; (6ca0 <l2cap_recv+0xc8>)
    6be6:	4b2f      	ldr	r3, [pc, #188]	; (6ca4 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    6be8:	482f      	ldr	r0, [pc, #188]	; (6ca8 <l2cap_recv+0xd0>)
    6bea:	1ac9      	subs	r1, r1, r3
    6bec:	08c9      	lsrs	r1, r1, #3
    6bee:	0189      	lsls	r1, r1, #6
    6bf0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    6bf4:	f005 fc77 	bl	c4e6 <log_0>
		return 0;
    6bf8:	e013      	b.n	6c22 <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    6bfa:	2104      	movs	r1, #4
    6bfc:	f105 0008 	add.w	r0, r5, #8
    6c00:	f007 ffa9 	bl	eb56 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    6c04:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    6c06:	8842      	ldrh	r2, [r0, #2]
    6c08:	4604      	mov	r4, r0
	if (buf->len != len) {
    6c0a:	428a      	cmp	r2, r1
    6c0c:	d00c      	beq.n	6c28 <l2cap_recv+0x50>
    6c0e:	4825      	ldr	r0, [pc, #148]	; (6ca4 <l2cap_recv+0xcc>)
    6c10:	4b23      	ldr	r3, [pc, #140]	; (6ca0 <l2cap_recv+0xc8>)
    6c12:	1a1b      	subs	r3, r3, r0
    6c14:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    6c16:	019b      	lsls	r3, r3, #6
    6c18:	4824      	ldr	r0, [pc, #144]	; (6cac <l2cap_recv+0xd4>)
    6c1a:	f043 0301 	orr.w	r3, r3, #1
    6c1e:	f005 fc83 	bl	c528 <log_2>
}
    6c22:	2000      	movs	r0, #0
    6c24:	b002      	add	sp, #8
    6c26:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    6c28:	7843      	ldrb	r3, [r0, #1]
    6c2a:	b943      	cbnz	r3, 6c3e <l2cap_recv+0x66>
    6c2c:	491c      	ldr	r1, [pc, #112]	; (6ca0 <l2cap_recv+0xc8>)
    6c2e:	4b1d      	ldr	r3, [pc, #116]	; (6ca4 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    6c30:	481f      	ldr	r0, [pc, #124]	; (6cb0 <l2cap_recv+0xd8>)
    6c32:	1ac9      	subs	r1, r1, r3
    6c34:	08c9      	lsrs	r1, r1, #3
    6c36:	0189      	lsls	r1, r1, #6
    6c38:	f041 0101 	orr.w	r1, r1, #1
    6c3c:	e7da      	b.n	6bf4 <l2cap_recv+0x1c>
	switch (hdr->code) {
    6c3e:	7801      	ldrb	r1, [r0, #0]
    6c40:	2901      	cmp	r1, #1
    6c42:	d0ee      	beq.n	6c22 <l2cap_recv+0x4a>
    6c44:	2913      	cmp	r1, #19
    6c46:	d10a      	bne.n	6c5e <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    6c48:	2a01      	cmp	r2, #1
    6c4a:	d8ea      	bhi.n	6c22 <l2cap_recv+0x4a>
    6c4c:	4914      	ldr	r1, [pc, #80]	; (6ca0 <l2cap_recv+0xc8>)
    6c4e:	4b15      	ldr	r3, [pc, #84]	; (6ca4 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    6c50:	4818      	ldr	r0, [pc, #96]	; (6cb4 <l2cap_recv+0xdc>)
    6c52:	1ac9      	subs	r1, r1, r3
    6c54:	08c9      	lsrs	r1, r1, #3
    6c56:	0189      	lsls	r1, r1, #6
    6c58:	f041 0101 	orr.w	r1, r1, #1
    6c5c:	e7ca      	b.n	6bf4 <l2cap_recv+0x1c>
    6c5e:	4b11      	ldr	r3, [pc, #68]	; (6ca4 <l2cap_recv+0xcc>)
    6c60:	4a0f      	ldr	r2, [pc, #60]	; (6ca0 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    6c62:	4815      	ldr	r0, [pc, #84]	; (6cb8 <l2cap_recv+0xe0>)
    6c64:	1ad2      	subs	r2, r2, r3
    6c66:	08d2      	lsrs	r2, r2, #3
    6c68:	0192      	lsls	r2, r2, #6
    6c6a:	f042 0202 	orr.w	r2, r2, #2
    6c6e:	f005 fc47 	bl	c500 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6c72:	7861      	ldrb	r1, [r4, #1]
    6c74:	2202      	movs	r2, #2
    6c76:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
    6c78:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6c7a:	f7ff ff11 	bl	6aa0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    6c7e:	4604      	mov	r4, r0
    6c80:	2800      	cmp	r0, #0
    6c82:	d0ce      	beq.n	6c22 <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    6c84:	2102      	movs	r1, #2
    6c86:	3008      	adds	r0, #8
    6c88:	f007 ff2b 	bl	eae2 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6c8c:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    6c8e:	4622      	mov	r2, r4
    6c90:	7003      	strb	r3, [r0, #0]
    6c92:	7043      	strb	r3, [r0, #1]
    6c94:	2105      	movs	r1, #5
    6c96:	4628      	mov	r0, r5
    6c98:	9300      	str	r3, [sp, #0]
    6c9a:	f006 ff3d 	bl	db18 <bt_l2cap_send_cb>
}
    6c9e:	e7c0      	b.n	6c22 <l2cap_recv+0x4a>
    6ca0:	00010338 	.word	0x00010338
    6ca4:	000102f8 	.word	0x000102f8
    6ca8:	00012587 	.word	0x00012587
    6cac:	000125a5 	.word	0x000125a5
    6cb0:	000125c6 	.word	0x000125c6
    6cb4:	000125e7 	.word	0x000125e7
    6cb8:	00012603 	.word	0x00012603

00006cbc <bt_l2cap_recv>:
{
    6cbc:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    6cbe:	898b      	ldrh	r3, [r1, #12]
{
    6cc0:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
    6cc2:	2b03      	cmp	r3, #3
{
    6cc4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    6cc6:	d80e      	bhi.n	6ce6 <bt_l2cap_recv+0x2a>
    6cc8:	4914      	ldr	r1, [pc, #80]	; (6d1c <bt_l2cap_recv+0x60>)
    6cca:	4b15      	ldr	r3, [pc, #84]	; (6d20 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    6ccc:	4815      	ldr	r0, [pc, #84]	; (6d24 <bt_l2cap_recv+0x68>)
    6cce:	1ac9      	subs	r1, r1, r3
    6cd0:	08c9      	lsrs	r1, r1, #3
    6cd2:	0189      	lsls	r1, r1, #6
    6cd4:	f041 0101 	orr.w	r1, r1, #1
    6cd8:	f005 fc05 	bl	c4e6 <log_0>
	net_buf_unref(buf);
    6cdc:	4620      	mov	r0, r4
}
    6cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    6ce2:	f002 b86b 	b.w	8dbc <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    6ce6:	2104      	movs	r1, #4
    6ce8:	f104 0008 	add.w	r0, r4, #8
    6cec:	f007 ff33 	bl	eb56 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    6cf0:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    6cf2:	4628      	mov	r0, r5
    6cf4:	f006 ff39 	bl	db6a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6cf8:	b950      	cbnz	r0, 6d10 <bt_l2cap_recv+0x54>
    6cfa:	4b09      	ldr	r3, [pc, #36]	; (6d20 <bt_l2cap_recv+0x64>)
    6cfc:	4a07      	ldr	r2, [pc, #28]	; (6d1c <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    6cfe:	480a      	ldr	r0, [pc, #40]	; (6d28 <bt_l2cap_recv+0x6c>)
    6d00:	1ad2      	subs	r2, r2, r3
    6d02:	08d2      	lsrs	r2, r2, #3
    6d04:	0192      	lsls	r2, r2, #6
    6d06:	f042 0202 	orr.w	r2, r2, #2
    6d0a:	f005 fbf9 	bl	c500 <log_1>
		net_buf_unref(buf);
    6d0e:	e7e5      	b.n	6cdc <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    6d10:	6843      	ldr	r3, [r0, #4]
    6d12:	4621      	mov	r1, r4
    6d14:	691b      	ldr	r3, [r3, #16]
    6d16:	4798      	blx	r3
    6d18:	e7e0      	b.n	6cdc <bt_l2cap_recv+0x20>
    6d1a:	bf00      	nop
    6d1c:	00010338 	.word	0x00010338
    6d20:	000102f8 	.word	0x000102f8
    6d24:	00012621 	.word	0x00012621
    6d28:	0001263e 	.word	0x0001263e

00006d2c <bt_l2cap_update_conn_param>:
{
    6d2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    6d2e:	4b15      	ldr	r3, [pc, #84]	; (6d84 <bt_l2cap_update_conn_param+0x58>)
{
    6d30:	4605      	mov	r5, r0
	ident++;
    6d32:	781a      	ldrb	r2, [r3, #0]
{
    6d34:	460c      	mov	r4, r1
	ident++;
    6d36:	3201      	adds	r2, #1
	if (!ident) {
    6d38:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    6d3c:	bf08      	it	eq
    6d3e:	2201      	moveq	r2, #1
    6d40:	701a      	strb	r2, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6d42:	2012      	movs	r0, #18
    6d44:	2208      	movs	r2, #8
    6d46:	7819      	ldrb	r1, [r3, #0]
    6d48:	f7ff feaa 	bl	6aa0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    6d4c:	4606      	mov	r6, r0
    6d4e:	b1b0      	cbz	r0, 6d7e <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    6d50:	2108      	movs	r1, #8
    6d52:	4408      	add	r0, r1
    6d54:	f007 fec5 	bl	eae2 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    6d58:	8822      	ldrh	r2, [r4, #0]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    6d5a:	2105      	movs	r1, #5
    6d5c:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    6d5e:	8862      	ldrh	r2, [r4, #2]
    6d60:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    6d62:	88a2      	ldrh	r2, [r4, #4]
    6d64:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    6d66:	88e2      	ldrh	r2, [r4, #6]
    6d68:	2400      	movs	r4, #0
    6d6a:	80c2      	strh	r2, [r0, #6]
    6d6c:	4623      	mov	r3, r4
    6d6e:	4632      	mov	r2, r6
    6d70:	4628      	mov	r0, r5
    6d72:	9400      	str	r4, [sp, #0]
    6d74:	f006 fed0 	bl	db18 <bt_l2cap_send_cb>
	return 0;
    6d78:	4620      	mov	r0, r4
}
    6d7a:	b002      	add	sp, #8
    6d7c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    6d7e:	f06f 000b 	mvn.w	r0, #11
    6d82:	e7fa      	b.n	6d7a <bt_l2cap_update_conn_param+0x4e>
    6d84:	20002a03 	.word	0x20002a03

00006d88 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    6d88:	4b02      	ldr	r3, [pc, #8]	; (6d94 <att_cfm_sent+0xc>)
    6d8a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    6d8e:	f006 bf2a 	b.w	dbe6 <att_sent>
    6d92:	bf00      	nop
    6d94:	0000df1d 	.word	0x0000df1d

00006d98 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    6d98:	4b02      	ldr	r3, [pc, #8]	; (6da4 <att_rsp_sent+0xc>)
    6d9a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    6d9e:	f006 bf22 	b.w	dbe6 <att_sent>
    6da2:	bf00      	nop
    6da4:	0000df09 	.word	0x0000df09

00006da8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    6da8:	4b02      	ldr	r3, [pc, #8]	; (6db4 <att_req_sent+0xc>)
    6daa:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    6dae:	f006 bf1a 	b.w	dbe6 <att_sent>
    6db2:	bf00      	nop
    6db4:	000071f1 	.word	0x000071f1

00006db8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    6db8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    6dba:	3808      	subs	r0, #8
    6dbc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    6dbe:	a901      	add	r1, sp, #4
    6dc0:	4802      	ldr	r0, [pc, #8]	; (6dcc <bt_att_released+0x14>)
    6dc2:	f003 fca7 	bl	a714 <k_mem_slab_free>
}
    6dc6:	b003      	add	sp, #12
    6dc8:	f85d fb04 	ldr.w	pc, [sp], #4
    6dcc:	200004b0 	.word	0x200004b0

00006dd0 <read_group_cb>:
{
    6dd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6dd4:	f04f 0800 	mov.w	r8, #0
    6dd8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
    6ddc:	4606      	mov	r6, r0
    6dde:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6de0:	6800      	ldr	r0, [r0, #0]
    6de2:	a902      	add	r1, sp, #8
{
    6de4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
    6de6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6de8:	f88d 8008 	strb.w	r8, [sp, #8]
    6dec:	f8ad 300a 	strh.w	r3, [sp, #10]
    6df0:	f006 fbf4 	bl	d5dc <bt_uuid_cmp>
    6df4:	b1a0      	cbz	r0, 6e20 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6df6:	f642 0301 	movw	r3, #10241	; 0x2801
    6dfa:	6830      	ldr	r0, [r6, #0]
    6dfc:	a903      	add	r1, sp, #12
    6dfe:	f88d 800c 	strb.w	r8, [sp, #12]
    6e02:	f8ad 300e 	strh.w	r3, [sp, #14]
    6e06:	f006 fbe9 	bl	d5dc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6e0a:	b148      	cbz	r0, 6e20 <read_group_cb+0x50>
		if (data->group &&
    6e0c:	6923      	ldr	r3, [r4, #16]
    6e0e:	b11b      	cbz	r3, 6e18 <read_group_cb+0x48>
    6e10:	885a      	ldrh	r2, [r3, #2]
    6e12:	42aa      	cmp	r2, r5
    6e14:	d200      	bcs.n	6e18 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    6e16:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    6e18:	2001      	movs	r0, #1
}
    6e1a:	b004      	add	sp, #16
    6e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6e20:	6861      	ldr	r1, [r4, #4]
    6e22:	6830      	ldr	r0, [r6, #0]
    6e24:	f006 fbda 	bl	d5dc <bt_uuid_cmp>
    6e28:	b110      	cbz	r0, 6e30 <read_group_cb+0x60>
		data->group = NULL;
    6e2a:	2300      	movs	r3, #0
    6e2c:	6123      	str	r3, [r4, #16]
    6e2e:	e7f3      	b.n	6e18 <read_group_cb+0x48>
	if (data->rsp->len &&
    6e30:	68e3      	ldr	r3, [r4, #12]
    6e32:	68a0      	ldr	r0, [r4, #8]
    6e34:	781a      	ldrb	r2, [r3, #0]
    6e36:	b13a      	cbz	r2, 6e48 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    6e38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    6e3c:	8981      	ldrh	r1, [r0, #12]
    6e3e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    6e40:	4293      	cmp	r3, r2
    6e42:	da01      	bge.n	6e48 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    6e44:	2000      	movs	r0, #0
    6e46:	e7e8      	b.n	6e1a <read_group_cb+0x4a>
    6e48:	2104      	movs	r1, #4
    6e4a:	3008      	adds	r0, #8
    6e4c:	f007 fe49 	bl	eae2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6e50:	4b09      	ldr	r3, [pc, #36]	; (6e78 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    6e52:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6e54:	4631      	mov	r1, r6
	data->group->start_handle = sys_cpu_to_le16(handle);
    6e56:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    6e58:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6e5a:	68a2      	ldr	r2, [r4, #8]
    6e5c:	9300      	str	r3, [sp, #0]
    6e5e:	4638      	mov	r0, r7
    6e60:	2300      	movs	r3, #0
    6e62:	9401      	str	r4, [sp, #4]
    6e64:	f006 ff28 	bl	dcb8 <att_chan_read>
	if (read < 0) {
    6e68:	2800      	cmp	r0, #0
    6e6a:	dbeb      	blt.n	6e44 <read_group_cb+0x74>
	if (!data->group) {
    6e6c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    6e6e:	3800      	subs	r0, #0
    6e70:	bf18      	it	ne
    6e72:	2001      	movne	r0, #1
    6e74:	e7d1      	b.n	6e1a <read_group_cb+0x4a>
    6e76:	bf00      	nop
    6e78:	0000de67 	.word	0x0000de67

00006e7c <read_type_cb>:
{
    6e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    6e80:	f8d2 8000 	ldr.w	r8, [r2]
{
    6e84:	4606      	mov	r6, r0
    6e86:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6e88:	6800      	ldr	r0, [r0, #0]
    6e8a:	6851      	ldr	r1, [r2, #4]
{
    6e8c:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
    6e8e:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6e92:	f006 fba3 	bl	d5dc <bt_uuid_cmp>
    6e96:	4607      	mov	r7, r0
    6e98:	2800      	cmp	r0, #0
    6e9a:	d13e      	bne.n	6f1a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6e9c:	4628      	mov	r0, r5
    6e9e:	2215      	movs	r2, #21
    6ea0:	4631      	mov	r1, r6
    6ea2:	f007 fcac 	bl	e7fe <bt_gatt_check_perm>
    6ea6:	4605      	mov	r5, r0
    6ea8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    6eaa:	b148      	cbz	r0, 6ec0 <read_type_cb+0x44>
		if (data->rsp->len) {
    6eac:	68e3      	ldr	r3, [r4, #12]
    6eae:	781b      	ldrb	r3, [r3, #0]
    6eb0:	b923      	cbnz	r3, 6ebc <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    6eb2:	2500      	movs	r5, #0
}
    6eb4:	4628      	mov	r0, r5
    6eb6:	b003      	add	sp, #12
    6eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    6ebc:	7527      	strb	r7, [r4, #20]
    6ebe:	e7f8      	b.n	6eb2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    6ec0:	68a0      	ldr	r0, [r4, #8]
    6ec2:	f007 fdec 	bl	ea9e <net_buf_frag_last>
    6ec6:	2102      	movs	r1, #2
    6ec8:	3008      	adds	r0, #8
    6eca:	f007 fe0a 	bl	eae2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6ece:	4b14      	ldr	r3, [pc, #80]	; (6f20 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    6ed0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6ed2:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
    6ed4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6ed8:	68a2      	ldr	r2, [r4, #8]
    6eda:	9300      	str	r3, [sp, #0]
    6edc:	4640      	mov	r0, r8
    6ede:	462b      	mov	r3, r5
    6ee0:	9401      	str	r4, [sp, #4]
    6ee2:	f006 fee9 	bl	dcb8 <att_chan_read>
	if (read < 0) {
    6ee6:	2800      	cmp	r0, #0
    6ee8:	da07      	bge.n	6efa <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    6eea:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    6eee:	bf32      	itee	cc
    6ef0:	200e      	movcc	r0, #14
		return -err;
    6ef2:	4240      	negcs	r0, r0
    6ef4:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
    6ef6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    6ef8:	e7dc      	b.n	6eb4 <read_type_cb+0x38>
	if (!data->item) {
    6efa:	6923      	ldr	r3, [r4, #16]
    6efc:	2b00      	cmp	r3, #0
    6efe:	d0d8      	beq.n	6eb2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    6f00:	68a0      	ldr	r0, [r4, #8]
    6f02:	f006 fe68 	bl	dbd6 <net_buf_frags_len>
    6f06:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    6f0a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    6f0c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    6f0e:	7818      	ldrb	r0, [r3, #0]
    6f10:	4285      	cmp	r5, r0
    6f12:	bf94      	ite	ls
    6f14:	2500      	movls	r5, #0
    6f16:	2501      	movhi	r5, #1
    6f18:	e7cc      	b.n	6eb4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    6f1a:	2501      	movs	r5, #1
    6f1c:	e7ca      	b.n	6eb4 <read_type_cb+0x38>
    6f1e:	bf00      	nop
    6f20:	0000dbf3 	.word	0x0000dbf3

00006f24 <find_type_cb>:
{
    6f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6f28:	f642 0301 	movw	r3, #10241	; 0x2801
    6f2c:	2500      	movs	r5, #0
{
    6f2e:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
    6f30:	f8d2 9000 	ldr.w	r9, [r2]
{
    6f34:	4607      	mov	r7, r0
    6f36:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6f38:	6800      	ldr	r0, [r0, #0]
    6f3a:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
    6f3c:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
    6f40:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6f42:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    6f46:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    6f4a:	f006 fb47 	bl	d5dc <bt_uuid_cmp>
    6f4e:	2800      	cmp	r0, #0
    6f50:	d066      	beq.n	7020 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    6f52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6f56:	6838      	ldr	r0, [r7, #0]
    6f58:	a90b      	add	r1, sp, #44	; 0x2c
    6f5a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    6f5e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    6f62:	f006 fb3b 	bl	d5dc <bt_uuid_cmp>
    6f66:	b138      	cbz	r0, 6f78 <find_type_cb+0x54>
		if (data->group &&
    6f68:	68a3      	ldr	r3, [r4, #8]
    6f6a:	b11b      	cbz	r3, 6f74 <find_type_cb+0x50>
    6f6c:	885a      	ldrh	r2, [r3, #2]
    6f6e:	42b2      	cmp	r2, r6
    6f70:	d200      	bcs.n	6f74 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    6f72:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    6f74:	2001      	movs	r0, #1
    6f76:	e009      	b.n	6f8c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    6f78:	6861      	ldr	r1, [r4, #4]
    6f7a:	4608      	mov	r0, r1
    6f7c:	f006 fe2b 	bl	dbd6 <net_buf_frags_len>
    6f80:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    6f84:	1a1b      	subs	r3, r3, r0
    6f86:	2b03      	cmp	r3, #3
    6f88:	d803      	bhi.n	6f92 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    6f8a:	2000      	movs	r0, #0
}
    6f8c:	b011      	add	sp, #68	; 0x44
    6f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    6f92:	4608      	mov	r0, r1
    6f94:	f007 fd83 	bl	ea9e <net_buf_frag_last>
    6f98:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    6f9a:	6860      	ldr	r0, [r4, #4]
    6f9c:	f006 fe1b 	bl	dbd6 <net_buf_frags_len>
    6fa0:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    6fa4:	f105 0b08 	add.w	fp, r5, #8
    6fa8:	ebaa 0a00 	sub.w	sl, sl, r0
    6fac:	4658      	mov	r0, fp
    6fae:	f007 fde6 	bl	eb7e <net_buf_simple_tailroom>
    6fb2:	4582      	cmp	sl, r0
    6fb4:	d237      	bcs.n	7026 <find_type_cb+0x102>
    6fb6:	6860      	ldr	r0, [r4, #4]
    6fb8:	f006 fe0d 	bl	dbd6 <net_buf_frags_len>
    6fbc:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    6fc0:	1a18      	subs	r0, r3, r0
	if (!len) {
    6fc2:	b970      	cbnz	r0, 6fe2 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    6fc4:	6863      	ldr	r3, [r4, #4]
    6fc6:	7998      	ldrb	r0, [r3, #6]
    6fc8:	f001 fe3c 	bl	8c44 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    6fcc:	2200      	movs	r2, #0
    6fce:	2300      	movs	r3, #0
    6fd0:	f007 fd2b 	bl	ea2a <net_buf_alloc_fixed>
		if (!frag) {
    6fd4:	4605      	mov	r5, r0
    6fd6:	2800      	cmp	r0, #0
    6fd8:	d0d7      	beq.n	6f8a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    6fda:	4601      	mov	r1, r0
    6fdc:	6860      	ldr	r0, [r4, #4]
    6fde:	f007 fd6f 	bl	eac0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    6fe2:	2300      	movs	r3, #0
    6fe4:	9300      	str	r3, [sp, #0]
    6fe6:	4639      	mov	r1, r7
    6fe8:	f8d7 9004 	ldr.w	r9, [r7, #4]
    6fec:	2310      	movs	r3, #16
    6fee:	4640      	mov	r0, r8
    6ff0:	aa02      	add	r2, sp, #8
    6ff2:	47c8      	blx	r9
	if (read < 0) {
    6ff4:	1e07      	subs	r7, r0, #0
    6ff6:	db13      	blt.n	7020 <find_type_cb+0xfc>
	if (read != data->value_len) {
    6ff8:	7c22      	ldrb	r2, [r4, #16]
    6ffa:	68e0      	ldr	r0, [r4, #12]
    6ffc:	42ba      	cmp	r2, r7
    6ffe:	d037      	beq.n	7070 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    7000:	4601      	mov	r1, r0
    7002:	a80b      	add	r0, sp, #44	; 0x2c
    7004:	f006 fb14 	bl	d630 <bt_uuid_create>
    7008:	b988      	cbnz	r0, 702e <find_type_cb+0x10a>
    700a:	4a1b      	ldr	r2, [pc, #108]	; (7078 <find_type_cb+0x154>)
    700c:	4b1b      	ldr	r3, [pc, #108]	; (707c <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    700e:	7c21      	ldrb	r1, [r4, #16]
    7010:	1ad2      	subs	r2, r2, r3
    7012:	08d2      	lsrs	r2, r2, #3
    7014:	0192      	lsls	r2, r2, #6
    7016:	481a      	ldr	r0, [pc, #104]	; (7080 <find_type_cb+0x15c>)
    7018:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    701c:	f005 fa70 	bl	c500 <log_1>
	data->group = NULL;
    7020:	2300      	movs	r3, #0
    7022:	60a3      	str	r3, [r4, #8]
    7024:	e7a6      	b.n	6f74 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    7026:	4658      	mov	r0, fp
    7028:	f007 fda9 	bl	eb7e <net_buf_simple_tailroom>
    702c:	e7c9      	b.n	6fc2 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    702e:	b2fa      	uxtb	r2, r7
    7030:	a902      	add	r1, sp, #8
    7032:	a806      	add	r0, sp, #24
    7034:	f006 fafc 	bl	d630 <bt_uuid_create>
    7038:	b948      	cbnz	r0, 704e <find_type_cb+0x12a>
    703a:	4a0f      	ldr	r2, [pc, #60]	; (7078 <find_type_cb+0x154>)
    703c:	4b0f      	ldr	r3, [pc, #60]	; (707c <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    703e:	4639      	mov	r1, r7
    7040:	1ad2      	subs	r2, r2, r3
    7042:	08d2      	lsrs	r2, r2, #3
    7044:	0192      	lsls	r2, r2, #6
    7046:	480f      	ldr	r0, [pc, #60]	; (7084 <find_type_cb+0x160>)
    7048:	f042 0202 	orr.w	r2, r2, #2
    704c:	e7e6      	b.n	701c <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    704e:	a906      	add	r1, sp, #24
    7050:	a80b      	add	r0, sp, #44	; 0x2c
    7052:	f006 fac3 	bl	d5dc <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    7056:	2800      	cmp	r0, #0
    7058:	d1e2      	bne.n	7020 <find_type_cb+0xfc>
	data->err = 0x00;
    705a:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
    705c:	2104      	movs	r1, #4
    705e:	7463      	strb	r3, [r4, #17]
    7060:	f105 0008 	add.w	r0, r5, #8
    7064:	f007 fd3d 	bl	eae2 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    7068:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    706a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    706c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    706e:	e781      	b.n	6f74 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    7070:	a902      	add	r1, sp, #8
    7072:	f006 fa52 	bl	d51a <memcmp>
    7076:	e7ee      	b.n	7056 <find_type_cb+0x132>
    7078:	000102f8 	.word	0x000102f8
    707c:	000102f8 	.word	0x000102f8
    7080:	00012673 	.word	0x00012673
    7084:	00012692 	.word	0x00012692

00007088 <chan_send>:
{
    7088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    708c:	688b      	ldr	r3, [r1, #8]
{
    708e:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7090:	781b      	ldrb	r3, [r3, #0]
{
    7092:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7094:	2bd2      	cmp	r3, #210	; 0xd2
{
    7096:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7098:	d116      	bne.n	70c8 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    709a:	6803      	ldr	r3, [r0, #0]
    709c:	6818      	ldr	r0, [r3, #0]
    709e:	f007 fcbe 	bl	ea1e <bt_smp_sign>
		if (err) {
    70a2:	4606      	mov	r6, r0
    70a4:	b180      	cbz	r0, 70c8 <chan_send+0x40>
    70a6:	4928      	ldr	r1, [pc, #160]	; (7148 <chan_send+0xc0>)
    70a8:	4b28      	ldr	r3, [pc, #160]	; (714c <chan_send+0xc4>)
			BT_ERR("Error signing data");
    70aa:	4829      	ldr	r0, [pc, #164]	; (7150 <chan_send+0xc8>)
    70ac:	1ac9      	subs	r1, r1, r3
    70ae:	08c9      	lsrs	r1, r1, #3
    70b0:	0189      	lsls	r1, r1, #6
    70b2:	f041 0101 	orr.w	r1, r1, #1
    70b6:	f005 fa16 	bl	c4e6 <log_0>
		net_buf_unref(buf);
    70ba:	4620      	mov	r0, r4
    70bc:	f001 fe7e 	bl	8dbc <net_buf_unref>
}
    70c0:	4630      	mov	r0, r6
    70c2:	b003      	add	sp, #12
    70c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    70c8:	f104 0008 	add.w	r0, r4, #8
    70cc:	f007 fd53 	bl	eb76 <net_buf_simple_headroom>
	state->len = buf->len;
    70d0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    70d4:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    70d6:	f1b9 0f00 	cmp.w	r9, #0
    70da:	d10a      	bne.n	70f2 <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
    70dc:	68a3      	ldr	r3, [r4, #8]
    70de:	7818      	ldrb	r0, [r3, #0]
    70e0:	f006 fd99 	bl	dc16 <att_op_get_type>
    70e4:	1e43      	subs	r3, r0, #1
    70e6:	b2db      	uxtb	r3, r3
    70e8:	2b04      	cmp	r3, #4
    70ea:	bf9c      	itt	ls
    70ec:	4a19      	ldrls	r2, [pc, #100]	; (7154 <chan_send+0xcc>)
    70ee:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    70f2:	682b      	ldr	r3, [r5, #0]
    70f4:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
    70f6:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    70fa:	681e      	ldr	r6, [r3, #0]
    70fc:	f007 fccb 	bl	ea96 <net_buf_ref>
    7100:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    7104:	4b14      	ldr	r3, [pc, #80]	; (7158 <chan_send+0xd0>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    7106:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    7108:	4299      	cmp	r1, r3
    710a:	d019      	beq.n	7140 <chan_send+0xb8>
	} else if (cb == chan_cfm_sent) {
    710c:	4b13      	ldr	r3, [pc, #76]	; (715c <chan_send+0xd4>)
    710e:	4299      	cmp	r1, r3
    7110:	d018      	beq.n	7144 <chan_send+0xbc>
		return att_sent;
    7112:	f8df c05c 	ldr.w	ip, [pc, #92]	; 7170 <chan_send+0xe8>
    7116:	4b12      	ldr	r3, [pc, #72]	; (7160 <chan_send+0xd8>)
    7118:	4812      	ldr	r0, [pc, #72]	; (7164 <chan_send+0xdc>)
    711a:	4561      	cmp	r1, ip
    711c:	bf18      	it	ne
    711e:	4603      	movne	r3, r0
				&chan->chan.chan);
    7120:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    7122:	4630      	mov	r0, r6
    7124:	2104      	movs	r1, #4
    7126:	9500      	str	r5, [sp, #0]
    7128:	f006 fcf6 	bl	db18 <bt_l2cap_send_cb>
	if (!err) {
    712c:	4606      	mov	r6, r0
    712e:	2800      	cmp	r0, #0
    7130:	d0c3      	beq.n	70ba <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
    7132:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7134:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    7138:	fa10 f787 	uxtah	r7, r0, r7
    713c:	60a7      	str	r7, [r4, #8]
}
    713e:	e7bf      	b.n	70c0 <chan_send+0x38>
		return att_rsp_sent;
    7140:	4b09      	ldr	r3, [pc, #36]	; (7168 <chan_send+0xe0>)
    7142:	e7ed      	b.n	7120 <chan_send+0x98>
		return att_cfm_sent;
    7144:	4b09      	ldr	r3, [pc, #36]	; (716c <chan_send+0xe4>)
    7146:	e7eb      	b.n	7120 <chan_send+0x98>
    7148:	000102f8 	.word	0x000102f8
    714c:	000102f8 	.word	0x000102f8
    7150:	000126b1 	.word	0x000126b1
    7154:	0001086c 	.word	0x0001086c
    7158:	0000df09 	.word	0x0000df09
    715c:	0000df1d 	.word	0x0000df1d
    7160:	00006da9 	.word	0x00006da9
    7164:	0000dbe7 	.word	0x0000dbe7
    7168:	00006d99 	.word	0x00006d99
    716c:	00006d89 	.word	0x00006d89
    7170:	000071f1 	.word	0x000071f1

00007174 <att_get>:
{
    7174:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    7176:	7a83      	ldrb	r3, [r0, #10]
    7178:	2b07      	cmp	r3, #7
    717a:	d00b      	beq.n	7194 <att_get+0x20>
    717c:	4917      	ldr	r1, [pc, #92]	; (71dc <att_get+0x68>)
    717e:	4b18      	ldr	r3, [pc, #96]	; (71e0 <att_get+0x6c>)
		BT_WARN("Not connected");
    7180:	4818      	ldr	r0, [pc, #96]	; (71e4 <att_get+0x70>)
    7182:	1ac9      	subs	r1, r1, r3
    7184:	08c9      	lsrs	r1, r1, #3
    7186:	0189      	lsls	r1, r1, #6
    7188:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    718c:	f005 f9ab 	bl	c4e6 <log_0>
		return NULL;
    7190:	2400      	movs	r4, #0
    7192:	e00e      	b.n	71b2 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    7194:	2104      	movs	r1, #4
    7196:	f006 fce8 	bl	db6a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    719a:	4604      	mov	r4, r0
    719c:	b958      	cbnz	r0, 71b6 <att_get+0x42>
    719e:	490f      	ldr	r1, [pc, #60]	; (71dc <att_get+0x68>)
    71a0:	4b0f      	ldr	r3, [pc, #60]	; (71e0 <att_get+0x6c>)
		BT_ERR("Unable to find ATT channel");
    71a2:	4811      	ldr	r0, [pc, #68]	; (71e8 <att_get+0x74>)
    71a4:	1ac9      	subs	r1, r1, r3
    71a6:	08c9      	lsrs	r1, r1, #3
    71a8:	0189      	lsls	r1, r1, #6
    71aa:	f041 0101 	orr.w	r1, r1, #1
    71ae:	f005 f99a 	bl	c4e6 <log_0>
}
    71b2:	4620      	mov	r0, r4
    71b4:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    71b6:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
    71ba:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    71be:	075b      	lsls	r3, r3, #29
    71c0:	d508      	bpl.n	71d4 <att_get+0x60>
    71c2:	4906      	ldr	r1, [pc, #24]	; (71dc <att_get+0x68>)
    71c4:	4b06      	ldr	r3, [pc, #24]	; (71e0 <att_get+0x6c>)
		BT_WARN("ATT channel flagged as disconnected");
    71c6:	4809      	ldr	r0, [pc, #36]	; (71ec <att_get+0x78>)
    71c8:	1ac9      	subs	r1, r1, r3
    71ca:	08c9      	lsrs	r1, r1, #3
    71cc:	0189      	lsls	r1, r1, #6
    71ce:	f041 0102 	orr.w	r1, r1, #2
    71d2:	e7db      	b.n	718c <att_get+0x18>
	return att_chan->att;
    71d4:	f850 4c08 	ldr.w	r4, [r0, #-8]
    71d8:	e7eb      	b.n	71b2 <att_get+0x3e>
    71da:	bf00      	nop
    71dc:	000102f8 	.word	0x000102f8
    71e0:	000102f8 	.word	0x000102f8
    71e4:	000126c4 	.word	0x000126c4
    71e8:	000126d2 	.word	0x000126d2
    71ec:	000126ed 	.word	0x000126ed

000071f0 <chan_req_sent>:
	if (chan->req) {
    71f0:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    71f4:	b13b      	cbz	r3, 7206 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    71f6:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    71fa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    71fe:	2300      	movs	r3, #0
    7200:	4801      	ldr	r0, [pc, #4]	; (7208 <chan_req_sent+0x18>)
    7202:	f004 b8a1 	b.w	b348 <k_delayed_work_submit_to_queue>
}
    7206:	4770      	bx	lr
    7208:	20000e38 	.word	0x20000e38

0000720c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    720c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    720e:	2300      	movs	r3, #0
{
    7210:	4606      	mov	r6, r0
    7212:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    7214:	2200      	movs	r2, #0
    7216:	4669      	mov	r1, sp
    7218:	4829      	ldr	r0, [pc, #164]	; (72c0 <bt_att_accept+0xb4>)
    721a:	f003 fa49 	bl	a6b0 <k_mem_slab_alloc>
    721e:	4604      	mov	r4, r0
    7220:	b178      	cbz	r0, 7242 <bt_att_accept+0x36>
		BT_ERR("No available ATT context for conn %p", conn);
    7222:	4631      	mov	r1, r6
    7224:	4a27      	ldr	r2, [pc, #156]	; (72c4 <bt_att_accept+0xb8>)
    7226:	4b28      	ldr	r3, [pc, #160]	; (72c8 <bt_att_accept+0xbc>)
    7228:	4828      	ldr	r0, [pc, #160]	; (72cc <bt_att_accept+0xc0>)
    722a:	1ad2      	subs	r2, r2, r3
    722c:	08d2      	lsrs	r2, r2, #3
    722e:	0192      	lsls	r2, r2, #6
    7230:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("No available ATT channel for conn %p", att->conn);
    7234:	f005 f964 	bl	c500 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    7238:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    723c:	4620      	mov	r0, r4
    723e:	b003      	add	sp, #12
    7240:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    7242:	4601      	mov	r1, r0
    7244:	222c      	movs	r2, #44	; 0x2c
    7246:	9800      	ldr	r0, [sp, #0]
    7248:	f006 f9a2 	bl	d590 <memset>
	att->conn = conn;
    724c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    724e:	2200      	movs	r2, #0
	list->head = NULL;
    7250:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    7254:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    7258:	60ac      	str	r4, [r5, #8]
    725a:	2300      	movs	r3, #0
    725c:	481c      	ldr	r0, [pc, #112]	; (72d0 <bt_att_accept+0xc4>)
    725e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    7260:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    7262:	f003 fa25 	bl	a6b0 <k_mem_slab_alloc>
    7266:	4604      	mov	r4, r0
    7268:	b148      	cbz	r0, 727e <bt_att_accept+0x72>
    726a:	4a16      	ldr	r2, [pc, #88]	; (72c4 <bt_att_accept+0xb8>)
    726c:	4b16      	ldr	r3, [pc, #88]	; (72c8 <bt_att_accept+0xbc>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    726e:	6829      	ldr	r1, [r5, #0]
    7270:	1ad2      	subs	r2, r2, r3
    7272:	08d2      	lsrs	r2, r2, #3
    7274:	0192      	lsls	r2, r2, #6
    7276:	4817      	ldr	r0, [pc, #92]	; (72d4 <bt_att_accept+0xc8>)
    7278:	f042 0201 	orr.w	r2, r2, #1
    727c:	e7da      	b.n	7234 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    727e:	4601      	mov	r1, r0
    7280:	f44f 7298 	mov.w	r2, #304	; 0x130
    7284:	9801      	ldr	r0, [sp, #4]
    7286:	f006 f983 	bl	d590 <memset>
	chan->chan.chan.ops = &ops;
    728a:	9801      	ldr	r0, [sp, #4]
    728c:	4b12      	ldr	r3, [pc, #72]	; (72d8 <bt_att_accept+0xcc>)
    728e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    7290:	30c8      	adds	r0, #200	; 0xc8
    7292:	f008 fab1 	bl	f7f8 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    7296:	9801      	ldr	r0, [sp, #4]
    7298:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    729c:	2203      	movs	r2, #3
    729e:	4611      	mov	r1, r2
    72a0:	f008 fc02 	bl	faa8 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    72a4:	9b01      	ldr	r3, [sp, #4]
    72a6:	33c0      	adds	r3, #192	; 0xc0
    72a8:	e8d3 2fef 	ldaex	r2, [r3]
    72ac:	e8c3 4fe1 	stlex	r1, r4, [r3]
    72b0:	2900      	cmp	r1, #0
    72b2:	d1f9      	bne.n	72a8 <bt_att_accept+0x9c>
	chan->att = att;
    72b4:	9b01      	ldr	r3, [sp, #4]
    72b6:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    72ba:	603b      	str	r3, [r7, #0]
	return 0;
    72bc:	e7be      	b.n	723c <bt_att_accept+0x30>
    72be:	bf00      	nop
    72c0:	20000494 	.word	0x20000494
    72c4:	000102f8 	.word	0x000102f8
    72c8:	000102f8 	.word	0x000102f8
    72cc:	00012711 	.word	0x00012711
    72d0:	200004b0 	.word	0x200004b0
    72d4:	00012736 	.word	0x00012736
    72d8:	20000264 	.word	0x20000264

000072dc <bt_att_connected>:
{
    72dc:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    72de:	2104      	movs	r1, #4
{
    72e0:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    72e2:	6800      	ldr	r0, [r0, #0]
    72e4:	f006 fc31 	bl	db4a <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    72e8:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    72ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    72ee:	b91b      	cbnz	r3, 72f8 <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
    72f0:	f105 000c 	add.w	r0, r5, #12
    72f4:	f008 fa80 	bl	f7f8 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    72f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	sys_slist_prepend(&att->chans, &chan->node);
    72fa:	f504 7392 	add.w	r3, r4, #292	; 0x124
	parent->next = child;
    72fe:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    7302:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	list->head = node;
    7304:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    7306:	b902      	cbnz	r2, 730a <bt_att_connected+0x2e>
	list->tail = node;
    7308:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    730a:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
    730e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    7312:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7314:	bf58      	it	pl
    7316:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    7318:	f04f 0230 	mov.w	r2, #48	; 0x30
    731c:	bf5c      	itt	pl
    731e:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7322:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
    7326:	2100      	movs	r1, #0
    7328:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    732c:	f006 f930 	bl	d590 <memset>
    7330:	4b01      	ldr	r3, [pc, #4]	; (7338 <bt_att_connected+0x5c>)
    7332:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    7336:	bd38      	pop	{r3, r4, r5, pc}
    7338:	00007d55 	.word	0x00007d55

0000733c <att_write_cmd>:
{
    733c:	b5f0      	push	{r4, r5, r6, r7, lr}
    733e:	4604      	mov	r4, r0
    7340:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    7342:	f101 0008 	add.w	r0, r1, #8
    7346:	460d      	mov	r5, r1
    7348:	f007 fc0d 	bl	eb66 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    734c:	6823      	ldr	r3, [r4, #0]
    734e:	4606      	mov	r6, r0
    7350:	2100      	movs	r1, #0
    7352:	6818      	ldr	r0, [r3, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    7354:	68af      	ldr	r7, [r5, #8]
    7356:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    7358:	f007 fb18 	bl	e98c <bt_gatt_change_aware>
    735c:	b328      	cbz	r0, 73aa <att_write_cmd+0x6e>
	if (!handle) {
    735e:	b336      	cbz	r6, 73ae <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
    7360:	2218      	movs	r2, #24
    7362:	2100      	movs	r1, #0
    7364:	4668      	mov	r0, sp
    7366:	f006 f913 	bl	d590 <memset>
	data.conn = chan->att->conn;
    736a:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    736c:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
    736e:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7370:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
    7372:	9300      	str	r3, [sp, #0]
	data.req = req;
    7374:	2300      	movs	r3, #0
    7376:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
    737a:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    737e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7380:	4a0c      	ldr	r2, [pc, #48]	; (73b4 <att_write_cmd+0x78>)
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7382:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7386:	466b      	mov	r3, sp
	data.value = value;
    7388:	9703      	str	r7, [sp, #12]
	data.len = len;
    738a:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    738e:	f006 fc88 	bl	dca2 <bt_gatt_foreach_attr>
	if (data.err) {
    7392:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7396:	b92b      	cbnz	r3, 73a4 <att_write_cmd+0x68>
	if (data.buf) {
    7398:	9901      	ldr	r1, [sp, #4]
    739a:	b119      	cbz	r1, 73a4 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    739c:	4620      	mov	r0, r4
    739e:	4a06      	ldr	r2, [pc, #24]	; (73b8 <att_write_cmd+0x7c>)
    73a0:	f006 fd88 	bl	deb4 <bt_att_chan_send_rsp>
    73a4:	2000      	movs	r0, #0
}
    73a6:	b007      	add	sp, #28
    73a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    73aa:	2012      	movs	r0, #18
    73ac:	e7fb      	b.n	73a6 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
    73ae:	2001      	movs	r0, #1
    73b0:	e7f9      	b.n	73a6 <att_write_cmd+0x6a>
    73b2:	bf00      	nop
    73b4:	0000e04b 	.word	0x0000e04b
    73b8:	0000df09 	.word	0x0000df09

000073bc <bt_att_chan_create_pdu>:
{
    73bc:	b538      	push	{r3, r4, r5, lr}
    73be:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    73c0:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    73c4:	3201      	adds	r2, #1
    73c6:	428a      	cmp	r2, r1
    73c8:	d90c      	bls.n	73e4 <bt_att_chan_create_pdu+0x28>
    73ca:	481a      	ldr	r0, [pc, #104]	; (7434 <bt_att_chan_create_pdu+0x78>)
    73cc:	4b1a      	ldr	r3, [pc, #104]	; (7438 <bt_att_chan_create_pdu+0x7c>)
		return NULL;
    73ce:	2400      	movs	r4, #0
    73d0:	1a1b      	subs	r3, r3, r0
    73d2:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    73d4:	019b      	lsls	r3, r3, #6
    73d6:	4819      	ldr	r0, [pc, #100]	; (743c <bt_att_chan_create_pdu+0x80>)
    73d8:	f043 0302 	orr.w	r3, r3, #2
    73dc:	f005 f8a4 	bl	c528 <log_2>
}
    73e0:	4620      	mov	r0, r4
    73e2:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    73e4:	4628      	mov	r0, r5
    73e6:	f006 fc16 	bl	dc16 <att_op_get_type>
    73ea:	2802      	cmp	r0, #2
    73ec:	d001      	beq.n	73f2 <bt_att_chan_create_pdu+0x36>
    73ee:	2804      	cmp	r0, #4
    73f0:	d114      	bne.n	741c <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    73f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    73f6:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    73f8:	2100      	movs	r1, #0
    73fa:	4608      	mov	r0, r1
    73fc:	f006 fb89 	bl	db12 <bt_l2cap_create_pdu_timeout>
    7400:	4604      	mov	r4, r0
	if (!buf) {
    7402:	b980      	cbnz	r0, 7426 <bt_att_chan_create_pdu+0x6a>
    7404:	4b0b      	ldr	r3, [pc, #44]	; (7434 <bt_att_chan_create_pdu+0x78>)
    7406:	4a0c      	ldr	r2, [pc, #48]	; (7438 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    7408:	4629      	mov	r1, r5
    740a:	1ad2      	subs	r2, r2, r3
    740c:	08d2      	lsrs	r2, r2, #3
    740e:	0192      	lsls	r2, r2, #6
    7410:	480b      	ldr	r0, [pc, #44]	; (7440 <bt_att_chan_create_pdu+0x84>)
    7412:	f042 0201 	orr.w	r2, r2, #1
    7416:	f005 f873 	bl	c500 <log_1>
		return NULL;
    741a:	e7e1      	b.n	73e0 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    741c:	f04f 32ff 	mov.w	r2, #4294967295
    7420:	f04f 33ff 	mov.w	r3, #4294967295
    7424:	e7e8      	b.n	73f8 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    7426:	2101      	movs	r1, #1
    7428:	3008      	adds	r0, #8
    742a:	f007 fb5a 	bl	eae2 <net_buf_simple_add>
	hdr->code = op;
    742e:	7005      	strb	r5, [r0, #0]
	return buf;
    7430:	e7d6      	b.n	73e0 <bt_att_chan_create_pdu+0x24>
    7432:	bf00      	nop
    7434:	000102f8 	.word	0x000102f8
    7438:	000102f8 	.word	0x000102f8
    743c:	0001275b 	.word	0x0001275b
    7440:	0001254f 	.word	0x0001254f

00007444 <att_indicate>:
{
    7444:	b570      	push	{r4, r5, r6, lr}
    7446:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
    7448:	f101 0008 	add.w	r0, r1, #8
    744c:	460d      	mov	r5, r1
    744e:	f007 fb8a 	bl	eb66 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    7452:	6826      	ldr	r6, [r4, #0]
    7454:	4601      	mov	r1, r0
    7456:	89ab      	ldrh	r3, [r5, #12]
    7458:	68aa      	ldr	r2, [r5, #8]
    745a:	6830      	ldr	r0, [r6, #0]
    745c:	f007 fa6b 	bl	e936 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    7460:	211e      	movs	r1, #30
    7462:	2200      	movs	r2, #0
    7464:	4620      	mov	r0, r4
    7466:	f7ff ffa9 	bl	73bc <bt_att_chan_create_pdu>
	if (!buf) {
    746a:	4601      	mov	r1, r0
    746c:	b118      	cbz	r0, 7476 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    746e:	4620      	mov	r0, r4
    7470:	4a02      	ldr	r2, [pc, #8]	; (747c <att_indicate+0x38>)
    7472:	f006 fd1f 	bl	deb4 <bt_att_chan_send_rsp>
}
    7476:	2000      	movs	r0, #0
    7478:	bd70      	pop	{r4, r5, r6, pc}
    747a:	bf00      	nop
    747c:	0000df1d 	.word	0x0000df1d

00007480 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    7480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7484:	4688      	mov	r8, r1
    7486:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7488:	2101      	movs	r1, #1
    748a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    748c:	4605      	mov	r5, r0
    748e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7490:	f7ff ff94 	bl	73bc <bt_att_chan_create_pdu>
	if (!buf) {
    7494:	4604      	mov	r4, r0
    7496:	b178      	cbz	r0, 74b8 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
    7498:	2104      	movs	r1, #4
    749a:	3008      	adds	r0, #8
    749c:	f007 fb21 	bl	eae2 <net_buf_simple_add>
	rsp->request = req;
    74a0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    74a4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    74a6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    74aa:	4621      	mov	r1, r4
    74ac:	4628      	mov	r0, r5
}
    74ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    74b2:	4a02      	ldr	r2, [pc, #8]	; (74bc <send_err_rsp.part.0+0x3c>)
    74b4:	f006 bcfe 	b.w	deb4 <bt_att_chan_send_rsp>
}
    74b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74bc:	0000df09 	.word	0x0000df09

000074c0 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    74c0:	898b      	ldrh	r3, [r1, #12]
{
    74c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74c6:	4604      	mov	r4, r0
    74c8:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    74ca:	b963      	cbnz	r3, 74e6 <bt_att_recv+0x26>
    74cc:	4948      	ldr	r1, [pc, #288]	; (75f0 <bt_att_recv+0x130>)
    74ce:	4b49      	ldr	r3, [pc, #292]	; (75f4 <bt_att_recv+0x134>)
		BT_ERR("Too small ATT PDU received");
    74d0:	4849      	ldr	r0, [pc, #292]	; (75f8 <bt_att_recv+0x138>)
    74d2:	1ac9      	subs	r1, r1, r3
    74d4:	08c9      	lsrs	r1, r1, #3
    74d6:	0189      	lsls	r1, r1, #6
    74d8:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    74dc:	f005 f803 	bl	c4e6 <log_0>
}
    74e0:	2000      	movs	r0, #0
    74e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    74e6:	2101      	movs	r1, #1
    74e8:	f108 0008 	add.w	r0, r8, #8
    74ec:	f007 fb33 	bl	eb56 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    74f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    74f4:	4605      	mov	r5, r0
    74f6:	2b00      	cmp	r3, #0
    74f8:	d0f2      	beq.n	74e0 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    74fa:	4a40      	ldr	r2, [pc, #256]	; (75fc <bt_att_recv+0x13c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    74fc:	2300      	movs	r3, #0
    74fe:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    7500:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    7502:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
    7506:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    750a:	4288      	cmp	r0, r1
    750c:	d119      	bne.n	7542 <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    750e:	00d8      	lsls	r0, r3, #3
    7510:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7514:	789f      	ldrb	r7, [r3, #2]
    7516:	2f01      	cmp	r7, #1
    7518:	d12e      	bne.n	7578 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    751a:	34b8      	adds	r4, #184	; 0xb8
    751c:	e8d4 3fef 	ldaex	r3, [r4]
    7520:	f043 0201 	orr.w	r2, r3, #1
    7524:	e8c4 2fe1 	stlex	r1, r2, [r4]
    7528:	2900      	cmp	r1, #0
    752a:	d1f7      	bne.n	751c <bt_att_recv+0x5c>
    752c:	07da      	lsls	r2, r3, #31
    752e:	d539      	bpl.n	75a4 <bt_att_recv+0xe4>
    7530:	492f      	ldr	r1, [pc, #188]	; (75f0 <bt_att_recv+0x130>)
    7532:	4b30      	ldr	r3, [pc, #192]	; (75f4 <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected request");
    7534:	4832      	ldr	r0, [pc, #200]	; (7600 <bt_att_recv+0x140>)
    7536:	1ac9      	subs	r1, r1, r3
    7538:	08c9      	lsrs	r1, r1, #3
    753a:	0189      	lsls	r1, r1, #6
    753c:	f041 0102 	orr.w	r1, r1, #2
    7540:	e7cc      	b.n	74dc <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7542:	3301      	adds	r3, #1
    7544:	2b1c      	cmp	r3, #28
    7546:	d1de      	bne.n	7506 <bt_att_recv+0x46>
    7548:	4b2a      	ldr	r3, [pc, #168]	; (75f4 <bt_att_recv+0x134>)
    754a:	4a29      	ldr	r2, [pc, #164]	; (75f0 <bt_att_recv+0x130>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    754c:	482d      	ldr	r0, [pc, #180]	; (7604 <bt_att_recv+0x144>)
    754e:	1ad2      	subs	r2, r2, r3
    7550:	08d2      	lsrs	r2, r2, #3
    7552:	0192      	lsls	r2, r2, #6
    7554:	f042 0202 	orr.w	r2, r2, #2
    7558:	f004 ffd2 	bl	c500 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    755c:	7829      	ldrb	r1, [r5, #0]
    755e:	4608      	mov	r0, r1
    7560:	f006 fb59 	bl	dc16 <att_op_get_type>
    7564:	2800      	cmp	r0, #0
    7566:	d0bb      	beq.n	74e0 <bt_att_recv+0x20>
	if (!req) {
    7568:	2900      	cmp	r1, #0
    756a:	d0b9      	beq.n	74e0 <bt_att_recv+0x20>
    756c:	2306      	movs	r3, #6
    756e:	2200      	movs	r2, #0
    7570:	4630      	mov	r0, r6
    7572:	f7ff ff85 	bl	7480 <send_err_rsp.part.0>
    7576:	e7b3      	b.n	74e0 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    7578:	2f05      	cmp	r7, #5
    757a:	d113      	bne.n	75a4 <bt_att_recv+0xe4>
    757c:	34b8      	adds	r4, #184	; 0xb8
    757e:	e8d4 3fef 	ldaex	r3, [r4]
    7582:	f043 0202 	orr.w	r2, r3, #2
    7586:	e8c4 2fe1 	stlex	r1, r2, [r4]
    758a:	2900      	cmp	r1, #0
    758c:	d1f7      	bne.n	757e <bt_att_recv+0xbe>
    758e:	079b      	lsls	r3, r3, #30
    7590:	d508      	bpl.n	75a4 <bt_att_recv+0xe4>
    7592:	4917      	ldr	r1, [pc, #92]	; (75f0 <bt_att_recv+0x130>)
    7594:	4b17      	ldr	r3, [pc, #92]	; (75f4 <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected indication");
    7596:	481c      	ldr	r0, [pc, #112]	; (7608 <bt_att_recv+0x148>)
    7598:	1ac9      	subs	r1, r1, r3
    759a:	08c9      	lsrs	r1, r1, #3
    759c:	0189      	lsls	r1, r1, #6
    759e:	f041 0102 	orr.w	r1, r1, #2
    75a2:	e79b      	b.n	74dc <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    75a4:	eb0c 0300 	add.w	r3, ip, r0
    75a8:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    75ac:	785a      	ldrb	r2, [r3, #1]
    75ae:	428a      	cmp	r2, r1
    75b0:	d90e      	bls.n	75d0 <bt_att_recv+0x110>
    75b2:	4a10      	ldr	r2, [pc, #64]	; (75f4 <bt_att_recv+0x134>)
    75b4:	4b0e      	ldr	r3, [pc, #56]	; (75f0 <bt_att_recv+0x130>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    75b6:	4815      	ldr	r0, [pc, #84]	; (760c <bt_att_recv+0x14c>)
    75b8:	1a9b      	subs	r3, r3, r2
    75ba:	08db      	lsrs	r3, r3, #3
    75bc:	019b      	lsls	r3, r3, #6
    75be:	782a      	ldrb	r2, [r5, #0]
    75c0:	f043 0301 	orr.w	r3, r3, #1
    75c4:	f004 ffb0 	bl	c528 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    75c8:	2f01      	cmp	r7, #1
    75ca:	d189      	bne.n	74e0 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    75cc:	2304      	movs	r3, #4
    75ce:	e009      	b.n	75e4 <bt_att_recv+0x124>
		err = handler->func(att_chan, buf);
    75d0:	685b      	ldr	r3, [r3, #4]
    75d2:	4641      	mov	r1, r8
    75d4:	4630      	mov	r0, r6
    75d6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    75d8:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    75da:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    75dc:	d180      	bne.n	74e0 <bt_att_recv+0x20>
    75de:	2800      	cmp	r0, #0
    75e0:	f43f af7e 	beq.w	74e0 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    75e4:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    75e6:	2900      	cmp	r1, #0
    75e8:	f43f af7a 	beq.w	74e0 <bt_att_recv+0x20>
    75ec:	e7bf      	b.n	756e <bt_att_recv+0xae>
    75ee:	bf00      	nop
    75f0:	000102f8 	.word	0x000102f8
    75f4:	000102f8 	.word	0x000102f8
    75f8:	00012780 	.word	0x00012780
    75fc:	00010880 	.word	0x00010880
    7600:	0001279b 	.word	0x0001279b
    7604:	000127f5 	.word	0x000127f5
    7608:	000127b7 	.word	0x000127b7
    760c:	000127d6 	.word	0x000127d6

00007610 <att_write_req>:
{
    7610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7614:	4604      	mov	r4, r0
    7616:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    7618:	f101 0008 	add.w	r0, r1, #8
    761c:	460d      	mov	r5, r1
    761e:	f007 faa2 	bl	eb66 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    7622:	6823      	ldr	r3, [r4, #0]
    7624:	4606      	mov	r6, r0
    7626:	2101      	movs	r1, #1
    7628:	6818      	ldr	r0, [r3, #0]
			     handle, 0, buf->data, buf->len);
    762a:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    762e:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    7630:	f007 f9ac 	bl	e98c <bt_gatt_change_aware>
    7634:	2800      	cmp	r0, #0
    7636:	d040      	beq.n	76ba <att_write_req+0xaa>
	if (!handle) {
    7638:	2e00      	cmp	r6, #0
    763a:	d040      	beq.n	76be <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
    763c:	2218      	movs	r2, #24
    763e:	2100      	movs	r1, #0
    7640:	4668      	mov	r0, sp
    7642:	f005 ffa5 	bl	d590 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    7646:	2200      	movs	r2, #0
    7648:	2113      	movs	r1, #19
    764a:	4620      	mov	r0, r4
    764c:	f7ff feb6 	bl	73bc <bt_att_chan_create_pdu>
    7650:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    7652:	b380      	cbz	r0, 76b6 <att_write_req+0xa6>
	data.conn = chan->att->conn;
    7654:	6823      	ldr	r3, [r4, #0]
	data.req = req;
    7656:	f04f 0812 	mov.w	r8, #18
	data.conn = chan->att->conn;
    765a:	681b      	ldr	r3, [r3, #0]
	data.offset = offset;
    765c:	2700      	movs	r7, #0
	data.conn = chan->att->conn;
    765e:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7660:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7662:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7664:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7668:	4630      	mov	r0, r6
    766a:	466b      	mov	r3, sp
    766c:	4a15      	ldr	r2, [pc, #84]	; (76c4 <att_write_req+0xb4>)
	data.len = len;
    766e:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
    7672:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    7676:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    767a:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    767e:	f006 fb10 	bl	dca2 <bt_gatt_foreach_attr>
	if (data.err) {
    7682:	f89d 5014 	ldrb.w	r5, [sp, #20]
    7686:	b175      	cbz	r5, 76a6 <att_write_req+0x96>
			net_buf_unref(data.buf);
    7688:	9801      	ldr	r0, [sp, #4]
    768a:	f001 fb97 	bl	8dbc <net_buf_unref>
	if (!req) {
    768e:	4632      	mov	r2, r6
    7690:	4641      	mov	r1, r8
    7692:	4620      	mov	r0, r4
    7694:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7698:	f7ff fef2 	bl	7480 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    769c:	463d      	mov	r5, r7
}
    769e:	4628      	mov	r0, r5
    76a0:	b007      	add	sp, #28
    76a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    76a6:	9901      	ldr	r1, [sp, #4]
    76a8:	2900      	cmp	r1, #0
    76aa:	d0f8      	beq.n	769e <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    76ac:	4620      	mov	r0, r4
    76ae:	4a06      	ldr	r2, [pc, #24]	; (76c8 <att_write_req+0xb8>)
    76b0:	f006 fc00 	bl	deb4 <bt_att_chan_send_rsp>
    76b4:	e7f3      	b.n	769e <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    76b6:	250e      	movs	r5, #14
    76b8:	e7f1      	b.n	769e <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    76ba:	2512      	movs	r5, #18
    76bc:	e7ef      	b.n	769e <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    76be:	2501      	movs	r5, #1
    76c0:	e7ed      	b.n	769e <att_write_req+0x8e>
    76c2:	bf00      	nop
    76c4:	0000e04b 	.word	0x0000e04b
    76c8:	0000df09 	.word	0x0000df09

000076cc <bt_att_create_pdu>:
{
    76cc:	b570      	push	{r4, r5, r6, lr}
    76ce:	460e      	mov	r6, r1
    76d0:	4615      	mov	r5, r2
	att = att_get(conn);
    76d2:	f7ff fd4f 	bl	7174 <att_get>
	if (!att) {
    76d6:	b1c0      	cbz	r0, 770a <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    76d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
    76da:	1c69      	adds	r1, r5, #1
    76dc:	b15b      	cbz	r3, 76f6 <bt_att_create_pdu+0x2a>
    76de:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    76e2:	d008      	beq.n	76f6 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    76e4:	681b      	ldr	r3, [r3, #0]
    76e6:	b10b      	cbz	r3, 76ec <bt_att_create_pdu+0x20>
    76e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    76ec:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    76f0:	4291      	cmp	r1, r2
    76f2:	d90c      	bls.n	770e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    76f4:	b98b      	cbnz	r3, 771a <bt_att_create_pdu+0x4e>
    76f6:	4a0e      	ldr	r2, [pc, #56]	; (7730 <bt_att_create_pdu+0x64>)
    76f8:	4b0e      	ldr	r3, [pc, #56]	; (7734 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    76fa:	480f      	ldr	r0, [pc, #60]	; (7738 <bt_att_create_pdu+0x6c>)
    76fc:	1ad2      	subs	r2, r2, r3
    76fe:	08d2      	lsrs	r2, r2, #3
    7700:	0192      	lsls	r2, r2, #6
    7702:	f042 0202 	orr.w	r2, r2, #2
    7706:	f004 fefb 	bl	c500 <log_1>
}
    770a:	2000      	movs	r0, #0
    770c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    770e:	462a      	mov	r2, r5
    7710:	4631      	mov	r1, r6
}
    7712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    7716:	f7ff be51 	b.w	73bc <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    771a:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
    771e:	d004      	beq.n	772a <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7720:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7724:	b10c      	cbz	r4, 772a <bt_att_create_pdu+0x5e>
    7726:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
    772a:	4618      	mov	r0, r3
    772c:	4623      	mov	r3, r4
    772e:	e7dd      	b.n	76ec <bt_att_create_pdu+0x20>
    7730:	000102f8 	.word	0x000102f8
    7734:	000102f8 	.word	0x000102f8
    7738:	0001280f 	.word	0x0001280f

0000773c <att_read_group_req>:
{
    773c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    7740:	7b0c      	ldrb	r4, [r1, #12]
{
    7742:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
    7744:	3c04      	subs	r4, #4
    7746:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    7748:	2c02      	cmp	r4, #2
{
    774a:	4608      	mov	r0, r1
    774c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
    774e:	d001      	beq.n	7754 <att_read_group_req+0x18>
    7750:	2c10      	cmp	r4, #16
    7752:	d16f      	bne.n	7834 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
    7754:	2104      	movs	r1, #4
    7756:	3008      	adds	r0, #8
    7758:	f007 f9fd 	bl	eb56 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    775c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    7760:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7762:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7764:	1d01      	adds	r1, r0, #4
    7766:	4622      	mov	r2, r4
    7768:	4640      	mov	r0, r8
    776a:	f005 ff61 	bl	d630 <bt_uuid_create>
    776e:	2800      	cmp	r0, #0
    7770:	d062      	beq.n	7838 <att_read_group_req+0xfc>
	if (!start || !end) {
    7772:	2e00      	cmp	r6, #0
    7774:	d03a      	beq.n	77ec <att_read_group_req+0xb0>
    7776:	2400      	movs	r4, #0
    7778:	2f00      	cmp	r7, #0
    777a:	d036      	beq.n	77ea <att_read_group_req+0xae>
	if (start > end) {
    777c:	42be      	cmp	r6, r7
    777e:	d835      	bhi.n	77ec <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7780:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7784:	4640      	mov	r0, r8
    7786:	a901      	add	r1, sp, #4
    7788:	f88d 4004 	strb.w	r4, [sp, #4]
    778c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7790:	f005 ff24 	bl	d5dc <bt_uuid_cmp>
    7794:	2800      	cmp	r0, #0
    7796:	d134      	bne.n	7802 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    7798:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    779a:	2214      	movs	r2, #20
    779c:	2100      	movs	r1, #0
    779e:	a807      	add	r0, sp, #28
    77a0:	f005 fef6 	bl	d590 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    77a4:	2201      	movs	r2, #1
    77a6:	2111      	movs	r1, #17
    77a8:	4620      	mov	r0, r4
    77aa:	f7ff ff8f 	bl	76cc <bt_att_create_pdu>
    77ae:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    77b0:	2800      	cmp	r0, #0
    77b2:	d041      	beq.n	7838 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
    77b4:	2101      	movs	r1, #1
    77b6:	3008      	adds	r0, #8
	data.uuid = uuid;
    77b8:	e9cd 5807 	strd	r5, r8, [sp, #28]
    77bc:	f007 f991 	bl	eae2 <net_buf_simple_add>
	data.rsp->len = 0U;
    77c0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    77c4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    77c6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    77c8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    77cc:	4639      	mov	r1, r7
    77ce:	4630      	mov	r0, r6
    77d0:	4a1a      	ldr	r2, [pc, #104]	; (783c <att_read_group_req+0x100>)
	data.group = NULL;
    77d2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    77d6:	f006 fa64 	bl	dca2 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    77da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    77dc:	781c      	ldrb	r4, [r3, #0]
    77de:	bb1c      	cbnz	r4, 7828 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    77e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    77e2:	f001 faeb 	bl	8dbc <net_buf_unref>
	if (!req) {
    77e6:	230a      	movs	r3, #10
    77e8:	e018      	b.n	781c <att_read_group_req+0xe0>
			*err = 0U;
    77ea:	463e      	mov	r6, r7
	if (!req) {
    77ec:	2301      	movs	r3, #1
    77ee:	4632      	mov	r2, r6
    77f0:	2110      	movs	r1, #16
    77f2:	4628      	mov	r0, r5
    77f4:	f7ff fe44 	bl	7480 <send_err_rsp.part.0>
		return 0;
    77f8:	2400      	movs	r4, #0
}
    77fa:	4620      	mov	r0, r4
    77fc:	b00c      	add	sp, #48	; 0x30
    77fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    7802:	f642 0301 	movw	r3, #10241	; 0x2801
    7806:	4640      	mov	r0, r8
    7808:	a907      	add	r1, sp, #28
    780a:	f88d 401c 	strb.w	r4, [sp, #28]
    780e:	f8ad 301e 	strh.w	r3, [sp, #30]
    7812:	f005 fee3 	bl	d5dc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7816:	2800      	cmp	r0, #0
    7818:	d0be      	beq.n	7798 <att_read_group_req+0x5c>
	if (!req) {
    781a:	2310      	movs	r3, #16
    781c:	4632      	mov	r2, r6
    781e:	2110      	movs	r1, #16
    7820:	4628      	mov	r0, r5
    7822:	f7ff fe2d 	bl	7480 <send_err_rsp.part.0>
		return 0;
    7826:	e7e8      	b.n	77fa <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7828:	4628      	mov	r0, r5
    782a:	4a05      	ldr	r2, [pc, #20]	; (7840 <att_read_group_req+0x104>)
    782c:	9909      	ldr	r1, [sp, #36]	; 0x24
    782e:	f006 fb41 	bl	deb4 <bt_att_chan_send_rsp>
	return 0;
    7832:	e7e1      	b.n	77f8 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    7834:	2404      	movs	r4, #4
    7836:	e7e0      	b.n	77fa <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    7838:	240e      	movs	r4, #14
    783a:	e7de      	b.n	77fa <att_read_group_req+0xbe>
    783c:	00006dd1 	.word	0x00006dd1
    7840:	0000df09 	.word	0x0000df09

00007844 <att_read_mult_req>:
{
    7844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    7848:	6886      	ldr	r6, [r0, #8]
{
    784a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    784c:	2210      	movs	r2, #16
{
    784e:	4604      	mov	r4, r0
    7850:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    7852:	4668      	mov	r0, sp
    7854:	2100      	movs	r1, #0
    7856:	f005 fe9b 	bl	d590 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    785a:	2200      	movs	r2, #0
    785c:	210f      	movs	r1, #15
    785e:	4630      	mov	r0, r6
    7860:	f7ff ff34 	bl	76cc <bt_att_create_pdu>
    7864:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7866:	b360      	cbz	r0, 78c2 <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7868:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    786c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 78cc <att_read_mult_req+0x88>
	data.chan = chan;
    7870:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    7872:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
    7876:	89ab      	ldrh	r3, [r5, #12]
    7878:	2b01      	cmp	r3, #1
    787a:	d805      	bhi.n	7888 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    787c:	4620      	mov	r0, r4
    787e:	4a12      	ldr	r2, [pc, #72]	; (78c8 <att_read_mult_req+0x84>)
    7880:	9902      	ldr	r1, [sp, #8]
    7882:	f006 fb17 	bl	deb4 <bt_att_chan_send_rsp>
    7886:	e018      	b.n	78ba <att_read_mult_req+0x76>
    7888:	4638      	mov	r0, r7
    788a:	f007 f96c 	bl	eb66 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    788e:	466b      	mov	r3, sp
    7890:	464a      	mov	r2, r9
    7892:	4601      	mov	r1, r0
    7894:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7896:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    789a:	f006 fa02 	bl	dca2 <bt_gatt_foreach_attr>
		if (data.err) {
    789e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78a2:	2b00      	cmp	r3, #0
    78a4:	d0e7      	beq.n	7876 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    78a6:	9802      	ldr	r0, [sp, #8]
    78a8:	f001 fa88 	bl	8dbc <net_buf_unref>
	if (!req) {
    78ac:	4632      	mov	r2, r6
    78ae:	210e      	movs	r1, #14
    78b0:	4620      	mov	r0, r4
    78b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78b6:	f7ff fde3 	bl	7480 <send_err_rsp.part.0>
	return 0;
    78ba:	2000      	movs	r0, #0
}
    78bc:	b005      	add	sp, #20
    78be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    78c2:	200e      	movs	r0, #14
    78c4:	e7fa      	b.n	78bc <att_read_mult_req+0x78>
    78c6:	bf00      	nop
    78c8:	0000df09 	.word	0x0000df09
    78cc:	0000e123 	.word	0x0000e123

000078d0 <att_read_rsp>:
{
    78d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    78d4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    78d8:	4605      	mov	r5, r0
    78da:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    78dc:	4640      	mov	r0, r8
    78de:	2101      	movs	r1, #1
{
    78e0:	4614      	mov	r4, r2
    78e2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    78e4:	f007 f852 	bl	e98c <bt_gatt_change_aware>
    78e8:	b390      	cbz	r0, 7950 <att_read_rsp+0x80>
	if (!handle) {
    78ea:	b39e      	cbz	r6, 7954 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    78ec:	2210      	movs	r2, #16
    78ee:	2100      	movs	r1, #0
    78f0:	4668      	mov	r0, sp
    78f2:	f005 fe4d 	bl	d590 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    78f6:	2200      	movs	r2, #0
    78f8:	4621      	mov	r1, r4
    78fa:	4640      	mov	r0, r8
    78fc:	f7ff fee6 	bl	76cc <bt_att_create_pdu>
    7900:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7902:	b348      	cbz	r0, 7958 <att_read_rsp+0x88>
	data.offset = offset;
    7904:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7908:	4631      	mov	r1, r6
	data.offset = offset;
    790a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    790e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7910:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7912:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7916:	4a11      	ldr	r2, [pc, #68]	; (795c <att_read_rsp+0x8c>)
    7918:	466b      	mov	r3, sp
	data.chan = chan;
    791a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    791c:	f006 f9c1 	bl	dca2 <bt_gatt_foreach_attr>
	if (data.err) {
    7920:	f89d 400c 	ldrb.w	r4, [sp, #12]
    7924:	b174      	cbz	r4, 7944 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    7926:	9802      	ldr	r0, [sp, #8]
    7928:	f001 fa48 	bl	8dbc <net_buf_unref>
	if (!req) {
    792c:	4632      	mov	r2, r6
    792e:	4639      	mov	r1, r7
    7930:	4628      	mov	r0, r5
    7932:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7936:	f7ff fda3 	bl	7480 <send_err_rsp.part.0>
		return 0;
    793a:	2400      	movs	r4, #0
}
    793c:	4620      	mov	r0, r4
    793e:	b004      	add	sp, #16
    7940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7944:	4628      	mov	r0, r5
    7946:	4a06      	ldr	r2, [pc, #24]	; (7960 <att_read_rsp+0x90>)
    7948:	9902      	ldr	r1, [sp, #8]
    794a:	f006 fab3 	bl	deb4 <bt_att_chan_send_rsp>
	return 0;
    794e:	e7f5      	b.n	793c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7950:	2412      	movs	r4, #18
    7952:	e7f3      	b.n	793c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    7954:	2401      	movs	r4, #1
    7956:	e7f1      	b.n	793c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7958:	240e      	movs	r4, #14
    795a:	e7ef      	b.n	793c <att_read_rsp+0x6c>
    795c:	0000e123 	.word	0x0000e123
    7960:	0000df09 	.word	0x0000df09

00007964 <att_read_type_req>:
{
    7964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    7968:	7b0c      	ldrb	r4, [r1, #12]
{
    796a:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
    796c:	3c04      	subs	r4, #4
    796e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    7970:	2c02      	cmp	r4, #2
{
    7972:	4608      	mov	r0, r1
    7974:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
    7976:	d001      	beq.n	797c <att_read_type_req+0x18>
    7978:	2c10      	cmp	r4, #16
    797a:	d150      	bne.n	7a1e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    797c:	2104      	movs	r1, #4
    797e:	3008      	adds	r0, #8
    7980:	f007 f8e9 	bl	eb56 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7984:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    7988:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    798a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    798c:	1d01      	adds	r1, r0, #4
    798e:	4622      	mov	r2, r4
    7990:	4640      	mov	r0, r8
    7992:	f005 fe4d 	bl	d630 <bt_uuid_create>
    7996:	b188      	cbz	r0, 79bc <att_read_type_req+0x58>
	if (!start || !end) {
    7998:	b19e      	cbz	r6, 79c2 <att_read_type_req+0x5e>
    799a:	b18f      	cbz	r7, 79c0 <att_read_type_req+0x5c>
	if (start > end) {
    799c:	42b7      	cmp	r7, r6
    799e:	d310      	bcc.n	79c2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    79a0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    79a2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    79a4:	2100      	movs	r1, #0
    79a6:	eb0d 0002 	add.w	r0, sp, r2
    79aa:	f005 fdf1 	bl	d590 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    79ae:	2201      	movs	r2, #1
    79b0:	2109      	movs	r1, #9
    79b2:	4620      	mov	r0, r4
    79b4:	f7ff fe8a 	bl	76cc <bt_att_create_pdu>
    79b8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    79ba:	b968      	cbnz	r0, 79d8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    79bc:	240e      	movs	r4, #14
    79be:	e007      	b.n	79d0 <att_read_type_req+0x6c>
			*err = 0U;
    79c0:	463e      	mov	r6, r7
	if (!req) {
    79c2:	2301      	movs	r3, #1
    79c4:	4632      	mov	r2, r6
    79c6:	2108      	movs	r1, #8
    79c8:	4628      	mov	r0, r5
    79ca:	f7ff fd59 	bl	7480 <send_err_rsp.part.0>
		return 0;
    79ce:	2400      	movs	r4, #0
}
    79d0:	4620      	mov	r0, r4
    79d2:	b00c      	add	sp, #48	; 0x30
    79d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    79d8:	2101      	movs	r1, #1
    79da:	3008      	adds	r0, #8
	data.uuid = uuid;
    79dc:	e9cd 5806 	strd	r5, r8, [sp, #24]
    79e0:	f007 f87f 	bl	eae2 <net_buf_simple_add>
	data.rsp->len = 0U;
    79e4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    79e8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    79ea:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    79ec:	4639      	mov	r1, r7
	data.rsp->len = 0U;
    79ee:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    79f2:	4a0c      	ldr	r2, [pc, #48]	; (7a24 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    79f4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    79f8:	4630      	mov	r0, r6
    79fa:	ab06      	add	r3, sp, #24
    79fc:	f006 f951 	bl	dca2 <bt_gatt_foreach_attr>
	if (data.err) {
    7a00:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    7a04:	b12c      	cbz	r4, 7a12 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    7a06:	9808      	ldr	r0, [sp, #32]
    7a08:	f001 f9d8 	bl	8dbc <net_buf_unref>
	if (!req) {
    7a0c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    7a10:	e7d8      	b.n	79c4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7a12:	4628      	mov	r0, r5
    7a14:	4a04      	ldr	r2, [pc, #16]	; (7a28 <att_read_type_req+0xc4>)
    7a16:	9908      	ldr	r1, [sp, #32]
    7a18:	f006 fa4c 	bl	deb4 <bt_att_chan_send_rsp>
	return 0;
    7a1c:	e7d8      	b.n	79d0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    7a1e:	2404      	movs	r4, #4
    7a20:	e7d6      	b.n	79d0 <att_read_type_req+0x6c>
    7a22:	bf00      	nop
    7a24:	00006e7d 	.word	0x00006e7d
    7a28:	0000df09 	.word	0x0000df09

00007a2c <att_find_type_req>:
{
    7a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a30:	4688      	mov	r8, r1
    7a32:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    7a34:	2106      	movs	r1, #6
    7a36:	b086      	sub	sp, #24
    7a38:	f108 0008 	add.w	r0, r8, #8
    7a3c:	f007 f88b 	bl	eb56 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    7a40:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    7a42:	b317      	cbz	r7, 7a8a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7a44:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    7a48:	f1b9 0f00 	cmp.w	r9, #0
    7a4c:	d01c      	beq.n	7a88 <att_find_type_req+0x5c>
	if (start > end) {
    7a4e:	454f      	cmp	r7, r9
    7a50:	d81b      	bhi.n	7a8a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    7a52:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7a54:	2400      	movs	r4, #0
    7a56:	f8ad 3002 	strh.w	r3, [sp, #2]
    7a5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7a5e:	4668      	mov	r0, sp
    7a60:	a901      	add	r1, sp, #4
	value = buf->data;
    7a62:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7a66:	f88d 4000 	strb.w	r4, [sp]
    7a6a:	f88d 4004 	strb.w	r4, [sp, #4]
    7a6e:	f8ad 3006 	strh.w	r3, [sp, #6]
    7a72:	f005 fdb3 	bl	d5dc <bt_uuid_cmp>
    7a76:	4606      	mov	r6, r0
    7a78:	b190      	cbz	r0, 7aa0 <att_find_type_req+0x74>
	if (!req) {
    7a7a:	230a      	movs	r3, #10
    7a7c:	463a      	mov	r2, r7
    7a7e:	2106      	movs	r1, #6
    7a80:	4628      	mov	r0, r5
    7a82:	f7ff fcfd 	bl	7480 <send_err_rsp.part.0>
		return 0;
    7a86:	e007      	b.n	7a98 <att_find_type_req+0x6c>
			*err = 0U;
    7a88:	464f      	mov	r7, r9
	if (!req) {
    7a8a:	2301      	movs	r3, #1
    7a8c:	463a      	mov	r2, r7
    7a8e:	2106      	movs	r1, #6
    7a90:	4628      	mov	r0, r5
    7a92:	f7ff fcf5 	bl	7480 <send_err_rsp.part.0>
		return 0;
    7a96:	2400      	movs	r4, #0
}
    7a98:	4620      	mov	r0, r4
    7a9a:	b006      	add	sp, #24
    7a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    7aa0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    7aa4:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    7aa8:	4601      	mov	r1, r0
    7aaa:	2214      	movs	r2, #20
    7aac:	a801      	add	r0, sp, #4
    7aae:	f005 fd6f 	bl	d590 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    7ab2:	4632      	mov	r2, r6
    7ab4:	2107      	movs	r1, #7
    7ab6:	4640      	mov	r0, r8
    7ab8:	f7ff fe08 	bl	76cc <bt_att_create_pdu>
    7abc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7abe:	b1e0      	cbz	r0, 7afa <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7ac0:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7ac2:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7ac4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7ac8:	4638      	mov	r0, r7
    7aca:	4a0d      	ldr	r2, [pc, #52]	; (7b00 <att_find_type_req+0xd4>)
    7acc:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
    7ace:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
    7ad2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    7ad6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7ad8:	f006 f8e3 	bl	dca2 <bt_gatt_foreach_attr>
	if (data.err) {
    7adc:	f89d 4015 	ldrb.w	r4, [sp, #21]
    7ae0:	b12c      	cbz	r4, 7aee <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    7ae2:	9802      	ldr	r0, [sp, #8]
    7ae4:	f001 f96a 	bl	8dbc <net_buf_unref>
	if (!req) {
    7ae8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    7aec:	e7ce      	b.n	7a8c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7aee:	4628      	mov	r0, r5
    7af0:	4a04      	ldr	r2, [pc, #16]	; (7b04 <att_find_type_req+0xd8>)
    7af2:	9902      	ldr	r1, [sp, #8]
    7af4:	f006 f9de 	bl	deb4 <bt_att_chan_send_rsp>
	return 0;
    7af8:	e7ce      	b.n	7a98 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7afa:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    7afc:	e7cc      	b.n	7a98 <att_find_type_req+0x6c>
    7afe:	bf00      	nop
    7b00:	00006f25 	.word	0x00006f25
    7b04:	0000df09 	.word	0x0000df09

00007b08 <att_find_info_req>:
{
    7b08:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    7b0a:	688b      	ldr	r3, [r1, #8]
{
    7b0c:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
    7b0e:	881e      	ldrh	r6, [r3, #0]
{
    7b10:	b085      	sub	sp, #20
	if (!start || !end) {
    7b12:	b19e      	cbz	r6, 7b3c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7b14:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    7b16:	b184      	cbz	r4, 7b3a <att_find_info_req+0x32>
	if (start > end) {
    7b18:	42b4      	cmp	r4, r6
    7b1a:	d30f      	bcc.n	7b3c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    7b1c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    7b1e:	2210      	movs	r2, #16
    7b20:	2100      	movs	r1, #0
    7b22:	4668      	mov	r0, sp
    7b24:	f005 fd34 	bl	d590 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    7b28:	2200      	movs	r2, #0
    7b2a:	2105      	movs	r1, #5
    7b2c:	4638      	mov	r0, r7
    7b2e:	f7ff fdcd 	bl	76cc <bt_att_create_pdu>
    7b32:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    7b34:	b958      	cbnz	r0, 7b4e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    7b36:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    7b38:	e007      	b.n	7b4a <att_find_info_req+0x42>
			*err = 0U;
    7b3a:	4626      	mov	r6, r4
	if (!req) {
    7b3c:	2301      	movs	r3, #1
    7b3e:	4632      	mov	r2, r6
    7b40:	2104      	movs	r1, #4
    7b42:	4628      	mov	r0, r5
    7b44:	f7ff fc9c 	bl	7480 <send_err_rsp.part.0>
	return 0;
    7b48:	2000      	movs	r0, #0
}
    7b4a:	b005      	add	sp, #20
    7b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7b4e:	4621      	mov	r1, r4
    7b50:	466b      	mov	r3, sp
    7b52:	4630      	mov	r0, r6
    7b54:	4a08      	ldr	r2, [pc, #32]	; (7b78 <att_find_info_req+0x70>)
	data.chan = chan;
    7b56:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7b58:	f006 f8a3 	bl	dca2 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    7b5c:	9c02      	ldr	r4, [sp, #8]
    7b5e:	b924      	cbnz	r4, 7b6a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    7b60:	9801      	ldr	r0, [sp, #4]
    7b62:	f001 f92b 	bl	8dbc <net_buf_unref>
	if (!req) {
    7b66:	230a      	movs	r3, #10
    7b68:	e7e9      	b.n	7b3e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7b6a:	4628      	mov	r0, r5
    7b6c:	4a03      	ldr	r2, [pc, #12]	; (7b7c <att_find_info_req+0x74>)
    7b6e:	9901      	ldr	r1, [sp, #4]
    7b70:	f006 f9a0 	bl	deb4 <bt_att_chan_send_rsp>
    7b74:	e7e8      	b.n	7b48 <att_find_info_req+0x40>
    7b76:	bf00      	nop
    7b78:	0000ddcf 	.word	0x0000ddcf
    7b7c:	0000df09 	.word	0x0000df09

00007b80 <att_mtu_req>:
{
    7b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    7b82:	4603      	mov	r3, r0
    7b84:	f853 2bc0 	ldr.w	r2, [r3], #192
{
    7b88:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    7b8a:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7b8c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    7b90:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    7b94:	071b      	lsls	r3, r3, #28
    7b96:	d41b      	bmi.n	7bd0 <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
    7b98:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    7b9a:	881b      	ldrh	r3, [r3, #0]
    7b9c:	2b16      	cmp	r3, #22
    7b9e:	d919      	bls.n	7bd4 <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    7ba0:	2202      	movs	r2, #2
    7ba2:	2103      	movs	r1, #3
    7ba4:	f7ff fd92 	bl	76cc <bt_att_create_pdu>
	if (!pdu) {
    7ba8:	4606      	mov	r6, r0
    7baa:	b1a8      	cbz	r0, 7bd8 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
    7bac:	2102      	movs	r1, #2
    7bae:	3008      	adds	r0, #8
    7bb0:	f006 ff97 	bl	eae2 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    7bb4:	2717      	movs	r7, #23
    7bb6:	7044      	strb	r4, [r0, #1]
    7bb8:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    7bba:	4631      	mov	r1, r6
    7bbc:	4628      	mov	r0, r5
    7bbe:	4a07      	ldr	r2, [pc, #28]	; (7bdc <att_mtu_req+0x5c>)
    7bc0:	f006 f978 	bl	deb4 <bt_att_chan_send_rsp>
	return 0;
    7bc4:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    7bc6:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    7bca:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
    7bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    7bd0:	2006      	movs	r0, #6
    7bd2:	e7fc      	b.n	7bce <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
    7bd4:	2004      	movs	r0, #4
    7bd6:	e7fa      	b.n	7bce <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
    7bd8:	200e      	movs	r0, #14
    7bda:	e7f8      	b.n	7bce <att_mtu_req+0x4e>
    7bdc:	0000df09 	.word	0x0000df09

00007be0 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    7be0:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
    7be2:	2400      	movs	r4, #0
{
    7be4:	4602      	mov	r2, r0
    7be6:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7be8:	4807      	ldr	r0, [pc, #28]	; (7c08 <bt_att_req_alloc+0x28>)
    7bea:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    7bec:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7bee:	f002 fd5f 	bl	a6b0 <k_mem_slab_alloc>
    7bf2:	4601      	mov	r1, r0
    7bf4:	b930      	cbnz	r0, 7c04 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    7bf6:	2218      	movs	r2, #24
    7bf8:	9801      	ldr	r0, [sp, #4]
    7bfa:	f005 fcc9 	bl	d590 <memset>

	return req;
    7bfe:	9801      	ldr	r0, [sp, #4]
}
    7c00:	b002      	add	sp, #8
    7c02:	bd10      	pop	{r4, pc}
		return NULL;
    7c04:	4620      	mov	r0, r4
    7c06:	e7fb      	b.n	7c00 <bt_att_req_alloc+0x20>
    7c08:	200004cc 	.word	0x200004cc

00007c0c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    7c0c:	b507      	push	{r0, r1, r2, lr}
    7c0e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    7c10:	a901      	add	r1, sp, #4
    7c12:	4803      	ldr	r0, [pc, #12]	; (7c20 <bt_att_req_free+0x14>)
    7c14:	f002 fd7e 	bl	a714 <k_mem_slab_free>
}
    7c18:	b003      	add	sp, #12
    7c1a:	f85d fb04 	ldr.w	pc, [sp], #4
    7c1e:	bf00      	nop
    7c20:	200004cc 	.word	0x200004cc

00007c24 <att_handle_rsp>:
{
    7c24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    7c28:	4605      	mov	r5, r0
	k_delayed_work_cancel(&chan->timeout_work);
    7c2a:	30e0      	adds	r0, #224	; 0xe0
{
    7c2c:	460f      	mov	r7, r1
    7c2e:	4690      	mov	r8, r2
    7c30:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
    7c32:	f007 ffb1 	bl	fb98 <k_delayed_work_cancel>
	if (!chan->req) {
    7c36:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    7c3a:	b9cc      	cbnz	r4, 7c70 <att_handle_rsp+0x4c>
    7c3c:	491b      	ldr	r1, [pc, #108]	; (7cac <att_handle_rsp+0x88>)
    7c3e:	481c      	ldr	r0, [pc, #112]	; (7cb0 <att_handle_rsp+0x8c>)
    7c40:	1a40      	subs	r0, r0, r1
    7c42:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    7c44:	0180      	lsls	r0, r0, #6
    7c46:	f040 0102 	orr.w	r1, r0, #2
    7c4a:	481a      	ldr	r0, [pc, #104]	; (7cb4 <att_handle_rsp+0x90>)
    7c4c:	f004 fc4b 	bl	c4e6 <log_0>
	att_req_send_process(chan->att);
    7c50:	6828      	ldr	r0, [r5, #0]
    7c52:	f006 f9ce 	bl	dff2 <att_req_send_process>
	if (func) {
    7c56:	b13c      	cbz	r4, 7c68 <att_handle_rsp+0x44>
		func(chan->att->conn, err, pdu, len, params);
    7c58:	6828      	ldr	r0, [r5, #0]
    7c5a:	f8cd 9000 	str.w	r9, [sp]
    7c5e:	4643      	mov	r3, r8
    7c60:	463a      	mov	r2, r7
    7c62:	4631      	mov	r1, r6
    7c64:	6800      	ldr	r0, [r0, #0]
    7c66:	47a0      	blx	r4
}
    7c68:	2000      	movs	r0, #0
    7c6a:	b002      	add	sp, #8
    7c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
    7c70:	4b11      	ldr	r3, [pc, #68]	; (7cb8 <att_handle_rsp+0x94>)
    7c72:	429c      	cmp	r4, r3
    7c74:	d103      	bne.n	7c7e <att_handle_rsp+0x5a>
		chan->req = NULL;
    7c76:	2400      	movs	r4, #0
    7c78:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
    7c7c:	e7e8      	b.n	7c50 <att_handle_rsp+0x2c>
	if (chan->req->buf) {
    7c7e:	6920      	ldr	r0, [r4, #16]
    7c80:	b128      	cbz	r0, 7c8e <att_handle_rsp+0x6a>
		net_buf_unref(chan->req->buf);
    7c82:	f001 f89b 	bl	8dbc <net_buf_unref>
		chan->req->buf = NULL;
    7c86:	2200      	movs	r2, #0
    7c88:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    7c8c:	611a      	str	r2, [r3, #16]
	chan->req->func = NULL;
    7c8e:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
    7c92:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
    7c96:	6844      	ldr	r4, [r0, #4]
	chan->req->func = NULL;
    7c98:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
    7c9c:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
    7ca0:	f006 fa83 	bl	e1aa <att_req_destroy>
	chan->req = NULL;
    7ca4:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
    7ca8:	e7d2      	b.n	7c50 <att_handle_rsp+0x2c>
    7caa:	bf00      	nop
    7cac:	000102f8 	.word	0x000102f8
    7cb0:	000102f8 	.word	0x000102f8
    7cb4:	0001282a 	.word	0x0001282a
    7cb8:	20001700 	.word	0x20001700

00007cbc <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    7cbc:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
{
    7cc0:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
    7cc2:	b18b      	cbz	r3, 7ce8 <att_error_rsp+0x2c>
    7cc4:	4a09      	ldr	r2, [pc, #36]	; (7cec <att_error_rsp+0x30>)
    7cc6:	4293      	cmp	r3, r2
    7cc8:	d00e      	beq.n	7ce8 <att_error_rsp+0x2c>
	if (chan->req->buf) {
    7cca:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
    7ccc:	688c      	ldr	r4, [r1, #8]
	if (chan->req->buf) {
    7cce:	b12a      	cbz	r2, 7cdc <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
    7cd0:	899d      	ldrh	r5, [r3, #12]
    7cd2:	6911      	ldr	r1, [r2, #16]
	buf->len = state->len;
    7cd4:	89db      	ldrh	r3, [r3, #14]
	buf->data = buf->__buf + state->offset;
    7cd6:	4429      	add	r1, r5
    7cd8:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    7cda:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    7cdc:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(chan, NULL, 0, err);
    7cde:	2200      	movs	r2, #0
}
    7ce0:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
    7ce2:	4611      	mov	r1, r2
    7ce4:	f7ff bf9e 	b.w	7c24 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    7ce8:	230e      	movs	r3, #14
    7cea:	e7f8      	b.n	7cde <att_error_rsp+0x22>
    7cec:	20001700 	.word	0x20001700

00007cf0 <att_reset>:
{
    7cf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7cf2:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    7cf4:	9803      	ldr	r0, [sp, #12]
    7cf6:	2200      	movs	r2, #0
    7cf8:	2300      	movs	r3, #0
    7cfa:	300c      	adds	r0, #12
    7cfc:	f006 fe9a 	bl	ea34 <net_buf_get>
    7d00:	b948      	cbnz	r0, 7d16 <att_reset+0x26>
	att->conn = NULL;
    7d02:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7d04:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
    7d06:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7d08:	b945      	cbnz	r5, 7d1c <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
    7d0a:	4811      	ldr	r0, [pc, #68]	; (7d50 <att_reset+0x60>)
    7d0c:	a903      	add	r1, sp, #12
    7d0e:	f002 fd01 	bl	a714 <k_mem_slab_free>
}
    7d12:	b004      	add	sp, #16
    7d14:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7d16:	f001 f851 	bl	8dbc <net_buf_unref>
    7d1a:	e7eb      	b.n	7cf4 <att_reset+0x4>
	return node->next;
    7d1c:	682c      	ldr	r4, [r5, #0]
    7d1e:	2c00      	cmp	r4, #0
    7d20:	bf38      	it	cc
    7d22:	2400      	movcc	r4, #0
		if (req->func) {
    7d24:	686e      	ldr	r6, [r5, #4]
    7d26:	b136      	cbz	r6, 7d36 <att_reset+0x46>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    7d28:	696b      	ldr	r3, [r5, #20]
    7d2a:	210e      	movs	r1, #14
    7d2c:	9300      	str	r3, [sp, #0]
    7d2e:	2300      	movs	r3, #0
    7d30:	461a      	mov	r2, r3
    7d32:	4618      	mov	r0, r3
    7d34:	47b0      	blx	r6
		att_req_destroy(req);
    7d36:	4628      	mov	r0, r5
    7d38:	f006 fa37 	bl	e1aa <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7d3c:	2c00      	cmp	r4, #0
    7d3e:	d0e4      	beq.n	7d0a <att_reset+0x1a>
    7d40:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7d42:	4625      	mov	r5, r4
    7d44:	2b00      	cmp	r3, #0
    7d46:	bf38      	it	cc
    7d48:	2300      	movcc	r3, #0
    7d4a:	461c      	mov	r4, r3
    7d4c:	e7ea      	b.n	7d24 <att_reset+0x34>
    7d4e:	bf00      	nop
    7d50:	20000494 	.word	0x20000494

00007d54 <att_timeout>:
{
    7d54:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
    7d56:	4605      	mov	r5, r0
    7d58:	4b0d      	ldr	r3, [pc, #52]	; (7d90 <att_timeout+0x3c>)
    7d5a:	490e      	ldr	r1, [pc, #56]	; (7d94 <att_timeout+0x40>)
    7d5c:	f855 6de0 	ldr.w	r6, [r5, #-224]!
    7d60:	1ac9      	subs	r1, r1, r3
    7d62:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    7d64:	0189      	lsls	r1, r1, #6
    7d66:	f041 0101 	orr.w	r1, r1, #1
{
    7d6a:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    7d6c:	480a      	ldr	r0, [pc, #40]	; (7d98 <att_timeout+0x44>)
    7d6e:	f004 fbba 	bl	c4e6 <log_0>
	att_chan_detach(chan);
    7d72:	4628      	mov	r0, r5
    7d74:	f006 fa56 	bl	e224 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    7d78:	6a75      	ldr	r5, [r6, #36]	; 0x24
    7d7a:	b945      	cbnz	r5, 7d8e <att_timeout+0x3a>
	att_reset(att);
    7d7c:	4630      	mov	r0, r6
    7d7e:	f7ff ffb7 	bl	7cf0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    7d82:	f854 0cd8 	ldr.w	r0, [r4, #-216]
    7d86:	f000 fed5 	bl	8b34 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    7d8a:	f844 5cd8 	str.w	r5, [r4, #-216]
}
    7d8e:	bd70      	pop	{r4, r5, r6, pc}
    7d90:	000102f8 	.word	0x000102f8
    7d94:	000102f8 	.word	0x000102f8
    7d98:	00012841 	.word	0x00012841

00007d9c <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    7d9c:	b510      	push	{r4, lr}
    7d9e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    7da0:	b348      	cbz	r0, 7df6 <bt_att_req_cancel+0x5a>
    7da2:	b341      	cbz	r1, 7df6 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
    7da4:	f7ff f9e6 	bl	7174 <att_get>
	if (!att) {
    7da8:	b328      	cbz	r0, 7df6 <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7daa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7dac:	b15b      	cbz	r3, 7dc6 <bt_att_req_cancel+0x2a>
    7dae:	f5b3 7196 	subs.w	r1, r3, #300	; 0x12c
    7db2:	d008      	beq.n	7dc6 <bt_att_req_cancel+0x2a>
    7db4:	681b      	ldr	r3, [r3, #0]
    7db6:	b10b      	cbz	r3, 7dbc <bt_att_req_cancel+0x20>
    7db8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
	if (chan->req != req) {
    7dbc:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
    7dc0:	4294      	cmp	r4, r2
    7dc2:	d005      	beq.n	7dd0 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7dc4:	b963      	cbnz	r3, 7de0 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    7dc6:	4621      	mov	r1, r4
    7dc8:	3004      	adds	r0, #4
    7dca:	f005 fee9 	bl	dba0 <sys_slist_find_and_remove>
    7dce:	e002      	b.n	7dd6 <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
    7dd0:	4b09      	ldr	r3, [pc, #36]	; (7df8 <bt_att_req_cancel+0x5c>)
    7dd2:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4

	att_req_destroy(req);
    7dd6:	4620      	mov	r0, r4
}
    7dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    7ddc:	f006 b9e5 	b.w	e1aa <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7de0:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
    7de4:	d004      	beq.n	7df0 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7de6:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7dea:	b10a      	cbz	r2, 7df0 <bt_att_req_cancel+0x54>
    7dec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
    7df0:	4619      	mov	r1, r3
    7df2:	4613      	mov	r3, r2
    7df4:	e7e2      	b.n	7dbc <bt_att_req_cancel+0x20>
}
    7df6:	bd10      	pop	{r4, pc}
    7df8:	20001700 	.word	0x20001700

00007dfc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    7dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    7dfe:	4604      	mov	r4, r0
    7e00:	4d0c      	ldr	r5, [pc, #48]	; (7e34 <find_cf_cfg+0x38>)
    7e02:	b960      	cbnz	r0, 7e1e <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    7e04:	9000      	str	r0, [sp, #0]
    7e06:	4669      	mov	r1, sp
    7e08:	f8cd 0003 	str.w	r0, [sp, #3]
    7e0c:	1c68      	adds	r0, r5, #1
    7e0e:	f006 fb20 	bl	e452 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    7e12:	2800      	cmp	r0, #0
    7e14:	bf08      	it	eq
    7e16:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
    7e18:	4620      	mov	r0, r4
    7e1a:	b003      	add	sp, #12
    7e1c:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    7e1e:	462a      	mov	r2, r5
    7e20:	f812 1b01 	ldrb.w	r1, [r2], #1
    7e24:	f005 fd9a 	bl	d95c <bt_conn_is_peer_addr_le>
    7e28:	2800      	cmp	r0, #0
	return NULL;
    7e2a:	bf14      	ite	ne
    7e2c:	462c      	movne	r4, r5
    7e2e:	2400      	moveq	r4, #0
    7e30:	e7f2      	b.n	7e18 <find_cf_cfg+0x1c>
    7e32:	bf00      	nop
    7e34:	20001718 	.word	0x20001718

00007e38 <find_sc_cfg>:
{
    7e38:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    7e3a:	4c06      	ldr	r4, [pc, #24]	; (7e54 <find_sc_cfg+0x1c>)
    7e3c:	7823      	ldrb	r3, [r4, #0]
    7e3e:	4283      	cmp	r3, r0
    7e40:	d103      	bne.n	7e4a <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    7e42:	1c60      	adds	r0, r4, #1
    7e44:	f006 fb05 	bl	e452 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    7e48:	b108      	cbz	r0, 7e4e <find_sc_cfg+0x16>
	return NULL;
    7e4a:	2000      	movs	r0, #0
}
    7e4c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    7e4e:	4620      	mov	r0, r4
    7e50:	e7fc      	b.n	7e4c <find_sc_cfg+0x14>
    7e52:	bf00      	nop
    7e54:	20002952 	.word	0x20002952

00007e58 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    7e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    7e5a:	4604      	mov	r4, r0
    7e5c:	4d0c      	ldr	r5, [pc, #48]	; (7e90 <gatt_sub_find+0x38>)
    7e5e:	b960      	cbnz	r0, 7e7a <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    7e60:	9000      	str	r0, [sp, #0]
    7e62:	4669      	mov	r1, sp
    7e64:	f8cd 0003 	str.w	r0, [sp, #3]
    7e68:	1c68      	adds	r0, r5, #1
    7e6a:	f006 faf2 	bl	e452 <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
    7e6e:	2800      	cmp	r0, #0
    7e70:	bf08      	it	eq
    7e72:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
    7e74:	4620      	mov	r0, r4
    7e76:	b003      	add	sp, #12
    7e78:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    7e7a:	462a      	mov	r2, r5
    7e7c:	f812 1b01 	ldrb.w	r1, [r2], #1
    7e80:	f005 fd6c 	bl	d95c <bt_conn_is_peer_addr_le>
    7e84:	2800      	cmp	r0, #0
	return NULL;
    7e86:	bf14      	ite	ne
    7e88:	462c      	movne	r4, r5
    7e8a:	2400      	moveq	r4, #0
    7e8c:	e7f2      	b.n	7e74 <gatt_sub_find+0x1c>
    7e8e:	bf00      	nop
    7e90:	20001748 	.word	0x20001748

00007e94 <bt_gatt_attr_write_ccc>:
{
    7e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7e98:	461f      	mov	r7, r3
    7e9a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7e9e:	4606      	mov	r6, r0
    7ea0:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
    7ea2:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
    7ea6:	2b00      	cmp	r3, #0
    7ea8:	d151      	bne.n	7f4e <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
    7eaa:	1e7b      	subs	r3, r7, #1
    7eac:	2b01      	cmp	r3, #1
    7eae:	d851      	bhi.n	7f54 <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
    7eb0:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    7eb2:	7815      	ldrb	r5, [r2, #0]
    7eb4:	bf18      	it	ne
    7eb6:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    7eb8:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    7eba:	bf0c      	ite	eq
    7ebc:	b2ad      	uxtheq	r5, r5
    7ebe:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    7ec2:	f006 fac9 	bl	e458 <find_ccc_cfg>
	if (!cfg) {
    7ec6:	4604      	mov	r4, r0
    7ec8:	b9e8      	cbnz	r0, 7f06 <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
    7eca:	b91d      	cbnz	r5, 7ed4 <bt_gatt_attr_write_ccc+0x40>
			return len;
    7ecc:	4638      	mov	r0, r7
}
    7ece:	b003      	add	sp, #12
    7ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    7ed4:	4649      	mov	r1, r9
    7ed6:	f006 fabf 	bl	e458 <find_ccc_cfg>
		if (!cfg) {
    7eda:	4604      	mov	r4, r0
    7edc:	b960      	cbnz	r0, 7ef8 <bt_gatt_attr_write_ccc+0x64>
    7ede:	4b1f      	ldr	r3, [pc, #124]	; (7f5c <bt_gatt_attr_write_ccc+0xc8>)
    7ee0:	491f      	ldr	r1, [pc, #124]	; (7f60 <bt_gatt_attr_write_ccc+0xcc>)
			BT_WARN("No space to store CCC cfg");
    7ee2:	4820      	ldr	r0, [pc, #128]	; (7f64 <bt_gatt_attr_write_ccc+0xd0>)
    7ee4:	1ac9      	subs	r1, r1, r3
    7ee6:	08c9      	lsrs	r1, r1, #3
    7ee8:	0189      	lsls	r1, r1, #6
    7eea:	f041 0102 	orr.w	r1, r1, #2
    7eee:	f004 fafa 	bl	c4e6 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    7ef2:	f06f 0010 	mvn.w	r0, #16
    7ef6:	e7ea      	b.n	7ece <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7ef8:	f106 0188 	add.w	r1, r6, #136	; 0x88
    7efc:	3001      	adds	r0, #1
    7efe:	f006 fac3 	bl	e488 <bt_addr_le_copy>
		cfg->id = conn->id;
    7f02:	7a33      	ldrb	r3, [r6, #8]
    7f04:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    7f06:	f8d9 3010 	ldr.w	r3, [r9, #16]
    7f0a:	b9a3      	cbnz	r3, 7f36 <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
    7f0c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    7f10:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    7f12:	42ab      	cmp	r3, r5
    7f14:	d003      	beq.n	7f1e <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
    7f16:	4649      	mov	r1, r9
    7f18:	4640      	mov	r0, r8
    7f1a:	f006 fa24 	bl	e366 <gatt_ccc_changed>
	if (!value) {
    7f1e:	2d00      	cmp	r5, #0
    7f20:	d1d4      	bne.n	7ecc <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    7f22:	4669      	mov	r1, sp
    7f24:	1c60      	adds	r0, r4, #1
    7f26:	9500      	str	r5, [sp, #0]
    7f28:	f8cd 5003 	str.w	r5, [sp, #3]
    7f2c:	f006 faac 	bl	e488 <bt_addr_le_copy>
	cfg->id = 0U;
    7f30:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    7f32:	8125      	strh	r5, [r4, #8]
}
    7f34:	e7ca      	b.n	7ecc <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    7f36:	462a      	mov	r2, r5
    7f38:	4641      	mov	r1, r8
    7f3a:	4630      	mov	r0, r6
    7f3c:	4798      	blx	r3
		if (write < 0) {
    7f3e:	2800      	cmp	r0, #0
    7f40:	dbc5      	blt.n	7ece <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    7f42:	3801      	subs	r0, #1
    7f44:	2801      	cmp	r0, #1
    7f46:	d9e1      	bls.n	7f0c <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    7f48:	f06f 000d 	mvn.w	r0, #13
    7f4c:	e7bf      	b.n	7ece <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7f4e:	f06f 0006 	mvn.w	r0, #6
    7f52:	e7bc      	b.n	7ece <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    7f54:	f06f 000c 	mvn.w	r0, #12
    7f58:	e7b9      	b.n	7ece <bt_gatt_attr_write_ccc+0x3a>
    7f5a:	bf00      	nop
    7f5c:	000102f8 	.word	0x000102f8
    7f60:	00010318 	.word	0x00010318
    7f64:	00012854 	.word	0x00012854

00007f68 <sc_save>:
{
    7f68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7f6c:	4680      	mov	r8, r0
    7f6e:	460f      	mov	r7, r1
    7f70:	4616      	mov	r6, r2
    7f72:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    7f74:	f7ff ff60 	bl	7e38 <find_sc_cfg>
	if (!cfg) {
    7f78:	4604      	mov	r4, r0
    7f7a:	b9c8      	cbnz	r0, 7fb0 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    7f7c:	4669      	mov	r1, sp
    7f7e:	9000      	str	r0, [sp, #0]
    7f80:	f8cd 0003 	str.w	r0, [sp, #3]
    7f84:	f7ff ff58 	bl	7e38 <find_sc_cfg>
		if (!cfg) {
    7f88:	4604      	mov	r4, r0
    7f8a:	b960      	cbnz	r0, 7fa6 <sc_save+0x3e>
    7f8c:	490f      	ldr	r1, [pc, #60]	; (7fcc <sc_save+0x64>)
    7f8e:	4b10      	ldr	r3, [pc, #64]	; (7fd0 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    7f90:	4810      	ldr	r0, [pc, #64]	; (7fd4 <sc_save+0x6c>)
    7f92:	1ac9      	subs	r1, r1, r3
    7f94:	08c9      	lsrs	r1, r1, #3
    7f96:	0189      	lsls	r1, r1, #6
    7f98:	f041 0101 	orr.w	r1, r1, #1
    7f9c:	f004 faa3 	bl	c4e6 <log_0>
}
    7fa0:	b002      	add	sp, #8
    7fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
    7fa6:	4639      	mov	r1, r7
		cfg->id = id;
    7fa8:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    7fac:	f006 fa6c 	bl	e488 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    7fb0:	8922      	ldrh	r2, [r4, #8]
    7fb2:	8963      	ldrh	r3, [r4, #10]
    7fb4:	b91a      	cbnz	r2, 7fbe <sc_save+0x56>
    7fb6:	b923      	cbnz	r3, 7fc2 <sc_save+0x5a>
		cfg->data.start = start;
    7fb8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    7fba:	8165      	strh	r5, [r4, #10]
    7fbc:	e7f0      	b.n	7fa0 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    7fbe:	4296      	cmp	r6, r2
    7fc0:	d302      	bcc.n	7fc8 <sc_save+0x60>
    7fc2:	429d      	cmp	r5, r3
    7fc4:	d9ec      	bls.n	7fa0 <sc_save+0x38>
    7fc6:	e7f8      	b.n	7fba <sc_save+0x52>
		*start = new_start;
    7fc8:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    7fca:	e7fa      	b.n	7fc2 <sc_save+0x5a>
    7fcc:	00010318 	.word	0x00010318
    7fd0:	000102f8 	.word	0x000102f8
    7fd4:	0001286e 	.word	0x0001286e

00007fd8 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    7fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fdc:	4606      	mov	r6, r0
    7fde:	4688      	mov	r8, r1
    7fe0:	4617      	mov	r7, r2
	if (params) {
    7fe2:	461c      	mov	r4, r3
    7fe4:	b34b      	cbz	r3, 803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    7fe6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    7fea:	2100      	movs	r1, #0
    7fec:	f7ff fdf8 	bl	7be0 <bt_att_req_alloc>
		if (!req) {
    7ff0:	4605      	mov	r5, r0
    7ff2:	b920      	cbnz	r0, 7ffe <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    7ff4:	f06f 040b 	mvn.w	r4, #11
}
    7ff8:	4620      	mov	r0, r4
    7ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    7ffe:	2300      	movs	r3, #0
		req->user_data = params;
    8000:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
    8002:	4601      	mov	r1, r0
		req->buf = buf;
    8004:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    8008:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    800a:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    800c:	4630      	mov	r0, r6
    800e:	f006 f98f 	bl	e330 <bt_att_req_send>
		if (err) {
    8012:	4604      	mov	r4, r0
    8014:	2800      	cmp	r0, #0
    8016:	d0ef      	beq.n	7ff8 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    8018:	4628      	mov	r0, r5
    801a:	f7ff fdf7 	bl	7c0c <bt_att_req_free>
	if (err) {
    801e:	2c00      	cmp	r4, #0
    8020:	d0ea      	beq.n	7ff8 <gatt_send.constprop.0+0x20>
    8022:	4b08      	ldr	r3, [pc, #32]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    8024:	4a08      	ldr	r2, [pc, #32]	; (8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
		BT_ERR("Error sending ATT PDU: %d", err);
    8026:	4621      	mov	r1, r4
    8028:	1ad2      	subs	r2, r2, r3
    802a:	08d2      	lsrs	r2, r2, #3
    802c:	0192      	lsls	r2, r2, #6
    802e:	4807      	ldr	r0, [pc, #28]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    8030:	f042 0201 	orr.w	r2, r2, #1
    8034:	f004 fa64 	bl	c500 <log_1>
    8038:	e7de      	b.n	7ff8 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    803a:	461a      	mov	r2, r3
    803c:	f006 f92d 	bl	e29a <bt_att_send>
    8040:	4604      	mov	r4, r0
    8042:	e7ec      	b.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    8044:	000102f8 	.word	0x000102f8
    8048:	00010318 	.word	0x00010318
    804c:	0001288d 	.word	0x0001288d

00008050 <gatt_indicate>:
{
    8050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8054:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    8056:	8a92      	ldrh	r2, [r2, #20]
{
    8058:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    805a:	3202      	adds	r2, #2
    805c:	211d      	movs	r1, #29
{
    805e:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    8060:	f7ff fb34 	bl	76cc <bt_att_create_pdu>
	if (!buf) {
    8064:	4605      	mov	r5, r0
    8066:	b1e8      	cbz	r0, 80a4 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
    8068:	f100 0808 	add.w	r8, r0, #8
    806c:	2102      	movs	r1, #2
    806e:	4640      	mov	r0, r8
    8070:	f006 fd37 	bl	eae2 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    8074:	4606      	mov	r6, r0
    8076:	8aa1      	ldrh	r1, [r4, #20]
    8078:	f826 9b02 	strh.w	r9, [r6], #2
    807c:	4640      	mov	r0, r8
    807e:	f006 fd30 	bl	eae2 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    8082:	4630      	mov	r0, r6
    8084:	8aa2      	ldrh	r2, [r4, #20]
    8086:	6921      	ldr	r1, [r4, #16]
    8088:	f005 fa57 	bl	d53a <memcpy>
	if (!params->func) {
    808c:	68a3      	ldr	r3, [r4, #8]
    808e:	b933      	cbnz	r3, 809e <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    8090:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    8092:	4629      	mov	r1, r5
    8094:	4638      	mov	r0, r7
}
    8096:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    809a:	f7ff bf9d 	b.w	7fd8 <gatt_send.constprop.0>
    809e:	4623      	mov	r3, r4
    80a0:	4a07      	ldr	r2, [pc, #28]	; (80c0 <gatt_indicate+0x70>)
    80a2:	e7f6      	b.n	8092 <gatt_indicate+0x42>
    80a4:	4b07      	ldr	r3, [pc, #28]	; (80c4 <gatt_indicate+0x74>)
    80a6:	4908      	ldr	r1, [pc, #32]	; (80c8 <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    80a8:	4808      	ldr	r0, [pc, #32]	; (80cc <gatt_indicate+0x7c>)
    80aa:	1ac9      	subs	r1, r1, r3
    80ac:	08c9      	lsrs	r1, r1, #3
    80ae:	0189      	lsls	r1, r1, #6
    80b0:	f041 0102 	orr.w	r1, r1, #2
    80b4:	f004 fa17 	bl	c4e6 <log_0>
}
    80b8:	f06f 000b 	mvn.w	r0, #11
    80bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80c0:	0000e37b 	.word	0x0000e37b
    80c4:	000102f8 	.word	0x000102f8
    80c8:	00010318 	.word	0x00010318
    80cc:	000128a7 	.word	0x000128a7

000080d0 <gatt_write_ccc.constprop.0>:
	if (params->write) {
		params->write(conn, err, NULL);
	}
}

static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    80d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80d4:	4688      	mov	r8, r1
    80d6:	4617      	mov	r7, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    80d8:	2112      	movs	r1, #18
    80da:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    80dc:	4606      	mov	r6, r0
    80de:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    80e0:	f7ff faf4 	bl	76cc <bt_att_create_pdu>
				sizeof(*req) + sizeof(uint16_t));
	if (!buf) {
    80e4:	4604      	mov	r4, r0
    80e6:	b1e8      	cbz	r0, 8124 <gatt_write_ccc.constprop.0+0x54>
    80e8:	f100 0908 	add.w	r9, r0, #8
    80ec:	2102      	movs	r1, #2
    80ee:	4648      	mov	r0, r9
    80f0:	f006 fcf7 	bl	eae2 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
    80f4:	4639      	mov	r1, r7
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
	req->handle = sys_cpu_to_le16(handle);
    80f6:	f8a0 8000 	strh.w	r8, [r0]
    80fa:	4648      	mov	r0, r9
    80fc:	f006 fd08 	bl	eb10 <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8100:	f105 0310 	add.w	r3, r5, #16
    8104:	e8d3 2fef 	ldaex	r2, [r3]
    8108:	f042 0204 	orr.w	r2, r2, #4
    810c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8110:	2900      	cmp	r1, #0
    8112:	d1f7      	bne.n	8104 <gatt_write_ccc.constprop.0+0x34>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	return gatt_send(conn, buf, func, params, NULL);
    8114:	462b      	mov	r3, r5
    8116:	4621      	mov	r1, r4
    8118:	4630      	mov	r0, r6
}
    811a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    811e:	4a03      	ldr	r2, [pc, #12]	; (812c <gatt_write_ccc.constprop.0+0x5c>)
    8120:	f7ff bf5a 	b.w	7fd8 <gatt_send.constprop.0>
}
    8124:	f06f 000b 	mvn.w	r0, #11
    8128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    812c:	0000e695 	.word	0x0000e695

00008130 <cf_write>:
{
    8130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8134:	461f      	mov	r7, r3
    8136:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    813a:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
    813c:	2b01      	cmp	r3, #1
{
    813e:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    8140:	d847      	bhi.n	81d2 <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    8142:	443b      	add	r3, r7
    8144:	2b01      	cmp	r3, #1
    8146:	463d      	mov	r5, r7
    8148:	dc46      	bgt.n	81d8 <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    814a:	f7ff fe57 	bl	7dfc <find_cf_cfg>
	if (!cfg) {
    814e:	4604      	mov	r4, r0
    8150:	b990      	cbnz	r0, 8178 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    8152:	f7ff fe53 	bl	7dfc <find_cf_cfg>
	if (!cfg) {
    8156:	4604      	mov	r4, r0
    8158:	b970      	cbnz	r0, 8178 <cf_write+0x48>
    815a:	4b22      	ldr	r3, [pc, #136]	; (81e4 <cf_write+0xb4>)
    815c:	4922      	ldr	r1, [pc, #136]	; (81e8 <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    815e:	4823      	ldr	r0, [pc, #140]	; (81ec <cf_write+0xbc>)
    8160:	1ac9      	subs	r1, r1, r3
    8162:	08c9      	lsrs	r1, r1, #3
    8164:	0189      	lsls	r1, r1, #6
    8166:	f041 0102 	orr.w	r1, r1, #2
    816a:	f004 f9bc 	bl	c4e6 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    816e:	f06f 0510 	mvn.w	r5, #16
}
    8172:	4628      	mov	r0, r5
    8174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    8178:	4632      	mov	r2, r6
    817a:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    817e:	4562      	cmp	r2, ip
    8180:	d114      	bne.n	81ac <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    8182:	b12f      	cbz	r7, 8190 <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    8184:	7833      	ldrb	r3, [r6, #0]
    8186:	7a22      	ldrb	r2, [r4, #8]
    8188:	f003 0307 	and.w	r3, r3, #7
    818c:	4313      	orrs	r3, r2
    818e:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8190:	f108 0188 	add.w	r1, r8, #136	; 0x88
    8194:	1c60      	adds	r0, r4, #1
    8196:	f006 f977 	bl	e488 <bt_addr_le_copy>
	cfg->id = conn->id;
    819a:	4620      	mov	r0, r4
    819c:	f898 3008 	ldrb.w	r3, [r8, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    81a0:	2100      	movs	r1, #0
	cfg->id = conn->id;
    81a2:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    81a6:	f006 f997 	bl	e4d8 <atomic_set_bit>
	return len;
    81aa:	e7e2      	b.n	8172 <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    81ac:	2300      	movs	r3, #0
    81ae:	f812 1b01 	ldrb.w	r1, [r2], #1
    81b2:	7a20      	ldrb	r0, [r4, #8]
    81b4:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    81b6:	fa21 fe03 	lsr.w	lr, r1, r3
    81ba:	f01e 0f01 	tst.w	lr, #1
    81be:	d004      	beq.n	81ca <cf_write+0x9a>
    81c0:	fa20 fe03 	lsr.w	lr, r0, r3
    81c4:	f01e 0f01 	tst.w	lr, #1
    81c8:	d109      	bne.n	81de <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    81ca:	3301      	adds	r3, #1
    81cc:	2b03      	cmp	r3, #3
    81ce:	d1f2      	bne.n	81b6 <cf_write+0x86>
    81d0:	e7d5      	b.n	817e <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    81d2:	f06f 0506 	mvn.w	r5, #6
    81d6:	e7cc      	b.n	8172 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    81d8:	f06f 050c 	mvn.w	r5, #12
    81dc:	e7c9      	b.n	8172 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    81de:	f06f 0512 	mvn.w	r5, #18
    81e2:	e7c6      	b.n	8172 <cf_write+0x42>
    81e4:	000102f8 	.word	0x000102f8
    81e8:	00010318 	.word	0x00010318
    81ec:	000128ce 	.word	0x000128ce

000081f0 <sc_indicate_rsp>:
{
    81f0:	b510      	push	{r4, lr}
    81f2:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    81f4:	4910      	ldr	r1, [pc, #64]	; (8238 <sc_indicate_rsp+0x48>)
    81f6:	e8d1 3fef 	ldaex	r3, [r1]
    81fa:	f023 0302 	bic.w	r3, r3, #2
    81fe:	e8c1 3fe2 	stlex	r2, r3, [r1]
    8202:	2a00      	cmp	r2, #0
    8204:	d1f7      	bne.n	81f6 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8206:	e8d1 3faf 	lda	r3, [r1]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    820a:	07da      	lsls	r2, r3, #31
    820c:	d505      	bpl.n	821a <sc_indicate_rsp+0x2a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    820e:	2200      	movs	r2, #0
    8210:	2300      	movs	r3, #0
    8212:	480a      	ldr	r0, [pc, #40]	; (823c <sc_indicate_rsp+0x4c>)
    8214:	3930      	subs	r1, #48	; 0x30
    8216:	f003 f897 	bl	b348 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    821a:	4620      	mov	r0, r4
    821c:	f7ff fdee 	bl	7dfc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    8220:	b140      	cbz	r0, 8234 <sc_indicate_rsp+0x44>
    8222:	7a03      	ldrb	r3, [r0, #8]
    8224:	07db      	lsls	r3, r3, #31
    8226:	d505      	bpl.n	8234 <sc_indicate_rsp+0x44>
}
    8228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    822c:	2100      	movs	r1, #0
    822e:	300c      	adds	r0, #12
    8230:	f006 b952 	b.w	e4d8 <atomic_set_bit>
}
    8234:	bd10      	pop	{r4, pc}
    8236:	bf00      	nop
    8238:	20000c68 	.word	0x20000c68
    823c:	20000e38 	.word	0x20000e38

00008240 <gatt_notify>:
{
    8240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8244:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    8246:	8992      	ldrh	r2, [r2, #12]
{
    8248:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    824a:	3202      	adds	r2, #2
    824c:	211b      	movs	r1, #27
{
    824e:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    8250:	f7ff fa3c 	bl	76cc <bt_att_create_pdu>
	if (!buf) {
    8254:	4605      	mov	r5, r0
    8256:	b1c8      	cbz	r0, 828c <gatt_notify+0x4c>
	return net_buf_simple_add(&buf->b, len);
    8258:	f100 0908 	add.w	r9, r0, #8
    825c:	2102      	movs	r1, #2
    825e:	4648      	mov	r0, r9
    8260:	f006 fc3f 	bl	eae2 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    8264:	4606      	mov	r6, r0
    8266:	89a1      	ldrh	r1, [r4, #12]
    8268:	f826 8b02 	strh.w	r8, [r6], #2
    826c:	4648      	mov	r0, r9
    826e:	f006 fc38 	bl	eae2 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    8272:	89a2      	ldrh	r2, [r4, #12]
    8274:	68a1      	ldr	r1, [r4, #8]
    8276:	4630      	mov	r0, r6
    8278:	f005 f95f 	bl	d53a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    827c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    8280:	4629      	mov	r1, r5
    8282:	4638      	mov	r0, r7
}
    8284:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    8288:	f006 b807 	b.w	e29a <bt_att_send>
    828c:	4b06      	ldr	r3, [pc, #24]	; (82a8 <gatt_notify+0x68>)
    828e:	4907      	ldr	r1, [pc, #28]	; (82ac <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    8290:	4807      	ldr	r0, [pc, #28]	; (82b0 <gatt_notify+0x70>)
    8292:	1ac9      	subs	r1, r1, r3
    8294:	08c9      	lsrs	r1, r1, #3
    8296:	0189      	lsls	r1, r1, #6
    8298:	f041 0102 	orr.w	r1, r1, #2
    829c:	f004 f923 	bl	c4e6 <log_0>
}
    82a0:	f06f 000b 	mvn.w	r0, #11
    82a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    82a8:	000102f8 	.word	0x000102f8
    82ac:	00010318 	.word	0x00010318
    82b0:	000128fa 	.word	0x000128fa

000082b4 <notify_cb>:
{
    82b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    82b6:	4b2e      	ldr	r3, [pc, #184]	; (8370 <notify_cb+0xbc>)
{
    82b8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    82ba:	6882      	ldr	r2, [r0, #8]
{
    82bc:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    82be:	429a      	cmp	r2, r3
    82c0:	d12d      	bne.n	831e <notify_cb+0x6a>
	ccc = attr->user_data;
    82c2:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    82c4:	4b2b      	ldr	r3, [pc, #172]	; (8374 <notify_cb+0xc0>)
    82c6:	429f      	cmp	r7, r3
    82c8:	d119      	bne.n	82fe <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    82ca:	2300      	movs	r3, #0
    82cc:	4d2a      	ldr	r5, [pc, #168]	; (8378 <notify_cb+0xc4>)
    82ce:	4669      	mov	r1, sp
    82d0:	1c68      	adds	r0, r5, #1
    82d2:	9300      	str	r3, [sp, #0]
    82d4:	f8cd 3003 	str.w	r3, [sp, #3]
    82d8:	f006 f8bb 	bl	e452 <bt_addr_le_cmp>
    82dc:	b178      	cbz	r0, 82fe <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    82de:	4629      	mov	r1, r5
    82e0:	2207      	movs	r2, #7
    82e2:	f811 0b01 	ldrb.w	r0, [r1], #1
    82e6:	f7fe fa29 	bl	673c <bt_conn_lookup_state_le>
			if (!conn) {
    82ea:	b9d8      	cbnz	r0, 8324 <notify_cb+0x70>
				sc_save(cfg->id, &cfg->peer,
    82ec:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    82ee:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    82f0:	f811 0b01 	ldrb.w	r0, [r1], #1
				sc = (struct sc_data *)data->ind_params->data;
    82f4:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    82f6:	8853      	ldrh	r3, [r2, #2]
    82f8:	8812      	ldrh	r2, [r2, #0]
    82fa:	f7ff fe35 	bl	7f68 <sc_save>
		if (cfg->value != data->type) {
    82fe:	893a      	ldrh	r2, [r7, #8]
    8300:	89a3      	ldrh	r3, [r4, #12]
    8302:	429a      	cmp	r2, r3
    8304:	d10b      	bne.n	831e <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8306:	4639      	mov	r1, r7
    8308:	f811 0b01 	ldrb.w	r0, [r1], #1
    830c:	f7fe f9d0 	bl	66b0 <bt_conn_lookup_addr_le>
		if (!conn) {
    8310:	4605      	mov	r5, r0
    8312:	b120      	cbz	r0, 831e <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
    8314:	7a83      	ldrb	r3, [r0, #10]
    8316:	2b07      	cmp	r3, #7
    8318:	d007      	beq.n	832a <notify_cb+0x76>
			bt_conn_unref(conn);
    831a:	f005 fb53 	bl	d9c4 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    831e:	2001      	movs	r0, #1
}
    8320:	b003      	add	sp, #12
    8322:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    8324:	f005 fb4e 	bl	d9c4 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    8328:	e7e9      	b.n	82fe <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    832a:	697b      	ldr	r3, [r7, #20]
    832c:	b123      	cbz	r3, 8338 <notify_cb+0x84>
    832e:	4631      	mov	r1, r6
    8330:	4798      	blx	r3
    8332:	b908      	cbnz	r0, 8338 <notify_cb+0x84>
			bt_conn_unref(conn);
    8334:	4628      	mov	r0, r5
    8336:	e7f0      	b.n	831a <notify_cb+0x66>
		if (data->type == BT_GATT_CCC_INDICATE) {
    8338:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    833a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    833c:	2b02      	cmp	r3, #2
    833e:	88a1      	ldrh	r1, [r4, #4]
    8340:	6922      	ldr	r2, [r4, #16]
    8342:	d110      	bne.n	8366 <notify_cb+0xb2>
			err = gatt_indicate(conn, data->handle,
    8344:	f7ff fe84 	bl	8050 <gatt_indicate>
			if (err == 0) {
    8348:	4606      	mov	r6, r0
    834a:	b918      	cbnz	r0, 8354 <notify_cb+0xa0>
				data->ind_params->_ref++;
    834c:	6922      	ldr	r2, [r4, #16]
    834e:	7d93      	ldrb	r3, [r2, #22]
    8350:	3301      	adds	r3, #1
    8352:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    8354:	4628      	mov	r0, r5
    8356:	f005 fb35 	bl	d9c4 <bt_conn_unref>
		if (err < 0) {
    835a:	2e00      	cmp	r6, #0
    835c:	f04f 0000 	mov.w	r0, #0
    8360:	dbde      	blt.n	8320 <notify_cb+0x6c>
		data->err = 0;
    8362:	60a0      	str	r0, [r4, #8]
    8364:	e7db      	b.n	831e <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    8366:	f7ff ff6b 	bl	8240 <gatt_notify>
    836a:	4606      	mov	r6, r0
    836c:	e7f2      	b.n	8354 <notify_cb+0xa0>
    836e:	bf00      	nop
    8370:	00007e95 	.word	0x00007e95
    8374:	200002b4 	.word	0x200002b4
    8378:	20002952 	.word	0x20002952

0000837c <read_ppcp>:
{
    837c:	b513      	push	{r0, r1, r4, lr}
    837e:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    8380:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
    8384:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    8388:	4c09      	ldr	r4, [pc, #36]	; (83b0 <read_ppcp+0x34>)
	if (offset > value_len) {
    838a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    838c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    8390:	d80b      	bhi.n	83aa <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    8392:	f1c1 0408 	rsb	r4, r1, #8
    8396:	429c      	cmp	r4, r3
    8398:	bfa8      	it	ge
    839a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    839c:	4469      	add	r1, sp
    839e:	4622      	mov	r2, r4
    83a0:	f005 f8cb 	bl	d53a <memcpy>
}
    83a4:	4620      	mov	r0, r4
    83a6:	b002      	add	sp, #8
    83a8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    83aa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    83ae:	e7f9      	b.n	83a4 <read_ppcp+0x28>
    83b0:	00280018 	.word	0x00280018

000083b4 <disconnected_cb>:
{
    83b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    83b8:	4b23      	ldr	r3, [pc, #140]	; (8448 <disconnected_cb+0x94>)
{
    83ba:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    83bc:	6882      	ldr	r2, [r0, #8]
{
    83be:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    83c0:	429a      	cmp	r2, r3
    83c2:	d102      	bne.n	83ca <disconnected_cb+0x16>
	ccc = attr->user_data;
    83c4:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    83c6:	8963      	ldrh	r3, [r4, #10]
    83c8:	bb03      	cbnz	r3, 840c <disconnected_cb+0x58>
}
    83ca:	2001      	movs	r0, #1
    83cc:	b002      	add	sp, #8
    83ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    83d2:	f105 0888 	add.w	r8, r5, #136	; 0x88
    83d6:	4641      	mov	r1, r8
    83d8:	7a28      	ldrb	r0, [r5, #8]
    83da:	f005 fa2e 	bl	d83a <bt_addr_le_is_bonded>
    83de:	b980      	cbnz	r0, 8402 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
    83e0:	4b1a      	ldr	r3, [pc, #104]	; (844c <disconnected_cb+0x98>)
    83e2:	429c      	cmp	r4, r3
    83e4:	d102      	bne.n	83ec <disconnected_cb+0x38>
					sc_clear(conn);
    83e6:	4628      	mov	r0, r5
    83e8:	f006 f98b 	bl	e702 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    83ec:	2500      	movs	r5, #0
    83ee:	4669      	mov	r1, sp
    83f0:	4630      	mov	r0, r6
    83f2:	9500      	str	r5, [sp, #0]
    83f4:	f8cd 5003 	str.w	r5, [sp, #3]
    83f8:	f006 f846 	bl	e488 <bt_addr_le_copy>
	cfg->id = 0U;
    83fc:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    83fe:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
    8400:	e019      	b.n	8436 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8402:	4641      	mov	r1, r8
    8404:	4630      	mov	r0, r6
    8406:	f006 f83f 	bl	e488 <bt_addr_le_copy>
	if (!value_used) {
    840a:	e014      	b.n	8436 <disconnected_cb+0x82>
		if (!cfg->value) {
    840c:	8923      	ldrh	r3, [r4, #8]
    840e:	b193      	cbz	r3, 8436 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    8410:	4626      	mov	r6, r4
    8412:	f816 1b01 	ldrb.w	r1, [r6], #1
    8416:	4628      	mov	r0, r5
    8418:	4632      	mov	r2, r6
    841a:	f005 fa9f 	bl	d95c <bt_conn_is_peer_addr_le>
    841e:	2800      	cmp	r0, #0
    8420:	d1d7      	bne.n	83d2 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8422:	4631      	mov	r1, r6
    8424:	7820      	ldrb	r0, [r4, #0]
    8426:	f7fe f943 	bl	66b0 <bt_conn_lookup_addr_le>
			if (tmp) {
    842a:	b120      	cbz	r0, 8436 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
    842c:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    842e:	f005 fac9 	bl	d9c4 <bt_conn_unref>
	if (!value_used) {
    8432:	2d07      	cmp	r5, #7
    8434:	d0c9      	beq.n	83ca <disconnected_cb+0x16>
		ccc->value = 0U;
    8436:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
    8438:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    843a:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    843c:	2b00      	cmp	r3, #0
    843e:	d0c4      	beq.n	83ca <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    8440:	4638      	mov	r0, r7
    8442:	4798      	blx	r3
    8444:	e7c1      	b.n	83ca <disconnected_cb+0x16>
    8446:	bf00      	nop
    8448:	00007e95 	.word	0x00007e95
    844c:	200002b4 	.word	0x200002b4

00008450 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8450:	2201      	movs	r2, #1
{
    8452:	b510      	push	{r4, lr}
    8454:	4b1d      	ldr	r3, [pc, #116]	; (84cc <bt_gatt_init+0x7c>)
    8456:	e8d3 1fef 	ldaex	r1, [r3]
    845a:	2900      	cmp	r1, #0
    845c:	d103      	bne.n	8466 <bt_gatt_init+0x16>
    845e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    8462:	2800      	cmp	r0, #0
    8464:	d1f7      	bne.n	8456 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
    8466:	d12a      	bne.n	84be <bt_gatt_init+0x6e>
    8468:	4b19      	ldr	r3, [pc, #100]	; (84d0 <bt_gatt_init+0x80>)
    846a:	e8d3 1fef 	ldaex	r1, [r3]
    846e:	2900      	cmp	r1, #0
    8470:	d103      	bne.n	847a <bt_gatt_init+0x2a>
    8472:	e8c3 2fe0 	stlex	r0, r2, [r3]
    8476:	2800      	cmp	r0, #0
    8478:	d1f7      	bne.n	846a <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
    847a:	d108      	bne.n	848e <bt_gatt_init+0x3e>
    847c:	2000      	movs	r0, #0
    847e:	4a15      	ldr	r2, [pc, #84]	; (84d4 <bt_gatt_init+0x84>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    8480:	4915      	ldr	r1, [pc, #84]	; (84d8 <bt_gatt_init+0x88>)
    8482:	8813      	ldrh	r3, [r2, #0]
    8484:	4c15      	ldr	r4, [pc, #84]	; (84dc <bt_gatt_init+0x8c>)
    8486:	42a1      	cmp	r1, r4
    8488:	d31a      	bcc.n	84c0 <bt_gatt_init+0x70>
    848a:	b100      	cbz	r0, 848e <bt_gatt_init+0x3e>
    848c:	8013      	strh	r3, [r2, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    848e:	4c14      	ldr	r4, [pc, #80]	; (84e0 <bt_gatt_init+0x90>)
    8490:	2230      	movs	r2, #48	; 0x30
    8492:	2100      	movs	r1, #0
    8494:	4620      	mov	r0, r4
    8496:	f005 f87b 	bl	d590 <memset>
    849a:	4b12      	ldr	r3, [pc, #72]	; (84e4 <bt_gatt_init+0x94>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    849c:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    849e:	6063      	str	r3, [r4, #4]
    84a0:	4c11      	ldr	r4, [pc, #68]	; (84e8 <bt_gatt_init+0x98>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    84a2:	2300      	movs	r3, #0
    84a4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    84a8:	4810      	ldr	r0, [pc, #64]	; (84ec <bt_gatt_init+0x9c>)
    84aa:	f002 ff4d 	bl	b348 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    84ae:	2230      	movs	r2, #48	; 0x30
    84b0:	2100      	movs	r1, #0
    84b2:	f104 0020 	add.w	r0, r4, #32
    84b6:	f005 f86b 	bl	d590 <memset>
    84ba:	4b0d      	ldr	r3, [pc, #52]	; (84f0 <bt_gatt_init+0xa0>)
    84bc:	6263      	str	r3, [r4, #36]	; 0x24
}
    84be:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    84c0:	6848      	ldr	r0, [r1, #4]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    84c2:	3108      	adds	r1, #8
		last_static_handle += svc->attr_count;
    84c4:	4403      	add	r3, r0
    84c6:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    84c8:	2001      	movs	r0, #1
    84ca:	e7dc      	b.n	8486 <bt_gatt_init+0x36>
    84cc:	20001728 	.word	0x20001728
    84d0:	20001744 	.word	0x20001744
    84d4:	20002950 	.word	0x20002950
    84d8:	000102e0 	.word	0x000102e0
    84dc:	000102f8 	.word	0x000102f8
    84e0:	20000be8 	.word	0x20000be8
    84e4:	0000e7fb 	.word	0x0000e7fb
    84e8:	20000c18 	.word	0x20000c18
    84ec:	20000e38 	.word	0x20000e38
    84f0:	00008871 	.word	0x00008871

000084f4 <bt_gatt_attr_get_handle>:
	if (!attr) {
    84f4:	4603      	mov	r3, r0
{
    84f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    84fa:	b148      	cbz	r0, 8510 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    84fc:	8a00      	ldrh	r0, [r0, #16]
    84fe:	b938      	cbnz	r0, 8510 <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
    8500:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    8502:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8506:	4911      	ldr	r1, [pc, #68]	; (854c <bt_gatt_attr_get_handle+0x58>)
    8508:	f8df e044 	ldr.w	lr, [pc, #68]	; 8550 <bt_gatt_attr_get_handle+0x5c>
    850c:	4571      	cmp	r1, lr
    850e:	d301      	bcc.n	8514 <bt_gatt_attr_get_handle+0x20>
}
    8510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    8514:	e9d1 7600 	ldrd	r7, r6, [r1]
    8518:	42bb      	cmp	r3, r7
    851a:	d304      	bcc.n	8526 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    851c:	fb0c 7206 	mla	r2, ip, r6, r7
    8520:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    8522:	4293      	cmp	r3, r2
    8524:	d90e      	bls.n	8544 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    8526:	19a2      	adds	r2, r4, r6
    8528:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    852a:	4614      	mov	r4, r2
    852c:	3108      	adds	r1, #8
    852e:	e7ed      	b.n	850c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    8530:	fb0c 7805 	mla	r8, ip, r5, r7
    8534:	4543      	cmp	r3, r8
    8536:	d007      	beq.n	8548 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    8538:	3501      	adds	r5, #1
    853a:	1962      	adds	r2, r4, r5
    853c:	42b5      	cmp	r5, r6
    853e:	b292      	uxth	r2, r2
    8540:	d1f6      	bne.n	8530 <bt_gatt_attr_get_handle+0x3c>
    8542:	e7f2      	b.n	852a <bt_gatt_attr_get_handle+0x36>
    8544:	2500      	movs	r5, #0
    8546:	e7f8      	b.n	853a <bt_gatt_attr_get_handle+0x46>
    8548:	4610      	mov	r0, r2
    854a:	e7e1      	b.n	8510 <bt_gatt_attr_get_handle+0x1c>
    854c:	000102e0 	.word	0x000102e0
    8550:	000102f8 	.word	0x000102f8

00008554 <bt_gatt_foreach_attr_type>:
{
    8554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8558:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    855a:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
    855e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    8562:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
    8564:	2d00      	cmp	r5, #0
    8566:	bf08      	it	eq
    8568:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    856a:	4b24      	ldr	r3, [pc, #144]	; (85fc <bt_gatt_foreach_attr_type+0xa8>)
{
    856c:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    856e:	881b      	ldrh	r3, [r3, #0]
{
    8570:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
    8572:	4283      	cmp	r3, r0
    8574:	d23c      	bcs.n	85f0 <bt_gatt_foreach_attr_type+0x9c>
}
    8576:	b003      	add	sp, #12
    8578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    857c:	6873      	ldr	r3, [r6, #4]
    857e:	4423      	add	r3, r4
    8580:	42bb      	cmp	r3, r7
    8582:	d232      	bcs.n	85ea <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    8584:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8586:	3608      	adds	r6, #8
    8588:	4b1d      	ldr	r3, [pc, #116]	; (8600 <bt_gatt_foreach_attr_type+0xac>)
    858a:	429e      	cmp	r6, r3
    858c:	d3f6      	bcc.n	857c <bt_gatt_foreach_attr_type+0x28>
    858e:	e7f2      	b.n	8576 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    8590:	4640      	mov	r0, r8
    8592:	5889      	ldr	r1, [r1, r2]
    8594:	9301      	str	r3, [sp, #4]
    8596:	f005 f821 	bl	d5dc <bt_uuid_cmp>
    859a:	9b01      	ldr	r3, [sp, #4]
    859c:	b190      	cbz	r0, 85c4 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    859e:	3401      	adds	r4, #1
    85a0:	f10a 0a01 	add.w	sl, sl, #1
    85a4:	b2a4      	uxth	r4, r4
    85a6:	6873      	ldr	r3, [r6, #4]
    85a8:	4553      	cmp	r3, sl
    85aa:	d9ec      	bls.n	8586 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    85ac:	9b00      	ldr	r3, [sp, #0]
    85ae:	429c      	cmp	r4, r3
    85b0:	d8e1      	bhi.n	8576 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    85b2:	42bc      	cmp	r4, r7
    85b4:	d3f3      	bcc.n	859e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    85b6:	fb0b f20a 	mul.w	r2, fp, sl
    85ba:	6831      	ldr	r1, [r6, #0]
    85bc:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    85be:	f1b8 0f00 	cmp.w	r8, #0
    85c2:	d1e5      	bne.n	8590 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    85c4:	f1b9 0f00 	cmp.w	r9, #0
    85c8:	d10b      	bne.n	85e2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    85ca:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
    85cc:	4618      	mov	r0, r3
	*num_matches -= 1;
    85ce:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    85d0:	4621      	mov	r1, r4
    85d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    85d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    85d6:	4798      	blx	r3
	if (!*num_matches) {
    85d8:	2d00      	cmp	r5, #0
    85da:	d0cc      	beq.n	8576 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    85dc:	2800      	cmp	r0, #0
    85de:	d1de      	bne.n	859e <bt_gatt_foreach_attr_type+0x4a>
    85e0:	e7c9      	b.n	8576 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    85e2:	68da      	ldr	r2, [r3, #12]
    85e4:	4591      	cmp	r9, r2
    85e6:	d1da      	bne.n	859e <bt_gatt_foreach_attr_type+0x4a>
    85e8:	e7ef      	b.n	85ca <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    85ea:	f04f 0a00 	mov.w	sl, #0
    85ee:	e7da      	b.n	85a6 <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
    85f0:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    85f2:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    85f6:	4e03      	ldr	r6, [pc, #12]	; (8604 <bt_gatt_foreach_attr_type+0xb0>)
    85f8:	e7c6      	b.n	8588 <bt_gatt_foreach_attr_type+0x34>
    85fa:	bf00      	nop
    85fc:	20002950 	.word	0x20002950
    8600:	000102f8 	.word	0x000102f8
    8604:	000102e0 	.word	0x000102e0

00008608 <db_hash_gen.isra.0>:
	uint8_t key[16] = {};
    8608:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
    860a:	b510      	push	{r4, lr}
    860c:	b0c8      	sub	sp, #288	; 0x120
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    860e:	4669      	mov	r1, sp
    8610:	aa1c      	add	r2, sp, #112	; 0x70
    8612:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    8614:	e9cd 3300 	strd	r3, r3, [sp]
    8618:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    861c:	f004 fc13 	bl	ce46 <tc_cmac_setup>
    8620:	b958      	cbnz	r0, 863a <db_hash_gen.isra.0+0x32>
    8622:	4917      	ldr	r1, [pc, #92]	; (8680 <db_hash_gen.isra.0+0x78>)
    8624:	4b17      	ldr	r3, [pc, #92]	; (8684 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    8626:	4818      	ldr	r0, [pc, #96]	; (8688 <db_hash_gen.isra.0+0x80>)
    8628:	1ac9      	subs	r1, r1, r3
    862a:	08c9      	lsrs	r1, r1, #3
    862c:	0189      	lsls	r1, r1, #6
    862e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    8632:	f003 ff58 	bl	c4e6 <log_0>
}
    8636:	b048      	add	sp, #288	; 0x120
    8638:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    863a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    863e:	2001      	movs	r0, #1
    8640:	4a12      	ldr	r2, [pc, #72]	; (868c <db_hash_gen.isra.0+0x84>)
    8642:	ab04      	add	r3, sp, #16
    8644:	f006 f8ce 	bl	e7e4 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    8648:	4811      	ldr	r0, [pc, #68]	; (8690 <db_hash_gen.isra.0+0x88>)
    864a:	a904      	add	r1, sp, #16
    864c:	f004 fc92 	bl	cf74 <tc_cmac_final>
    8650:	b940      	cbnz	r0, 8664 <db_hash_gen.isra.0+0x5c>
    8652:	490b      	ldr	r1, [pc, #44]	; (8680 <db_hash_gen.isra.0+0x78>)
    8654:	4b0b      	ldr	r3, [pc, #44]	; (8684 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    8656:	480f      	ldr	r0, [pc, #60]	; (8694 <db_hash_gen.isra.0+0x8c>)
    8658:	1ac9      	subs	r1, r1, r3
    865a:	08c9      	lsrs	r1, r1, #3
    865c:	0189      	lsls	r1, r1, #6
    865e:	f041 0101 	orr.w	r1, r1, #1
    8662:	e7e6      	b.n	8632 <db_hash_gen.isra.0+0x2a>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    8664:	2208      	movs	r2, #8
    8666:	4b0a      	ldr	r3, [pc, #40]	; (8690 <db_hash_gen.isra.0+0x88>)
    8668:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    866c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    866e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
    8672:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    8674:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    8678:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    867a:	d1f7      	bne.n	866c <db_hash_gen.isra.0+0x64>
    867c:	e7db      	b.n	8636 <db_hash_gen.isra.0+0x2e>
    867e:	bf00      	nop
    8680:	00010318 	.word	0x00010318
    8684:	000102f8 	.word	0x000102f8
    8688:	00012923 	.word	0x00012923
    868c:	0000e3a7 	.word	0x0000e3a7
    8690:	20002a04 	.word	0x20002a04
    8694:	0001293c 	.word	0x0001293c

00008698 <bt_gatt_notify_cb>:
{
    8698:	b530      	push	{r4, r5, lr}
    869a:	4604      	mov	r4, r0
    869c:	460d      	mov	r5, r1
    869e:	b08b      	sub	sp, #44	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    86a0:	4b34      	ldr	r3, [pc, #208]	; (8774 <bt_gatt_notify_cb+0xdc>)
    86a2:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    86a6:	079a      	lsls	r2, r3, #30
    86a8:	d55d      	bpl.n	8766 <bt_gatt_notify_cb+0xce>
	data.attr = params->attr;
    86aa:	6848      	ldr	r0, [r1, #4]
    86ac:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    86ae:	b114      	cbz	r4, 86b6 <bt_gatt_notify_cb+0x1e>
    86b0:	7aa3      	ldrb	r3, [r4, #10]
    86b2:	2b07      	cmp	r3, #7
    86b4:	d15a      	bne.n	876c <bt_gatt_notify_cb+0xd4>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    86b6:	f7ff ff1d 	bl	84f4 <bt_gatt_attr_get_handle>
    86ba:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    86be:	b918      	cbnz	r0, 86c8 <bt_gatt_notify_cb+0x30>
		return -ENOENT;
    86c0:	f06f 0001 	mvn.w	r0, #1
}
    86c4:	b00b      	add	sp, #44	; 0x2c
    86c6:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    86c8:	682a      	ldr	r2, [r5, #0]
    86ca:	b9aa      	cbnz	r2, 86f8 <bt_gatt_notify_cb+0x60>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    86cc:	9b05      	ldr	r3, [sp, #20]
    86ce:	a904      	add	r1, sp, #16
    86d0:	6818      	ldr	r0, [r3, #0]
    86d2:	2300      	movs	r3, #0
    86d4:	f88d 3010 	strb.w	r3, [sp, #16]
    86d8:	f642 0303 	movw	r3, #10243	; 0x2803
    86dc:	f8ad 3012 	strh.w	r3, [sp, #18]
    86e0:	f004 ff7c 	bl	d5dc <bt_uuid_cmp>
    86e4:	b1c0      	cbz	r0, 8718 <bt_gatt_notify_cb+0x80>
	if (conn) {
    86e6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    86ea:	b314      	cbz	r4, 8732 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
    86ec:	4601      	mov	r1, r0
    86ee:	462a      	mov	r2, r5
    86f0:	4620      	mov	r0, r4
    86f2:	f7ff fda5 	bl	8240 <gatt_notify>
    86f6:	e7e5      	b.n	86c4 <bt_gatt_notify_cb+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    86f8:	a905      	add	r1, sp, #20
    86fa:	9102      	str	r1, [sp, #8]
    86fc:	491e      	ldr	r1, [pc, #120]	; (8778 <bt_gatt_notify_cb+0xe0>)
	found->attr = NULL;
    86fe:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8700:	9101      	str	r1, [sp, #4]
    8702:	2101      	movs	r1, #1
    8704:	9100      	str	r1, [sp, #0]
    8706:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    870a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    870c:	f7ff ff22 	bl	8554 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    8710:	9b05      	ldr	r3, [sp, #20]
    8712:	2b00      	cmp	r3, #0
    8714:	d1da      	bne.n	86cc <bt_gatt_notify_cb+0x34>
    8716:	e7d3      	b.n	86c0 <bt_gatt_notify_cb+0x28>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    8718:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    871a:	68c3      	ldr	r3, [r0, #12]
    871c:	799b      	ldrb	r3, [r3, #6]
    871e:	06db      	lsls	r3, r3, #27
    8720:	d402      	bmi.n	8728 <bt_gatt_notify_cb+0x90>
			return -EINVAL;
    8722:	f06f 0015 	mvn.w	r0, #21
    8726:	e7cd      	b.n	86c4 <bt_gatt_notify_cb+0x2c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    8728:	f006 f80e 	bl	e748 <bt_gatt_attr_value_handle>
    872c:	f8ad 0018 	strh.w	r0, [sp, #24]
    8730:	e7d9      	b.n	86e6 <bt_gatt_notify_cb+0x4e>
	data.err = -ENOTCONN;
    8732:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8736:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
    873a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    873c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    873e:	f8ad 2012 	strh.w	r2, [sp, #18]
    8742:	aa05      	add	r2, sp, #20
    8744:	9202      	str	r2, [sp, #8]
    8746:	4a0d      	ldr	r2, [pc, #52]	; (877c <bt_gatt_notify_cb+0xe4>)
	data.type = BT_GATT_CCC_NOTIFY;
    8748:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    874c:	e9cd 3200 	strd	r3, r2, [sp]
    8750:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8754:	4623      	mov	r3, r4
    8756:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
    8758:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    875a:	f88d 4010 	strb.w	r4, [sp, #16]
    875e:	f7ff fef9 	bl	8554 <bt_gatt_foreach_attr_type>
	return data.err;
    8762:	9807      	ldr	r0, [sp, #28]
    8764:	e7ae      	b.n	86c4 <bt_gatt_notify_cb+0x2c>
		return -EAGAIN;
    8766:	f06f 000a 	mvn.w	r0, #10
    876a:	e7ab      	b.n	86c4 <bt_gatt_notify_cb+0x2c>
		return -ENOTCONN;
    876c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    8770:	e7a8      	b.n	86c4 <bt_gatt_notify_cb+0x2c>
    8772:	bf00      	nop
    8774:	20000094 	.word	0x20000094
    8778:	0000e39f 	.word	0x0000e39f
    877c:	000082b5 	.word	0x000082b5

00008780 <bt_gatt_indicate>:
{
    8780:	b530      	push	{r4, r5, lr}
    8782:	4604      	mov	r4, r0
    8784:	460d      	mov	r5, r1
    8786:	b08b      	sub	sp, #44	; 0x2c
    8788:	4b36      	ldr	r3, [pc, #216]	; (8864 <bt_gatt_indicate+0xe4>)
    878a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    878e:	079a      	lsls	r2, r3, #30
    8790:	d561      	bpl.n	8856 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
    8792:	6848      	ldr	r0, [r1, #4]
    8794:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    8796:	b114      	cbz	r4, 879e <bt_gatt_indicate+0x1e>
    8798:	7aa3      	ldrb	r3, [r4, #10]
    879a:	2b07      	cmp	r3, #7
    879c:	d15e      	bne.n	885c <bt_gatt_indicate+0xdc>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    879e:	f7ff fea9 	bl	84f4 <bt_gatt_attr_get_handle>
    87a2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    87a6:	b918      	cbnz	r0, 87b0 <bt_gatt_indicate+0x30>
		return -ENOENT;
    87a8:	f06f 0001 	mvn.w	r0, #1
}
    87ac:	b00b      	add	sp, #44	; 0x2c
    87ae:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    87b0:	682a      	ldr	r2, [r5, #0]
    87b2:	b9ba      	cbnz	r2, 87e4 <bt_gatt_indicate+0x64>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    87b4:	9b05      	ldr	r3, [sp, #20]
    87b6:	a904      	add	r1, sp, #16
    87b8:	6818      	ldr	r0, [r3, #0]
    87ba:	2300      	movs	r3, #0
    87bc:	f88d 3010 	strb.w	r3, [sp, #16]
    87c0:	f642 0303 	movw	r3, #10243	; 0x2803
    87c4:	f8ad 3012 	strh.w	r3, [sp, #18]
    87c8:	f004 ff08 	bl	d5dc <bt_uuid_cmp>
    87cc:	b1d0      	cbz	r0, 8804 <bt_gatt_indicate+0x84>
	if (conn) {
    87ce:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    87d2:	b324      	cbz	r4, 881e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    87d4:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    87d6:	4601      	mov	r1, r0
    87d8:	462a      	mov	r2, r5
    87da:	4620      	mov	r0, r4
		params->_ref = 1;
    87dc:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    87de:	f7ff fc37 	bl	8050 <gatt_indicate>
    87e2:	e7e3      	b.n	87ac <bt_gatt_indicate+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    87e4:	a905      	add	r1, sp, #20
    87e6:	9102      	str	r1, [sp, #8]
    87e8:	491f      	ldr	r1, [pc, #124]	; (8868 <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
    87ea:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    87ec:	9101      	str	r1, [sp, #4]
    87ee:	2101      	movs	r1, #1
    87f0:	9100      	str	r1, [sp, #0]
    87f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    87f6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    87f8:	f7ff feac 	bl	8554 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    87fc:	9b05      	ldr	r3, [sp, #20]
    87fe:	2b00      	cmp	r3, #0
    8800:	d1d8      	bne.n	87b4 <bt_gatt_indicate+0x34>
    8802:	e7d1      	b.n	87a8 <bt_gatt_indicate+0x28>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    8804:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    8806:	68c3      	ldr	r3, [r0, #12]
    8808:	799b      	ldrb	r3, [r3, #6]
    880a:	069b      	lsls	r3, r3, #26
    880c:	d402      	bmi.n	8814 <bt_gatt_indicate+0x94>
			return -EINVAL;
    880e:	f06f 0015 	mvn.w	r0, #21
    8812:	e7cb      	b.n	87ac <bt_gatt_indicate+0x2c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    8814:	f005 ff98 	bl	e748 <bt_gatt_attr_value_handle>
    8818:	f8ad 0018 	strh.w	r0, [sp, #24]
    881c:	e7d7      	b.n	87ce <bt_gatt_indicate+0x4e>
	data.err = -ENOTCONN;
    881e:	f06f 0338 	mvn.w	r3, #56	; 0x38
    8822:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    8824:	2302      	movs	r3, #2
    8826:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    882a:	f642 1302 	movw	r3, #10498	; 0x2902
    882e:	f8ad 3012 	strh.w	r3, [sp, #18]
    8832:	ab05      	add	r3, sp, #20
    8834:	9302      	str	r3, [sp, #8]
    8836:	4b0d      	ldr	r3, [pc, #52]	; (886c <bt_gatt_indicate+0xec>)
    8838:	f64f 71ff 	movw	r1, #65535	; 0xffff
    883c:	9301      	str	r3, [sp, #4]
    883e:	2301      	movs	r3, #1
	params->_ref = 0;
    8840:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8842:	9300      	str	r3, [sp, #0]
    8844:	aa04      	add	r2, sp, #16
    8846:	4623      	mov	r3, r4
	data.ind_params = params;
    8848:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    884a:	f88d 4010 	strb.w	r4, [sp, #16]
    884e:	f7ff fe81 	bl	8554 <bt_gatt_foreach_attr_type>
	return data.err;
    8852:	9807      	ldr	r0, [sp, #28]
    8854:	e7aa      	b.n	87ac <bt_gatt_indicate+0x2c>
		return -EAGAIN;
    8856:	f06f 000a 	mvn.w	r0, #10
    885a:	e7a7      	b.n	87ac <bt_gatt_indicate+0x2c>
		return -ENOTCONN;
    885c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    8860:	e7a4      	b.n	87ac <bt_gatt_indicate+0x2c>
    8862:	bf00      	nop
    8864:	20000094 	.word	0x20000094
    8868:	0000e39f 	.word	0x0000e39f
    886c:	000082b5 	.word	0x000082b5

00008870 <sc_process>:
{
    8870:	4603      	mov	r3, r0
    8872:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    8874:	f850 2c08 	ldr.w	r2, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    8878:	f1a0 0120 	sub.w	r1, r0, #32
	sc_range[0] = sys_cpu_to_le16(sc->start);
    887c:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    887e:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8882:	e8d4 2fef 	ldaex	r2, [r4]
    8886:	f022 0201 	bic.w	r2, r2, #1
    888a:	e8c4 2fe0 	stlex	r0, r2, [r4]
    888e:	2800      	cmp	r0, #0
    8890:	d1f7      	bne.n	8882 <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    8892:	4a0d      	ldr	r2, [pc, #52]	; (88c8 <sc_process+0x58>)
	sc->start = 0U;
    8894:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
    8896:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    889a:	4a0c      	ldr	r2, [pc, #48]	; (88cc <sc_process+0x5c>)
	sc->start = 0U;
    889c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.func = sc_indicate_rsp;
    88a0:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    88a4:	aa01      	add	r2, sp, #4
    88a6:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    88aa:	2204      	movs	r2, #4
	sc->end = 0U;
    88ac:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    88b0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    88b4:	f7ff ff64 	bl	8780 <bt_gatt_indicate>
    88b8:	b918      	cbnz	r0, 88c2 <sc_process+0x52>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    88ba:	2101      	movs	r1, #1
    88bc:	4620      	mov	r0, r4
    88be:	f005 fe0b 	bl	e4d8 <atomic_set_bit>
}
    88c2:	b002      	add	sp, #8
    88c4:	bd10      	pop	{r4, pc}
    88c6:	bf00      	nop
    88c8:	00010988 	.word	0x00010988
    88cc:	000081f1 	.word	0x000081f1

000088d0 <update_ccc>:
{
    88d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    88d2:	4b33      	ldr	r3, [pc, #204]	; (89a0 <update_ccc+0xd0>)
	struct bt_conn *conn = data->conn;
    88d4:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    88d6:	6882      	ldr	r2, [r0, #8]
{
    88d8:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    88da:	429a      	cmp	r2, r3
    88dc:	d11b      	bne.n	8916 <update_ccc+0x46>
	ccc = attr->user_data;
    88de:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    88e0:	8933      	ldrh	r3, [r6, #8]
    88e2:	b1c3      	cbz	r3, 8916 <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    88e4:	4632      	mov	r2, r6
    88e6:	4628      	mov	r0, r5
    88e8:	f812 1b01 	ldrb.w	r1, [r2], #1
    88ec:	f005 f836 	bl	d95c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    88f0:	b188      	cbz	r0, 8916 <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    88f2:	222a      	movs	r2, #42	; 0x2a
    88f4:	4621      	mov	r1, r4
    88f6:	4628      	mov	r0, r5
    88f8:	f005 ff81 	bl	e7fe <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    88fc:	2803      	cmp	r0, #3
    88fe:	d10d      	bne.n	891c <update_ccc+0x4c>
    8900:	4a28      	ldr	r2, [pc, #160]	; (89a4 <update_ccc+0xd4>)
    8902:	4b29      	ldr	r3, [pc, #164]	; (89a8 <update_ccc+0xd8>)
				BT_WARN("CCC %p not writable", attr);
    8904:	4621      	mov	r1, r4
    8906:	1ad2      	subs	r2, r2, r3
    8908:	08d2      	lsrs	r2, r2, #3
    890a:	0192      	lsls	r2, r2, #6
    890c:	4827      	ldr	r0, [pc, #156]	; (89ac <update_ccc+0xdc>)
    890e:	f042 0202 	orr.w	r2, r2, #2
    8912:	f003 fdf5 	bl	c500 <log_1>
}
    8916:	2001      	movs	r0, #1
    8918:	b002      	add	sp, #8
    891a:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
    891c:	4631      	mov	r1, r6
    891e:	4620      	mov	r0, r4
    8920:	f005 fd21 	bl	e366 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    8924:	4b22      	ldr	r3, [pc, #136]	; (89b0 <update_ccc+0xe0>)
    8926:	429e      	cmp	r6, r3
    8928:	d1f5      	bne.n	8916 <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    892a:	7a28      	ldrb	r0, [r5, #8]
    892c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    8930:	f7ff fa82 	bl	7e38 <find_sc_cfg>
	if (!cfg) {
    8934:	4604      	mov	r4, r0
    8936:	2800      	cmp	r0, #0
    8938:	d0ed      	beq.n	8916 <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
    893a:	8902      	ldrh	r2, [r0, #8]
    893c:	8943      	ldrh	r3, [r0, #10]
    893e:	ea53 0102 	orrs.w	r1, r3, r2
    8942:	d0e8      	beq.n	8916 <update_ccc+0x46>
	index = bt_conn_index(conn);
    8944:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    8946:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    894a:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    894e:	f7fe f851 	bl	69f4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    8952:	2318      	movs	r3, #24
    8954:	4917      	ldr	r1, [pc, #92]	; (89b4 <update_ccc+0xe4>)
    8956:	4a18      	ldr	r2, [pc, #96]	; (89b8 <update_ccc+0xe8>)
    8958:	fb03 1300 	mla	r3, r3, r0, r1
    895c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    895e:	4a17      	ldr	r2, [pc, #92]	; (89bc <update_ccc+0xec>)
    8960:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    8962:	aa01      	add	r2, sp, #4
    8964:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    8966:	2204      	movs	r2, #4
    8968:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    896a:	b203      	sxth	r3, r0
    896c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8970:	4628      	mov	r0, r5
    8972:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    8976:	f7ff ff03 	bl	8780 <bt_gatt_indicate>
    897a:	b148      	cbz	r0, 8990 <update_ccc+0xc0>
    897c:	4909      	ldr	r1, [pc, #36]	; (89a4 <update_ccc+0xd4>)
    897e:	4b0a      	ldr	r3, [pc, #40]	; (89a8 <update_ccc+0xd8>)
		BT_ERR("SC restore indication failed");
    8980:	480f      	ldr	r0, [pc, #60]	; (89c0 <update_ccc+0xf0>)
    8982:	1ac9      	subs	r1, r1, r3
    8984:	08c9      	lsrs	r1, r1, #3
    8986:	0189      	lsls	r1, r1, #6
    8988:	f041 0101 	orr.w	r1, r1, #1
    898c:	f003 fdab 	bl	c4e6 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    8990:	2204      	movs	r2, #4
    8992:	2100      	movs	r1, #0
    8994:	f104 0008 	add.w	r0, r4, #8
    8998:	f004 fdfa 	bl	d590 <memset>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
    899c:	e7bb      	b.n	8916 <update_ccc+0x46>
    899e:	bf00      	nop
    89a0:	00007e95 	.word	0x00007e95
    89a4:	00010318 	.word	0x00010318
    89a8:	000102f8 	.word	0x000102f8
    89ac:	00012955 	.word	0x00012955
    89b0:	200002b4 	.word	0x200002b4
    89b4:	2000172c 	.word	0x2000172c
    89b8:	00010988 	.word	0x00010988
    89bc:	0000e4ed 	.word	0x0000e4ed
    89c0:	00012969 	.word	0x00012969

000089c4 <bt_gatt_mult_notification>:
{
    89c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89c8:	b087      	sub	sp, #28
    89ca:	4682      	mov	sl, r0
    89cc:	460c      	mov	r4, r1
    89ce:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
    89d0:	f7ff fa42 	bl	7e58 <gatt_sub_find>
	if (!sub) {
    89d4:	4607      	mov	r7, r0
    89d6:	b1f8      	cbz	r0, 8a18 <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    89d8:	4632      	mov	r2, r6
    89da:	4621      	mov	r1, r4
    89dc:	a803      	add	r0, sp, #12
    89de:	f006 f843 	bl	ea68 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    89e2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    89e6:	2b04      	cmp	r3, #4
    89e8:	d916      	bls.n	8a18 <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    89ea:	2104      	movs	r1, #4
    89ec:	a803      	add	r0, sp, #12
    89ee:	f006 f8b2 	bl	eb56 <net_buf_simple_pull_mem>
		if (len > buf.len) {
    89f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
    89f6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    89fa:	4605      	mov	r5, r0
		if (len > buf.len) {
    89fc:	4543      	cmp	r3, r8
    89fe:	d20e      	bcs.n	8a1e <bt_gatt_mult_notification+0x5a>
    8a00:	4a1c      	ldr	r2, [pc, #112]	; (8a74 <bt_gatt_mult_notification+0xb0>)
    8a02:	4b1d      	ldr	r3, [pc, #116]	; (8a78 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
    8a04:	4641      	mov	r1, r8
    8a06:	1a9b      	subs	r3, r3, r2
    8a08:	08db      	lsrs	r3, r3, #3
    8a0a:	019b      	lsls	r3, r3, #6
    8a0c:	4632      	mov	r2, r6
    8a0e:	481b      	ldr	r0, [pc, #108]	; (8a7c <bt_gatt_mult_notification+0xb8>)
    8a10:	f043 0301 	orr.w	r3, r3, #1
    8a14:	f003 fd88 	bl	c528 <log_2>
}
    8a18:	b007      	add	sp, #28
    8a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    8a1e:	68bb      	ldr	r3, [r7, #8]
    8a20:	b31b      	cbz	r3, 8a6a <bt_gatt_mult_notification+0xa6>
    8a22:	f1b3 0914 	subs.w	r9, r3, #20
    8a26:	d020      	beq.n	8a6a <bt_gatt_mult_notification+0xa6>
    8a28:	681c      	ldr	r4, [r3, #0]
    8a2a:	b104      	cbz	r4, 8a2e <bt_gatt_mult_notification+0x6a>
    8a2c:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
    8a2e:	462b      	mov	r3, r5
    8a30:	f833 bb04 	ldrh.w	fp, [r3], #4
    8a34:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
    8a36:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    8a3a:	455b      	cmp	r3, fp
    8a3c:	d10b      	bne.n	8a56 <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
    8a3e:	4643      	mov	r3, r8
    8a40:	4649      	mov	r1, r9
    8a42:	4650      	mov	r0, sl
    8a44:	9a01      	ldr	r2, [sp, #4]
    8a46:	f8d9 5000 	ldr.w	r5, [r9]
    8a4a:	47a8      	blx	r5
    8a4c:	b918      	cbnz	r0, 8a56 <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
    8a4e:	4649      	mov	r1, r9
    8a50:	4650      	mov	r0, sl
    8a52:	f005 fef7 	bl	e844 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    8a56:	b144      	cbz	r4, 8a6a <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8a58:	f114 0314 	adds.w	r3, r4, #20
    8a5c:	d002      	beq.n	8a64 <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8a5e:	6963      	ldr	r3, [r4, #20]
    8a60:	b103      	cbz	r3, 8a64 <bt_gatt_mult_notification+0xa0>
    8a62:	3b14      	subs	r3, #20
{
    8a64:	46a1      	mov	r9, r4
    8a66:	461c      	mov	r4, r3
    8a68:	e7e5      	b.n	8a36 <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
    8a6a:	4641      	mov	r1, r8
    8a6c:	a803      	add	r0, sp, #12
    8a6e:	f006 f872 	bl	eb56 <net_buf_simple_pull_mem>
    8a72:	e7b6      	b.n	89e2 <bt_gatt_mult_notification+0x1e>
    8a74:	000102f8 	.word	0x000102f8
    8a78:	00010318 	.word	0x00010318
    8a7c:	00012986 	.word	0x00012986

00008a80 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    8a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8a82:	4605      	mov	r5, r0
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
    8a84:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
    8a86:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    8a88:	466b      	mov	r3, sp
    8a8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8a8e:	4a15      	ldr	r2, [pc, #84]	; (8ae4 <bt_gatt_connected+0x64>)
	data.sec = BT_SECURITY_L1;
    8a90:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    8a94:	f005 fea6 	bl	e7e4 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    8a98:	4628      	mov	r0, r5
    8a9a:	f7ff f9dd 	bl	7e58 <gatt_sub_find>
	if (!sub) {
    8a9e:	b128      	cbz	r0, 8aac <bt_gatt_connected+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    8aa0:	6884      	ldr	r4, [r0, #8]
    8aa2:	b11c      	cbz	r4, 8aac <bt_gatt_connected+0x2c>
    8aa4:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    8aa6:	f105 0688 	add.w	r6, r5, #136	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    8aaa:	b90c      	cbnz	r4, 8ab0 <bt_gatt_connected+0x30>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    8aac:	b002      	add	sp, #8
    8aae:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    8ab0:	4631      	mov	r1, r6
    8ab2:	7a28      	ldrb	r0, [r5, #8]
    8ab4:	f004 fec1 	bl	d83a <bt_addr_le_is_bonded>
    8ab8:	b158      	cbz	r0, 8ad2 <bt_gatt_connected+0x52>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8aba:	f104 0310 	add.w	r3, r4, #16
    8abe:	e8d3 3faf 	lda	r3, [r3]
    8ac2:	079b      	lsls	r3, r3, #30
    8ac4:	d405      	bmi.n	8ad2 <bt_gatt_connected+0x52>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    8ac6:	4623      	mov	r3, r4
    8ac8:	4628      	mov	r0, r5
    8aca:	89a2      	ldrh	r2, [r4, #12]
    8acc:	8961      	ldrh	r1, [r4, #10]
    8ace:	f7ff faff 	bl	80d0 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8ad2:	f114 0f14 	cmn.w	r4, #20
    8ad6:	d0e9      	beq.n	8aac <bt_gatt_connected+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8ad8:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    8ada:	2c00      	cmp	r4, #0
    8adc:	d0e6      	beq.n	8aac <bt_gatt_connected+0x2c>
    8ade:	3c14      	subs	r4, #20
    8ae0:	e7e3      	b.n	8aaa <bt_gatt_connected+0x2a>
    8ae2:	bf00      	nop
    8ae4:	000088d1 	.word	0x000088d1

00008ae8 <db_hash_read>:
{
    8ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8aea:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    8aec:	480f      	ldr	r0, [pc, #60]	; (8b2c <db_hash_read+0x44>)
{
    8aee:	4615      	mov	r5, r2
    8af0:	461f      	mov	r7, r3
    8af2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
    8af6:	f007 f84f 	bl	fb98 <k_delayed_work_cancel>
	if (!err) {
    8afa:	b908      	cbnz	r0, 8b00 <db_hash_read+0x18>
		db_hash_gen(true);
    8afc:	f7ff fd84 	bl	8608 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    8b00:	2101      	movs	r1, #1
    8b02:	4620      	mov	r0, r4
    8b04:	f005 ff42 	bl	e98c <bt_gatt_change_aware>
	if (offset > value_len) {
    8b08:	2e10      	cmp	r6, #16
    8b0a:	d80c      	bhi.n	8b26 <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
    8b0c:	f1c6 0410 	rsb	r4, r6, #16
    8b10:	42bc      	cmp	r4, r7
    8b12:	bfa8      	it	ge
    8b14:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    8b16:	4906      	ldr	r1, [pc, #24]	; (8b30 <db_hash_read+0x48>)
    8b18:	4622      	mov	r2, r4
    8b1a:	4628      	mov	r0, r5
    8b1c:	4431      	add	r1, r6
    8b1e:	f004 fd0c 	bl	d53a <memcpy>
}
    8b22:	4620      	mov	r0, r4
    8b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8b26:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    8b2a:	e7fa      	b.n	8b22 <db_hash_read+0x3a>
    8b2c:	20000be8 	.word	0x20000be8
    8b30:	20002a04 	.word	0x20002a04

00008b34 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    8b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b38:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    8b3a:	4603      	mov	r3, r0
    8b3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8b40:	2001      	movs	r0, #1
    8b42:	4a2e      	ldr	r2, [pc, #184]	; (8bfc <bt_gatt_disconnected+0xc8>)
    8b44:	f005 fe4e 	bl	e7e4 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    8b48:	4620      	mov	r0, r4
    8b4a:	f7ff f985 	bl	7e58 <gatt_sub_find>
	if (!sub) {
    8b4e:	4606      	mov	r6, r0
    8b50:	b3a0      	cbz	r0, 8bbc <bt_gatt_disconnected+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    8b52:	6883      	ldr	r3, [r0, #8]
    8b54:	b393      	cbz	r3, 8bbc <bt_gatt_disconnected+0x88>
    8b56:	f1b3 0714 	subs.w	r7, r3, #20
    8b5a:	d02f      	beq.n	8bbc <bt_gatt_disconnected+0x88>
    8b5c:	681d      	ldr	r5, [r3, #0]
    8b5e:	b105      	cbz	r5, 8b62 <bt_gatt_disconnected+0x2e>
    8b60:	3d14      	subs	r5, #20
{
    8b62:	f04f 0b00 	mov.w	fp, #0
			params->value = 0U;
    8b66:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    8b68:	f104 0888 	add.w	r8, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    8b6c:	f106 0901 	add.w	r9, r6, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    8b70:	4641      	mov	r1, r8
    8b72:	7a20      	ldrb	r0, [r4, #8]
    8b74:	f004 fe61 	bl	d83a <bt_addr_le_is_bonded>
    8b78:	b988      	cbnz	r0, 8b9e <bt_gatt_disconnected+0x6a>
			gatt_sub_remove(conn, sub, prev, params);
    8b7a:	463b      	mov	r3, r7
    8b7c:	465a      	mov	r2, fp
    8b7e:	4631      	mov	r1, r6
    8b80:	4620      	mov	r0, r4
			params->value = 0U;
    8b82:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
    8b86:	f005 fd65 	bl	e654 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    8b8a:	b1bd      	cbz	r5, 8bbc <bt_gatt_disconnected+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8b8c:	f115 0114 	adds.w	r1, r5, #20
    8b90:	d002      	beq.n	8b98 <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8b92:	6969      	ldr	r1, [r5, #20]
    8b94:	b101      	cbz	r1, 8b98 <bt_gatt_disconnected+0x64>
    8b96:	3914      	subs	r1, #20
{
    8b98:	462f      	mov	r7, r5
    8b9a:	460d      	mov	r5, r1
    8b9c:	e7e8      	b.n	8b70 <bt_gatt_disconnected+0x3c>
    8b9e:	f107 0310 	add.w	r3, r7, #16
    8ba2:	e8d3 3faf 	lda	r3, [r3]
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    8ba6:	07db      	lsls	r3, r3, #31
    8ba8:	d4e7      	bmi.n	8b7a <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    8baa:	7873      	ldrb	r3, [r6, #1]
    8bac:	b11b      	cbz	r3, 8bb6 <bt_gatt_disconnected+0x82>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    8bae:	4641      	mov	r1, r8
    8bb0:	4648      	mov	r0, r9
    8bb2:	f005 fc69 	bl	e488 <bt_addr_le_copy>
			prev = &params->node;
    8bb6:	f107 0b14 	add.w	fp, r7, #20
    8bba:	e7e6      	b.n	8b8a <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
    8bbc:	4620      	mov	r0, r4
    8bbe:	f7ff f91d 	bl	7dfc <find_cf_cfg>
	if (!cfg) {
    8bc2:	4605      	mov	r5, r0
    8bc4:	b1c0      	cbz	r0, 8bf8 <bt_gatt_disconnected+0xc4>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8bc6:	f104 0688 	add.w	r6, r4, #136	; 0x88
    8bca:	4631      	mov	r1, r6
    8bcc:	7a20      	ldrb	r0, [r4, #8]
    8bce:	f004 fe34 	bl	d83a <bt_addr_le_is_bonded>
    8bd2:	b920      	cbnz	r0, 8bde <bt_gatt_disconnected+0xaa>
		clear_cf_cfg(cfg);
    8bd4:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    8bd6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    8bda:	f005 bc64 	b.w	e4a6 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8bde:	1c68      	adds	r0, r5, #1
    8be0:	4631      	mov	r1, r6
    8be2:	f005 fc51 	bl	e488 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8be6:	350c      	adds	r5, #12
    8be8:	e8d5 3fef 	ldaex	r3, [r5]
    8bec:	f023 0302 	bic.w	r3, r3, #2
    8bf0:	e8c5 3fe2 	stlex	r2, r3, [r5]
    8bf4:	2a00      	cmp	r2, #0
    8bf6:	d1f7      	bne.n	8be8 <bt_gatt_disconnected+0xb4>
}
    8bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	000083b5 	.word	0x000083b5

00008c00 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    8c00:	4a0b      	ldr	r2, [pc, #44]	; (8c30 <bt_smp_accept+0x30>)
{
    8c02:	b508      	push	{r3, lr}
    8c04:	4603      	mov	r3, r0
		if (smp->chan.conn) {
    8c06:	6810      	ldr	r0, [r2, #0]
    8c08:	b918      	cbnz	r0, 8c12 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    8c0a:	4b0a      	ldr	r3, [pc, #40]	; (8c34 <bt_smp_accept+0x34>)
    8c0c:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
    8c0e:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    8c10:	bd08      	pop	{r3, pc}
    8c12:	4909      	ldr	r1, [pc, #36]	; (8c38 <bt_smp_accept+0x38>)
    8c14:	4a09      	ldr	r2, [pc, #36]	; (8c3c <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    8c16:	480a      	ldr	r0, [pc, #40]	; (8c40 <bt_smp_accept+0x40>)
    8c18:	1a52      	subs	r2, r2, r1
    8c1a:	08d2      	lsrs	r2, r2, #3
    8c1c:	0192      	lsls	r2, r2, #6
    8c1e:	4619      	mov	r1, r3
    8c20:	f042 0201 	orr.w	r2, r2, #1
    8c24:	f003 fc6c 	bl	c500 <log_1>
	return -ENOMEM;
    8c28:	f06f 000b 	mvn.w	r0, #11
    8c2c:	e7f0      	b.n	8c10 <bt_smp_accept+0x10>
    8c2e:	bf00      	nop
    8c30:	20000c70 	.word	0x20000c70
    8c34:	00010a8c 	.word	0x00010a8c
    8c38:	000102f8 	.word	0x000102f8
    8c3c:	00010340 	.word	0x00010340
    8c40:	000129ae 	.word	0x000129ae

00008c44 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    8c44:	2228      	movs	r2, #40	; 0x28
    8c46:	4b02      	ldr	r3, [pc, #8]	; (8c50 <net_buf_pool_get+0xc>)
    8c48:	fb02 3000 	mla	r0, r2, r0, r3
    8c4c:	4770      	bx	lr
    8c4e:	bf00      	nop
    8c50:	2000057c 	.word	0x2000057c

00008c54 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
    8c54:	2128      	movs	r1, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    8c56:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
    8c58:	4a04      	ldr	r2, [pc, #16]	; (8c6c <net_buf_id+0x18>)
    8c5a:	fb01 2303 	mla	r3, r1, r3, r2
    8c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c60:	1ac0      	subs	r0, r0, r3
}
    8c62:	4b03      	ldr	r3, [pc, #12]	; (8c70 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    8c64:	10c0      	asrs	r0, r0, #3
}
    8c66:	4358      	muls	r0, r3
    8c68:	4770      	bx	lr
    8c6a:	bf00      	nop
    8c6c:	2000057c 	.word	0x2000057c
    8c70:	aaaaaaab 	.word	0xaaaaaaab

00008c74 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    8c74:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    8c76:	2428      	movs	r4, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    8c78:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    8c7a:	4a09      	ldr	r2, [pc, #36]	; (8ca0 <fixed_data_alloc+0x2c>)
    8c7c:	fb04 2303 	mla	r3, r4, r3, r2
    8c80:	6a1b      	ldr	r3, [r3, #32]

	*size = MIN(fixed->data_size, *size);
    8c82:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    8c84:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    8c86:	6823      	ldr	r3, [r4, #0]
    8c88:	429a      	cmp	r2, r3
    8c8a:	bf94      	ite	ls
    8c8c:	600a      	strls	r2, [r1, #0]
    8c8e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    8c90:	f7ff ffe0 	bl	8c54 <net_buf_id>
    8c94:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    8c98:	fb02 3000 	mla	r0, r2, r0, r3
    8c9c:	bd10      	pop	{r4, pc}
    8c9e:	bf00      	nop
    8ca0:	2000057c 	.word	0x2000057c

00008ca4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    8ca4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    8ca8:	4605      	mov	r5, r0
    8caa:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
    8cac:	4610      	mov	r0, r2
    8cae:	4619      	mov	r1, r3
{
    8cb0:	4616      	mov	r6, r2
    8cb2:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
    8cb4:	f006 ffcb 	bl	fc4e <z_timeout_end_calc>
    8cb8:	4680      	mov	r8, r0
    8cba:	4689      	mov	r9, r1
	__asm__ volatile(
    8cbc:	f04f 0320 	mov.w	r3, #32
    8cc0:	f3ef 8a11 	mrs	sl, BASEPRI
    8cc4:	f383 8811 	msr	BASEPRI, r3
    8cc8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    8ccc:	8b6b      	ldrh	r3, [r5, #26]
    8cce:	2b00      	cmp	r3, #0
    8cd0:	d054      	beq.n	8d7c <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    8cd2:	8b2a      	ldrh	r2, [r5, #24]
    8cd4:	429a      	cmp	r2, r3
    8cd6:	d93d      	bls.n	8d54 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
    8cd8:	2200      	movs	r2, #0
    8cda:	2300      	movs	r3, #0
    8cdc:	4628      	mov	r0, r5
    8cde:	f001 fe05 	bl	a8ec <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    8ce2:	4604      	mov	r4, r0
    8ce4:	2800      	cmp	r0, #0
    8ce6:	d035      	beq.n	8d54 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
    8ce8:	f38a 8811 	msr	BASEPRI, sl
    8cec:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    8cf0:	9b01      	ldr	r3, [sp, #4]
    8cf2:	2b00      	cmp	r3, #0
    8cf4:	d052      	beq.n	8d9c <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    8cf6:	ea56 0307 	orrs.w	r3, r6, r7
    8cfa:	d010      	beq.n	8d1e <net_buf_alloc_len+0x7a>
    8cfc:	1c7b      	adds	r3, r7, #1
    8cfe:	bf08      	it	eq
    8d00:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    8d04:	d00b      	beq.n	8d1e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
    8d06:	f002 fccd 	bl	b6a4 <z_tick_get>
    8d0a:	ebb8 0600 	subs.w	r6, r8, r0
    8d0e:	eb69 0701 	sbc.w	r7, r9, r1
    8d12:	2e00      	cmp	r6, #0
    8d14:	f177 0300 	sbcs.w	r3, r7, #0
    8d18:	bfbc      	itt	lt
    8d1a:	2600      	movlt	r6, #0
    8d1c:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
    8d1e:	2228      	movs	r2, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    8d20:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    8d22:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8db4 <net_buf_alloc_len+0x110>
    8d26:	4620      	mov	r0, r4
    8d28:	fb02 8303 	mla	r3, r2, r3, r8
    8d2c:	6a1b      	ldr	r3, [r3, #32]
    8d2e:	4632      	mov	r2, r6
    8d30:	681b      	ldr	r3, [r3, #0]
    8d32:	a901      	add	r1, sp, #4
    8d34:	681d      	ldr	r5, [r3, #0]
    8d36:	463b      	mov	r3, r7
    8d38:	47a8      	blx	r5
    8d3a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    8d3c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    8d3e:	bb70      	cbnz	r0, 8d9e <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
    8d40:	79a0      	ldrb	r0, [r4, #6]
    8d42:	4621      	mov	r1, r4
    8d44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8d48:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
    8d4c:	f006 fd6b 	bl	f826 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    8d50:	462c      	mov	r4, r5
}
    8d52:	e01f      	b.n	8d94 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
    8d54:	8b68      	ldrh	r0, [r5, #26]
    8d56:	1e43      	subs	r3, r0, #1
    8d58:	836b      	strh	r3, [r5, #26]
    8d5a:	f38a 8811 	msr	BASEPRI, sl
    8d5e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    8d62:	2318      	movs	r3, #24
    8d64:	8b2c      	ldrh	r4, [r5, #24]
    8d66:	1a24      	subs	r4, r4, r0
    8d68:	6a68      	ldr	r0, [r5, #36]	; 0x24
    8d6a:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    8d6e:	4811      	ldr	r0, [pc, #68]	; (8db4 <net_buf_alloc_len+0x110>)
    8d70:	4b11      	ldr	r3, [pc, #68]	; (8db8 <net_buf_alloc_len+0x114>)
    8d72:	1a2d      	subs	r5, r5, r0
    8d74:	10ed      	asrs	r5, r5, #3
    8d76:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    8d78:	71a5      	strb	r5, [r4, #6]
		goto success;
    8d7a:	e7b9      	b.n	8cf0 <net_buf_alloc_len+0x4c>
    8d7c:	f38a 8811 	msr	BASEPRI, sl
    8d80:	f3bf 8f6f 	isb	sy
    8d84:	4632      	mov	r2, r6
    8d86:	463b      	mov	r3, r7
    8d88:	4628      	mov	r0, r5
    8d8a:	f001 fdaf 	bl	a8ec <z_impl_k_queue_get>
	if (!buf) {
    8d8e:	4604      	mov	r4, r0
    8d90:	2800      	cmp	r0, #0
    8d92:	d1ad      	bne.n	8cf0 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    8d94:	4620      	mov	r0, r4
    8d96:	b002      	add	sp, #8
    8d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
    8d9c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    8d9e:	2300      	movs	r3, #0
	buf->ref   = 1U;
    8da0:	2201      	movs	r2, #1
	buf->frags = NULL;
    8da2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    8da4:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    8da6:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    8da8:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    8daa:	6923      	ldr	r3, [r4, #16]
    8dac:	81e2      	strh	r2, [r4, #14]
    8dae:	60a3      	str	r3, [r4, #8]
	return buf;
    8db0:	e7f0      	b.n	8d94 <net_buf_alloc_len+0xf0>
    8db2:	bf00      	nop
    8db4:	2000057c 	.word	0x2000057c
    8db8:	cccccccd 	.word	0xcccccccd

00008dbc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    8dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8dc0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    8dc2:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    8dc4:	2728      	movs	r7, #40	; 0x28
    8dc6:	4d16      	ldr	r5, [pc, #88]	; (8e20 <net_buf_unref+0x64>)
	while (buf) {
    8dc8:	b90c      	cbnz	r4, 8dce <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    8dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    8dce:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    8dd0:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
    8dd4:	3b01      	subs	r3, #1
    8dd6:	b2db      	uxtb	r3, r3
    8dd8:	7123      	strb	r3, [r4, #4]
    8dda:	2b00      	cmp	r3, #0
    8ddc:	d1f5      	bne.n	8dca <net_buf_unref+0xe>
		if (buf->__buf) {
    8dde:	6921      	ldr	r1, [r4, #16]
    8de0:	b159      	cbz	r1, 8dfa <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    8de2:	7963      	ldrb	r3, [r4, #5]
    8de4:	079b      	lsls	r3, r3, #30
    8de6:	d407      	bmi.n	8df8 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
    8de8:	79a3      	ldrb	r3, [r4, #6]
    8dea:	4620      	mov	r0, r4
    8dec:	fb07 5303 	mla	r3, r7, r3, r5
    8df0:	6a1b      	ldr	r3, [r3, #32]
    8df2:	681b      	ldr	r3, [r3, #0]
    8df4:	689b      	ldr	r3, [r3, #8]
    8df6:	4798      	blx	r3
			buf->__buf = NULL;
    8df8:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    8dfa:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    8dfc:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    8dfe:	fb07 5300 	mla	r3, r7, r0, r5
    8e02:	69db      	ldr	r3, [r3, #28]
		buf->frags = NULL;
    8e04:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    8e06:	b11b      	cbz	r3, 8e10 <net_buf_unref+0x54>
			pool->destroy(buf);
    8e08:	4620      	mov	r0, r4
    8e0a:	4798      	blx	r3
{
    8e0c:	4644      	mov	r4, r8
    8e0e:	e7db      	b.n	8dc8 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    8e10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8e14:	4621      	mov	r1, r4
    8e16:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    8e1a:	f006 fd04 	bl	f826 <k_queue_prepend>
}
    8e1e:	e7f5      	b.n	8e0c <net_buf_unref+0x50>
    8e20:	2000057c 	.word	0x2000057c

00008e24 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    8e24:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    8e26:	4b09      	ldr	r3, [pc, #36]	; (8e4c <gpio_nrfx_init+0x28>)
    8e28:	781a      	ldrb	r2, [r3, #0]
    8e2a:	b96a      	cbnz	r2, 8e48 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    8e2c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    8e2e:	200d      	movs	r0, #13
		gpio_initialized = true;
    8e30:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    8e32:	2105      	movs	r1, #5
    8e34:	f7fa f86e 	bl	2f14 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    8e38:	200d      	movs	r0, #13
    8e3a:	f7fa f84d 	bl	2ed8 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    8e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8e42:	4b03      	ldr	r3, [pc, #12]	; (8e50 <gpio_nrfx_init+0x2c>)
    8e44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    8e48:	2000      	movs	r0, #0
    8e4a:	bd08      	pop	{r3, pc}
    8e4c:	20002a14 	.word	0x20002a14
    8e50:	5000d000 	.word	0x5000d000

00008e54 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8e54:	4b2a      	ldr	r3, [pc, #168]	; (8f00 <gpio_nrfx_config+0xac>)
{
    8e56:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8e58:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8e5a:	482a      	ldr	r0, [pc, #168]	; (8f04 <gpio_nrfx_config+0xb0>)
    8e5c:	4013      	ands	r3, r2
    8e5e:	4283      	cmp	r3, r0
    8e60:	d03f      	beq.n	8ee2 <gpio_nrfx_config+0x8e>
    8e62:	d80d      	bhi.n	8e80 <gpio_nrfx_config+0x2c>
    8e64:	2b06      	cmp	r3, #6
    8e66:	d015      	beq.n	8e94 <gpio_nrfx_config+0x40>
    8e68:	d805      	bhi.n	8e76 <gpio_nrfx_config+0x22>
    8e6a:	b19b      	cbz	r3, 8e94 <gpio_nrfx_config+0x40>
    8e6c:	2b02      	cmp	r3, #2
    8e6e:	d03a      	beq.n	8ee6 <gpio_nrfx_config+0x92>
    8e70:	f06f 0015 	mvn.w	r0, #21
    8e74:	e034      	b.n	8ee0 <gpio_nrfx_config+0x8c>
    8e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8e7a:	d1f9      	bne.n	8e70 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    8e7c:	2301      	movs	r3, #1
    8e7e:	e009      	b.n	8e94 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8e80:	4821      	ldr	r0, [pc, #132]	; (8f08 <gpio_nrfx_config+0xb4>)
    8e82:	4283      	cmp	r3, r0
    8e84:	d031      	beq.n	8eea <gpio_nrfx_config+0x96>
    8e86:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    8e8a:	d030      	beq.n	8eee <gpio_nrfx_config+0x9a>
    8e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    8e90:	d1ee      	bne.n	8e70 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    8e92:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    8e94:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    8e96:	bf4c      	ite	mi
    8e98:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    8e9a:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    8e9e:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    8ea2:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    8ea4:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    8ea8:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    8eac:	d506      	bpl.n	8ebc <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    8eae:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8eb2:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    8eb4:	d01d      	beq.n	8ef2 <gpio_nrfx_config+0x9e>
			nrf_gpio_port_out_set(reg, BIT(pin));
    8eb6:	2201      	movs	r2, #1
    8eb8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    8eba:	60ba      	str	r2, [r7, #8]
    return pin_number >> 5;
    8ebc:	7a27      	ldrb	r7, [r4, #8]
        case 1: return NRF_P1;
    8ebe:	4a13      	ldr	r2, [pc, #76]	; (8f0c <gpio_nrfx_config+0xb8>)
    8ec0:	4c13      	ldr	r4, [pc, #76]	; (8f10 <gpio_nrfx_config+0xbc>)
    *p_pin = pin_number & 0x1F;
    8ec2:	f001 011f 	and.w	r1, r1, #31
        case 1: return NRF_P1;
    8ec6:	2f01      	cmp	r7, #1
    8ec8:	bf08      	it	eq
    8eca:	4614      	moveq	r4, r2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    8ecc:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
	return 0;
    8ed0:	2000      	movs	r0, #0
    8ed2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    8ed6:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    8eda:	3180      	adds	r1, #128	; 0x80
    8edc:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
}
    8ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    8ee2:	2307      	movs	r3, #7
    8ee4:	e7d6      	b.n	8e94 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    8ee6:	2304      	movs	r3, #4
    8ee8:	e7d4      	b.n	8e94 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    8eea:	2305      	movs	r3, #5
    8eec:	e7d2      	b.n	8e94 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    8eee:	2303      	movs	r3, #3
    8ef0:	e7d0      	b.n	8e94 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    8ef2:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    8ef4:	bf42      	ittt	mi
    8ef6:	2201      	movmi	r2, #1
    8ef8:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    8efa:	60fa      	strmi	r2, [r7, #12]
}
    8efc:	e7de      	b.n	8ebc <gpio_nrfx_config+0x68>
    8efe:	bf00      	nop
    8f00:	00f00006 	.word	0x00f00006
    8f04:	00100006 	.word	0x00100006
    8f08:	00400002 	.word	0x00400002
    8f0c:	50842800 	.word	0x50842800
    8f10:	50842500 	.word	0x50842500

00008f14 <nrf_gpio_cfg_sense_set>:
{
    8f14:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
    8f16:	4b09      	ldr	r3, [pc, #36]	; (8f3c <nrf_gpio_cfg_sense_set+0x28>)
    8f18:	4c09      	ldr	r4, [pc, #36]	; (8f40 <nrf_gpio_cfg_sense_set+0x2c>)
    *p_pin = pin_number & 0x1F;
    8f1a:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    8f1e:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    8f20:	2801      	cmp	r0, #1
    8f22:	bf08      	it	eq
    8f24:	4623      	moveq	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    8f26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8f2a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    8f2e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    8f32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8f36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    8f3a:	bd10      	pop	{r4, pc}
    8f3c:	50842500 	.word	0x50842500
    8f40:	50842800 	.word	0x50842800

00008f44 <gpio_nrfx_pin_interrupt_configure>:
{
    8f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8f46:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    8f48:	6841      	ldr	r1, [r0, #4]
    8f4a:	f006 051f 	and.w	r5, r6, #31
    8f4e:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    8f50:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    8f54:	68c7      	ldr	r7, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    8f56:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    8f5a:	d111      	bne.n	8f80 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    8f5c:	4c5f      	ldr	r4, [pc, #380]	; (90dc <gpio_nrfx_pin_interrupt_configure+0x198>)
    8f5e:	f8df c188 	ldr.w	ip, [pc, #392]	; 90e8 <gpio_nrfx_pin_interrupt_configure+0x1a4>
    return pin_number >> 5;
    8f62:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    8f64:	2801      	cmp	r0, #1
    8f66:	bf14      	ite	ne
    8f68:	4620      	movne	r0, r4
    8f6a:	4660      	moveq	r0, ip
    *p_pin = pin_number & 0x1F;
    8f6c:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    8f70:	3180      	adds	r1, #128	; 0x80
    8f72:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    8f76:	07c8      	lsls	r0, r1, #31
    8f78:	d507      	bpl.n	8f8a <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
    8f7a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    8f7e:	e093      	b.n	90a8 <gpio_nrfx_pin_interrupt_configure+0x164>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    8f80:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    8f84:	68f9      	ldr	r1, [r7, #12]
    8f86:	f000 8091 	beq.w	90ac <gpio_nrfx_pin_interrupt_configure+0x168>
    8f8a:	2101      	movs	r1, #1
    8f8c:	68f8      	ldr	r0, [r7, #12]
    8f8e:	40b1      	lsls	r1, r6
    8f90:	4301      	orrs	r1, r0
    8f92:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    8f94:	2101      	movs	r1, #1
    8f96:	6978      	ldr	r0, [r7, #20]
    8f98:	40b1      	lsls	r1, r6
    8f9a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    8f9e:	bf0c      	ite	eq
    8fa0:	4308      	orreq	r0, r1
    8fa2:	4388      	bicne	r0, r1
    8fa4:	6178      	str	r0, [r7, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    8fa6:	2000      	movs	r0, #0
    8fa8:	69ba      	ldr	r2, [r7, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    8faa:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    8fae:	bf0c      	ite	eq
    8fb0:	430a      	orreq	r2, r1
    8fb2:	438a      	bicne	r2, r1
    8fb4:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    8fb6:	693a      	ldr	r2, [r7, #16]
    8fb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    8fbc:	bf0c      	ite	eq
    8fbe:	4311      	orreq	r1, r2
    8fc0:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    8fc4:	4a46      	ldr	r2, [pc, #280]	; (90e0 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    8fc6:	6139      	str	r1, [r7, #16]
    8fc8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    8fcc:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8fce:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    8fd2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    8fd6:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    8fda:	428d      	cmp	r5, r1
    8fdc:	d16b      	bne.n	90b6 <gpio_nrfx_pin_interrupt_configure+0x172>
		    && (intenset & BIT(i))) {
    8fde:	fa23 f100 	lsr.w	r1, r3, r0
    8fe2:	07c9      	lsls	r1, r1, #31
    8fe4:	d567      	bpl.n	90b6 <gpio_nrfx_pin_interrupt_configure+0x172>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    8fe6:	0083      	lsls	r3, r0, #2
    8fe8:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    8fec:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    8ff0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    8ff4:	f021 0101 	bic.w	r1, r1, #1
    8ff8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    8ffc:	2301      	movs	r3, #1
    8ffe:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    9000:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    9004:	b2c0      	uxtb	r0, r0
    9006:	f000 fd4d 	bl	9aa4 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    900a:	4628      	mov	r0, r5
    900c:	2100      	movs	r1, #0
    900e:	f7ff ff81 	bl	8f14 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    9012:	68f8      	ldr	r0, [r7, #12]
    9014:	40f0      	lsrs	r0, r6
    9016:	f010 0001 	ands.w	r0, r0, #1
    901a:	d045      	beq.n	90a8 <gpio_nrfx_pin_interrupt_configure+0x164>
		if (data->trig_edge & BIT(pin)) {
    901c:	6978      	ldr	r0, [r7, #20]
    901e:	40f0      	lsrs	r0, r6
    9020:	f010 0401 	ands.w	r4, r0, #1
    9024:	d04e      	beq.n	90c4 <gpio_nrfx_pin_interrupt_configure+0x180>
			if (data->double_edge & BIT(pin)) {
    9026:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    9028:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
    902c:	40f3      	lsrs	r3, r6
    902e:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    9030:	bf57      	itett	pl
    9032:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    9034:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    9036:	fa21 f606 	lsrpl.w	r6, r1, r6
    903a:	f006 0601 	andpl.w	r6, r6, #1
    903e:	bf5c      	itt	pl
    9040:	f1c6 0602 	rsbpl	r6, r6, #2
    9044:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    9046:	f000 fd4f 	bl	9ae8 <nrfx_gpiote_channel_alloc>
    904a:	4b26      	ldr	r3, [pc, #152]	; (90e4 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    904c:	4298      	cmp	r0, r3
    904e:	d136      	bne.n	90be <gpio_nrfx_pin_interrupt_configure+0x17a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9050:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    9052:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9056:	022d      	lsls	r5, r5, #8
    9058:	008b      	lsls	r3, r1, #2
    905a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    905e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    9062:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9066:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    906a:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    906e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    9072:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9076:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    907a:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    907c:	008a      	lsls	r2, r1, #2
    907e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    9082:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9086:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    908a:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    908e:	6010      	str	r0, [r2, #0]
    9090:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    9092:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    9096:	f042 0201 	orr.w	r2, r2, #1
    909a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    909e:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    90a0:	4a0f      	ldr	r2, [pc, #60]	; (90e0 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    90a2:	408b      	lsls	r3, r1
    90a4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    90a8:	b003      	add	sp, #12
    90aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    90ac:	2001      	movs	r0, #1
    90ae:	40b0      	lsls	r0, r6
    90b0:	ea21 0100 	bic.w	r1, r1, r0
    90b4:	e76d      	b.n	8f92 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    90b6:	3001      	adds	r0, #1
    90b8:	2808      	cmp	r0, #8
    90ba:	d188      	bne.n	8fce <gpio_nrfx_pin_interrupt_configure+0x8a>
    90bc:	e7a5      	b.n	900a <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
    90be:	f06f 0012 	mvn.w	r0, #18
    90c2:	e7f1      	b.n	90a8 <gpio_nrfx_pin_interrupt_configure+0x164>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    90c4:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    90c6:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    90c8:	40f1      	lsrs	r1, r6
    90ca:	f001 0101 	and.w	r1, r1, #1
    90ce:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    90d2:	b2c9      	uxtb	r1, r1
    90d4:	f7ff ff1e 	bl	8f14 <nrf_gpio_cfg_sense_set>
	int res = 0;
    90d8:	4620      	mov	r0, r4
    90da:	e7e5      	b.n	90a8 <gpio_nrfx_pin_interrupt_configure+0x164>
    90dc:	50842500 	.word	0x50842500
    90e0:	5000d000 	.word	0x5000d000
    90e4:	0bad0000 	.word	0x0bad0000
    90e8:	50842800 	.word	0x50842800

000090ec <gpiote_event_handler>:
{
    90ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    90ee:	2600      	movs	r6, #0
    90f0:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    90f4:	4d26      	ldr	r5, [pc, #152]	; (9190 <gpiote_event_handler+0xa4>)
    90f6:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
    90f8:	b14c      	cbz	r4, 910e <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
    90fa:	4826      	ldr	r0, [pc, #152]	; (9194 <gpiote_event_handler+0xa8>)
    90fc:	f005 fdaa 	bl	ec54 <check_level_trigger_pins>
		fired_triggers[0] =
    9100:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
    9102:	4825      	ldr	r0, [pc, #148]	; (9198 <gpiote_event_handler+0xac>)
    9104:	f005 fda6 	bl	ec54 <check_level_trigger_pins>
		fired_triggers[1] =
    9108:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    910a:	602e      	str	r6, [r5, #0]
    910c:	682b      	ldr	r3, [r5, #0]
{
    910e:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    9110:	2601      	movs	r6, #1
    9112:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    9114:	4d21      	ldr	r5, [pc, #132]	; (919c <gpiote_event_handler+0xb0>)
    9116:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    911a:	fa06 f102 	lsl.w	r1, r6, r2
    911e:	4219      	tst	r1, r3
    9120:	d01b      	beq.n	915a <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9122:	0091      	lsls	r1, r2, #2
    9124:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    9128:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    912c:	680b      	ldr	r3, [r1, #0]
    912e:	b1a3      	cbz	r3, 915a <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    9130:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    9134:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    9138:	af02      	add	r7, sp, #8
    913a:	f3c3 3040 	ubfx	r0, r3, #13, #1
    913e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    9142:	f850 7c08 	ldr.w	r7, [r0, #-8]
    9146:	f3c3 2304 	ubfx	r3, r3, #8, #5
    914a:	fa06 f303 	lsl.w	r3, r6, r3
    914e:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9150:	f8c1 c000 	str.w	ip, [r1]
    9154:	f840 3c08 	str.w	r3, [r0, #-8]
    9158:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    915a:	3201      	adds	r2, #1
    915c:	2a08      	cmp	r2, #8
    915e:	d1da      	bne.n	9116 <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
    9160:	9a00      	ldr	r2, [sp, #0]
    9162:	b11a      	cbz	r2, 916c <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
    9164:	490b      	ldr	r1, [pc, #44]	; (9194 <gpiote_event_handler+0xa8>)
    9166:	480e      	ldr	r0, [pc, #56]	; (91a0 <gpiote_event_handler+0xb4>)
    9168:	f005 fd11 	bl	eb8e <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    916c:	9a01      	ldr	r2, [sp, #4]
    916e:	b11a      	cbz	r2, 9178 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
    9170:	4909      	ldr	r1, [pc, #36]	; (9198 <gpiote_event_handler+0xac>)
    9172:	480c      	ldr	r0, [pc, #48]	; (91a4 <gpiote_event_handler+0xb8>)
    9174:	f005 fd0b 	bl	eb8e <gpio_fire_callbacks>
	if (port_event) {
    9178:	b144      	cbz	r4, 918c <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    917a:	4806      	ldr	r0, [pc, #24]	; (9194 <gpiote_event_handler+0xa8>)
    917c:	f005 fd92 	bl	eca4 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    9180:	4805      	ldr	r0, [pc, #20]	; (9198 <gpiote_event_handler+0xac>)
}
    9182:	b003      	add	sp, #12
    9184:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    9188:	f005 bd8c 	b.w	eca4 <cfg_level_pins>
}
    918c:	b003      	add	sp, #12
    918e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9190:	5000d17c 	.word	0x5000d17c
    9194:	20000460 	.word	0x20000460
    9198:	20000470 	.word	0x20000470
    919c:	5000d000 	.word	0x5000d000
    91a0:	2000175c 	.word	0x2000175c
    91a4:	20001778 	.word	0x20001778

000091a8 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    91a8:	4b02      	ldr	r3, [pc, #8]	; (91b4 <vipm_nrf_1_register_callback+0xc>)
    91aa:	6059      	str	r1, [r3, #4]
    91ac:	645a      	str	r2, [r3, #68]	; 0x44
    91ae:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    91b2:	4770      	bx	lr
    91b4:	20001798 	.word	0x20001798

000091b8 <vipm_nrf_0_set_enabled>:
    91b8:	b508      	push	{r3, lr}
    91ba:	4906      	ldr	r1, [pc, #24]	; (91d4 <vipm_nrf_0_set_enabled+0x1c>)
    91bc:	4b06      	ldr	r3, [pc, #24]	; (91d8 <vipm_nrf_0_set_enabled+0x20>)
    91be:	4807      	ldr	r0, [pc, #28]	; (91dc <vipm_nrf_0_set_enabled+0x24>)
    91c0:	1ac9      	subs	r1, r1, r3
    91c2:	08c9      	lsrs	r1, r1, #3
    91c4:	0189      	lsls	r1, r1, #6
    91c6:	f041 0101 	orr.w	r1, r1, #1
    91ca:	f003 f98c 	bl	c4e6 <log_0>
    91ce:	f06f 0015 	mvn.w	r0, #21
    91d2:	bd08      	pop	{r3, pc}
    91d4:	00010360 	.word	0x00010360
    91d8:	000102f8 	.word	0x000102f8
    91dc:	000129e9 	.word	0x000129e9

000091e0 <vipm_nrf_0_register_callback>:
    91e0:	4904      	ldr	r1, [pc, #16]	; (91f4 <vipm_nrf_0_register_callback+0x14>)
    91e2:	4b05      	ldr	r3, [pc, #20]	; (91f8 <vipm_nrf_0_register_callback+0x18>)
    91e4:	4805      	ldr	r0, [pc, #20]	; (91fc <vipm_nrf_0_register_callback+0x1c>)
    91e6:	1ac9      	subs	r1, r1, r3
    91e8:	08c9      	lsrs	r1, r1, #3
    91ea:	0189      	lsls	r1, r1, #6
    91ec:	f041 0102 	orr.w	r1, r1, #2
    91f0:	f003 b979 	b.w	c4e6 <log_0>
    91f4:	00010360 	.word	0x00010360
    91f8:	000102f8 	.word	0x000102f8
    91fc:	00012a05 	.word	0x00012a05

00009200 <vipm_nrf_1_send>:
    9200:	b508      	push	{r3, lr}
    9202:	4906      	ldr	r1, [pc, #24]	; (921c <vipm_nrf_1_send+0x1c>)
    9204:	4b06      	ldr	r3, [pc, #24]	; (9220 <vipm_nrf_1_send+0x20>)
    9206:	4807      	ldr	r0, [pc, #28]	; (9224 <vipm_nrf_1_send+0x24>)
    9208:	1ac9      	subs	r1, r1, r3
    920a:	08c9      	lsrs	r1, r1, #3
    920c:	0189      	lsls	r1, r1, #6
    920e:	f041 0101 	orr.w	r1, r1, #1
    9212:	f003 f968 	bl	c4e6 <log_0>
    9216:	f06f 0015 	mvn.w	r0, #21
    921a:	bd08      	pop	{r3, pc}
    921c:	00010360 	.word	0x00010360
    9220:	000102f8 	.word	0x000102f8
    9224:	00012a37 	.word	0x00012a37

00009228 <vipm_nrf_init>:
{
    9228:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
    922a:	4d0b      	ldr	r5, [pc, #44]	; (9258 <vipm_nrf_init+0x30>)
    922c:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
    9230:	b97c      	cbnz	r4, 9252 <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
    9232:	4a0a      	ldr	r2, [pc, #40]	; (925c <vipm_nrf_init+0x34>)
    9234:	490a      	ldr	r1, [pc, #40]	; (9260 <vipm_nrf_init+0x38>)
    9236:	4620      	mov	r0, r4
    9238:	f000 fc8e 	bl	9b58 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
    923c:	4622      	mov	r2, r4
    923e:	2101      	movs	r1, #1
    9240:	202a      	movs	r0, #42	; 0x2a
    9242:	f7f9 fe67 	bl	2f14 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
    9246:	4807      	ldr	r0, [pc, #28]	; (9264 <vipm_nrf_init+0x3c>)
    9248:	f000 fc9e 	bl	9b88 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
    924c:	2301      	movs	r3, #1
    924e:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
    9252:	2000      	movs	r0, #0
    9254:	bd38      	pop	{r3, r4, r5, pc}
    9256:	bf00      	nop
    9258:	20001798 	.word	0x20001798
    925c:	20001790 	.word	0x20001790
    9260:	00009269 	.word	0x00009269
    9264:	00010af4 	.word	0x00010af4

00009268 <vipm_dispatcher>:
{
    9268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    926c:	4605      	mov	r5, r0
		event_mask &= ~BIT(event_idx);
    926e:	f04f 0801 	mov.w	r8, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    9272:	4e0e      	ldr	r6, [pc, #56]	; (92ac <vipm_dispatcher+0x44>)
	while (event_mask) {
    9274:	b90d      	cbnz	r5, 927a <vipm_dispatcher+0x12>
}
    9276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    927a:	fa95 f3a5 	rbit	r3, r5
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
    927e:	fab3 f383 	clz	r3, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    9282:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
		event_mask &= ~BIT(event_idx);
    9286:	fa08 f203 	lsl.w	r2, r8, r3
    928a:	ea25 0502 	bic.w	r5, r5, r2
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    928e:	2f00      	cmp	r7, #0
    9290:	d0f0      	beq.n	9274 <vipm_dispatcher+0xc>
			nrfx_vipm_data.callback[event_idx]
    9292:	f103 0420 	add.w	r4, r3, #32
    9296:	f103 0110 	add.w	r1, r3, #16
    929a:	2300      	movs	r3, #0
    929c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    92a0:	461a      	mov	r2, r3
    92a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    92a6:	47b8      	blx	r7
    92a8:	e7e4      	b.n	9274 <vipm_dispatcher+0xc>
    92aa:	bf00      	nop
    92ac:	20001798 	.word	0x20001798

000092b0 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    92b0:	2a10      	cmp	r2, #16
    92b2:	b508      	push	{r3, lr}
    92b4:	d81c      	bhi.n	92f0 <vipm_nrf_0_send+0x40>
    92b6:	b14a      	cbz	r2, 92cc <vipm_nrf_0_send+0x1c>
    92b8:	490f      	ldr	r1, [pc, #60]	; (92f8 <vipm_nrf_0_send+0x48>)
    92ba:	4b10      	ldr	r3, [pc, #64]	; (92fc <vipm_nrf_0_send+0x4c>)
    92bc:	4810      	ldr	r0, [pc, #64]	; (9300 <vipm_nrf_0_send+0x50>)
    92be:	1ac9      	subs	r1, r1, r3
    92c0:	08c9      	lsrs	r1, r1, #3
    92c2:	0189      	lsls	r1, r1, #6
    92c4:	f041 0102 	orr.w	r1, r1, #2
    92c8:	f003 f90d 	bl	c4e6 <log_0>
    92cc:	9b02      	ldr	r3, [sp, #8]
    92ce:	2b00      	cmp	r3, #0
    92d0:	dd09      	ble.n	92e6 <vipm_nrf_0_send+0x36>
    92d2:	4909      	ldr	r1, [pc, #36]	; (92f8 <vipm_nrf_0_send+0x48>)
    92d4:	4b09      	ldr	r3, [pc, #36]	; (92fc <vipm_nrf_0_send+0x4c>)
    92d6:	480b      	ldr	r0, [pc, #44]	; (9304 <vipm_nrf_0_send+0x54>)
    92d8:	1ac9      	subs	r1, r1, r3
    92da:	08c9      	lsrs	r1, r1, #3
    92dc:	0189      	lsls	r1, r1, #6
    92de:	f041 0102 	orr.w	r1, r1, #2
    92e2:	f003 f900 	bl	c4e6 <log_0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    92e6:	2201      	movs	r2, #1
    92e8:	2000      	movs	r0, #0
    92ea:	4b07      	ldr	r3, [pc, #28]	; (9308 <vipm_nrf_0_send+0x58>)
    92ec:	601a      	str	r2, [r3, #0]
    92ee:	bd08      	pop	{r3, pc}
    92f0:	f06f 0015 	mvn.w	r0, #21
    92f4:	e7fb      	b.n	92ee <vipm_nrf_0_send+0x3e>
    92f6:	bf00      	nop
    92f8:	00010360 	.word	0x00010360
    92fc:	000102f8 	.word	0x000102f8
    9300:	00012a53 	.word	0x00012a53
    9304:	00012a87 	.word	0x00012a87
    9308:	5002a000 	.word	0x5002a000

0000930c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    930c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    930e:	794b      	ldrb	r3, [r1, #5]
    9310:	2b01      	cmp	r3, #1
    9312:	d02b      	beq.n	936c <uarte_nrfx_configure+0x60>
    9314:	2b03      	cmp	r3, #3
    9316:	d126      	bne.n	9366 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    9318:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    931a:	798b      	ldrb	r3, [r1, #6]
    931c:	2b03      	cmp	r3, #3
    931e:	d122      	bne.n	9366 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    9320:	79cd      	ldrb	r5, [r1, #7]
    9322:	b125      	cbz	r5, 932e <uarte_nrfx_configure+0x22>
    9324:	2d01      	cmp	r5, #1
    9326:	d11e      	bne.n	9366 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    9328:	6843      	ldr	r3, [r0, #4]
    932a:	791b      	ldrb	r3, [r3, #4]
    932c:	b1db      	cbz	r3, 9366 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    932e:	790a      	ldrb	r2, [r1, #4]
    9330:	2a01      	cmp	r2, #1
    9332:	d01d      	beq.n	9370 <uarte_nrfx_configure+0x64>
    9334:	2a02      	cmp	r2, #2
    9336:	d01f      	beq.n	9378 <uarte_nrfx_configure+0x6c>
    9338:	b9aa      	cbnz	r2, 9366 <uarte_nrfx_configure+0x5a>
    933a:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    933c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    933e:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    9340:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    9344:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    9346:	d06e      	beq.n	9426 <uarte_nrfx_configure+0x11a>
    9348:	d833      	bhi.n	93b2 <uarte_nrfx_configure+0xa6>
    934a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    934e:	d06d      	beq.n	942c <uarte_nrfx_configure+0x120>
    9350:	d81c      	bhi.n	938c <uarte_nrfx_configure+0x80>
    9352:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    9356:	d06b      	beq.n	9430 <uarte_nrfx_configure+0x124>
    9358:	d810      	bhi.n	937c <uarte_nrfx_configure+0x70>
    935a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    935e:	d06a      	beq.n	9436 <uarte_nrfx_configure+0x12a>
    9360:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    9364:	d06a      	beq.n	943c <uarte_nrfx_configure+0x130>
    9366:	f06f 0022 	mvn.w	r0, #34	; 0x22
    936a:	e05b      	b.n	9424 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
    936c:	2700      	movs	r7, #0
    936e:	e7d4      	b.n	931a <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    9370:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    9374:	220e      	movs	r2, #14
    9376:	e7e1      	b.n	933c <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    9378:	2400      	movs	r4, #0
    937a:	e7fb      	b.n	9374 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    937c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    9380:	d05f      	beq.n	9442 <uarte_nrfx_configure+0x136>
    9382:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    9386:	d1ee      	bne.n	9366 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    9388:	4b38      	ldr	r3, [pc, #224]	; (946c <uarte_nrfx_configure+0x160>)
    938a:	e03e      	b.n	940a <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    938c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    9390:	d05a      	beq.n	9448 <uarte_nrfx_configure+0x13c>
    9392:	d807      	bhi.n	93a4 <uarte_nrfx_configure+0x98>
    9394:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    9398:	d058      	beq.n	944c <uarte_nrfx_configure+0x140>
    939a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    939e:	d1e2      	bne.n	9366 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    93a0:	4b33      	ldr	r3, [pc, #204]	; (9470 <uarte_nrfx_configure+0x164>)
    93a2:	e032      	b.n	940a <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    93a4:	f647 2c12 	movw	ip, #31250	; 0x7a12
    93a8:	4563      	cmp	r3, ip
    93aa:	d1dc      	bne.n	9366 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    93ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    93b0:	e02b      	b.n	940a <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    93b2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    93b6:	d04b      	beq.n	9450 <uarte_nrfx_configure+0x144>
    93b8:	d813      	bhi.n	93e2 <uarte_nrfx_configure+0xd6>
    93ba:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    93be:	d04a      	beq.n	9456 <uarte_nrfx_configure+0x14a>
    93c0:	d809      	bhi.n	93d6 <uarte_nrfx_configure+0xca>
    93c2:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    93c6:	4563      	cmp	r3, ip
    93c8:	d047      	beq.n	945a <uarte_nrfx_configure+0x14e>
    93ca:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    93ce:	d1ca      	bne.n	9366 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    93d0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    93d4:	e019      	b.n	940a <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    93d6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    93da:	d1c4      	bne.n	9366 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    93dc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    93e0:	e013      	b.n	940a <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    93e2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    93e6:	d03b      	beq.n	9460 <uarte_nrfx_configure+0x154>
    93e8:	d809      	bhi.n	93fe <uarte_nrfx_configure+0xf2>
    93ea:	f8df c098 	ldr.w	ip, [pc, #152]	; 9484 <uarte_nrfx_configure+0x178>
    93ee:	4563      	cmp	r3, ip
    93f0:	d039      	beq.n	9466 <uarte_nrfx_configure+0x15a>
    93f2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    93f6:	d1b6      	bne.n	9366 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    93f8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    93fc:	e005      	b.n	940a <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    93fe:	f8df c088 	ldr.w	ip, [pc, #136]	; 9488 <uarte_nrfx_configure+0x17c>
    9402:	4563      	cmp	r3, ip
    9404:	d1af      	bne.n	9366 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    9406:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    940a:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    940e:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    9410:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    9412:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    9414:	4322      	orrs	r2, r4
    9416:	3304      	adds	r3, #4
    9418:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    941a:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    941e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    9422:	2000      	movs	r0, #0
}
    9424:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    9426:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    942a:	e7ee      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    942c:	4b11      	ldr	r3, [pc, #68]	; (9474 <uarte_nrfx_configure+0x168>)
    942e:	e7ec      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    9430:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    9434:	e7e9      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    9436:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    943a:	e7e6      	b.n	940a <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    943c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    9440:	e7e3      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    9442:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    9446:	e7e0      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    9448:	4b0b      	ldr	r3, [pc, #44]	; (9478 <uarte_nrfx_configure+0x16c>)
    944a:	e7de      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    944c:	4b0b      	ldr	r3, [pc, #44]	; (947c <uarte_nrfx_configure+0x170>)
    944e:	e7dc      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    9450:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    9454:	e7d9      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    9456:	4b0a      	ldr	r3, [pc, #40]	; (9480 <uarte_nrfx_configure+0x174>)
    9458:	e7d7      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    945a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    945e:	e7d4      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    9460:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    9464:	e7d1      	b.n	940a <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    9466:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    946a:	e7ce      	b.n	940a <uarte_nrfx_configure+0xfe>
    946c:	0013b000 	.word	0x0013b000
    9470:	004ea000 	.word	0x004ea000
    9474:	00275000 	.word	0x00275000
    9478:	0075c000 	.word	0x0075c000
    947c:	003af000 	.word	0x003af000
    9480:	013a9000 	.word	0x013a9000
    9484:	0003d090 	.word	0x0003d090
    9488:	000f4240 	.word	0x000f4240

0000948c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    948c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9490:	4606      	mov	r6, r0
    9492:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9494:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9496:	f006 fb17 	bl	fac8 <k_is_in_isr>
    949a:	b9b8      	cbnz	r0, 94cc <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    949c:	4b28      	ldr	r3, [pc, #160]	; (9540 <uarte_nrfx_poll_out+0xb4>)
    949e:	781b      	ldrb	r3, [r3, #0]
    94a0:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    94a4:	6872      	ldr	r2, [r6, #4]
    94a6:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    94a8:	b193      	cbz	r3, 94d0 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    94aa:	f04f 0320 	mov.w	r3, #32
    94ae:	f3ef 8411 	mrs	r4, BASEPRI
    94b2:	f383 8811 	msr	BASEPRI, r3
    94b6:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    94ba:	4630      	mov	r0, r6
    94bc:	f005 fc5a 	bl	ed74 <is_tx_ready>
    94c0:	bb38      	cbnz	r0, 9512 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    94c2:	f384 8811 	msr	BASEPRI, r4
    94c6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    94ca:	e7ee      	b.n	94aa <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    94cc:	2301      	movs	r3, #1
    94ce:	e7e9      	b.n	94a4 <uarte_nrfx_poll_out+0x18>
    94d0:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    94d2:	4630      	mov	r0, r6
    94d4:	f005 fc4e 	bl	ed74 <is_tx_ready>
    94d8:	b970      	cbnz	r0, 94f8 <uarte_nrfx_poll_out+0x6c>
    94da:	2001      	movs	r0, #1
    94dc:	f005 fc76 	bl	edcc <nrfx_busy_wait>
    94e0:	3c01      	subs	r4, #1
    94e2:	d1f6      	bne.n	94d2 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    94e4:	2100      	movs	r1, #0
    94e6:	2021      	movs	r0, #33	; 0x21
    94e8:	f001 fdaa 	bl	b040 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    94ec:	e7f0      	b.n	94d0 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    94ee:	f384 8811 	msr	BASEPRI, r4
    94f2:	f3bf 8f6f 	isb	sy
}
    94f6:	e7f5      	b.n	94e4 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    94f8:	f04f 0320 	mov.w	r3, #32
    94fc:	f3ef 8411 	mrs	r4, BASEPRI
    9500:	f383 8811 	msr	BASEPRI, r3
    9504:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    9508:	4630      	mov	r0, r6
    950a:	f005 fc33 	bl	ed74 <is_tx_ready>
    950e:	2800      	cmp	r0, #0
    9510:	d0ed      	beq.n	94ee <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    9512:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9514:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    9516:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    951a:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    951e:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9522:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    9526:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    952a:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    952e:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9532:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    9534:	f384 8811 	msr	BASEPRI, r4
    9538:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9540:	20002a15 	.word	0x20002a15

00009544 <nrf_gpio_cfg_output>:
        case 1: return NRF_P1;
    9544:	4b07      	ldr	r3, [pc, #28]	; (9564 <nrf_gpio_cfg_output+0x20>)
    9546:	4908      	ldr	r1, [pc, #32]	; (9568 <nrf_gpio_cfg_output+0x24>)
    *p_pin = pin_number & 0x1F;
    9548:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    954c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    954e:	2801      	cmp	r0, #1
    9550:	bf14      	ite	ne
    9552:	4618      	movne	r0, r3
    9554:	4608      	moveq	r0, r1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    9556:	f102 0380 	add.w	r3, r2, #128	; 0x80
    955a:	2203      	movs	r2, #3
    955c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    9560:	4770      	bx	lr
    9562:	bf00      	nop
    9564:	50842500 	.word	0x50842500
    9568:	50842800 	.word	0x50842800

0000956c <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
    956c:	4b06      	ldr	r3, [pc, #24]	; (9588 <nrf_gpio_pin_set+0x1c>)
    956e:	4907      	ldr	r1, [pc, #28]	; (958c <nrf_gpio_pin_set+0x20>)
    *p_pin = pin_number & 0x1F;
    9570:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    9574:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    9576:	2801      	cmp	r0, #1
    9578:	bf14      	ite	ne
    957a:	4618      	movne	r0, r3
    957c:	4608      	moveq	r0, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    957e:	2301      	movs	r3, #1
    9580:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9582:	6083      	str	r3, [r0, #8]
}
    9584:	4770      	bx	lr
    9586:	bf00      	nop
    9588:	50842500 	.word	0x50842500
    958c:	50842800 	.word	0x50842800

00009590 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    9590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9592:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9594:	2700      	movs	r7, #0
    9596:	2101      	movs	r1, #1
    9598:	2200      	movs	r2, #0
    959a:	2008      	movs	r0, #8
    959c:	f7f9 fcba 	bl	2f14 <z_arm_irq_priority_set>
    95a0:	2008      	movs	r0, #8
    95a2:	f7f9 fc99 	bl	2ed8 <arch_irq_enable>
	return config->uarte_regs;
    95a6:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    95a8:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
    95aa:	681c      	ldr	r4, [r3, #0]
        nrf_gpio_pin_set(pin_number);
    95ac:	2014      	movs	r0, #20
    95ae:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
	data->dev = dev;
    95b2:	6035      	str	r5, [r6, #0]
    95b4:	f7ff ffda 	bl	956c <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(config->pseltxd);
    95b8:	2014      	movs	r0, #20
    95ba:	f7ff ffc3 	bl	9544 <nrf_gpio_cfg_output>
    p_reg->PSEL.TXD = pseltxd;
    95be:	2214      	movs	r2, #20
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    95c0:	4b31      	ldr	r3, [pc, #196]	; (9688 <uarte_0_init+0xf8>)
        nrf_gpio_pin_set(pin_number);
    95c2:	2013      	movs	r0, #19
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    95c4:	f8c3 7258 	str.w	r7, [r3, #600]	; 0x258
    95c8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    95cc:	2216      	movs	r2, #22
    95ce:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    95d2:	f8c3 7254 	str.w	r7, [r3, #596]	; 0x254
        nrf_gpio_pin_set(pin_number);
    95d6:	f7ff ffc9 	bl	956c <nrf_gpio_pin_set>
		nrf_gpio_cfg_output(config->pselrts);
    95da:	2013      	movs	r0, #19
    95dc:	f7ff ffb2 	bl	9544 <nrf_gpio_cfg_output>
    p_reg->PSEL.RTS = pselrts;
    95e0:	2313      	movs	r3, #19
    95e2:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    95e6:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    95e8:	68e9      	ldr	r1, [r5, #12]
    95ea:	4628      	mov	r0, r5
    95ec:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    95f0:	3104      	adds	r1, #4
    95f2:	f7ff fe8b 	bl	930c <uarte_nrfx_configure>
	if (err) {
    95f6:	4607      	mov	r7, r0
    95f8:	b9a8      	cbnz	r0, 9626 <uarte_0_init+0x96>
	if (get_dev_config(dev)->ppi_endtx) {
    95fa:	686b      	ldr	r3, [r5, #4]
    95fc:	799b      	ldrb	r3, [r3, #6]
    95fe:	b30b      	cbz	r3, 9644 <uarte_0_init+0xb4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    9600:	f106 0012 	add.w	r0, r6, #18
    9604:	f000 fa32 	bl	9a6c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    9608:	4b20      	ldr	r3, [pc, #128]	; (968c <uarte_0_init+0xfc>)
    960a:	4298      	cmp	r0, r3
    960c:	d00d      	beq.n	962a <uarte_0_init+0x9a>
    960e:	4b20      	ldr	r3, [pc, #128]	; (9690 <uarte_0_init+0x100>)
    9610:	4920      	ldr	r1, [pc, #128]	; (9694 <uarte_0_init+0x104>)
		LOG_ERR("Failed to allocate PPI Channel");
    9612:	4821      	ldr	r0, [pc, #132]	; (9698 <uarte_0_init+0x108>)
    9614:	1ac9      	subs	r1, r1, r3
    9616:	08c9      	lsrs	r1, r1, #3
    9618:	0189      	lsls	r1, r1, #6
    961a:	f041 0101 	orr.w	r1, r1, #1
    961e:	f002 ff62 	bl	c4e6 <log_0>
		return -EIO;
    9622:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    9626:	4638      	mov	r0, r7
    9628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    962a:	7cb3      	ldrb	r3, [r6, #18]
    962c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9630:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    9634:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    9638:	2301      	movs	r3, #1
    963a:	7cb2      	ldrb	r2, [r6, #18]
    963c:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    963e:	4a17      	ldr	r2, [pc, #92]	; (969c <uarte_0_init+0x10c>)
    9640:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9644:	2308      	movs	r3, #8
    9646:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    964a:	2300      	movs	r3, #0
    964c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    9650:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    9654:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9658:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    965c:	2301      	movs	r3, #1
    965e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9662:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    9664:	686b      	ldr	r3, [r5, #4]
    9666:	799b      	ldrb	r3, [r3, #6]
    9668:	b91b      	cbnz	r3, 9672 <uarte_0_init+0xe2>
    p_reg->INTENSET = mask;
    966a:	f44f 7380 	mov.w	r3, #256	; 0x100
    966e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    9672:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    9674:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9676:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    967a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    967e:	2301      	movs	r3, #1
    9680:	60a3      	str	r3, [r4, #8]
    9682:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    9684:	e7cf      	b.n	9626 <uarte_0_init+0x96>
    9686:	bf00      	nop
    9688:	50842500 	.word	0x50842500
    968c:	0bad0000 	.word	0x0bad0000
    9690:	000102f8 	.word	0x000102f8
    9694:	000103c0 	.word	0x000103c0
    9698:	00012ac5 	.word	0x00012ac5
    969c:	50017000 	.word	0x50017000

000096a0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    96a0:	b508      	push	{r3, lr}
	z_impl_log_panic();
    96a2:	f7f7 ffcb 	bl	163c <z_impl_log_panic>
    96a6:	4b06      	ldr	r3, [pc, #24]	; (96c0 <k_sys_fatal_error_handler+0x20>)
    96a8:	4906      	ldr	r1, [pc, #24]	; (96c4 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    96aa:	4807      	ldr	r0, [pc, #28]	; (96c8 <k_sys_fatal_error_handler+0x28>)
    96ac:	1ac9      	subs	r1, r1, r3
    96ae:	08c9      	lsrs	r1, r1, #3
    96b0:	0189      	lsls	r1, r1, #6
    96b2:	f041 0101 	orr.w	r1, r1, #1
    96b6:	f002 ff16 	bl	c4e6 <log_0>
	sys_arch_reboot(0);
    96ba:	2000      	movs	r0, #0
    96bc:	f7f9 ff94 	bl	35e8 <sys_arch_reboot>

	CODE_UNREACHABLE;
    96c0:	000102f8 	.word	0x000102f8
    96c4:	00010358 	.word	0x00010358
    96c8:	00012af4 	.word	0x00012af4

000096cc <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    96cc:	4b06      	ldr	r3, [pc, #24]	; (96e8 <nrf53_errata_42+0x1c>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    96ce:	681b      	ldr	r3, [r3, #0]
    96d0:	2b07      	cmp	r3, #7
    96d2:	d107      	bne.n	96e4 <nrf53_errata_42+0x18>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    96d4:	4b05      	ldr	r3, [pc, #20]	; (96ec <nrf53_errata_42+0x20>)
    96d6:	681b      	ldr	r3, [r3, #0]
    96d8:	3b02      	subs	r3, #2
    96da:	2b03      	cmp	r3, #3
    96dc:	d802      	bhi.n	96e4 <nrf53_errata_42+0x18>
    96de:	4a04      	ldr	r2, [pc, #16]	; (96f0 <nrf53_errata_42+0x24>)
    96e0:	5cd0      	ldrb	r0, [r2, r3]
    96e2:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    96e4:	2000      	movs	r0, #0
    #endif
}
    96e6:	4770      	bx	lr
    96e8:	00ff0130 	.word	0x00ff0130
    96ec:	00ff0134 	.word	0x00ff0134
    96f0:	00012b1c 	.word	0x00012b1c

000096f4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    96f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    96f8:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    96fc:	4b03      	ldr	r3, [pc, #12]	; (970c <SystemCoreClockUpdate+0x18>)
    96fe:	f002 0203 	and.w	r2, r2, #3
    9702:	40d3      	lsrs	r3, r2
    9704:	4a02      	ldr	r2, [pc, #8]	; (9710 <SystemCoreClockUpdate+0x1c>)
    9706:	6013      	str	r3, [r2, #0]
#endif
}
    9708:	4770      	bx	lr
    970a:	bf00      	nop
    970c:	07a12000 	.word	0x07a12000
    9710:	200002e0 	.word	0x200002e0

00009714 <SystemInit>:

void SystemInit(void)
{
    9714:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    9716:	f7ff ffd9 	bl	96cc <nrf53_errata_42>
    971a:	b148      	cbz	r0, 9730 <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    971c:	4b35      	ldr	r3, [pc, #212]	; (97f4 <SystemInit+0xe0>)
    971e:	681a      	ldr	r2, [r3, #0]
    9720:	b932      	cbnz	r2, 9730 <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    9722:	210d      	movs	r1, #13
    9724:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    9726:	2101      	movs	r1, #1
    9728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    972c:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    972e:	601a      	str	r2, [r3, #0]
{
    9730:	2200      	movs	r2, #0
    9732:	00d3      	lsls	r3, r2, #3
    9734:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    9738:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    973c:	3101      	adds	r1, #1
    973e:	d007      	beq.n	9750 <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    9740:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    9744:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    9746:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    974a:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    974c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    974e:	d1f0      	bne.n	9732 <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    9750:	f7ff ffbc 	bl	96cc <nrf53_errata_42>
    9754:	2800      	cmp	r0, #0
    9756:	d146      	bne.n	97e6 <SystemInit+0xd2>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    9758:	f7ff ffb8 	bl	96cc <nrf53_errata_42>
    975c:	b138      	cbz	r0, 976e <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    975e:	4b26      	ldr	r3, [pc, #152]	; (97f8 <SystemInit+0xe4>)
    9760:	4a26      	ldr	r2, [pc, #152]	; (97fc <SystemInit+0xe8>)
    9762:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    9764:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9768:	2201      	movs	r2, #1
    976a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    976e:	4b24      	ldr	r3, [pc, #144]	; (9800 <SystemInit+0xec>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    9770:	681b      	ldr	r3, [r3, #0]
    9772:	2b07      	cmp	r3, #7

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    9774:	bf02      	ittt	eq
    9776:	2200      	moveq	r2, #0
    9778:	4b22      	ldreq	r3, [pc, #136]	; (9804 <SystemInit+0xf0>)
    977a:	601a      	streq	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    977c:	f7ff ffa6 	bl	96cc <nrf53_errata_42>
    9780:	b150      	cbz	r0, 9798 <SystemInit+0x84>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    9782:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9786:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    978a:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    978c:	bf42      	ittt	mi
    978e:	2200      	movmi	r2, #0
    9790:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    9794:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    9798:	4b19      	ldr	r3, [pc, #100]	; (9800 <SystemInit+0xec>)
                if (var1 == 0x07)
    979a:	681b      	ldr	r3, [r3, #0]
    979c:	2b07      	cmp	r3, #7
    979e:	d109      	bne.n	97b4 <SystemInit+0xa0>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    97a0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    97a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    97a8:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    97aa:	bf44      	itt	mi
    97ac:	f06f 0201 	mvnmi.w	r2, #1
    97b0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    97b4:	f7ff ff8a 	bl	96cc <nrf53_errata_42>
    97b8:	b110      	cbz	r0, 97c0 <SystemInit+0xac>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    97ba:	2265      	movs	r2, #101	; 0x65
    97bc:	4b12      	ldr	r3, [pc, #72]	; (9808 <SystemInit+0xf4>)
    97be:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    97c0:	4a12      	ldr	r2, [pc, #72]	; (980c <SystemInit+0xf8>)
    97c2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    97c6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    97ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    97ce:	4a10      	ldr	r2, [pc, #64]	; (9810 <SystemInit+0xfc>)
    97d0:	4b10      	ldr	r3, [pc, #64]	; (9814 <SystemInit+0x100>)
    97d2:	6811      	ldr	r1, [r2, #0]
    97d4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    97d8:	69d2      	ldr	r2, [r2, #28]
    97da:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    97de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    97e2:	f7ff bf87 	b.w	96f4 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    97e6:	2229      	movs	r2, #41	; 0x29
    97e8:	4b07      	ldr	r3, [pc, #28]	; (9808 <SystemInit+0xf4>)
    97ea:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    97ec:	2203      	movs	r2, #3
    97ee:	631a      	str	r2, [r3, #48]	; 0x30
    97f0:	e7b2      	b.n	9758 <SystemInit+0x44>
    97f2:	bf00      	nop
    97f4:	50004a20 	.word	0x50004a20
    97f8:	50039530 	.word	0x50039530
    97fc:	beef0044 	.word	0xbeef0044
    9800:	00ff0130 	.word	0x00ff0130
    9804:	5003254c 	.word	0x5003254c
    9808:	5000470c 	.word	0x5000470c
    980c:	e000ed00 	.word	0xe000ed00
    9810:	00ff8000 	.word	0x00ff8000
    9814:	50006000 	.word	0x50006000

00009818 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    9818:	4b04      	ldr	r3, [pc, #16]	; (982c <nrfx_clock_init+0x14>)
    981a:	791a      	ldrb	r2, [r3, #4]
    981c:	b922      	cbnz	r2, 9828 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    981e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    9820:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    9822:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    9824:	4802      	ldr	r0, [pc, #8]	; (9830 <nrfx_clock_init+0x18>)
    9826:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    9828:	4802      	ldr	r0, [pc, #8]	; (9834 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    982a:	4770      	bx	lr
    982c:	2000185c 	.word	0x2000185c
    9830:	0bad0000 	.word	0x0bad0000
    9834:	0bad000c 	.word	0x0bad000c

00009838 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    9838:	2803      	cmp	r0, #3
    983a:	d847      	bhi.n	98cc <nrfx_clock_start+0x94>
    983c:	e8df f000 	tbb	[pc, r0]
    9840:	3a2d2202 	.word	0x3a2d2202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9844:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    9848:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    984c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    9850:	03c9      	lsls	r1, r1, #15
    9852:	d511      	bpl.n	9878 <nrfx_clock_start+0x40>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    9854:	f003 0303 	and.w	r3, r3, #3
    9858:	2b02      	cmp	r3, #2
    985a:	d10d      	bne.n	9878 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    985c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9860:	2200      	movs	r2, #0
    9862:	4b1b      	ldr	r3, [pc, #108]	; (98d0 <nrfx_clock_start+0x98>)
    9864:	601a      	str	r2, [r3, #0]
    9866:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9868:	2202      	movs	r2, #2
    986a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    986e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9872:	2201      	movs	r2, #1
    9874:	609a      	str	r2, [r3, #8]
}
    9876:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    9878:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    987c:	2201      	movs	r2, #1
    987e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    9882:	e7ed      	b.n	9860 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9884:	2200      	movs	r2, #0
    9886:	4b13      	ldr	r3, [pc, #76]	; (98d4 <nrfx_clock_start+0x9c>)
    9888:	601a      	str	r2, [r3, #0]
    988a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    988c:	2201      	movs	r2, #1
    988e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9892:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9896:	601a      	str	r2, [r3, #0]
}
    9898:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    989a:	2200      	movs	r2, #0
    989c:	4b0e      	ldr	r3, [pc, #56]	; (98d8 <nrfx_clock_start+0xa0>)
    989e:	601a      	str	r2, [r3, #0]
    98a0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    98a2:	f44f 7200 	mov.w	r2, #512	; 0x200
    98a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    98aa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    98ae:	2201      	movs	r2, #1
    98b0:	621a      	str	r2, [r3, #32]
}
    98b2:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    98b4:	2200      	movs	r2, #0
    98b6:	4b09      	ldr	r3, [pc, #36]	; (98dc <nrfx_clock_start+0xa4>)
    98b8:	601a      	str	r2, [r3, #0]
    98ba:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    98bc:	f44f 7280 	mov.w	r2, #256	; 0x100
    98c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    98c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    98c8:	2201      	movs	r2, #1
    98ca:	619a      	str	r2, [r3, #24]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    98cc:	4770      	bx	lr
    98ce:	bf00      	nop
    98d0:	50005104 	.word	0x50005104
    98d4:	50005100 	.word	0x50005100
    98d8:	50005124 	.word	0x50005124
    98dc:	50005120 	.word	0x50005120

000098e0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    98e0:	b570      	push	{r4, r5, r6, lr}
    98e2:	4604      	mov	r4, r0
    98e4:	2803      	cmp	r0, #3
    98e6:	d83e      	bhi.n	9966 <nrfx_clock_stop+0x86>
    98e8:	e8df f000 	tbb	[pc, r0]
    98ec:	4b3e2202 	.word	0x4b3e2202
    p_reg->INTENCLR = mask;
    98f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    98f4:	2202      	movs	r2, #2
    98f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    98fa:	2200      	movs	r2, #0
    98fc:	f503 7382 	add.w	r3, r3, #260	; 0x104
    9900:	601a      	str	r2, [r3, #0]
    9902:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9904:	4b28      	ldr	r3, [pc, #160]	; (99a8 <nrfx_clock_stop+0xc8>)
    9906:	2201      	movs	r2, #1
    9908:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    990c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9910:	601a      	str	r2, [r3, #0]
    switch (domain)
    9912:	2c02      	cmp	r4, #2
    9914:	d042      	beq.n	999c <nrfx_clock_stop+0xbc>
    9916:	2c03      	cmp	r4, #3
    9918:	d043      	beq.n	99a2 <nrfx_clock_stop+0xc2>
    991a:	bb24      	cbnz	r4, 9966 <nrfx_clock_stop+0x86>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    991c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    9920:	03db      	lsls	r3, r3, #15
    9922:	d520      	bpl.n	9966 <nrfx_clock_stop+0x86>
    9924:	2001      	movs	r0, #1
    9926:	f005 fa51 	bl	edcc <nrfx_busy_wait>
    992a:	3d01      	subs	r5, #1
    992c:	d1f1      	bne.n	9912 <nrfx_clock_stop+0x32>
    992e:	e01a      	b.n	9966 <nrfx_clock_stop+0x86>
    p_reg->INTENCLR = mask;
    9930:	2301      	movs	r3, #1
    9932:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9936:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9938:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    993c:	4a1b      	ldr	r2, [pc, #108]	; (99ac <nrfx_clock_stop+0xcc>)
    p_reg->INTENCLR = mask;
    993e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9942:	6011      	str	r1, [r2, #0]
    9944:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9946:	4a1a      	ldr	r2, [pc, #104]	; (99b0 <nrfx_clock_stop+0xd0>)
    9948:	6013      	str	r3, [r2, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    994a:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    994e:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9952:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9956:	03d2      	lsls	r2, r2, #15
    9958:	d505      	bpl.n	9966 <nrfx_clock_stop+0x86>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    995a:	b123      	cbz	r3, 9966 <nrfx_clock_stop+0x86>
    995c:	2001      	movs	r0, #1
    995e:	f005 fa35 	bl	edcc <nrfx_busy_wait>
    9962:	3d01      	subs	r5, #1
    9964:	d1f1      	bne.n	994a <nrfx_clock_stop+0x6a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    9966:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    9968:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    996c:	f44f 7200 	mov.w	r2, #512	; 0x200
    9970:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9974:	2200      	movs	r2, #0
    9976:	f503 7392 	add.w	r3, r3, #292	; 0x124
    997a:	601a      	str	r2, [r3, #0]
    997c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    997e:	4b0d      	ldr	r3, [pc, #52]	; (99b4 <nrfx_clock_stop+0xd4>)
    9980:	e7c1      	b.n	9906 <nrfx_clock_stop+0x26>
    p_reg->INTENCLR = mask;
    9982:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9986:	f44f 7280 	mov.w	r2, #256	; 0x100
    998a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    998e:	2200      	movs	r2, #0
    9990:	f503 7390 	add.w	r3, r3, #288	; 0x120
    9994:	601a      	str	r2, [r3, #0]
    9996:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9998:	4b07      	ldr	r3, [pc, #28]	; (99b8 <nrfx_clock_stop+0xd8>)
    999a:	e7b4      	b.n	9906 <nrfx_clock_stop+0x26>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    999c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    99a0:	e7be      	b.n	9920 <nrfx_clock_stop+0x40>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    99a2:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    99a6:	e7bb      	b.n	9920 <nrfx_clock_stop+0x40>
    99a8:	5000500c 	.word	0x5000500c
    99ac:	50005100 	.word	0x50005100
    99b0:	50005004 	.word	0x50005004
    99b4:	50005024 	.word	0x50005024
    99b8:	5000501c 	.word	0x5000501c

000099bc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    99bc:	4b26      	ldr	r3, [pc, #152]	; (9a58 <nrfx_power_clock_irq_handler+0x9c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    99be:	b510      	push	{r4, lr}
    99c0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    99c2:	b152      	cbz	r2, 99da <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    99c4:	2000      	movs	r0, #0
    99c6:	6018      	str	r0, [r3, #0]
    99c8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    99ca:	2201      	movs	r2, #1
    99cc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    99d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    99d4:	4b21      	ldr	r3, [pc, #132]	; (9a5c <nrfx_power_clock_irq_handler+0xa0>)
    99d6:	681b      	ldr	r3, [r3, #0]
    99d8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    99da:	4b21      	ldr	r3, [pc, #132]	; (9a60 <nrfx_power_clock_irq_handler+0xa4>)
    99dc:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    99de:	b18a      	cbz	r2, 9a04 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    99e0:	2200      	movs	r2, #0
    99e2:	601a      	str	r2, [r3, #0]
    99e4:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    99e6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    99ea:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    99ee:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    99f2:	f002 0203 	and.w	r2, r2, #3
    99f6:	2a01      	cmp	r2, #1
    99f8:	f04f 0102 	mov.w	r1, #2
    99fc:	d124      	bne.n	9a48 <nrfx_power_clock_irq_handler+0x8c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    99fe:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a02:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9a04:	4b17      	ldr	r3, [pc, #92]	; (9a64 <nrfx_power_clock_irq_handler+0xa8>)
    9a06:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    9a08:	b162      	cbz	r2, 9a24 <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a0a:	2200      	movs	r2, #0
    9a0c:	601a      	str	r2, [r3, #0]
    9a0e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    9a10:	f44f 7280 	mov.w	r2, #256	; 0x100
    9a14:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9a18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    9a1c:	4b0f      	ldr	r3, [pc, #60]	; (9a5c <nrfx_power_clock_irq_handler+0xa0>)
    9a1e:	2004      	movs	r0, #4
    9a20:	681b      	ldr	r3, [r3, #0]
    9a22:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9a24:	4b10      	ldr	r3, [pc, #64]	; (9a68 <nrfx_power_clock_irq_handler+0xac>)
    9a26:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    9a28:	b1aa      	cbz	r2, 9a56 <nrfx_power_clock_irq_handler+0x9a>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    9a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a2e:	2200      	movs	r2, #0
    9a30:	601a      	str	r2, [r3, #0]
    9a32:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    9a34:	f44f 7200 	mov.w	r2, #512	; 0x200
    9a38:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9a3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    9a40:	4b06      	ldr	r3, [pc, #24]	; (9a5c <nrfx_power_clock_irq_handler+0xa0>)
    9a42:	2005      	movs	r0, #5
    9a44:	681b      	ldr	r3, [r3, #0]
    9a46:	4718      	bx	r3
    9a48:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9a4c:	4b03      	ldr	r3, [pc, #12]	; (9a5c <nrfx_power_clock_irq_handler+0xa0>)
    9a4e:	2001      	movs	r0, #1
    9a50:	681b      	ldr	r3, [r3, #0]
    9a52:	4798      	blx	r3
    9a54:	e7d6      	b.n	9a04 <nrfx_power_clock_irq_handler+0x48>
}
    9a56:	bd10      	pop	{r4, pc}
    9a58:	50005100 	.word	0x50005100
    9a5c:	2000185c 	.word	0x2000185c
    9a60:	50005104 	.word	0x50005104
    9a64:	50005120 	.word	0x50005120
    9a68:	50005124 	.word	0x50005124

00009a6c <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    9a6c:	4a0a      	ldr	r2, [pc, #40]	; (9a98 <nrfx_dppi_channel_alloc+0x2c>)
{
    9a6e:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    9a70:	6814      	ldr	r4, [r2, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    9a72:	43e6      	mvns	r6, r4
    9a74:	d00e      	beq.n	9a94 <nrfx_dppi_channel_alloc+0x28>
    9a76:	2300      	movs	r3, #0
    9a78:	b2d9      	uxtb	r1, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    9a7a:	fa26 f501 	lsr.w	r5, r6, r1
    9a7e:	07ed      	lsls	r5, r5, #31
    9a80:	f103 0301 	add.w	r3, r3, #1
    9a84:	d5f8      	bpl.n	9a78 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    9a86:	2301      	movs	r3, #1
    9a88:	408b      	lsls	r3, r1
    9a8a:	4323      	orrs	r3, r4
    *p_channel = channel;
    9a8c:	7001      	strb	r1, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    9a8e:	4803      	ldr	r0, [pc, #12]	; (9a9c <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
    9a90:	6013      	str	r3, [r2, #0]
}
    9a92:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    9a94:	4802      	ldr	r0, [pc, #8]	; (9aa0 <nrfx_dppi_channel_alloc+0x34>)
    9a96:	e7fc      	b.n	9a92 <nrfx_dppi_channel_alloc+0x26>
    9a98:	20001864 	.word	0x20001864
    9a9c:	0bad0000 	.word	0x0bad0000
    9aa0:	0bad0002 	.word	0x0bad0002

00009aa4 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    9aa4:	2301      	movs	r3, #1
    9aa6:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    9aaa:	f010 0fff 	tst.w	r0, #255	; 0xff
    9aae:	d012      	beq.n	9ad6 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    9ab0:	f04f 0320 	mov.w	r3, #32
    9ab4:	f3ef 8111 	mrs	r1, BASEPRI
    9ab8:	f383 8811 	msr	BASEPRI, r3
    9abc:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    9ac0:	4a06      	ldr	r2, [pc, #24]	; (9adc <nrfx_gpiote_channel_free+0x38>)
    9ac2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    9ac4:	ea23 0000 	bic.w	r0, r3, r0
    9ac8:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    9aca:	f381 8811 	msr	BASEPRI, r1
    9ace:	f3bf 8f6f 	isb	sy
    9ad2:	4803      	ldr	r0, [pc, #12]	; (9ae0 <nrfx_gpiote_channel_free+0x3c>)
    9ad4:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    9ad6:	4803      	ldr	r0, [pc, #12]	; (9ae4 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9ad8:	4770      	bx	lr
    9ada:	bf00      	nop
    9adc:	20001868 	.word	0x20001868
    9ae0:	0bad0000 	.word	0x0bad0000
    9ae4:	0bad0004 	.word	0x0bad0004

00009ae8 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    9ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    9aec:	22ff      	movs	r2, #255	; 0xff
{
    9aee:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    9af0:	2601      	movs	r6, #1
{
    9af2:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    9af4:	f8df e058 	ldr.w	lr, [pc, #88]	; 9b50 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    9af8:	4814      	ldr	r0, [pc, #80]	; (9b4c <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    9afa:	f8df 8058 	ldr.w	r8, [pc, #88]	; 9b54 <nrfx_gpiote_channel_alloc+0x6c>
    9afe:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    9b00:	f04f 0120 	mov.w	r1, #32
    9b04:	f3ef 8c11 	mrs	ip, BASEPRI
    9b08:	f381 8811 	msr	BASEPRI, r1
    9b0c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    9b10:	fa22 f103 	lsr.w	r1, r2, r3
    9b14:	07c9      	lsls	r1, r1, #31
    9b16:	d50a      	bpl.n	9b2e <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    9b18:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    9b1c:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    9b20:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    9b22:	bf01      	itttt	eq
    9b24:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    9b26:	4339      	orreq	r1, r7
    9b28:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
    9b2c:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    9b2e:	f38c 8811 	msr	BASEPRI, ip
    9b32:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    9b36:	4540      	cmp	r0, r8
    9b38:	d005      	beq.n	9b46 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    9b3a:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    9b3e:	439a      	bics	r2, r3
    9b40:	f104 0401 	add.w	r4, r4, #1
    9b44:	d1db      	bne.n	9afe <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b4a:	bf00      	nop
    9b4c:	0bad0002 	.word	0x0bad0002
    9b50:	20001868 	.word	0x20001868
    9b54:	0bad0000 	.word	0x0bad0000

00009b58 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    9b58:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    9b5a:	4c08      	ldr	r4, [pc, #32]	; (9b7c <nrfx_ipc_init+0x24>)
{
    9b5c:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    9b5e:	7923      	ldrb	r3, [r4, #4]
{
    9b60:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    9b62:	b943      	cbnz	r3, 9b76 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    9b64:	202a      	movs	r0, #42	; 0x2a
    9b66:	f7f9 f9b7 	bl	2ed8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    9b6a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    9b6c:	4804      	ldr	r0, [pc, #16]	; (9b80 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    9b6e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    9b70:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    9b72:	60a5      	str	r5, [r4, #8]
}
    9b74:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    9b76:	4803      	ldr	r0, [pc, #12]	; (9b84 <nrfx_ipc_init+0x2c>)
    9b78:	e7fc      	b.n	9b74 <nrfx_ipc_init+0x1c>
    9b7a:	bf00      	nop
    9b7c:	200018c8 	.word	0x200018c8
    9b80:	0bad0000 	.word	0x0bad0000
    9b84:	0bad000c 	.word	0x0bad000c

00009b88 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    9b88:	2300      	movs	r3, #0
{
    9b8a:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    9b8c:	4a0d      	ldr	r2, [pc, #52]	; (9bc4 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    9b8e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    9b92:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    9b96:	3301      	adds	r3, #1
    9b98:	2b10      	cmp	r3, #16
    9b9a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    9b9e:	d1f6      	bne.n	9b8e <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    9ba0:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    9ba2:	4a08      	ldr	r2, [pc, #32]	; (9bc4 <nrfx_ipc_config_load+0x3c>)
    9ba4:	f100 0140 	add.w	r1, r0, #64	; 0x40
    9ba8:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    9bac:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
    9bb0:	3301      	adds	r3, #1
    9bb2:	2b10      	cmp	r3, #16
    9bb4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    9bb8:	d1f6      	bne.n	9ba8 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    9bba:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
    9bbe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    9bc2:	bd30      	pop	{r4, r5, pc}
    9bc4:	5002a000 	.word	0x5002a000

00009bc8 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    9bc8:	2301      	movs	r3, #1
    9bca:	4a02      	ldr	r2, [pc, #8]	; (9bd4 <nrfx_ipc_receive_event_enable+0xc>)
    9bcc:	4083      	lsls	r3, r0
    9bce:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    9bd2:	4770      	bx	lr
    9bd4:	5002a000 	.word	0x5002a000

00009bd8 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    9bd8:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    9bda:	4a02      	ldr	r2, [pc, #8]	; (9be4 <nrfx_ipc_receive_event_disable+0xc>)
    9bdc:	4083      	lsls	r3, r0
    9bde:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    9be2:	4770      	bx	lr
    9be4:	5002a000 	.word	0x5002a000

00009be8 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
    9be8:	4b0c      	ldr	r3, [pc, #48]	; (9c1c <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    9bea:	b430      	push	{r4, r5}
    9bec:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = __CLZ(__RBIT(bitmask));
        bitmask &= ~(1UL << event_idx);
    9bf0:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
    9bf2:	4602      	mov	r2, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9bf4:	2500      	movs	r5, #0
    while (bitmask)
    9bf6:	b922      	cbnz	r2, 9c02 <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
    9bf8:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    9bfa:	4b09      	ldr	r3, [pc, #36]	; (9c20 <nrfx_ipc_irq_handler+0x38>)
    9bfc:	681a      	ldr	r2, [r3, #0]
    9bfe:	6899      	ldr	r1, [r3, #8]
    9c00:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    9c02:	fa92 f3a2 	rbit	r3, r2
  return __builtin_clz(value);
    9c06:	fab3 f383 	clz	r3, r3
        bitmask &= ~(1UL << event_idx);
    9c0a:	fa04 f103 	lsl.w	r1, r4, r3
    9c0e:	ea22 0201 	bic.w	r2, r2, r1
    9c12:	4904      	ldr	r1, [pc, #16]	; (9c24 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    9c14:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9c16:	50cd      	str	r5, [r1, r3]
}
    9c18:	e7ed      	b.n	9bf6 <nrfx_ipc_irq_handler+0xe>
    9c1a:	bf00      	nop
    9c1c:	5002a000 	.word	0x5002a000
    9c20:	200018c8 	.word	0x200018c8
    9c24:	5002a100 	.word	0x5002a100

00009c28 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
    9c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c2c:	460e      	mov	r6, r1
    9c2e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
    9c30:	4d0c      	ldr	r5, [pc, #48]	; (9c64 <metal_generic_dev_open+0x3c>)
    9c32:	f855 4f18 	ldr.w	r4, [r5, #24]!
    9c36:	42ac      	cmp	r4, r5
    9c38:	d103      	bne.n	9c42 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
    9c3a:	f06f 0012 	mvn.w	r0, #18
    9c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
    9c42:	4631      	mov	r1, r6
    9c44:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
    9c48:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
    9c4c:	f003 fc4a 	bl	d4e4 <strcmp>
    9c50:	b930      	cbnz	r0, 9c60 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
    9c52:	4640      	mov	r0, r8
			*device = dev;
    9c54:	f8c7 8000 	str.w	r8, [r7]
}
    9c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
    9c5c:	f005 b99f 	b.w	ef9e <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
    9c60:	6824      	ldr	r4, [r4, #0]
    9c62:	e7e8      	b.n	9c36 <metal_generic_dev_open+0xe>
    9c64:	200018d4 	.word	0x200018d4

00009c68 <metal_bus_find>:
{
    9c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c6c:	4607      	mov	r7, r0
    9c6e:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
    9c70:	4e0b      	ldr	r6, [pc, #44]	; (9ca0 <metal_bus_find+0x38>)
    9c72:	f856 4f08 	ldr.w	r4, [r6, #8]!
    9c76:	42b4      	cmp	r4, r6
    9c78:	d102      	bne.n	9c80 <metal_bus_find+0x18>
	return -ENOENT;
    9c7a:	f06f 0001 	mvn.w	r0, #1
    9c7e:	e00a      	b.n	9c96 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
    9c80:	4639      	mov	r1, r7
    9c82:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
    9c86:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
    9c8a:	f003 fc2b 	bl	d4e4 <strcmp>
    9c8e:	b920      	cbnz	r0, 9c9a <metal_bus_find+0x32>
    9c90:	b11d      	cbz	r5, 9c9a <metal_bus_find+0x32>
			*result = bus;
    9c92:	f8c5 8000 	str.w	r8, [r5]
}
    9c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
    9c9a:	6824      	ldr	r4, [r4, #0]
    9c9c:	e7eb      	b.n	9c76 <metal_bus_find+0xe>
    9c9e:	bf00      	nop
    9ca0:	200018d4 	.word	0x200018d4

00009ca4 <metal_bus_register>:
{
    9ca4:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
    9ca6:	4604      	mov	r4, r0
    9ca8:	b910      	cbnz	r0, 9cb0 <metal_bus_register+0xc>
		return -EINVAL;
    9caa:	f06f 0015 	mvn.w	r0, #21
}
    9cae:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
    9cb0:	6800      	ldr	r0, [r0, #0]
    9cb2:	2800      	cmp	r0, #0
    9cb4:	d0f9      	beq.n	9caa <metal_bus_register+0x6>
    9cb6:	f003 fc05 	bl	d4c4 <strlen>
    9cba:	2800      	cmp	r0, #0
    9cbc:	d0f5      	beq.n	9caa <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
    9cbe:	2100      	movs	r1, #0
    9cc0:	6820      	ldr	r0, [r4, #0]
    9cc2:	f7ff ffd1 	bl	9c68 <metal_bus_find>
    9cc6:	b1c0      	cbz	r0, 9cfa <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
    9cc8:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
    9ccc:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
    9cd0:	4b0c      	ldr	r3, [pc, #48]	; (9d04 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
    9cd2:	f104 0224 	add.w	r2, r4, #36	; 0x24
    9cd6:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
    9cd8:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
    9cdc:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
    9cde:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
    9ce0:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
    9ce2:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
    9ce4:	781a      	ldrb	r2, [r3, #0]
    9ce6:	2a06      	cmp	r2, #6
    9ce8:	d905      	bls.n	9cf6 <metal_bus_register+0x52>
    9cea:	685b      	ldr	r3, [r3, #4]
    9cec:	b143      	cbz	r3, 9d00 <metal_bus_register+0x5c>
    9cee:	2007      	movs	r0, #7
    9cf0:	6822      	ldr	r2, [r4, #0]
    9cf2:	4905      	ldr	r1, [pc, #20]	; (9d08 <metal_bus_register+0x64>)
    9cf4:	4798      	blx	r3
	return 0;
    9cf6:	2000      	movs	r0, #0
    9cf8:	e7d9      	b.n	9cae <metal_bus_register+0xa>
		return -EEXIST;
    9cfa:	f06f 0010 	mvn.w	r0, #16
    9cfe:	e7d6      	b.n	9cae <metal_bus_register+0xa>
	return 0;
    9d00:	4618      	mov	r0, r3
    9d02:	e7d4      	b.n	9cae <metal_bus_register+0xa>
    9d04:	200018d4 	.word	0x200018d4
    9d08:	00012b20 	.word	0x00012b20

00009d0c <metal_register_generic_device>:
{
    9d0c:	b510      	push	{r4, lr}
    9d0e:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
    9d10:	6800      	ldr	r0, [r0, #0]
    9d12:	b910      	cbnz	r0, 9d1a <metal_register_generic_device+0xe>
		return -EINVAL;
    9d14:	f06f 0015 	mvn.w	r0, #21
}
    9d18:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
    9d1a:	f003 fbd3 	bl	d4c4 <strlen>
    9d1e:	2800      	cmp	r0, #0
    9d20:	d0f8      	beq.n	9d14 <metal_register_generic_device+0x8>
    9d22:	68a3      	ldr	r3, [r4, #8]
    9d24:	2b01      	cmp	r3, #1
    9d26:	d8f5      	bhi.n	9d14 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
    9d28:	4b06      	ldr	r3, [pc, #24]	; (9d44 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
    9d2a:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
    9d2e:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
    9d30:	4b05      	ldr	r3, [pc, #20]	; (9d48 <metal_register_generic_device+0x3c>)
    9d32:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
    9d34:	f103 0018 	add.w	r0, r3, #24
    9d38:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
    9d3a:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
    9d3c:	61d9      	str	r1, [r3, #28]
	return 0;
    9d3e:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
    9d40:	6011      	str	r1, [r2, #0]
}
    9d42:	e7e9      	b.n	9d18 <metal_register_generic_device+0xc>
    9d44:	200002e4 	.word	0x200002e4
    9d48:	200018d4 	.word	0x200018d4

00009d4c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
    9d4c:	b538      	push	{r3, r4, r5, lr}
    9d4e:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
    9d50:	4c0d      	ldr	r4, [pc, #52]	; (9d88 <metal_init+0x3c>)
    9d52:	2220      	movs	r2, #32
    9d54:	4620      	mov	r0, r4
    9d56:	2100      	movs	r1, #0
    9d58:	f003 fc1a 	bl	d590 <memset>

	_metal.common.log_handler   = params->log_handler;
    9d5c:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
    9d5e:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
    9d60:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
    9d62:	4623      	mov	r3, r4
    9d64:	792a      	ldrb	r2, [r5, #4]
    9d66:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
    9d6a:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
    9d6e:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
    9d72:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
    9d76:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
    9d7a:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
    9d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
    9d82:	f000 b803 	b.w	9d8c <metal_sys_init>
    9d86:	bf00      	nop
    9d88:	200018d4 	.word	0x200018d4

00009d8c <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
    9d8c:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
    9d8e:	4802      	ldr	r0, [pc, #8]	; (9d98 <metal_sys_init+0xc>)
    9d90:	f7ff ff88 	bl	9ca4 <metal_bus_register>
	return 0;
}
    9d94:	2000      	movs	r0, #0
    9d96:	bd08      	pop	{r3, pc}
    9d98:	200002e4 	.word	0x200002e4

00009d9c <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
    9d9c:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
    9d9e:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
    9da0:	2b06      	cmp	r3, #6
{
    9da2:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
    9da4:	bf88      	it	hi
    9da6:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
    9da8:	4b09      	ldr	r3, [pc, #36]	; (9dd0 <metal_zephyr_log_handler+0x34>)
{
    9daa:	ac05      	add	r4, sp, #20
    9dac:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
    9db0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    9db4:	4807      	ldr	r0, [pc, #28]	; (9dd4 <metal_zephyr_log_handler+0x38>)
    9db6:	f001 ff6f 	bl	bc98 <printk>

	va_start(args, format);
	vprintk(format, args);
    9dba:	4621      	mov	r1, r4
    9dbc:	4628      	mov	r0, r5
	va_start(args, format);
    9dbe:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
    9dc0:	f7f6 fca6 	bl	710 <vprintk>
	va_end(args);
}
    9dc4:	b002      	add	sp, #8
    9dc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    9dca:	b003      	add	sp, #12
    9dcc:	4770      	bx	lr
    9dce:	bf00      	nop
    9dd0:	00010bbc 	.word	0x00010bbc
    9dd4:	00011fa0 	.word	0x00011fa0

00009dd8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
    9dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ddc:	b087      	sub	sp, #28
    9dde:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
    9de0:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
    9de2:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
    9de4:	4293      	cmp	r3, r2
{
    9de6:	4617      	mov	r7, r2
	if (nvqs > num_vrings)
    9de8:	d342      	bcc.n	9e70 <virtio_create_virtqueues+0x98>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
    9dea:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
    9dec:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
    9df0:	42bd      	cmp	r5, r7
    9df2:	d103      	bne.n	9dfc <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
    9df4:	2000      	movs	r0, #0
}
    9df6:	b007      	add	sp, #28
    9df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
    9dfc:	fb0b f805 	mul.w	r8, fp, r5
    9e00:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
    9e04:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
    9e06:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
    9e0a:	f104 0a04 	add.w	sl, r4, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
    9e0e:	b9ca      	cbnz	r2, 9e44 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
    9e10:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    9e12:	6863      	ldr	r3, [r4, #4]
    9e14:	6801      	ldr	r1, [r0, #0]
			metal_io_block_set(io, offset, 0,
    9e16:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
    9e1a:	1a59      	subs	r1, r3, r1
						      vring_alloc->align));
    9e1c:	68a3      	ldr	r3, [r4, #8]
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    9e1e:	f10c 0e03 	add.w	lr, ip, #3
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
    9e22:	1e5c      	subs	r4, r3, #1
    9e24:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    9e28:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    9e2c:	425b      	negs	r3, r3
    9e2e:	4023      	ands	r3, r4
			metal_io_block_set(io, offset, 0,
    9e30:	6884      	ldr	r4, [r0, #8]
	size += sizeof(struct vring_used) +
    9e32:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
    9e36:	42a1      	cmp	r1, r4
    9e38:	bf28      	it	cs
    9e3a:	f04f 31ff 	movcs.w	r1, #4294967295
    9e3e:	3306      	adds	r3, #6
    9e40:	f005 f874 	bl	ef2c <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
    9e44:	f859 3008 	ldr.w	r3, [r9, r8]
    9e48:	9a05      	ldr	r2, [sp, #20]
    9e4a:	9302      	str	r3, [sp, #8]
    9e4c:	6a33      	ldr	r3, [r6, #32]
    9e4e:	4630      	mov	r0, r6
    9e50:	6a1b      	ldr	r3, [r3, #32]
    9e52:	b2a9      	uxth	r1, r5
    9e54:	9301      	str	r3, [sp, #4]
    9e56:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9e58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    9e5c:	9300      	str	r3, [sp, #0]
    9e5e:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    9e62:	4653      	mov	r3, sl
    9e64:	f005 f8b8 	bl	efd8 <virtqueue_create>
		if (ret)
    9e68:	2800      	cmp	r0, #0
    9e6a:	d1c4      	bne.n	9df6 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
    9e6c:	3501      	adds	r5, #1
    9e6e:	e7bf      	b.n	9df0 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
    9e70:	4800      	ldr	r0, [pc, #0]	; (9e74 <virtio_create_virtqueues+0x9c>)
    9e72:	e7c0      	b.n	9df6 <virtio_create_virtqueues+0x1e>
    9e74:	fffff440 	.word	0xfffff440

00009e78 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
    9e78:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
    9e7a:	8944      	ldrh	r4, [r0, #10]
    9e7c:	428c      	cmp	r4, r1
    9e7e:	d312      	bcc.n	9ea6 <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
    9e80:	6a03      	ldr	r3, [r0, #32]
    9e82:	3c01      	subs	r4, #1
    9e84:	885d      	ldrh	r5, [r3, #2]
    9e86:	402c      	ands	r4, r5
    9e88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
    9e8c:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
    9e8e:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
    9e90:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
    9e94:	6a02      	ldr	r2, [r0, #32]
    9e96:	8853      	ldrh	r3, [r2, #2]
    9e98:	3301      	adds	r3, #1
    9e9a:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
    9e9c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    9e9e:	3301      	adds	r3, #1
    9ea0:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
    9ea2:	2000      	movs	r0, #0
}
    9ea4:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
    9ea6:	4801      	ldr	r0, [pc, #4]	; (9eac <virtqueue_add_consumed_buffer+0x34>)
    9ea8:	e7fc      	b.n	9ea4 <virtqueue_add_consumed_buffer+0x2c>
    9eaa:	bf00      	nop
    9eac:	fffff441 	.word	0xfffff441

00009eb0 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
    9eb0:	b430      	push	{r4, r5}
    9eb2:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    9eb4:	b148      	cbz	r0, 9eca <rpmsg_send_offchannel_raw+0x1a>
    9eb6:	6a00      	ldr	r0, [r0, #32]
    9eb8:	b138      	cbz	r0, 9eca <rpmsg_send_offchannel_raw+0x1a>
    9eba:	b133      	cbz	r3, 9eca <rpmsg_send_offchannel_raw+0x1a>
    9ebc:	3401      	adds	r4, #1
    9ebe:	d004      	beq.n	9eca <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
    9ec0:	6f44      	ldr	r4, [r0, #116]	; 0x74
    9ec2:	b114      	cbz	r4, 9eca <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    9ec4:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
    9ec6:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    9ec8:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
    9eca:	4801      	ldr	r0, [pc, #4]	; (9ed0 <rpmsg_send_offchannel_raw+0x20>)
}
    9ecc:	bc30      	pop	{r4, r5}
    9ece:	4770      	bx	lr
    9ed0:	fffff82d 	.word	0xfffff82d

00009ed4 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
    9ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ed8:	460e      	mov	r6, r1
    9eda:	4690      	mov	r8, r2
    9edc:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
    9ede:	4605      	mov	r5, r0
    9ee0:	2800      	cmp	r0, #0
    9ee2:	d06a      	beq.n	9fba <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
    9ee4:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
    9ee8:	4638      	mov	r0, r7
    9eea:	f005 fa0e 	bl	f30a <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
    9eee:	1c63      	adds	r3, r4, #1
    9ef0:	d11a      	bne.n	9f28 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
    9ef2:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
    9ef4:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    9ef8:	095a      	lsrs	r2, r3, #5
    9efa:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
    9efe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    9f02:	f003 011f 	and.w	r1, r3, #31
    9f06:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
    9f0a:	07e4      	lsls	r4, r4, #31
    9f0c:	d407      	bmi.n	9f1e <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
    9f0e:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    9f12:	2301      	movs	r3, #1
    9f14:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    9f16:	4313      	orrs	r3, r2
    9f18:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
    9f1c:	e01d      	b.n	9f5a <rpmsg_create_ept+0x86>
	     bit++)
    9f1e:	3301      	adds	r3, #1
	for (bit = start;
    9f20:	2b80      	cmp	r3, #128	; 0x80
    9f22:	d1e9      	bne.n	9ef8 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
    9f24:	4c27      	ldr	r4, [pc, #156]	; (9fc4 <rpmsg_create_ept+0xf0>)
    9f26:	e044      	b.n	9fb2 <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
    9f28:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    9f2c:	d315      	bcc.n	9f5a <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
    9f2e:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
    9f32:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
    9f34:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
    9f38:	d83a      	bhi.n	9fb0 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    9f3a:	0958      	lsrs	r0, r3, #5
    9f3c:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    9f40:	f003 031f 	and.w	r3, r3, #31
    9f44:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
    9f48:	07d2      	lsls	r2, r2, #31
    9f4a:	d4eb      	bmi.n	9f24 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    9f4c:	2201      	movs	r2, #1
    9f4e:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    9f52:	ea43 030c 	orr.w	r3, r3, ip
    9f56:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    9f5a:	491b      	ldr	r1, [pc, #108]	; (9fc8 <rpmsg_create_ept+0xf4>)
    9f5c:	2220      	movs	r2, #32
    9f5e:	f1b8 0f00 	cmp.w	r8, #0
    9f62:	bf18      	it	ne
    9f64:	4641      	movne	r1, r8
    9f66:	4628      	mov	r0, r5
    9f68:	f003 fa99 	bl	d49e <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
    9f6c:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
    9f6e:	4629      	mov	r1, r5
    9f70:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
    9f72:	9b07      	ldr	r3, [sp, #28]
    9f74:	4630      	mov	r0, r6
    9f76:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
    9f78:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
    9f7a:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
    9f7c:	632b      	str	r3, [r5, #48]	; 0x30
    9f7e:	f005 fa3e 	bl	f3fe <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
    9f82:	4638      	mov	r0, r7
    9f84:	f001 f884 	bl	b090 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
    9f88:	782c      	ldrb	r4, [r5, #0]
    9f8a:	b174      	cbz	r4, 9faa <rpmsg_create_ept+0xd6>
    9f8c:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    9f90:	b15c      	cbz	r4, 9faa <rpmsg_create_ept+0xd6>
    9f92:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9f94:	3301      	adds	r3, #1
    9f96:	d112      	bne.n	9fbe <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
    9f98:	2100      	movs	r1, #0
    9f9a:	4628      	mov	r0, r5
    9f9c:	f005 f9e6 	bl	f36c <rpmsg_send_ns_message>

	if (status)
    9fa0:	4604      	mov	r4, r0
    9fa2:	b110      	cbz	r0, 9faa <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
    9fa4:	4628      	mov	r0, r5
    9fa6:	f005 f9b6 	bl	f316 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
    9faa:	4620      	mov	r0, r4
    9fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fb0:	4c06      	ldr	r4, [pc, #24]	; (9fcc <rpmsg_create_ept+0xf8>)
    9fb2:	4638      	mov	r0, r7
    9fb4:	f001 f86c 	bl	b090 <z_impl_k_sem_give>
}
    9fb8:	e7f7      	b.n	9faa <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
    9fba:	4c04      	ldr	r4, [pc, #16]	; (9fcc <rpmsg_create_ept+0xf8>)
    9fbc:	e7f5      	b.n	9faa <rpmsg_create_ept+0xd6>
    9fbe:	2400      	movs	r4, #0
    9fc0:	e7f3      	b.n	9faa <rpmsg_create_ept+0xd6>
    9fc2:	bf00      	nop
    9fc4:	fffff829 	.word	0xfffff829
    9fc8:	00010ecb 	.word	0x00010ecb
    9fcc:	fffff82d 	.word	0xfffff82d

00009fd0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
    9fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fd4:	4604      	mov	r4, r0
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
    9fd6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
{
    9fd8:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
    9fda:	6a03      	ldr	r3, [r0, #32]
    9fdc:	b08d      	sub	sp, #52	; 0x34
    9fde:	681b      	ldr	r3, [r3, #0]
    9fe0:	4692      	mov	sl, r2
    9fe2:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    9fe6:	9103      	str	r1, [sp, #12]
    9fe8:	4798      	blx	r3
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
    9fea:	0743      	lsls	r3, r0, #29
    9fec:	f140 8089 	bpl.w	a102 <rpmsg_virtio_send_offchannel_raw+0x132>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
    9ff0:	f643 2398 	movw	r3, #15000	; 0x3a98
    9ff4:	2f00      	cmp	r7, #0
    9ff6:	bf18      	it	ne
    9ff8:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
    9ffa:	f104 0858 	add.w	r8, r4, #88	; 0x58
    9ffe:	4640      	mov	r0, r8
    a000:	f005 fa37 	bl	f472 <__metal_mutex_acquire>
	return rvdev->vdev->role;
    a004:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    a006:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    a008:	b373      	cbz	r3, a068 <rpmsg_virtio_send_offchannel_raw+0x98>
	if (role == RPMSG_REMOTE) {
    a00a:	2b01      	cmp	r3, #1
    a00c:	d108      	bne.n	a020 <rpmsg_virtio_send_offchannel_raw+0x50>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
    a00e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    a012:	f005 f962 	bl	f2da <virtqueue_get_desc_size>
    a016:	3810      	subs	r0, #16
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
		if (avail_size && size > avail_size) {
    a018:	2800      	cmp	r0, #0
    a01a:	ea20 79e0 	bic.w	r9, r0, r0, asr #31
    a01e:	dc25      	bgt.n	a06c <rpmsg_virtio_send_offchannel_raw+0x9c>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    a020:	f04f 0900 	mov.w	r9, #0
    a024:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    a026:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    a028:	bb3b      	cbnz	r3, a07a <rpmsg_virtio_send_offchannel_raw+0xaa>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
    a02a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    a02e:	f10d 0212 	add.w	r2, sp, #18
    a032:	a905      	add	r1, sp, #20
    a034:	f005 f860 	bl	f0f8 <virtqueue_get_buffer>
		if (!data) {
    a038:	4605      	mov	r5, r0
    a03a:	b948      	cbnz	r0, a050 <rpmsg_virtio_send_offchannel_raw+0x80>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    a03c:	f44f 7100 	mov.w	r1, #512	; 0x200
    a040:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a044:	f005 fac4 	bl	f5d0 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
    a048:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    a04c:	4605      	mov	r5, r0
			*len = RPMSG_BUFFER_SIZE;
    a04e:	9305      	str	r3, [sp, #20]
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
    a050:	4640      	mov	r0, r8
    a052:	f005 f9f6 	bl	f442 <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
		}

		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
    a056:	2d00      	cmp	r5, #0
    a058:	d157      	bne.n	a10a <rpmsg_virtio_send_offchannel_raw+0x13a>
    a05a:	2f00      	cmp	r7, #0
    a05c:	d053      	beq.n	a106 <rpmsg_virtio_send_offchannel_raw+0x136>
			break;
		if (avail_size != 0)
    a05e:	f1b9 0f00 	cmp.w	r9, #0
    a062:	d108      	bne.n	a076 <rpmsg_virtio_send_offchannel_raw+0xa6>
			return RPMSG_ERR_BUFF_SIZE;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
    a064:	3f01      	subs	r7, #1
	while (1) {
    a066:	e7ca      	b.n	9ffe <rpmsg_virtio_send_offchannel_raw+0x2e>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    a068:	f44f 79f8 	mov.w	r9, #496	; 0x1f0
		if (avail_size && size > avail_size) {
    a06c:	454e      	cmp	r6, r9
    a06e:	ddd9      	ble.n	a024 <rpmsg_virtio_send_offchannel_raw+0x54>
    a070:	4640      	mov	r0, r8
    a072:	f005 f9e6 	bl	f442 <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
    a076:	4e31      	ldr	r6, [pc, #196]	; (a13c <rpmsg_virtio_send_offchannel_raw+0x16c>)
    a078:	e03f      	b.n	a0fa <rpmsg_virtio_send_offchannel_raw+0x12a>
	if (role == RPMSG_REMOTE) {
    a07a:	2b01      	cmp	r3, #1
    a07c:	d108      	bne.n	a090 <rpmsg_virtio_send_offchannel_raw+0xc0>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
    a07e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    a082:	aa05      	add	r2, sp, #20
    a084:	f10d 0112 	add.w	r1, sp, #18
    a088:	f005 f870 	bl	f16c <virtqueue_get_available_buffer>
    a08c:	4605      	mov	r5, r0
    a08e:	e7df      	b.n	a050 <rpmsg_virtio_send_offchannel_raw+0x80>
	void *data = NULL;
    a090:	2500      	movs	r5, #0
    a092:	e7dd      	b.n	a050 <rpmsg_virtio_send_offchannel_raw+0x80>
    a094:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    a096:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
    a098:	f105 0110 	add.w	r1, r5, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    a09c:	1ac9      	subs	r1, r1, r3
    a09e:	4281      	cmp	r1, r0
    a0a0:	bf28      	it	cs
    a0a2:	f04f 31ff 	movcs.w	r1, #4294967295
    a0a6:	4633      	mov	r3, r6
    a0a8:	465a      	mov	r2, fp
    a0aa:	4638      	mov	r0, r7
    a0ac:	f004 ff03 	bl	eeb6 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
    a0b0:	4286      	cmp	r6, r0
    a0b2:	d000      	beq.n	a0b6 <rpmsg_virtio_send_offchannel_raw+0xe6>
    a0b4:	e7fe      	b.n	a0b4 <rpmsg_virtio_send_offchannel_raw+0xe4>
    a0b6:	4640      	mov	r0, r8
    a0b8:	f005 f9db 	bl	f472 <__metal_mutex_acquire>
    a0bc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
    a0be:	9a05      	ldr	r2, [sp, #20]
    a0c0:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    a0c2:	b953      	cbnz	r3, a0da <rpmsg_virtio_send_offchannel_raw+0x10a>
		vqbuf.len = len;
    a0c4:	e9cd 5206 	strd	r5, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
    a0c8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    a0cc:	2201      	movs	r2, #1
    a0ce:	9500      	str	r5, [sp, #0]
    a0d0:	a906      	add	r1, sp, #24
    a0d2:	f004 ffb1 	bl	f038 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
    a0d6:	b148      	cbz	r0, a0ec <rpmsg_virtio_send_offchannel_raw+0x11c>
    a0d8:	e7fe      	b.n	a0d8 <rpmsg_virtio_send_offchannel_raw+0x108>
	if (role == RPMSG_REMOTE) {
    a0da:	2b01      	cmp	r3, #1
    a0dc:	d106      	bne.n	a0ec <rpmsg_virtio_send_offchannel_raw+0x11c>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
    a0de:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    a0e2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    a0e6:	f7ff fec7 	bl	9e78 <virtqueue_add_consumed_buffer>
    a0ea:	e7f4      	b.n	a0d6 <rpmsg_virtio_send_offchannel_raw+0x106>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
    a0ec:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    a0f0:	f005 f8bb 	bl	f26a <virtqueue_kick>
    a0f4:	4640      	mov	r0, r8
    a0f6:	f005 f9a4 	bl	f442 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
    a0fa:	4630      	mov	r0, r6
    a0fc:	b00d      	add	sp, #52	; 0x34
    a0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
    a102:	4e0f      	ldr	r6, [pc, #60]	; (a140 <rpmsg_virtio_send_offchannel_raw+0x170>)
    a104:	e7f9      	b.n	a0fa <rpmsg_virtio_send_offchannel_raw+0x12a>
		return RPMSG_ERR_NO_BUFF;
    a106:	4e0f      	ldr	r6, [pc, #60]	; (a144 <rpmsg_virtio_send_offchannel_raw+0x174>)
    a108:	e7f7      	b.n	a0fa <rpmsg_virtio_send_offchannel_raw+0x12a>
	rp_hdr.src = src;
    a10a:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
    a10c:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
	rp_hdr.src = src;
    a110:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
    a112:	2300      	movs	r3, #0
    a114:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    a116:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    a118:	1a69      	subs	r1, r5, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    a11a:	4281      	cmp	r1, r0
    a11c:	bf28      	it	cs
    a11e:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
    a122:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    a124:	4638      	mov	r0, r7
    a126:	2310      	movs	r3, #16
    a128:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
    a12a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
    a12e:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    a132:	f004 fec0 	bl	eeb6 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
    a136:	2810      	cmp	r0, #16
    a138:	d0ac      	beq.n	a094 <rpmsg_virtio_send_offchannel_raw+0xc4>
    a13a:	e7fe      	b.n	a13a <rpmsg_virtio_send_offchannel_raw+0x16a>
    a13c:	fffff82b 	.word	0xfffff82b
    a140:	fffff82c 	.word	0xfffff82c
    a144:	fffff82e 	.word	0xfffff82e

0000a148 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
    a148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a14c:	460d      	mov	r5, r1
    a14e:	b088      	sub	sp, #32
    a150:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
    a152:	2100      	movs	r1, #0
    a154:	227c      	movs	r2, #124	; 0x7c
{
    a156:	4604      	mov	r4, r0
    a158:	461e      	mov	r6, r3
    a15a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
    a15e:	f003 fa17 	bl	d590 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
    a162:	2201      	movs	r2, #1
    a164:	f104 0058 	add.w	r0, r4, #88	; 0x58
    a168:	4611      	mov	r1, r2
    a16a:	f005 fc9d 	bl	faa8 <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    a16e:	4b5e      	ldr	r3, [pc, #376]	; (a2e8 <rpmsg_init_vdev+0x1a0>)
	rvdev->vdev = vdev;
    a170:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
    a172:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
    a174:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    a176:	6763      	str	r3, [r4, #116]	; 0x74
    a178:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    a17a:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
    a17e:	f1b8 0f01 	cmp.w	r8, #1
    a182:	d020      	beq.n	a1c6 <rpmsg_init_vdev+0x7e>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
    a184:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
    a186:	6a03      	ldr	r3, [r0, #32]
    a188:	689b      	ldr	r3, [r3, #8]
    a18a:	4798      	blx	r3
    a18c:	2300      	movs	r3, #0
    a18e:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    a190:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
    a194:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    a196:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    a19a:	f1b8 0f00 	cmp.w	r8, #0
    a19e:	d01e      	beq.n	a1de <rpmsg_init_vdev+0x96>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
    a1a0:	f1b8 0f01 	cmp.w	r8, #1
    a1a4:	d133      	bne.n	a20e <rpmsg_init_vdev+0xc6>
		vq_names[0] = "tx_vq";
    a1a6:	4b51      	ldr	r3, [pc, #324]	; (a2ec <rpmsg_init_vdev+0x1a4>)
    a1a8:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
    a1aa:	4b51      	ldr	r3, [pc, #324]	; (a2f0 <rpmsg_init_vdev+0x1a8>)
    a1ac:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
    a1ae:	4b51      	ldr	r3, [pc, #324]	; (a2f4 <rpmsg_init_vdev+0x1ac>)
    a1b0:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
    a1b2:	4b51      	ldr	r3, [pc, #324]	; (a2f8 <rpmsg_init_vdev+0x1b0>)
    a1b4:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    a1b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    a1b8:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
    a1ba:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    a1bc:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
    a1c0:	e023      	b.n	a20a <rpmsg_init_vdev+0xc2>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
    a1c2:	0743      	lsls	r3, r0, #29
    a1c4:	d4de      	bmi.n	a184 <rpmsg_init_vdev+0x3c>
		status = rpmsg_virtio_get_status(rvdev);
    a1c6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
    a1c8:	6a03      	ldr	r3, [r0, #32]
    a1ca:	681b      	ldr	r3, [r3, #0]
    a1cc:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
    a1ce:	0642      	lsls	r2, r0, #25
    a1d0:	d5f7      	bpl.n	a1c2 <rpmsg_init_vdev+0x7a>
			rpmsg_virtio_set_status(rvdev, 0);
    a1d2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    a1d4:	2100      	movs	r1, #0
    a1d6:	6a03      	ldr	r3, [r0, #32]
    a1d8:	685b      	ldr	r3, [r3, #4]
    a1da:	4798      	blx	r3
}
    a1dc:	e7f3      	b.n	a1c6 <rpmsg_init_vdev+0x7e>
		if (!shpool)
    a1de:	f1b9 0f00 	cmp.w	r9, #0
    a1e2:	d07d      	beq.n	a2e0 <rpmsg_init_vdev+0x198>
		if (!shpool->size)
    a1e4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d07b      	beq.n	a2e4 <rpmsg_init_vdev+0x19c>
		vq_names[0] = "rx_vq";
    a1ec:	4b40      	ldr	r3, [pc, #256]	; (a2f0 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
    a1ee:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
    a1f2:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
    a1f4:	4b3d      	ldr	r3, [pc, #244]	; (a2ec <rpmsg_init_vdev+0x1a4>)
    a1f6:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
    a1f8:	4b3f      	ldr	r3, [pc, #252]	; (a2f8 <rpmsg_init_vdev+0x1b0>)
    a1fa:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
    a1fc:	4b3d      	ldr	r3, [pc, #244]	; (a2f4 <rpmsg_init_vdev+0x1ac>)
    a1fe:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    a200:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    a202:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
    a204:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    a206:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
    a20a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
    a20e:	ab04      	add	r3, sp, #16
    a210:	9300      	str	r3, [sp, #0]
    a212:	2202      	movs	r2, #2
    a214:	2100      	movs	r1, #0
    a216:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
    a218:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    a21c:	ab02      	add	r3, sp, #8
    a21e:	f7ff fddb 	bl	9dd8 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
    a222:	4607      	mov	r7, r0
    a224:	2800      	cmp	r0, #0
    a226:	d157      	bne.n	a2d8 <rpmsg_init_vdev+0x190>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
    a228:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    a22c:	f004 fff3 	bl	f216 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
    a230:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
    a232:	681a      	ldr	r2, [r3, #0]
    a234:	699b      	ldr	r3, [r3, #24]
    a236:	6296      	str	r6, [r2, #40]	; 0x28
    a238:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    a23a:	f1b8 0f00 	cmp.w	r8, #0
    a23e:	d108      	bne.n	a252 <rpmsg_init_vdev+0x10a>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
    a240:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    a244:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
    a246:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    a248:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    a24c:	895b      	ldrh	r3, [r3, #10]
    a24e:	4553      	cmp	r3, sl
    a250:	d81f      	bhi.n	a292 <rpmsg_init_vdev+0x14a>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
    a252:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a256:	e9c4 4400 	strd	r4, r4, [r4]
    a25a:	b18b      	cbz	r3, a280 <rpmsg_init_vdev+0x138>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
    a25c:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    a260:	4926      	ldr	r1, [pc, #152]	; (a2fc <rpmsg_init_vdev+0x1b4>)
    a262:	2220      	movs	r2, #32
    a264:	4628      	mov	r0, r5
    a266:	f003 f91a 	bl	d49e <strncpy>
	ept->addr = src;
    a26a:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
    a26c:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
    a270:	4b23      	ldr	r3, [pc, #140]	; (a300 <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
    a272:	4629      	mov	r1, r5
    a274:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
    a276:	2300      	movs	r3, #0
    a278:	4620      	mov	r0, r4
    a27a:	63a3      	str	r3, [r4, #56]	; 0x38
    a27c:	f005 f8bf 	bl	f3fe <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
    a280:	f1b8 0f00 	cmp.w	r8, #0
    a284:	d128      	bne.n	a2d8 <rpmsg_init_vdev+0x190>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
    a286:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    a288:	2104      	movs	r1, #4
    a28a:	6a03      	ldr	r3, [r0, #32]
    a28c:	685b      	ldr	r3, [r3, #4]
    a28e:	4798      	blx	r3
}
    a290:	e022      	b.n	a2d8 <rpmsg_init_vdev+0x190>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
    a292:	f44f 7100 	mov.w	r1, #512	; 0x200
    a296:	4648      	mov	r0, r9
    a298:	f005 f99a 	bl	f5d0 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
    a29c:	4605      	mov	r5, r0
    a29e:	b1c8      	cbz	r0, a2d4 <rpmsg_init_vdev+0x18c>
    a2a0:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
    a2a2:	9006      	str	r0, [sp, #24]
    a2a4:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    a2a6:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
    a2a8:	f44f 7300 	mov.w	r3, #512	; 0x200
    a2ac:	4281      	cmp	r1, r0
    a2ae:	bf28      	it	cs
    a2b0:	f04f 31ff 	movcs.w	r1, #4294967295
    a2b4:	2200      	movs	r2, #0
    a2b6:	4630      	mov	r0, r6
    a2b8:	f004 fe38 	bl	ef2c <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
    a2bc:	2301      	movs	r3, #1
    a2be:	2200      	movs	r2, #0
    a2c0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    a2c4:	9500      	str	r5, [sp, #0]
    a2c6:	a906      	add	r1, sp, #24
    a2c8:	f004 feb6 	bl	f038 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
    a2cc:	b918      	cbnz	r0, a2d6 <rpmsg_init_vdev+0x18e>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    a2ce:	f10a 0a01 	add.w	sl, sl, #1
    a2d2:	e7b9      	b.n	a248 <rpmsg_init_vdev+0x100>
				return RPMSG_ERR_NO_BUFF;
    a2d4:	480b      	ldr	r0, [pc, #44]	; (a304 <rpmsg_init_vdev+0x1bc>)
    a2d6:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
    a2d8:	4638      	mov	r0, r7
    a2da:	b008      	add	sp, #32
    a2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
    a2e0:	4f09      	ldr	r7, [pc, #36]	; (a308 <rpmsg_init_vdev+0x1c0>)
    a2e2:	e7f9      	b.n	a2d8 <rpmsg_init_vdev+0x190>
			return RPMSG_ERR_NO_BUFF;
    a2e4:	4f07      	ldr	r7, [pc, #28]	; (a304 <rpmsg_init_vdev+0x1bc>)
    a2e6:	e7f7      	b.n	a2d8 <rpmsg_init_vdev+0x190>
    a2e8:	00009fd1 	.word	0x00009fd1
    a2ec:	00012bd1 	.word	0x00012bd1
    a2f0:	00012bcb 	.word	0x00012bcb
    a2f4:	0000f441 	.word	0x0000f441
    a2f8:	0000f511 	.word	0x0000f511
    a2fc:	00012bd7 	.word	0x00012bd7
    a300:	0000f47f 	.word	0x0000f47f
    a304:	fffff82e 	.word	0xfffff82e
    a308:	fffff82d 	.word	0xfffff82d

0000a30c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a30e:	4b10      	ldr	r3, [pc, #64]	; (a350 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    a310:	4f10      	ldr	r7, [pc, #64]	; (a354 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a312:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    a316:	3001      	adds	r0, #1
    a318:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    a31c:	42ae      	cmp	r6, r5
    a31e:	d800      	bhi.n	a322 <z_sys_init_run_level+0x16>
		}
	}
}
    a320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    a322:	e9d5 3400 	ldrd	r3, r4, [r5]
    a326:	4620      	mov	r0, r4
    a328:	4798      	blx	r3
    a32a:	b170      	cbz	r0, a34a <z_sys_init_run_level+0x3e>
    a32c:	b16c      	cbz	r4, a34a <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    a32e:	2301      	movs	r3, #1
				(dev - __device_start));
    a330:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    a332:	4a09      	ldr	r2, [pc, #36]	; (a358 <z_sys_init_run_level+0x4c>)
    a334:	1124      	asrs	r4, r4, #4
    a336:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    a338:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    a33c:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    a340:	fa03 f404 	lsl.w	r4, r3, r4
    a344:	4304      	orrs	r4, r0
    a346:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a34a:	3508      	adds	r5, #8
    a34c:	e7e6      	b.n	a31c <z_sys_init_run_level+0x10>
    a34e:	bf00      	nop
    a350:	00010bdc 	.word	0x00010bdc
    a354:	20000410 	.word	0x20000410
    a358:	20000490 	.word	0x20000490

0000a35c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    a35c:	4b08      	ldr	r3, [pc, #32]	; (a380 <z_device_ready+0x24>)
    a35e:	1ac0      	subs	r0, r0, r3
    a360:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    a362:	4b08      	ldr	r3, [pc, #32]	; (a384 <z_device_ready+0x28>)
    a364:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    a366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    a36a:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    a36c:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    a370:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    a374:	4210      	tst	r0, r2
}
    a376:	bf0c      	ite	eq
    a378:	4618      	moveq	r0, r3
    a37a:	2000      	movne	r0, #0
    a37c:	4770      	bx	lr
    a37e:	bf00      	nop
    a380:	20000410 	.word	0x20000410
    a384:	20000490 	.word	0x20000490

0000a388 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    a388:	4911      	ldr	r1, [pc, #68]	; (a3d0 <z_impl_device_get_binding+0x48>)
{
    a38a:	b570      	push	{r4, r5, r6, lr}
    a38c:	4605      	mov	r5, r0
    a38e:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    a390:	4c10      	ldr	r4, [pc, #64]	; (a3d4 <z_impl_device_get_binding+0x4c>)
    a392:	428c      	cmp	r4, r1
    a394:	d104      	bne.n	a3a0 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    a396:	4c0f      	ldr	r4, [pc, #60]	; (a3d4 <z_impl_device_get_binding+0x4c>)
    a398:	42b4      	cmp	r4, r6
    a39a:	d10a      	bne.n	a3b2 <z_impl_device_get_binding+0x2a>
	return NULL;
    a39c:	2400      	movs	r4, #0
    a39e:	e014      	b.n	a3ca <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    a3a0:	4620      	mov	r0, r4
    a3a2:	f7ff ffdb 	bl	a35c <z_device_ready>
    a3a6:	b110      	cbz	r0, a3ae <z_impl_device_get_binding+0x26>
    a3a8:	6823      	ldr	r3, [r4, #0]
    a3aa:	42ab      	cmp	r3, r5
    a3ac:	d00d      	beq.n	a3ca <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    a3ae:	3410      	adds	r4, #16
    a3b0:	e7ef      	b.n	a392 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a3b2:	4620      	mov	r0, r4
    a3b4:	f7ff ffd2 	bl	a35c <z_device_ready>
    a3b8:	b908      	cbnz	r0, a3be <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    a3ba:	3410      	adds	r4, #16
    a3bc:	e7ec      	b.n	a398 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a3be:	4628      	mov	r0, r5
    a3c0:	6821      	ldr	r1, [r4, #0]
    a3c2:	f003 f88f 	bl	d4e4 <strcmp>
    a3c6:	2800      	cmp	r0, #0
    a3c8:	d1f7      	bne.n	a3ba <z_impl_device_get_binding+0x32>
}
    a3ca:	4620      	mov	r0, r4
    a3cc:	bd70      	pop	{r4, r5, r6, pc}
    a3ce:	bf00      	nop
    a3d0:	20000490 	.word	0x20000490
    a3d4:	20000410 	.word	0x20000410

0000a3d8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a3d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a3dc:	4606      	mov	r6, r0
    a3de:	460f      	mov	r7, r1
	__asm__ volatile(
    a3e0:	f04f 0320 	mov.w	r3, #32
    a3e4:	f3ef 8811 	mrs	r8, BASEPRI
    a3e8:	f383 8811 	msr	BASEPRI, r3
    a3ec:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    a3f0:	f000 fe48 	bl	b084 <z_impl_k_current_get>
    a3f4:	4c21      	ldr	r4, [pc, #132]	; (a47c <z_fatal_error+0xa4>)
    a3f6:	4b22      	ldr	r3, [pc, #136]	; (a480 <z_fatal_error+0xa8>)
    a3f8:	2e04      	cmp	r6, #4
    a3fa:	eba4 0403 	sub.w	r4, r4, r3
    a3fe:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    a402:	bf98      	it	ls
    a404:	4a1f      	ldrls	r2, [pc, #124]	; (a484 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a406:	ea4f 1484 	mov.w	r4, r4, lsl #6
    a40a:	f044 0301 	orr.w	r3, r4, #1
    a40e:	4605      	mov	r5, r0
	switch (reason) {
    a410:	bf94      	ite	ls
    a412:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a416:	4a1c      	ldrhi	r2, [pc, #112]	; (a488 <z_fatal_error+0xb0>)
    a418:	f8ad 3000 	strh.w	r3, [sp]
    a41c:	4631      	mov	r1, r6
    a41e:	2300      	movs	r3, #0
    a420:	481a      	ldr	r0, [pc, #104]	; (a48c <z_fatal_error+0xb4>)
    a422:	f002 f89a 	bl	c55a <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a426:	b147      	cbz	r7, a43a <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a428:	69fb      	ldr	r3, [r7, #28]
    a42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a42e:	b123      	cbz	r3, a43a <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
    a430:	4817      	ldr	r0, [pc, #92]	; (a490 <z_fatal_error+0xb8>)
    a432:	f044 0101 	orr.w	r1, r4, #1
    a436:	f002 f856 	bl	c4e6 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a43a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
    a43e:	b12d      	cbz	r5, a44c <z_fatal_error+0x74>
    a440:	4628      	mov	r0, r5
    a442:	f005 fb4e 	bl	fae2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    a446:	b108      	cbz	r0, a44c <z_fatal_error+0x74>
    a448:	7803      	ldrb	r3, [r0, #0]
    a44a:	b903      	cbnz	r3, a44e <z_fatal_error+0x76>
		thread_name = "unknown";
    a44c:	4811      	ldr	r0, [pc, #68]	; (a494 <z_fatal_error+0xbc>)
	LOG_ERR("Current thread: %p (%s)", thread,
    a44e:	f7f6 ff7f 	bl	1350 <log_strdup>
    a452:	4623      	mov	r3, r4
    a454:	4602      	mov	r2, r0
    a456:	4629      	mov	r1, r5
    a458:	480f      	ldr	r0, [pc, #60]	; (a498 <z_fatal_error+0xc0>)
    a45a:	f002 f865 	bl	c528 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    a45e:	4639      	mov	r1, r7
    a460:	4630      	mov	r0, r6
    a462:	f7ff f91d 	bl	96a0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    a466:	f388 8811 	msr	BASEPRI, r8
    a46a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a46e:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    a470:	b002      	add	sp, #8
    a472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a476:	f7f9 b8d5 	b.w	3624 <z_impl_k_thread_abort>
    a47a:	bf00      	nop
    a47c:	00010398 	.word	0x00010398
    a480:	000102f8 	.word	0x000102f8
    a484:	00010bf4 	.word	0x00010bf4
    a488:	00012bda 	.word	0x00012bda
    a48c:	00012be8 	.word	0x00012be8
    a490:	00012c10 	.word	0x00012c10
    a494:	00011b21 	.word	0x00011b21
    a498:	00012c31 	.word	0x00012c31

0000a49c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a49e:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
    a4a0:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
    a4a2:	4e15      	ldr	r6, [pc, #84]	; (a4f8 <idle+0x5c>)
	__asm__ volatile(
    a4a4:	f04f 0220 	mov.w	r2, #32
    a4a8:	f3ef 8311 	mrs	r3, BASEPRI
    a4ac:	f382 8811 	msr	BASEPRI, r2
    a4b0:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    a4b4:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    a4b6:	b188      	cbz	r0, a4dc <idle+0x40>
			cpu->pending_abort = NULL;
    a4b8:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    a4ba:	f383 8811 	msr	BASEPRI, r3
    a4be:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
    a4c2:	f000 fc0f 	bl	ace4 <z_thread_single_abort>
	__asm__ volatile(
    a4c6:	f04f 0320 	mov.w	r3, #32
    a4ca:	f3ef 8011 	mrs	r0, BASEPRI
    a4ce:	f383 8811 	msr	BASEPRI, r3
    a4d2:	f3bf 8f6f 	isb	sy
    a4d6:	f005 fa15 	bl	f904 <z_reschedule_irqlock>
			continue;
    a4da:	e7e3      	b.n	a4a4 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
    a4dc:	f005 fb87 	bl	fbee <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    a4e0:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
    a4e2:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    a4e4:	2802      	cmp	r0, #2
    a4e6:	bfd8      	it	le
    a4e8:	4608      	movle	r0, r1
    a4ea:	f005 fb90 	bl	fc0e <z_set_timeout_expiry>
		_kernel.idle = ticks;
    a4ee:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    a4f0:	f7f8 fdf8 	bl	30e4 <arch_cpu_idle>
}
    a4f4:	e7d6      	b.n	a4a4 <idle+0x8>
    a4f6:	bf00      	nop
    a4f8:	200018f4 	.word	0x200018f4

0000a4fc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    a4fc:	4802      	ldr	r0, [pc, #8]	; (a508 <z_bss_zero+0xc>)
    a4fe:	4a03      	ldr	r2, [pc, #12]	; (a50c <z_bss_zero+0x10>)
    a500:	2100      	movs	r1, #0
    a502:	1a12      	subs	r2, r2, r0
    a504:	f003 b844 	b.w	d590 <memset>
    a508:	20000698 	.word	0x20000698
    a50c:	20002a18 	.word	0x20002a18

0000a510 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    a510:	2201      	movs	r2, #1
{
    a512:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    a514:	4b09      	ldr	r3, [pc, #36]	; (a53c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a516:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    a518:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a51a:	f7ff fef7 	bl	a30c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    a51e:	f000 ff53 	bl	b3c8 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    a522:	2003      	movs	r0, #3
    a524:	f7ff fef2 	bl	a30c <z_sys_init_run_level>

	z_init_static_threads();
    a528:	f000 fe76 	bl	b218 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    a52c:	f7f6 f8bc 	bl	6a8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a530:	4a03      	ldr	r2, [pc, #12]	; (a540 <bg_thread_main+0x30>)
    a532:	7b13      	ldrb	r3, [r2, #12]
    a534:	f023 0301 	bic.w	r3, r3, #1
    a538:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a53a:	bd08      	pop	{r3, pc}
    a53c:	20002a15 	.word	0x20002a15
    a540:	20000db0 	.word	0x20000db0

0000a544 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    a544:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    a548:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    a54a:	f7f6 fe65 	bl	1218 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    a54e:	4b34      	ldr	r3, [pc, #208]	; (a620 <z_cstart+0xdc>)
	uint32_t msp =
    a550:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a554:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    a558:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a55c:	2400      	movs	r4, #0
    a55e:	23e0      	movs	r3, #224	; 0xe0
    a560:	4d30      	ldr	r5, [pc, #192]	; (a624 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a562:	f04f 0b01 	mov.w	fp, #1
    a566:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    a56a:	77ec      	strb	r4, [r5, #31]
    a56c:	762c      	strb	r4, [r5, #24]
    a56e:	766c      	strb	r4, [r5, #25]
    a570:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a572:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    a574:	4e2c      	ldr	r6, [pc, #176]	; (a628 <z_cstart+0xe4>)
    a576:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a57a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a57c:	f7f9 f828 	bl	35d0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a580:	f7f8 fdaa 	bl	30d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a584:	f04f 33ff 	mov.w	r3, #4294967295
    a588:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a58a:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    a58c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    a590:	4d26      	ldr	r5, [pc, #152]	; (a62c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    a592:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    a596:	ab06      	add	r3, sp, #24
    a598:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a59a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    a59c:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
    a5a0:	f7ff feb4 	bl	a30c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a5a4:	2001      	movs	r0, #1
    a5a6:	f7ff feb1 	bl	a30c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a5aa:	f8df a098 	ldr.w	sl, [pc, #152]	; a644 <z_cstart+0x100>
	z_sched_init();
    a5ae:	f000 fced 	bl	af8c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a5b2:	4b1f      	ldr	r3, [pc, #124]	; (a630 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    a5b4:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a5b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a5ba:	491e      	ldr	r1, [pc, #120]	; (a634 <z_cstart+0xf0>)
    a5bc:	9305      	str	r3, [sp, #20]
    a5be:	4630      	mov	r0, r6
    a5c0:	4653      	mov	r3, sl
    a5c2:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    a5c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a5ca:	9400      	str	r4, [sp, #0]
    a5cc:	f000 fdc8 	bl	b160 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a5d0:	7b73      	ldrb	r3, [r6, #13]
    a5d2:	4680      	mov	r8, r0
    a5d4:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    a5d8:	4630      	mov	r0, r6
    a5da:	7373      	strb	r3, [r6, #13]
    a5dc:	f005 f9d4 	bl	f988 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    a5e0:	230f      	movs	r3, #15
    a5e2:	4f15      	ldr	r7, [pc, #84]	; (a638 <z_cstart+0xf4>)
    a5e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a5e8:	e9cd 4302 	strd	r4, r3, [sp, #8]
    a5ec:	4913      	ldr	r1, [pc, #76]	; (a63c <z_cstart+0xf8>)
    a5ee:	4b14      	ldr	r3, [pc, #80]	; (a640 <z_cstart+0xfc>)
    a5f0:	4638      	mov	r0, r7
    a5f2:	e9cd b404 	strd	fp, r4, [sp, #16]
    a5f6:	e9cd 5400 	strd	r5, r4, [sp]
    a5fa:	f000 fdb1 	bl	b160 <z_setup_new_thread>
    a5fe:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a600:	4652      	mov	r2, sl
    a602:	f023 0304 	bic.w	r3, r3, #4
    a606:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    a608:	f105 031c 	add.w	r3, r5, #28
    a60c:	4641      	mov	r1, r8
    a60e:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    a610:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    a614:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    a616:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    a618:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a61c:	f7f8 fcac 	bl	2f78 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a620:	20004388 	.word	0x20004388
    a624:	e000ed00 	.word	0xe000ed00
    a628:	20000db0 	.word	0x20000db0
    a62c:	200018f4 	.word	0x200018f4
    a630:	00010d9f 	.word	0x00010d9f
    a634:	20003e48 	.word	0x20003e48
    a638:	20000d28 	.word	0x20000d28
    a63c:	20004248 	.word	0x20004248
    a640:	0000a49d 	.word	0x0000a49d
    a644:	0000a511 	.word	0x0000a511

0000a648 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    a648:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    a64a:	4c06      	ldr	r4, [pc, #24]	; (a664 <statics_init+0x1c>)
    a64c:	4d06      	ldr	r5, [pc, #24]	; (a668 <statics_init+0x20>)
    a64e:	42ac      	cmp	r4, r5
    a650:	d301      	bcc.n	a656 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    a652:	2000      	movs	r0, #0
    a654:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    a656:	4620      	mov	r0, r4
    a658:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    a65c:	f004 ffcd 	bl	f5fa <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    a660:	3414      	adds	r4, #20
    a662:	e7f4      	b.n	a64e <statics_init+0x6>
    a664:	200004e8 	.word	0x200004e8
    a668:	200004fc 	.word	0x200004fc

0000a66c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    a66c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a66e:	4b0e      	ldr	r3, [pc, #56]	; (a6a8 <init_mem_slab_module+0x3c>)
    a670:	4c0e      	ldr	r4, [pc, #56]	; (a6ac <init_mem_slab_module+0x40>)
    a672:	42a3      	cmp	r3, r4
    a674:	d301      	bcc.n	a67a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    a676:	2000      	movs	r0, #0
	return rc;
}
    a678:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a67a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    a67e:	ea41 0200 	orr.w	r2, r1, r0
    a682:	f012 0203 	ands.w	r2, r2, #3
    a686:	d10b      	bne.n	a6a0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    a688:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    a68a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a68c:	42aa      	cmp	r2, r5
    a68e:	d101      	bne.n	a694 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a690:	331c      	adds	r3, #28
    a692:	e7ee      	b.n	a672 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    a694:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a696:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    a698:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    a69a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    a69c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    a69e:	e7f5      	b.n	a68c <init_mem_slab_module+0x20>
		return -EINVAL;
    a6a0:	f06f 0015 	mvn.w	r0, #21
	return rc;
    a6a4:	e7e8      	b.n	a678 <init_mem_slab_module+0xc>
    a6a6:	bf00      	nop
    a6a8:	20000494 	.word	0x20000494
    a6ac:	200004e8 	.word	0x200004e8

0000a6b0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a6b0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    a6b2:	460c      	mov	r4, r1
    a6b4:	4616      	mov	r6, r2
    a6b6:	461f      	mov	r7, r3
    a6b8:	f04f 0320 	mov.w	r3, #32
    a6bc:	f3ef 8111 	mrs	r1, BASEPRI
    a6c0:	f383 8811 	msr	BASEPRI, r3
    a6c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    a6c8:	6943      	ldr	r3, [r0, #20]
    a6ca:	b15b      	cbz	r3, a6e4 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    a6cc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    a6ce:	681b      	ldr	r3, [r3, #0]
    a6d0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    a6d2:	6983      	ldr	r3, [r0, #24]
    a6d4:	3301      	adds	r3, #1
    a6d6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a6d8:	2000      	movs	r0, #0
	__asm__ volatile(
    a6da:	f381 8811 	msr	BASEPRI, r1
    a6de:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    a6e2:	e011      	b.n	a708 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a6e4:	ea56 0207 	orrs.w	r2, r6, r7
    a6e8:	d103      	bne.n	a6f2 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    a6ea:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    a6ee:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    a6f0:	e7f3      	b.n	a6da <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    a6f2:	4602      	mov	r2, r0
    a6f4:	e9cd 6700 	strd	r6, r7, [sp]
    a6f8:	4804      	ldr	r0, [pc, #16]	; (a70c <k_mem_slab_alloc+0x5c>)
    a6fa:	f000 fbb5 	bl	ae68 <z_pend_curr>
		if (result == 0) {
    a6fe:	b918      	cbnz	r0, a708 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    a700:	4b03      	ldr	r3, [pc, #12]	; (a710 <k_mem_slab_alloc+0x60>)
    a702:	689b      	ldr	r3, [r3, #8]
    a704:	695b      	ldr	r3, [r3, #20]
    a706:	6023      	str	r3, [r4, #0]
}
    a708:	b002      	add	sp, #8
    a70a:	bdd0      	pop	{r4, r6, r7, pc}
    a70c:	20002a16 	.word	0x20002a16
    a710:	200018f4 	.word	0x200018f4

0000a714 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a716:	4604      	mov	r4, r0
    a718:	460d      	mov	r5, r1
	__asm__ volatile(
    a71a:	f04f 0320 	mov.w	r3, #32
    a71e:	f3ef 8611 	mrs	r6, BASEPRI
    a722:	f383 8811 	msr	BASEPRI, r3
    a726:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    a72a:	6947      	ldr	r7, [r0, #20]
    a72c:	b977      	cbnz	r7, a74c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    a72e:	f005 f986 	bl	fa3e <z_unpend_first_thread>

		if (pending_thread != NULL) {
    a732:	b158      	cbz	r0, a74c <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    a734:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a736:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    a73a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    a73c:	f005 f924 	bl	f988 <z_ready_thread>
			z_reschedule(&lock, key);
    a740:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    a742:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    a746:	4808      	ldr	r0, [pc, #32]	; (a768 <k_mem_slab_free+0x54>)
    a748:	f000 b946 	b.w	a9d8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    a74c:	682b      	ldr	r3, [r5, #0]
    a74e:	6962      	ldr	r2, [r4, #20]
    a750:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    a752:	682b      	ldr	r3, [r5, #0]
    a754:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    a756:	69a3      	ldr	r3, [r4, #24]
    a758:	3b01      	subs	r3, #1
    a75a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    a75c:	f386 8811 	msr	BASEPRI, r6
    a760:	f3bf 8f6f 	isb	sy
}
    a764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a766:	bf00      	nop
    a768:	20002a16 	.word	0x20002a16

0000a76c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    a76c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a770:	4604      	mov	r4, r0
    a772:	4616      	mov	r6, r2
    a774:	461f      	mov	r7, r3
	__asm__ volatile(
    a776:	f04f 0320 	mov.w	r3, #32
    a77a:	f3ef 8811 	mrs	r8, BASEPRI
    a77e:	f383 8811 	msr	BASEPRI, r3
    a782:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a786:	68c3      	ldr	r3, [r0, #12]
    a788:	4a32      	ldr	r2, [pc, #200]	; (a854 <z_impl_k_mutex_lock+0xe8>)
    a78a:	b16b      	cbz	r3, a7a8 <z_impl_k_mutex_lock+0x3c>
    a78c:	6880      	ldr	r0, [r0, #8]
    a78e:	6891      	ldr	r1, [r2, #8]
    a790:	4288      	cmp	r0, r1
    a792:	d019      	beq.n	a7c8 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    a794:	ea56 0307 	orrs.w	r3, r6, r7
    a798:	d118      	bne.n	a7cc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    a79a:	f388 8811 	msr	BASEPRI, r8
    a79e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    a7a2:	f06f 000f 	mvn.w	r0, #15
    a7a6:	e00c      	b.n	a7c2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    a7a8:	6891      	ldr	r1, [r2, #8]
    a7aa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    a7ae:	3301      	adds	r3, #1
    a7b0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    a7b2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    a7b4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    a7b6:	60a3      	str	r3, [r4, #8]
    a7b8:	f388 8811 	msr	BASEPRI, r8
    a7bc:	f3bf 8f6f 	isb	sy
		return 0;
    a7c0:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    a7c2:	b002      	add	sp, #8
    a7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    a7c8:	6921      	ldr	r1, [r4, #16]
    a7ca:	e7f0      	b.n	a7ae <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    a7cc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a7d0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    a7d4:	4299      	cmp	r1, r3
    a7d6:	bfa8      	it	ge
    a7d8:	4619      	movge	r1, r3
    a7da:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    a7de:	428b      	cmp	r3, r1
    a7e0:	dd2c      	ble.n	a83c <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    a7e2:	f000 fb8f 	bl	af04 <z_set_prio>
    a7e6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    a7e8:	4622      	mov	r2, r4
    a7ea:	4641      	mov	r1, r8
    a7ec:	e9cd 6700 	strd	r6, r7, [sp]
    a7f0:	4819      	ldr	r0, [pc, #100]	; (a858 <z_impl_k_mutex_lock+0xec>)
    a7f2:	f000 fb39 	bl	ae68 <z_pend_curr>
	if (got_mutex == 0) {
    a7f6:	2800      	cmp	r0, #0
    a7f8:	d0e3      	beq.n	a7c2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    a7fa:	f04f 0320 	mov.w	r3, #32
    a7fe:	f3ef 8611 	mrs	r6, BASEPRI
    a802:	f383 8811 	msr	BASEPRI, r3
    a806:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    a80a:	6823      	ldr	r3, [r4, #0]
    a80c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a80e:	42a3      	cmp	r3, r4
    a810:	d007      	beq.n	a822 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a812:	b133      	cbz	r3, a822 <z_impl_k_mutex_lock+0xb6>
    a814:	f993 300e 	ldrsb.w	r3, [r3, #14]
    a818:	4299      	cmp	r1, r3
    a81a:	bfa8      	it	ge
    a81c:	4619      	movge	r1, r3
    a81e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a822:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    a824:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a828:	4299      	cmp	r1, r3
    a82a:	d109      	bne.n	a840 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    a82c:	b16d      	cbz	r5, a84a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    a82e:	4631      	mov	r1, r6
    a830:	4809      	ldr	r0, [pc, #36]	; (a858 <z_impl_k_mutex_lock+0xec>)
    a832:	f000 f8d1 	bl	a9d8 <z_reschedule>
	return -EAGAIN;
    a836:	f06f 000a 	mvn.w	r0, #10
    a83a:	e7c2      	b.n	a7c2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    a83c:	2500      	movs	r5, #0
    a83e:	e7d3      	b.n	a7e8 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    a840:	f000 fb60 	bl	af04 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a844:	2800      	cmp	r0, #0
    a846:	d1f2      	bne.n	a82e <z_impl_k_mutex_lock+0xc2>
    a848:	e7f0      	b.n	a82c <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    a84a:	f386 8811 	msr	BASEPRI, r6
    a84e:	f3bf 8f6f 	isb	sy
    a852:	e7f0      	b.n	a836 <z_impl_k_mutex_lock+0xca>
    a854:	200018f4 	.word	0x200018f4
    a858:	20002a16 	.word	0x20002a16

0000a85c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    a85c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    a85e:	6883      	ldr	r3, [r0, #8]
{
    a860:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    a862:	2b00      	cmp	r3, #0
    a864:	d037      	beq.n	a8d6 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    a866:	4a1f      	ldr	r2, [pc, #124]	; (a8e4 <z_impl_k_mutex_unlock+0x88>)
    a868:	6892      	ldr	r2, [r2, #8]
    a86a:	4293      	cmp	r3, r2
    a86c:	d136      	bne.n	a8dc <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    a86e:	7bda      	ldrb	r2, [r3, #15]
    a870:	3a01      	subs	r2, #1
    a872:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    a874:	68c3      	ldr	r3, [r0, #12]
    a876:	2b01      	cmp	r3, #1
    a878:	d005      	beq.n	a886 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    a87a:	3b01      	subs	r3, #1
    a87c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    a87e:	f000 f90f 	bl	aaa0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    a882:	2000      	movs	r0, #0
}
    a884:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a886:	f04f 0320 	mov.w	r3, #32
    a88a:	f3ef 8511 	mrs	r5, BASEPRI
    a88e:	f383 8811 	msr	BASEPRI, r3
    a892:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    a896:	6901      	ldr	r1, [r0, #16]
    a898:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    a89a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a89e:	4299      	cmp	r1, r3
    a8a0:	d001      	beq.n	a8a6 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    a8a2:	f000 fb2f 	bl	af04 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    a8a6:	4620      	mov	r0, r4
    a8a8:	f005 f8c9 	bl	fa3e <z_unpend_first_thread>
	mutex->owner = new_owner;
    a8ac:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    a8ae:	b160      	cbz	r0, a8ca <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
    a8b0:	f990 200e 	ldrsb.w	r2, [r0, #14]
    a8b4:	6122      	str	r2, [r4, #16]
    a8b6:	2200      	movs	r2, #0
    a8b8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
    a8bc:	f005 f864 	bl	f988 <z_ready_thread>
		z_reschedule(&lock, key);
    a8c0:	4629      	mov	r1, r5
    a8c2:	4809      	ldr	r0, [pc, #36]	; (a8e8 <z_impl_k_mutex_unlock+0x8c>)
    a8c4:	f000 f888 	bl	a9d8 <z_reschedule>
    a8c8:	e7d9      	b.n	a87e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    a8ca:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    a8cc:	f385 8811 	msr	BASEPRI, r5
    a8d0:	f3bf 8f6f 	isb	sy
    a8d4:	e7d3      	b.n	a87e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    a8d6:	f06f 0015 	mvn.w	r0, #21
    a8da:	e7d3      	b.n	a884 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    a8dc:	f04f 30ff 	mov.w	r0, #4294967295
    a8e0:	e7d0      	b.n	a884 <z_impl_k_mutex_unlock+0x28>
    a8e2:	bf00      	nop
    a8e4:	200018f4 	.word	0x200018f4
    a8e8:	20002a16 	.word	0x20002a16

0000a8ec <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    a8ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a8ee:	4616      	mov	r6, r2
    a8f0:	461f      	mov	r7, r3
	__asm__ volatile(
    a8f2:	f04f 0320 	mov.w	r3, #32
    a8f6:	f3ef 8511 	mrs	r5, BASEPRI
    a8fa:	f383 8811 	msr	BASEPRI, r3
    a8fe:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    a902:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    a904:	b19c      	cbz	r4, a92e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a906:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    a908:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a90a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    a90e:	4294      	cmp	r4, r2
	list->head = node;
    a910:	6003      	str	r3, [r0, #0]
	list->tail = node;
    a912:	bf08      	it	eq
    a914:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    a916:	2101      	movs	r1, #1
    a918:	4620      	mov	r0, r4
    a91a:	f004 ff61 	bl	f7e0 <z_queue_node_peek>
    a91e:	4604      	mov	r4, r0
	__asm__ volatile(
    a920:	f385 8811 	msr	BASEPRI, r5
    a924:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    a928:	4620      	mov	r0, r4
    a92a:	b003      	add	sp, #12
    a92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a92e:	ea56 0307 	orrs.w	r3, r6, r7
    a932:	d0f5      	beq.n	a920 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    a934:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    a938:	4629      	mov	r1, r5
    a93a:	4610      	mov	r0, r2
    a93c:	e9cd 6700 	strd	r6, r7, [sp]
    a940:	f000 fa92 	bl	ae68 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    a944:	2800      	cmp	r0, #0
    a946:	d1ef      	bne.n	a928 <z_impl_k_queue_get+0x3c>
    a948:	4b01      	ldr	r3, [pc, #4]	; (a950 <z_impl_k_queue_get+0x64>)
    a94a:	689b      	ldr	r3, [r3, #8]
    a94c:	695c      	ldr	r4, [r3, #20]
    a94e:	e7eb      	b.n	a928 <z_impl_k_queue_get+0x3c>
    a950:	200018f4 	.word	0x200018f4

0000a954 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    a954:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    a956:	4c08      	ldr	r4, [pc, #32]	; (a978 <z_reset_time_slice+0x24>)
    a958:	6823      	ldr	r3, [r4, #0]
    a95a:	b15b      	cbz	r3, a974 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    a95c:	f7f7 ffc0 	bl	28e0 <z_clock_elapsed>
    a960:	4603      	mov	r3, r0
    a962:	6820      	ldr	r0, [r4, #0]
    a964:	4a05      	ldr	r2, [pc, #20]	; (a97c <z_reset_time_slice+0x28>)
    a966:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    a968:	2100      	movs	r1, #0
	}
}
    a96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    a96e:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    a970:	f005 b94d 	b.w	fc0e <z_set_timeout_expiry>
}
    a974:	bd10      	pop	{r4, pc}
    a976:	bf00      	nop
    a978:	20001930 	.word	0x20001930
    a97c:	200018f4 	.word	0x200018f4

0000a980 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a982:	4605      	mov	r5, r0
    a984:	460c      	mov	r4, r1
	__asm__ volatile(
    a986:	f04f 0320 	mov.w	r3, #32
    a98a:	f3ef 8611 	mrs	r6, BASEPRI
    a98e:	f383 8811 	msr	BASEPRI, r3
    a992:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    a996:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    a998:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    a99c:	f240 30e7 	movw	r0, #999	; 0x3e7
    a9a0:	2100      	movs	r1, #0
    a9a2:	4b0a      	ldr	r3, [pc, #40]	; (a9cc <k_sched_time_slice_set+0x4c>)
    a9a4:	fbe7 0105 	umlal	r0, r1, r7, r5
    a9a8:	615a      	str	r2, [r3, #20]
    a9aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a9ae:	2300      	movs	r3, #0
    a9b0:	f7f5 fbd0 	bl	154 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    a9b4:	4b06      	ldr	r3, [pc, #24]	; (a9d0 <k_sched_time_slice_set+0x50>)
    a9b6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    a9b8:	4b06      	ldr	r3, [pc, #24]	; (a9d4 <k_sched_time_slice_set+0x54>)
    a9ba:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    a9bc:	f7ff ffca 	bl	a954 <z_reset_time_slice>
	__asm__ volatile(
    a9c0:	f386 8811 	msr	BASEPRI, r6
    a9c4:	f3bf 8f6f 	isb	sy
	}
}
    a9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a9ca:	bf00      	nop
    a9cc:	200018f4 	.word	0x200018f4
    a9d0:	20001930 	.word	0x20001930
    a9d4:	2000192c 	.word	0x2000192c

0000a9d8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a9d8:	b949      	cbnz	r1, a9ee <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a9da:	f3ef 8005 	mrs	r0, IPSR
    a9de:	b930      	cbnz	r0, a9ee <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    a9e0:	4b05      	ldr	r3, [pc, #20]	; (a9f8 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    a9e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a9e4:	689b      	ldr	r3, [r3, #8]
    a9e6:	429a      	cmp	r2, r3
    a9e8:	d001      	beq.n	a9ee <z_reschedule+0x16>
	ret = arch_swap(key);
    a9ea:	f7f8 ba59 	b.w	2ea0 <arch_swap>
    a9ee:	f381 8811 	msr	BASEPRI, r1
    a9f2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    a9f6:	4770      	bx	lr
    a9f8:	200018f4 	.word	0x200018f4

0000a9fc <k_sched_lock>:
	__asm__ volatile(
    a9fc:	f04f 0320 	mov.w	r3, #32
    aa00:	f3ef 8111 	mrs	r1, BASEPRI
    aa04:	f383 8811 	msr	BASEPRI, r3
    aa08:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    aa0c:	4b04      	ldr	r3, [pc, #16]	; (aa20 <k_sched_lock+0x24>)
    aa0e:	689a      	ldr	r2, [r3, #8]
    aa10:	7bd3      	ldrb	r3, [r2, #15]
    aa12:	3b01      	subs	r3, #1
    aa14:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    aa16:	f381 8811 	msr	BASEPRI, r1
    aa1a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    aa1e:	4770      	bx	lr
    aa20:	200018f4 	.word	0x200018f4

0000aa24 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    aa24:	4b09      	ldr	r3, [pc, #36]	; (aa4c <z_priq_dumb_remove+0x28>)
    aa26:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    aa2a:	4282      	cmp	r2, r0
    aa2c:	d105      	bne.n	aa3a <z_priq_dumb_remove+0x16>
    aa2e:	689b      	ldr	r3, [r3, #8]
    aa30:	428b      	cmp	r3, r1
    aa32:	d102      	bne.n	aa3a <z_priq_dumb_remove+0x16>
    aa34:	7b4b      	ldrb	r3, [r1, #13]
    aa36:	06db      	lsls	r3, r3, #27
    aa38:	d106      	bne.n	aa48 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    aa3a:	e9d1 3200 	ldrd	r3, r2, [r1]
    aa3e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    aa40:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    aa42:	2300      	movs	r3, #0
	node->prev = NULL;
    aa44:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    aa48:	4770      	bx	lr
    aa4a:	bf00      	nop
    aa4c:	200018f4 	.word	0x200018f4

0000aa50 <update_cache>:
{
    aa50:	b538      	push	{r3, r4, r5, lr}
    aa52:	4c12      	ldr	r4, [pc, #72]	; (aa9c <update_cache+0x4c>)
    aa54:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    aa56:	6923      	ldr	r3, [r4, #16]
    aa58:	68a2      	ldr	r2, [r4, #8]
    aa5a:	b10b      	cbz	r3, aa60 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    aa5c:	68e5      	ldr	r5, [r4, #12]
    aa5e:	e00c      	b.n	aa7a <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    aa60:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    aa64:	f004 ff86 	bl	f974 <z_priq_dumb_best>
    aa68:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    aa6a:	7b53      	ldrb	r3, [r2, #13]
    aa6c:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    aa6e:	bf44      	itt	mi
    aa70:	f043 0308 	orrmi.w	r3, r3, #8
    aa74:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    aa76:	2d00      	cmp	r5, #0
    aa78:	d0f0      	beq.n	aa5c <update_cache+0xc>
	if (preempt_ok != 0) {
    aa7a:	b949      	cbnz	r1, aa90 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    aa7c:	7b53      	ldrb	r3, [r2, #13]
    aa7e:	06db      	lsls	r3, r3, #27
    aa80:	d106      	bne.n	aa90 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    aa82:	69ab      	ldr	r3, [r5, #24]
    aa84:	b923      	cbnz	r3, aa90 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    aa86:	89d3      	ldrh	r3, [r2, #14]
    aa88:	2b7f      	cmp	r3, #127	; 0x7f
    aa8a:	d901      	bls.n	aa90 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    aa8c:	62a2      	str	r2, [r4, #40]	; 0x28
}
    aa8e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    aa90:	4295      	cmp	r5, r2
    aa92:	d001      	beq.n	aa98 <update_cache+0x48>
			z_reset_time_slice();
    aa94:	f7ff ff5e 	bl	a954 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    aa98:	62a5      	str	r5, [r4, #40]	; 0x28
}
    aa9a:	e7f8      	b.n	aa8e <update_cache+0x3e>
    aa9c:	200018f4 	.word	0x200018f4

0000aaa0 <k_sched_unlock>:
{
    aaa0:	b510      	push	{r4, lr}
	__asm__ volatile(
    aaa2:	f04f 0320 	mov.w	r3, #32
    aaa6:	f3ef 8411 	mrs	r4, BASEPRI
    aaaa:	f383 8811 	msr	BASEPRI, r3
    aaae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    aab2:	4b08      	ldr	r3, [pc, #32]	; (aad4 <k_sched_unlock+0x34>)
		update_cache(0);
    aab4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    aab6:	689a      	ldr	r2, [r3, #8]
    aab8:	7bd3      	ldrb	r3, [r2, #15]
    aaba:	3301      	adds	r3, #1
    aabc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    aabe:	f7ff ffc7 	bl	aa50 <update_cache>
	__asm__ volatile(
    aac2:	f384 8811 	msr	BASEPRI, r4
    aac6:	f3bf 8f6f 	isb	sy
}
    aaca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    aace:	f004 bf25 	b.w	f91c <z_reschedule_unlocked>
    aad2:	bf00      	nop
    aad4:	200018f4 	.word	0x200018f4

0000aad8 <ready_thread>:
{
    aad8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    aada:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    aade:	7b43      	ldrb	r3, [r0, #13]
    aae0:	2a00      	cmp	r2, #0
    aae2:	db2c      	blt.n	ab3e <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    aae4:	06db      	lsls	r3, r3, #27
    aae6:	d12a      	bne.n	ab3e <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    aae8:	6983      	ldr	r3, [r0, #24]
    aaea:	bb43      	cbnz	r3, ab3e <ready_thread+0x66>
	return list->head == list;
    aaec:	4a15      	ldr	r2, [pc, #84]	; (ab44 <ready_thread+0x6c>)
    aaee:	4611      	mov	r1, r2
    aaf0:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aaf4:	428c      	cmp	r4, r1
    aaf6:	bf18      	it	ne
    aaf8:	4623      	movne	r3, r4
    aafa:	2b00      	cmp	r3, #0
    aafc:	bf38      	it	cc
    aafe:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ab00:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ab02:	b1b3      	cbz	r3, ab32 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    ab04:	f990 600e 	ldrsb.w	r6, [r0, #14]
    ab08:	f993 500e 	ldrsb.w	r5, [r3, #14]
    ab0c:	42ae      	cmp	r6, r5
    ab0e:	db03      	blt.n	ab18 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    ab10:	42a3      	cmp	r3, r4
    ab12:	d00e      	beq.n	ab32 <ready_thread+0x5a>
    ab14:	681b      	ldr	r3, [r3, #0]
    ab16:	e7f4      	b.n	ab02 <ready_thread+0x2a>
	node->prev = successor->prev;
    ab18:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ab1a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    ab1e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    ab20:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    ab22:	7b43      	ldrb	r3, [r0, #13]
    ab24:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ab28:	7343      	strb	r3, [r0, #13]
}
    ab2a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    ab2c:	2000      	movs	r0, #0
    ab2e:	f7ff bf8f 	b.w	aa50 <update_cache>
	node->prev = list->tail;
    ab32:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    ab36:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ab38:	6018      	str	r0, [r3, #0]
	list->tail = node;
    ab3a:	6310      	str	r0, [r2, #48]	; 0x30
}
    ab3c:	e7f1      	b.n	ab22 <ready_thread+0x4a>
}
    ab3e:	bc70      	pop	{r4, r5, r6}
    ab40:	4770      	bx	lr
    ab42:	bf00      	nop
    ab44:	200018f4 	.word	0x200018f4

0000ab48 <z_sched_start>:
{
    ab48:	b510      	push	{r4, lr}
	__asm__ volatile(
    ab4a:	f04f 0220 	mov.w	r2, #32
    ab4e:	f3ef 8411 	mrs	r4, BASEPRI
    ab52:	f382 8811 	msr	BASEPRI, r2
    ab56:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    ab5a:	7b42      	ldrb	r2, [r0, #13]
    ab5c:	0751      	lsls	r1, r2, #29
    ab5e:	d404      	bmi.n	ab6a <z_sched_start+0x22>
	__asm__ volatile(
    ab60:	f384 8811 	msr	BASEPRI, r4
    ab64:	f3bf 8f6f 	isb	sy
}
    ab68:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ab6a:	f022 0204 	bic.w	r2, r2, #4
    ab6e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    ab70:	f7ff ffb2 	bl	aad8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ab74:	4621      	mov	r1, r4
}
    ab76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    ab7a:	4801      	ldr	r0, [pc, #4]	; (ab80 <z_sched_start+0x38>)
    ab7c:	f7ff bf2c 	b.w	a9d8 <z_reschedule>
    ab80:	20002a16 	.word	0x20002a16

0000ab84 <move_thread_to_end_of_prio_q>:
{
    ab84:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    ab86:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    ab8a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    ab8c:	2b00      	cmp	r3, #0
    ab8e:	da02      	bge.n	ab96 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    ab90:	4817      	ldr	r0, [pc, #92]	; (abf0 <move_thread_to_end_of_prio_q+0x6c>)
    ab92:	f7ff ff47 	bl	aa24 <z_priq_dumb_remove>
	return list->head == list;
    ab96:	4a17      	ldr	r2, [pc, #92]	; (abf4 <move_thread_to_end_of_prio_q+0x70>)
    ab98:	4610      	mov	r0, r2
    ab9a:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ab9e:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aba0:	4283      	cmp	r3, r0
    aba2:	bf08      	it	eq
    aba4:	2300      	moveq	r3, #0
    aba6:	2b00      	cmp	r3, #0
    aba8:	bf38      	it	cc
    abaa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    abac:	b1d3      	cbz	r3, abe4 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    abae:	f991 600e 	ldrsb.w	r6, [r1, #14]
    abb2:	f993 500e 	ldrsb.w	r5, [r3, #14]
    abb6:	42ae      	cmp	r6, r5
    abb8:	db03      	blt.n	abc2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    abba:	42a3      	cmp	r3, r4
    abbc:	d012      	beq.n	abe4 <move_thread_to_end_of_prio_q+0x60>
    abbe:	681b      	ldr	r3, [r3, #0]
    abc0:	e7f4      	b.n	abac <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    abc2:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    abc4:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    abc8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    abca:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    abcc:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    abce:	6890      	ldr	r0, [r2, #8]
    abd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    abd4:	734b      	strb	r3, [r1, #13]
    abd6:	1a43      	subs	r3, r0, r1
    abd8:	4258      	negs	r0, r3
    abda:	4158      	adcs	r0, r3
}
    abdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    abe0:	f7ff bf36 	b.w	aa50 <update_cache>
	node->prev = list->tail;
    abe4:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    abe8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    abea:	6019      	str	r1, [r3, #0]
	list->tail = node;
    abec:	6311      	str	r1, [r2, #48]	; 0x30
}
    abee:	e7ed      	b.n	abcc <move_thread_to_end_of_prio_q+0x48>
    abf0:	20001920 	.word	0x20001920
    abf4:	200018f4 	.word	0x200018f4

0000abf8 <z_time_slice>:
{
    abf8:	4601      	mov	r1, r0
    abfa:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    abfc:	f04f 0320 	mov.w	r3, #32
    ac00:	f3ef 8411 	mrs	r4, BASEPRI
    ac04:	f383 8811 	msr	BASEPRI, r3
    ac08:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    ac0c:	4b16      	ldr	r3, [pc, #88]	; (ac68 <z_time_slice+0x70>)
    ac0e:	4a17      	ldr	r2, [pc, #92]	; (ac6c <z_time_slice+0x74>)
    ac10:	6898      	ldr	r0, [r3, #8]
    ac12:	6815      	ldr	r5, [r2, #0]
    ac14:	42a8      	cmp	r0, r5
    ac16:	461d      	mov	r5, r3
    ac18:	d106      	bne.n	ac28 <z_time_slice+0x30>
			z_reset_time_slice();
    ac1a:	f7ff fe9b 	bl	a954 <z_reset_time_slice>
	__asm__ volatile(
    ac1e:	f384 8811 	msr	BASEPRI, r4
    ac22:	f3bf 8f6f 	isb	sy
}
    ac26:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    ac28:	2600      	movs	r6, #0
    ac2a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    ac2c:	4a10      	ldr	r2, [pc, #64]	; (ac70 <z_time_slice+0x78>)
    ac2e:	6812      	ldr	r2, [r2, #0]
    ac30:	b1ba      	cbz	r2, ac62 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    ac32:	89c2      	ldrh	r2, [r0, #14]
    ac34:	2a7f      	cmp	r2, #127	; 0x7f
    ac36:	d814      	bhi.n	ac62 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    ac38:	7b42      	ldrb	r2, [r0, #13]
    ac3a:	06d2      	lsls	r2, r2, #27
    ac3c:	d111      	bne.n	ac62 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    ac3e:	4a0d      	ldr	r2, [pc, #52]	; (ac74 <z_time_slice+0x7c>)
    ac40:	f990 600e 	ldrsb.w	r6, [r0, #14]
    ac44:	6812      	ldr	r2, [r2, #0]
    ac46:	4296      	cmp	r6, r2
    ac48:	db0b      	blt.n	ac62 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    ac4a:	4a0b      	ldr	r2, [pc, #44]	; (ac78 <z_time_slice+0x80>)
    ac4c:	4290      	cmp	r0, r2
    ac4e:	d008      	beq.n	ac62 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    ac50:	695a      	ldr	r2, [r3, #20]
    ac52:	428a      	cmp	r2, r1
    ac54:	dc02      	bgt.n	ac5c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    ac56:	f7ff ff95 	bl	ab84 <move_thread_to_end_of_prio_q>
    ac5a:	e7de      	b.n	ac1a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    ac5c:	1a52      	subs	r2, r2, r1
    ac5e:	615a      	str	r2, [r3, #20]
    ac60:	e7dd      	b.n	ac1e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    ac62:	2300      	movs	r3, #0
    ac64:	616b      	str	r3, [r5, #20]
    ac66:	e7da      	b.n	ac1e <z_time_slice+0x26>
    ac68:	200018f4 	.word	0x200018f4
    ac6c:	20001928 	.word	0x20001928
    ac70:	20001930 	.word	0x20001930
    ac74:	2000192c 	.word	0x2000192c
    ac78:	20000d28 	.word	0x20000d28

0000ac7c <z_impl_k_thread_suspend>:
{
    ac7c:	b570      	push	{r4, r5, r6, lr}
    ac7e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    ac80:	3018      	adds	r0, #24
    ac82:	f004 ff9e 	bl	fbc2 <z_abort_timeout>
	__asm__ volatile(
    ac86:	f04f 0320 	mov.w	r3, #32
    ac8a:	f3ef 8611 	mrs	r6, BASEPRI
    ac8e:	f383 8811 	msr	BASEPRI, r3
    ac92:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    ac96:	f994 300d 	ldrsb.w	r3, [r4, #13]
    ac9a:	2b00      	cmp	r3, #0
    ac9c:	da07      	bge.n	acae <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    ac9e:	4621      	mov	r1, r4
    aca0:	480e      	ldr	r0, [pc, #56]	; (acdc <z_impl_k_thread_suspend+0x60>)
    aca2:	f7ff febf 	bl	aa24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    aca6:	7b63      	ldrb	r3, [r4, #13]
    aca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    acac:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    acae:	4d0c      	ldr	r5, [pc, #48]	; (ace0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    acb0:	7b63      	ldrb	r3, [r4, #13]
    acb2:	68a8      	ldr	r0, [r5, #8]
    acb4:	f043 0310 	orr.w	r3, r3, #16
    acb8:	7363      	strb	r3, [r4, #13]
    acba:	1b03      	subs	r3, r0, r4
    acbc:	4258      	negs	r0, r3
    acbe:	4158      	adcs	r0, r3
    acc0:	f7ff fec6 	bl	aa50 <update_cache>
	__asm__ volatile(
    acc4:	f386 8811 	msr	BASEPRI, r6
    acc8:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    accc:	68ab      	ldr	r3, [r5, #8]
    acce:	42a3      	cmp	r3, r4
    acd0:	d103      	bne.n	acda <z_impl_k_thread_suspend+0x5e>
}
    acd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    acd6:	f004 be21 	b.w	f91c <z_reschedule_unlocked>
}
    acda:	bd70      	pop	{r4, r5, r6, pc}
    acdc:	20001920 	.word	0x20001920
    ace0:	200018f4 	.word	0x200018f4

0000ace4 <z_thread_single_abort>:
{
    ace4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ace8:	4604      	mov	r4, r0
	__asm__ volatile(
    acea:	f04f 0320 	mov.w	r3, #32
    acee:	f3ef 8211 	mrs	r2, BASEPRI
    acf2:	f383 8811 	msr	BASEPRI, r3
    acf6:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    acfa:	7b43      	ldrb	r3, [r0, #13]
    acfc:	f013 0f28 	tst.w	r3, #40	; 0x28
    ad00:	d005      	beq.n	ad0e <z_thread_single_abort+0x2a>
	__asm__ volatile(
    ad02:	f382 8811 	msr	BASEPRI, r2
    ad06:	f3bf 8f6f 	isb	sy
}
    ad0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    ad0e:	f043 0320 	orr.w	r3, r3, #32
    ad12:	7343      	strb	r3, [r0, #13]
    ad14:	f382 8811 	msr	BASEPRI, r2
    ad18:	f3bf 8f6f 	isb	sy
    ad1c:	3018      	adds	r0, #24
    ad1e:	f004 ff50 	bl	fbc2 <z_abort_timeout>
	__asm__ volatile(
    ad22:	f04f 0320 	mov.w	r3, #32
    ad26:	f3ef 8611 	mrs	r6, BASEPRI
    ad2a:	f383 8811 	msr	BASEPRI, r3
    ad2e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ad32:	7b63      	ldrb	r3, [r4, #13]
    ad34:	06d8      	lsls	r0, r3, #27
    ad36:	d116      	bne.n	ad66 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    ad38:	69a2      	ldr	r2, [r4, #24]
    ad3a:	b9a2      	cbnz	r2, ad66 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    ad3c:	0619      	lsls	r1, r3, #24
    ad3e:	d507      	bpl.n	ad50 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    ad40:	4621      	mov	r1, r4
    ad42:	4826      	ldr	r0, [pc, #152]	; (addc <z_thread_single_abort+0xf8>)
    ad44:	f7ff fe6e 	bl	aa24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    ad48:	7b63      	ldrb	r3, [r4, #13]
    ad4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ad4e:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    ad50:	4b23      	ldr	r3, [pc, #140]	; (ade0 <z_thread_single_abort+0xfc>)
    ad52:	6898      	ldr	r0, [r3, #8]
    ad54:	1b02      	subs	r2, r0, r4
    ad56:	4250      	negs	r0, r2
    ad58:	4150      	adcs	r0, r2
    ad5a:	f7ff fe79 	bl	aa50 <update_cache>
			waiter->base.pended_on = NULL;
    ad5e:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    ad60:	f104 0830 	add.w	r8, r4, #48	; 0x30
    ad64:	e01e      	b.n	ada4 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
    ad66:	079b      	lsls	r3, r3, #30
    ad68:	d5f9      	bpl.n	ad5e <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    ad6a:	4621      	mov	r1, r4
    ad6c:	68a0      	ldr	r0, [r4, #8]
    ad6e:	f7ff fe59 	bl	aa24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ad72:	7b63      	ldrb	r3, [r4, #13]
    ad74:	f023 0302 	bic.w	r3, r3, #2
    ad78:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    ad7a:	2300      	movs	r3, #0
    ad7c:	60a3      	str	r3, [r4, #8]
    ad7e:	e7ee      	b.n	ad5e <z_thread_single_abort+0x7a>
    ad80:	f105 0018 	add.w	r0, r5, #24
    ad84:	f004 ff1d 	bl	fbc2 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    ad88:	68a8      	ldr	r0, [r5, #8]
    ad8a:	4629      	mov	r1, r5
    ad8c:	f7ff fe4a 	bl	aa24 <z_priq_dumb_remove>
    ad90:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    ad92:	4628      	mov	r0, r5
    ad94:	f023 0302 	bic.w	r3, r3, #2
    ad98:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    ad9a:	60af      	str	r7, [r5, #8]
    ad9c:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
    ada0:	f7ff fe9a 	bl	aad8 <ready_thread>
	return list->head == list;
    ada4:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ada6:	4545      	cmp	r5, r8
    ada8:	d001      	beq.n	adae <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    adaa:	2d00      	cmp	r5, #0
    adac:	d1e8      	bne.n	ad80 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    adae:	4b0c      	ldr	r3, [pc, #48]	; (ade0 <z_thread_single_abort+0xfc>)
    adb0:	689a      	ldr	r2, [r3, #8]
    adb2:	4b0c      	ldr	r3, [pc, #48]	; (ade4 <z_thread_single_abort+0x100>)
    adb4:	429a      	cmp	r2, r3
    adb6:	d102      	bne.n	adbe <z_thread_single_abort+0xda>
			update_cache(1);
    adb8:	2001      	movs	r0, #1
    adba:	f7ff fe49 	bl	aa50 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    adbe:	7b63      	ldrb	r3, [r4, #13]
    adc0:	f043 0308 	orr.w	r3, r3, #8
    adc4:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    adc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    adc8:	f386 8811 	msr	BASEPRI, r6
    adcc:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    add0:	2b00      	cmp	r3, #0
    add2:	d09a      	beq.n	ad0a <z_thread_single_abort+0x26>
		fn_abort(thread);
    add4:	4620      	mov	r0, r4
}
    add6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    adda:	4718      	bx	r3
    addc:	20001920 	.word	0x20001920
    ade0:	200018f4 	.word	0x200018f4
    ade4:	20000d28 	.word	0x20000d28

0000ade8 <unready_thread>:
{
    ade8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    adea:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    adee:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    adf0:	2b00      	cmp	r3, #0
    adf2:	da06      	bge.n	ae02 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    adf4:	4807      	ldr	r0, [pc, #28]	; (ae14 <unready_thread+0x2c>)
    adf6:	f7ff fe15 	bl	aa24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    adfa:	7b4b      	ldrb	r3, [r1, #13]
    adfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ae00:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    ae02:	4b05      	ldr	r3, [pc, #20]	; (ae18 <unready_thread+0x30>)
    ae04:	6898      	ldr	r0, [r3, #8]
    ae06:	1a43      	subs	r3, r0, r1
    ae08:	4258      	negs	r0, r3
    ae0a:	4158      	adcs	r0, r3
}
    ae0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    ae10:	f7ff be1e 	b.w	aa50 <update_cache>
    ae14:	20001920 	.word	0x20001920
    ae18:	200018f4 	.word	0x200018f4

0000ae1c <pend>:
{
    ae1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae20:	4606      	mov	r6, r0
    ae22:	4614      	mov	r4, r2
    ae24:	461d      	mov	r5, r3
	__asm__ volatile(
    ae26:	f04f 0320 	mov.w	r3, #32
    ae2a:	f3ef 8711 	mrs	r7, BASEPRI
    ae2e:	f383 8811 	msr	BASEPRI, r3
    ae32:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    ae36:	f004 fdd7 	bl	f9e8 <add_to_waitq_locked>
	__asm__ volatile(
    ae3a:	f387 8811 	msr	BASEPRI, r7
    ae3e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ae42:	1c6b      	adds	r3, r5, #1
    ae44:	bf08      	it	eq
    ae46:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    ae4a:	d008      	beq.n	ae5e <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    ae4c:	4622      	mov	r2, r4
    ae4e:	462b      	mov	r3, r5
    ae50:	f106 0018 	add.w	r0, r6, #24
    ae54:	4903      	ldr	r1, [pc, #12]	; (ae64 <pend+0x48>)
}
    ae56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ae5a:	f000 bb2b 	b.w	b4b4 <z_add_timeout>
    ae5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae62:	bf00      	nop
    ae64:	0000f9a9 	.word	0x0000f9a9

0000ae68 <z_pend_curr>:
{
    ae68:	b510      	push	{r4, lr}
    ae6a:	460c      	mov	r4, r1
	pending_current = _current;
    ae6c:	4b06      	ldr	r3, [pc, #24]	; (ae88 <z_pend_curr+0x20>)
{
    ae6e:	4611      	mov	r1, r2
	pending_current = _current;
    ae70:	6898      	ldr	r0, [r3, #8]
    ae72:	4b06      	ldr	r3, [pc, #24]	; (ae8c <z_pend_curr+0x24>)
    ae74:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    ae76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ae7a:	f7ff ffcf 	bl	ae1c <pend>
    ae7e:	4620      	mov	r0, r4
}
    ae80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae84:	f7f8 b80c 	b.w	2ea0 <arch_swap>
    ae88:	200018f4 	.word	0x200018f4
    ae8c:	20001928 	.word	0x20001928

0000ae90 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae94:	4605      	mov	r5, r0
    ae96:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
    ae98:	f004 fed3 	bl	fc42 <z_tick_get_32>
    ae9c:	4604      	mov	r4, r0
	__asm__ volatile(
    ae9e:	f04f 0320 	mov.w	r3, #32
    aea2:	f3ef 8811 	mrs	r8, BASEPRI
    aea6:	f383 8811 	msr	BASEPRI, r3
    aeaa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    aeae:	4e12      	ldr	r6, [pc, #72]	; (aef8 <z_tick_sleep.part.0+0x68>)
    aeb0:	4b12      	ldr	r3, [pc, #72]	; (aefc <z_tick_sleep.part.0+0x6c>)
    aeb2:	68b0      	ldr	r0, [r6, #8]
	expected_wakeup_ticks = ticks + z_tick_get_32();
    aeb4:	442c      	add	r4, r5
	pending_current = _current;
    aeb6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    aeb8:	f7ff ff96 	bl	ade8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    aebc:	68b0      	ldr	r0, [r6, #8]
    aebe:	4910      	ldr	r1, [pc, #64]	; (af00 <z_tick_sleep.part.0+0x70>)
    aec0:	462a      	mov	r2, r5
    aec2:	463b      	mov	r3, r7
    aec4:	3018      	adds	r0, #24
    aec6:	f000 faf5 	bl	b4b4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    aeca:	68b2      	ldr	r2, [r6, #8]
    aecc:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    aece:	7b53      	ldrb	r3, [r2, #13]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    aed0:	2500      	movs	r5, #0
    aed2:	f043 0310 	orr.w	r3, r3, #16
    aed6:	7353      	strb	r3, [r2, #13]
    aed8:	f7f7 ffe2 	bl	2ea0 <arch_swap>
    aedc:	f004 feb1 	bl	fc42 <z_tick_get_32>
    aee0:	1a24      	subs	r4, r4, r0
    aee2:	f165 0500 	sbc.w	r5, r5, #0
    aee6:	2c00      	cmp	r4, #0
    aee8:	f175 0300 	sbcs.w	r3, r5, #0
    aeec:	bfb8      	it	lt
    aeee:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    aef0:	4620      	mov	r0, r4
    aef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aef6:	bf00      	nop
    aef8:	200018f4 	.word	0x200018f4
    aefc:	20001928 	.word	0x20001928
    af00:	0000f9a9 	.word	0x0000f9a9

0000af04 <z_set_prio>:
{
    af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af08:	4604      	mov	r4, r0
    af0a:	f04f 0320 	mov.w	r3, #32
    af0e:	f3ef 8811 	mrs	r8, BASEPRI
    af12:	f383 8811 	msr	BASEPRI, r3
    af16:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    af1a:	7b43      	ldrb	r3, [r0, #13]
    af1c:	b24e      	sxtb	r6, r1
    af1e:	06db      	lsls	r3, r3, #27
    af20:	d12e      	bne.n	af80 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    af22:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    af24:	bb65      	cbnz	r5, af80 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    af26:	4f18      	ldr	r7, [pc, #96]	; (af88 <z_set_prio+0x84>)
    af28:	4621      	mov	r1, r4
    af2a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    af2e:	f7ff fd79 	bl	aa24 <z_priq_dumb_remove>
	return list->head == list;
    af32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    af34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    af36:	4283      	cmp	r3, r0
    af38:	bf18      	it	ne
    af3a:	461d      	movne	r5, r3
    af3c:	2d00      	cmp	r5, #0
    af3e:	bf38      	it	cc
    af40:	2500      	movcc	r5, #0
				thread->base.prio = prio;
    af42:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af44:	b1b5      	cbz	r5, af74 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    af46:	f995 100e 	ldrsb.w	r1, [r5, #14]
    af4a:	42b1      	cmp	r1, r6
    af4c:	dc03      	bgt.n	af56 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    af4e:	42aa      	cmp	r2, r5
    af50:	d010      	beq.n	af74 <z_set_prio+0x70>
    af52:	682d      	ldr	r5, [r5, #0]
    af54:	e7f6      	b.n	af44 <z_set_prio+0x40>
	node->prev = successor->prev;
    af56:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    af58:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    af5c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    af5e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    af60:	2001      	movs	r0, #1
    af62:	f7ff fd75 	bl	aa50 <update_cache>
    af66:	2001      	movs	r0, #1
	__asm__ volatile(
    af68:	f388 8811 	msr	BASEPRI, r8
    af6c:	f3bf 8f6f 	isb	sy
}
    af70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    af74:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af7a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    af7c:	633c      	str	r4, [r7, #48]	; 0x30
}
    af7e:	e7ef      	b.n	af60 <z_set_prio+0x5c>
			thread->base.prio = prio;
    af80:	2000      	movs	r0, #0
    af82:	73a6      	strb	r6, [r4, #14]
    af84:	e7f0      	b.n	af68 <z_set_prio+0x64>
    af86:	bf00      	nop
    af88:	200018f4 	.word	0x200018f4

0000af8c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    af8c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    af8e:	4b04      	ldr	r3, [pc, #16]	; (afa0 <z_sched_init+0x14>)
    af90:	4608      	mov	r0, r1
    af92:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    af96:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    af9a:	f7ff bcf1 	b.w	a980 <k_sched_time_slice_set>
    af9e:	bf00      	nop
    afa0:	200018f4 	.word	0x200018f4

0000afa4 <z_impl_k_yield>:
{
    afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    afa6:	4c24      	ldr	r4, [pc, #144]	; (b038 <z_impl_k_yield+0x94>)
    afa8:	4b24      	ldr	r3, [pc, #144]	; (b03c <z_impl_k_yield+0x98>)
    afaa:	68a2      	ldr	r2, [r4, #8]
    afac:	429a      	cmp	r2, r3
    afae:	d030      	beq.n	b012 <z_impl_k_yield+0x6e>
	__asm__ volatile(
    afb0:	f04f 0320 	mov.w	r3, #32
    afb4:	f3ef 8511 	mrs	r5, BASEPRI
    afb8:	f383 8811 	msr	BASEPRI, r3
    afbc:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    afc0:	68a1      	ldr	r1, [r4, #8]
    afc2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    afc6:	f7ff fd2d 	bl	aa24 <z_priq_dumb_remove>
	return list->head == list;
    afca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    afcc:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    afce:	4283      	cmp	r3, r0
    afd0:	bf08      	it	eq
    afd2:	2300      	moveq	r3, #0
    afd4:	2b00      	cmp	r3, #0
    afd6:	bf38      	it	cc
    afd8:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    afda:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    afdc:	b32b      	cbz	r3, b02a <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    afde:	f992 700e 	ldrsb.w	r7, [r2, #14]
    afe2:	f993 600e 	ldrsb.w	r6, [r3, #14]
    afe6:	42b7      	cmp	r7, r6
    afe8:	db03      	blt.n	aff2 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    afea:	428b      	cmp	r3, r1
    afec:	d01d      	beq.n	b02a <z_impl_k_yield+0x86>
    afee:	681b      	ldr	r3, [r3, #0]
    aff0:	e7f4      	b.n	afdc <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    aff2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    aff4:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    aff8:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    affa:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    affc:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
    affe:	2001      	movs	r0, #1
    b000:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b004:	7353      	strb	r3, [r2, #13]
    b006:	f7ff fd23 	bl	aa50 <update_cache>
	__asm__ volatile(
    b00a:	f385 8811 	msr	BASEPRI, r5
    b00e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    b012:	f04f 0320 	mov.w	r3, #32
    b016:	f3ef 8011 	mrs	r0, BASEPRI
    b01a:	f383 8811 	msr	BASEPRI, r3
    b01e:	f3bf 8f6f 	isb	sy
}
    b022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b026:	f7f7 bf3b 	b.w	2ea0 <arch_swap>
	node->prev = list->tail;
    b02a:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    b02e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b030:	601a      	str	r2, [r3, #0]
	list->tail = node;
    b032:	6322      	str	r2, [r4, #48]	; 0x30
}
    b034:	e7e2      	b.n	affc <z_impl_k_yield+0x58>
    b036:	bf00      	nop
    b038:	200018f4 	.word	0x200018f4
    b03c:	20000d28 	.word	0x20000d28

0000b040 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b040:	f1b1 3fff 	cmp.w	r1, #4294967295
    b044:	bf08      	it	eq
    b046:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    b04a:	b508      	push	{r3, lr}
    b04c:	4602      	mov	r2, r0
    b04e:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b050:	d106      	bne.n	b060 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    b052:	4b0b      	ldr	r3, [pc, #44]	; (b080 <z_impl_k_sleep+0x40>)
    b054:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b056:	f7ff fe11 	bl	ac7c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    b05a:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    b05e:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    b060:	4313      	orrs	r3, r2
    b062:	d10a      	bne.n	b07a <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    b064:	f7ff ff9e 	bl	afa4 <z_impl_k_yield>
		return 0;
    b068:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
    b06a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b06e:	fb80 2303 	smull	r2, r3, r0, r3
    b072:	0bd0      	lsrs	r0, r2, #15
    b074:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    b078:	e7f1      	b.n	b05e <z_impl_k_sleep+0x1e>
    b07a:	f7ff ff09 	bl	ae90 <z_tick_sleep.part.0>
    b07e:	e7f4      	b.n	b06a <z_impl_k_sleep+0x2a>
    b080:	200018f4 	.word	0x200018f4

0000b084 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    b084:	4b01      	ldr	r3, [pc, #4]	; (b08c <z_impl_k_current_get+0x8>)
    b086:	6898      	ldr	r0, [r3, #8]
    b088:	4770      	bx	lr
    b08a:	bf00      	nop
    b08c:	200018f4 	.word	0x200018f4

0000b090 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b090:	b538      	push	{r3, r4, r5, lr}
    b092:	4604      	mov	r4, r0
    b094:	f04f 0320 	mov.w	r3, #32
    b098:	f3ef 8511 	mrs	r5, BASEPRI
    b09c:	f383 8811 	msr	BASEPRI, r3
    b0a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    b0a4:	f004 fccb 	bl	fa3e <z_unpend_first_thread>

	if (thread != NULL) {
    b0a8:	b150      	cbz	r0, b0c0 <z_impl_k_sem_give+0x30>
    b0aa:	2200      	movs	r2, #0
    b0ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b0b0:	f004 fc6a 	bl	f988 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b0b4:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    b0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    b0ba:	4807      	ldr	r0, [pc, #28]	; (b0d8 <z_impl_k_sem_give+0x48>)
    b0bc:	f7ff bc8c 	b.w	a9d8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b0c0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    b0c4:	429a      	cmp	r2, r3
    b0c6:	bf18      	it	ne
    b0c8:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    b0ca:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b0cc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    b0ce:	f104 0010 	add.w	r0, r4, #16
    b0d2:	f004 ff53 	bl	ff7c <z_handle_obj_poll_events>
}
    b0d6:	e7ed      	b.n	b0b4 <z_impl_k_sem_give+0x24>
    b0d8:	20002a16 	.word	0x20002a16

0000b0dc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b0dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b0de:	4614      	mov	r4, r2
    b0e0:	461d      	mov	r5, r3
    b0e2:	f04f 0320 	mov.w	r3, #32
    b0e6:	f3ef 8111 	mrs	r1, BASEPRI
    b0ea:	f383 8811 	msr	BASEPRI, r3
    b0ee:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    b0f2:	6883      	ldr	r3, [r0, #8]
    b0f4:	b143      	cbz	r3, b108 <z_impl_k_sem_take+0x2c>
		sem->count--;
    b0f6:	3b01      	subs	r3, #1
    b0f8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    b0fa:	f381 8811 	msr	BASEPRI, r1
    b0fe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b102:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    b104:	b003      	add	sp, #12
    b106:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b108:	ea54 0305 	orrs.w	r3, r4, r5
    b10c:	d106      	bne.n	b11c <z_impl_k_sem_take+0x40>
    b10e:	f381 8811 	msr	BASEPRI, r1
    b112:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b116:	f06f 000f 	mvn.w	r0, #15
    b11a:	e7f3      	b.n	b104 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b11c:	4602      	mov	r2, r0
    b11e:	e9cd 4500 	strd	r4, r5, [sp]
    b122:	4802      	ldr	r0, [pc, #8]	; (b12c <z_impl_k_sem_take+0x50>)
    b124:	f7ff fea0 	bl	ae68 <z_pend_curr>
	return ret;
    b128:	e7ec      	b.n	b104 <z_impl_k_sem_take+0x28>
    b12a:	bf00      	nop
    b12c:	20002a16 	.word	0x20002a16

0000b130 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    b130:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    b132:	4c08      	ldr	r4, [pc, #32]	; (b154 <k_sys_work_q_init+0x24>)
    b134:	f04f 33ff 	mov.w	r3, #4294967295
    b138:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b13c:	4620      	mov	r0, r4
    b13e:	4906      	ldr	r1, [pc, #24]	; (b158 <k_sys_work_q_init+0x28>)
    b140:	f000 f8dc 	bl	b2fc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    b144:	4905      	ldr	r1, [pc, #20]	; (b15c <k_sys_work_q_init+0x2c>)
    b146:	f104 0018 	add.w	r0, r4, #24
    b14a:	f004 fcc7 	bl	fadc <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
    b14e:	2000      	movs	r0, #0
    b150:	bd10      	pop	{r4, pc}
    b152:	bf00      	nop
    b154:	20000e38 	.word	0x20000e38
    b158:	20004b88 	.word	0x20004b88
    b15c:	00012c96 	.word	0x00012c96

0000b160 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    b160:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    b164:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    b168:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    b16c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    b16e:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
    b170:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    b172:	2504      	movs	r5, #4
    b174:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
    b176:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b178:	1dd6      	adds	r6, r2, #7
	thread_base->prio = priority;
    b17a:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
    b17c:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b17e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b180:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
    b184:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    b188:	e9c0 161b 	strd	r1, r6, [r0, #108]	; 0x6c
	thread_base->sched_locked = 0U;
    b18c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    b18e:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b190:	9202      	str	r2, [sp, #8]
    b192:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    b194:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b198:	9201      	str	r2, [sp, #4]
    b19a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b19c:	9200      	str	r2, [sp, #0]
    b19e:	4642      	mov	r2, r8
    b1a0:	f7f7 fece 	bl	2f40 <arch_new_thread>
	if (!_current) {
    b1a4:	4b05      	ldr	r3, [pc, #20]	; (b1bc <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
    b1a6:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    b1aa:	689b      	ldr	r3, [r3, #8]
    b1ac:	b103      	cbz	r3, b1b0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    b1ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
    b1b0:	4640      	mov	r0, r8
    b1b2:	67a3      	str	r3, [r4, #120]	; 0x78
    b1b4:	b004      	add	sp, #16
    b1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b1ba:	bf00      	nop
    b1bc:	200018f4 	.word	0x200018f4

0000b1c0 <z_impl_k_thread_create>:
{
    b1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b1c2:	2500      	movs	r5, #0
{
    b1c4:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b1c6:	9505      	str	r5, [sp, #20]
    b1c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    b1ca:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b1ce:	9504      	str	r5, [sp, #16]
    b1d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    b1d2:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b1d4:	9503      	str	r5, [sp, #12]
    b1d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b1d8:	9502      	str	r5, [sp, #8]
    b1da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    b1dc:	9501      	str	r5, [sp, #4]
    b1de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b1e0:	9500      	str	r5, [sp, #0]
    b1e2:	f7ff ffbd 	bl	b160 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    b1e6:	1c7b      	adds	r3, r7, #1
    b1e8:	bf08      	it	eq
    b1ea:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    b1ee:	d005      	beq.n	b1fc <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b1f0:	ea56 0307 	orrs.w	r3, r6, r7
    b1f4:	d105      	bne.n	b202 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    b1f6:	4620      	mov	r0, r4
    b1f8:	f7ff fca6 	bl	ab48 <z_sched_start>
}
    b1fc:	4620      	mov	r0, r4
    b1fe:	b007      	add	sp, #28
    b200:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    b202:	4632      	mov	r2, r6
    b204:	463b      	mov	r3, r7
    b206:	4903      	ldr	r1, [pc, #12]	; (b214 <z_impl_k_thread_create+0x54>)
    b208:	f104 0018 	add.w	r0, r4, #24
    b20c:	f000 f952 	bl	b4b4 <z_add_timeout>
    b210:	e7f4      	b.n	b1fc <z_impl_k_thread_create+0x3c>
    b212:	bf00      	nop
    b214:	0000f9a9 	.word	0x0000f9a9

0000b218 <z_init_static_threads>:
{
    b218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    b21c:	4e2a      	ldr	r6, [pc, #168]	; (b2c8 <z_init_static_threads+0xb0>)
    b21e:	4d2b      	ldr	r5, [pc, #172]	; (b2cc <z_init_static_threads+0xb4>)
    b220:	46b0      	mov	r8, r6
{
    b222:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    b224:	42b5      	cmp	r5, r6
    b226:	f105 0430 	add.w	r4, r5, #48	; 0x30
    b22a:	d310      	bcc.n	b24e <z_init_static_threads+0x36>
	k_sched_lock();
    b22c:	f7ff fbe6 	bl	a9fc <k_sched_lock>
    b230:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    b234:	f240 36e7 	movw	r6, #999	; 0x3e7
    b238:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    b23a:	4c24      	ldr	r4, [pc, #144]	; (b2cc <z_init_static_threads+0xb4>)
    b23c:	f8df a090 	ldr.w	sl, [pc, #144]	; b2d0 <z_init_static_threads+0xb8>
    b240:	4544      	cmp	r4, r8
    b242:	d321      	bcc.n	b288 <z_init_static_threads+0x70>
}
    b244:	b006      	add	sp, #24
    b246:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    b24a:	f7ff bc29 	b.w	aaa0 <k_sched_unlock>
		z_setup_new_thread(
    b24e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b252:	9305      	str	r3, [sp, #20]
    b254:	f854 3c10 	ldr.w	r3, [r4, #-16]
    b258:	9304      	str	r3, [sp, #16]
    b25a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    b25e:	9303      	str	r3, [sp, #12]
    b260:	f854 3c18 	ldr.w	r3, [r4, #-24]
    b264:	9302      	str	r3, [sp, #8]
    b266:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    b26a:	9301      	str	r3, [sp, #4]
    b26c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    b270:	9300      	str	r3, [sp, #0]
    b272:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    b276:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    b27a:	f7ff ff71 	bl	b160 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    b27e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    b282:	65dd      	str	r5, [r3, #92]	; 0x5c
    b284:	4625      	mov	r5, r4
    b286:	e7cd      	b.n	b224 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    b288:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b28a:	1c5a      	adds	r2, r3, #1
    b28c:	d00d      	beq.n	b2aa <z_init_static_threads+0x92>
    b28e:	4630      	mov	r0, r6
    b290:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
    b292:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b296:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b29a:	42b9      	cmp	r1, r7
    b29c:	bf08      	it	eq
    b29e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    b2a0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b2a2:	d104      	bne.n	b2ae <z_init_static_threads+0x96>
	z_sched_start(thread);
    b2a4:	4628      	mov	r0, r5
    b2a6:	f7ff fc4f 	bl	ab48 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    b2aa:	3430      	adds	r4, #48	; 0x30
    b2ac:	e7c8      	b.n	b240 <z_init_static_threads+0x28>
    b2ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2b2:	2300      	movs	r3, #0
    b2b4:	f7f4 ff4e 	bl	154 <__aeabi_uldivmod>
    b2b8:	4602      	mov	r2, r0
    b2ba:	460b      	mov	r3, r1
    b2bc:	f105 0018 	add.w	r0, r5, #24
    b2c0:	4651      	mov	r1, sl
    b2c2:	f000 f8f7 	bl	b4b4 <z_add_timeout>
    b2c6:	e7f0      	b.n	b2aa <z_init_static_threads+0x92>
    b2c8:	20000494 	.word	0x20000494
    b2cc:	20000494 	.word	0x20000494
    b2d0:	0000f9a9 	.word	0x0000f9a9

0000b2d4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    b2d4:	b508      	push	{r3, lr}
	__asm__ volatile(
    b2d6:	f04f 0320 	mov.w	r3, #32
    b2da:	f3ef 8411 	mrs	r4, BASEPRI
    b2de:	f383 8811 	msr	BASEPRI, r3
    b2e2:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    b2e6:	4b04      	ldr	r3, [pc, #16]	; (b2f8 <z_self_abort+0x24>)
    b2e8:	6898      	ldr	r0, [r3, #8]
    b2ea:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    b2ec:	f7ff fcc6 	bl	ac7c <z_impl_k_thread_suspend>
    b2f0:	4620      	mov	r0, r4
    b2f2:	f7f7 fdd5 	bl	2ea0 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    b2f6:	bf00      	nop
    b2f8:	200018f4 	.word	0x200018f4

0000b2fc <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    b2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b300:	4604      	mov	r4, r0
    b302:	b088      	sub	sp, #32
    b304:	460d      	mov	r5, r1
    b306:	4616      	mov	r6, r2
    b308:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
    b30a:	f004 fa75 	bl	f7f8 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
    b30e:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b312:	2200      	movs	r2, #0
    b314:	2300      	movs	r3, #0
    b316:	e9cd 7203 	strd	r7, r2, [sp, #12]
    b31a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b31e:	e9cd 2201 	strd	r2, r2, [sp, #4]
    b322:	4629      	mov	r1, r5
    b324:	4632      	mov	r2, r6
    b326:	4640      	mov	r0, r8
    b328:	4b05      	ldr	r3, [pc, #20]	; (b340 <k_work_q_start+0x44>)
    b32a:	9400      	str	r4, [sp, #0]
    b32c:	f7ff ff48 	bl	b1c0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    b330:	4640      	mov	r0, r8
    b332:	4904      	ldr	r1, [pc, #16]	; (b344 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
    b334:	b008      	add	sp, #32
    b336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b33a:	f004 bbcf 	b.w	fadc <z_impl_k_thread_name_set>
    b33e:	bf00      	nop
    b340:	0000be37 	.word	0x0000be37
    b344:	00012c9f 	.word	0x00012c9f

0000b348 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
    b348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b34c:	4606      	mov	r6, r0
    b34e:	460d      	mov	r5, r1
    b350:	4690      	mov	r8, r2
    b352:	4699      	mov	r9, r3
    b354:	f04f 0320 	mov.w	r3, #32
    b358:	f3ef 8711 	mrs	r7, BASEPRI
    b35c:	f383 8811 	msr	BASEPRI, r3
    b360:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
    b364:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b366:	b17b      	cbz	r3, b388 <k_delayed_work_submit_to_queue+0x40>
    b368:	4283      	cmp	r3, r0
    b36a:	d128      	bne.n	b3be <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
    b36c:	4628      	mov	r0, r5
    b36e:	f004 fbd3 	bl	fb18 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
    b372:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
    b376:	4604      	mov	r4, r0
		if (err == -EALREADY) {
    b378:	d008      	beq.n	b38c <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
    b37a:	2800      	cmp	r0, #0
    b37c:	da07      	bge.n	b38e <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
    b37e:	f387 8811 	msr	BASEPRI, r7
    b382:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
    b386:	e00f      	b.n	b3a8 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
    b388:	2800      	cmp	r0, #0
    b38a:	d0ef      	beq.n	b36c <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
    b38c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b38e:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
    b392:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b394:	d10b      	bne.n	b3ae <k_delayed_work_submit_to_queue+0x66>
    b396:	f387 8811 	msr	BASEPRI, r7
    b39a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
    b39e:	4629      	mov	r1, r5
    b3a0:	4630      	mov	r0, r6
    b3a2:	f004 fba0 	bl	fae6 <k_work_submit_to_queue>
		return 0;
    b3a6:	2400      	movs	r4, #0
}
    b3a8:	4620      	mov	r0, r4
    b3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
    b3ae:	4642      	mov	r2, r8
    b3b0:	464b      	mov	r3, r9
    b3b2:	4904      	ldr	r1, [pc, #16]	; (b3c4 <k_delayed_work_submit_to_queue+0x7c>)
    b3b4:	f105 0010 	add.w	r0, r5, #16
    b3b8:	f000 f87c 	bl	b4b4 <z_add_timeout>
    b3bc:	e7df      	b.n	b37e <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
    b3be:	f06f 042f 	mvn.w	r4, #47	; 0x2f
    b3c2:	e7dc      	b.n	b37e <k_delayed_work_submit_to_queue+0x36>
    b3c4:	0000fb0f 	.word	0x0000fb0f

0000b3c8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b3c8:	4a02      	ldr	r2, [pc, #8]	; (b3d4 <boot_banner+0xc>)
    b3ca:	4903      	ldr	r1, [pc, #12]	; (b3d8 <boot_banner+0x10>)
    b3cc:	4803      	ldr	r0, [pc, #12]	; (b3dc <boot_banner+0x14>)
    b3ce:	f000 bc63 	b.w	bc98 <printk>
    b3d2:	bf00      	nop
    b3d4:	00010ecb 	.word	0x00010ecb
    b3d8:	00012ca9 	.word	0x00012ca9
    b3dc:	00012cb6 	.word	0x00012cb6

0000b3e0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    b3e0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    b3e2:	4806      	ldr	r0, [pc, #24]	; (b3fc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    b3e4:	4a06      	ldr	r2, [pc, #24]	; (b400 <z_data_copy+0x20>)
    b3e6:	4907      	ldr	r1, [pc, #28]	; (b404 <z_data_copy+0x24>)
    b3e8:	1a12      	subs	r2, r2, r0
    b3ea:	f002 f8a6 	bl	d53a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b3ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    b3f2:	4a05      	ldr	r2, [pc, #20]	; (b408 <z_data_copy+0x28>)
    b3f4:	4905      	ldr	r1, [pc, #20]	; (b40c <z_data_copy+0x2c>)
    b3f6:	4806      	ldr	r0, [pc, #24]	; (b410 <z_data_copy+0x30>)
    b3f8:	f002 b89f 	b.w	d53a <memcpy>
    b3fc:	20000000 	.word	0x20000000
    b400:	20000694 	.word	0x20000694
    b404:	00012ce0 	.word	0x00012ce0
    b408:	00000000 	.word	0x00000000
    b40c:	00012ce0 	.word	0x00012ce0
    b410:	20000000 	.word	0x20000000

0000b414 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    b414:	4b03      	ldr	r3, [pc, #12]	; (b424 <elapsed+0x10>)
    b416:	681b      	ldr	r3, [r3, #0]
    b418:	b90b      	cbnz	r3, b41e <elapsed+0xa>
    b41a:	f7f7 ba61 	b.w	28e0 <z_clock_elapsed>
}
    b41e:	2000      	movs	r0, #0
    b420:	4770      	bx	lr
    b422:	bf00      	nop
    b424:	20001934 	.word	0x20001934

0000b428 <remove_timeout>:
{
    b428:	b530      	push	{r4, r5, lr}
    b42a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b42c:	b168      	cbz	r0, b44a <remove_timeout+0x22>
    b42e:	4a0a      	ldr	r2, [pc, #40]	; (b458 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    b430:	6852      	ldr	r2, [r2, #4]
    b432:	4290      	cmp	r0, r2
    b434:	d009      	beq.n	b44a <remove_timeout+0x22>
	if (next(t) != NULL) {
    b436:	b143      	cbz	r3, b44a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    b438:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    b43c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    b440:	1912      	adds	r2, r2, r4
    b442:	eb45 0101 	adc.w	r1, r5, r1
    b446:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    b44a:	6842      	ldr	r2, [r0, #4]
    b44c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    b44e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b450:	2300      	movs	r3, #0
	node->prev = NULL;
    b452:	e9c0 3300 	strd	r3, r3, [r0]
}
    b456:	bd30      	pop	{r4, r5, pc}
    b458:	20000310 	.word	0x20000310

0000b45c <next_timeout>:

static int32_t next_timeout(void)
{
    b45c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    b45e:	4b13      	ldr	r3, [pc, #76]	; (b4ac <next_timeout+0x50>)
    b460:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b462:	429c      	cmp	r4, r3
    b464:	bf08      	it	eq
    b466:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    b468:	f7ff ffd4 	bl	b414 <elapsed>
    b46c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    b46e:	b1bc      	cbz	r4, b4a0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    b470:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    b474:	1b40      	subs	r0, r0, r5
    b476:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    b47a:	2801      	cmp	r0, #1
    b47c:	f171 0300 	sbcs.w	r3, r1, #0
    b480:	db11      	blt.n	b4a6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    b482:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b486:	2300      	movs	r3, #0
    b488:	4282      	cmp	r2, r0
    b48a:	eb73 0401 	sbcs.w	r4, r3, r1
    b48e:	da00      	bge.n	b492 <next_timeout+0x36>
    b490:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b492:	4b07      	ldr	r3, [pc, #28]	; (b4b0 <next_timeout+0x54>)
    b494:	695b      	ldr	r3, [r3, #20]
    b496:	b113      	cbz	r3, b49e <next_timeout+0x42>
    b498:	4298      	cmp	r0, r3
    b49a:	bfa8      	it	ge
    b49c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    b49e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    b4a0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b4a4:	e7f5      	b.n	b492 <next_timeout+0x36>
    b4a6:	2000      	movs	r0, #0
    b4a8:	e7f3      	b.n	b492 <next_timeout+0x36>
    b4aa:	bf00      	nop
    b4ac:	20000310 	.word	0x20000310
    b4b0:	200018f4 	.word	0x200018f4

0000b4b4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    b4b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4b8:	9101      	str	r1, [sp, #4]
    b4ba:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b4bc:	1c4b      	adds	r3, r1, #1
    b4be:	bf08      	it	eq
    b4c0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    b4c4:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b4c6:	d070      	beq.n	b5aa <z_add_timeout+0xf6>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    b4c8:	f06f 0301 	mvn.w	r3, #1
    b4cc:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    b4d0:	1c54      	adds	r4, r2, #1
    b4d2:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    b4d6:	ebb3 0804 	subs.w	r8, r3, r4
    b4da:	eb6b 0905 	sbc.w	r9, fp, r5
    b4de:	f1b8 0f00 	cmp.w	r8, #0
    b4e2:	f179 0300 	sbcs.w	r3, r9, #0
    b4e6:	db0f      	blt.n	b508 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    b4e8:	f7ff ff94 	bl	b414 <elapsed>
    b4ec:	f06f 0301 	mvn.w	r3, #1
    b4f0:	4a34      	ldr	r2, [pc, #208]	; (b5c4 <z_add_timeout+0x110>)
    b4f2:	e9d2 1c00 	ldrd	r1, ip, [r2]
    b4f6:	1a5b      	subs	r3, r3, r1
    b4f8:	eb6b 020c 	sbc.w	r2, fp, ip
    b4fc:	1b1e      	subs	r6, r3, r4
    b4fe:	eb62 0705 	sbc.w	r7, r2, r5
    b502:	1a34      	subs	r4, r6, r0
    b504:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b508:	9b01      	ldr	r3, [sp, #4]
    b50a:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
    b50e:	f04f 0320 	mov.w	r3, #32
    b512:	f3ef 8611 	mrs	r6, BASEPRI
    b516:	f383 8811 	msr	BASEPRI, r3
    b51a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    b51e:	f7ff ff79 	bl	b414 <elapsed>
	ticks = MAX(1, ticks);
    b522:	2c01      	cmp	r4, #1
    b524:	f175 0300 	sbcs.w	r3, r5, #0
    b528:	bfbc      	itt	lt
    b52a:	2401      	movlt	r4, #1
    b52c:	2500      	movlt	r5, #0
	return list->head == list;
    b52e:	4b26      	ldr	r3, [pc, #152]	; (b5c8 <z_add_timeout+0x114>)
		to->dticks = ticks + elapsed();
    b530:	1824      	adds	r4, r4, r0
    b532:	681a      	ldr	r2, [r3, #0]
    b534:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b538:	429a      	cmp	r2, r3
    b53a:	e9ca 4504 	strd	r4, r5, [sl, #16]
    b53e:	d001      	beq.n	b544 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b540:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    b542:	b952      	cbnz	r2, b55a <z_add_timeout+0xa6>
	node->prev = list->tail;
    b544:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    b546:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    b54a:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    b54e:	685a      	ldr	r2, [r3, #4]
    b550:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    b554:	f8c3 a004 	str.w	sl, [r3, #4]
}
    b558:	e014      	b.n	b584 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
    b55a:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    b55e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    b562:	4544      	cmp	r4, r8
    b564:	eb75 0109 	sbcs.w	r1, r5, r9
    b568:	da22      	bge.n	b5b0 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
    b56a:	ebb8 0004 	subs.w	r0, r8, r4
    b56e:	eb69 0105 	sbc.w	r1, r9, r5
    b572:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    b576:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    b578:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    b57c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    b580:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    b584:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b586:	429a      	cmp	r2, r3
    b588:	d00b      	beq.n	b5a2 <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b58a:	4592      	cmp	sl, r2
    b58c:	d109      	bne.n	b5a2 <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    b58e:	f7ff ff65 	bl	b45c <next_timeout>

			if (next_time == 0 ||
    b592:	b118      	cbz	r0, b59c <z_add_timeout+0xe8>
			    _current_cpu->slice_ticks != next_time) {
    b594:	4b0d      	ldr	r3, [pc, #52]	; (b5cc <z_add_timeout+0x118>)
			if (next_time == 0 ||
    b596:	695b      	ldr	r3, [r3, #20]
    b598:	4283      	cmp	r3, r0
    b59a:	d002      	beq.n	b5a2 <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
    b59c:	2100      	movs	r1, #0
    b59e:	f7f7 f96d 	bl	287c <z_clock_set_timeout>
	__asm__ volatile(
    b5a2:	f386 8811 	msr	BASEPRI, r6
    b5a6:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    b5aa:	b003      	add	sp, #12
    b5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    b5b0:	ebb4 0008 	subs.w	r0, r4, r8
    b5b4:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    b5b8:	42ba      	cmp	r2, r7
    b5ba:	e9ca 0104 	strd	r0, r1, [sl, #16]
    b5be:	d0c1      	beq.n	b544 <z_add_timeout+0x90>
    b5c0:	6812      	ldr	r2, [r2, #0]
    b5c2:	e7be      	b.n	b542 <z_add_timeout+0x8e>
    b5c4:	20000ed8 	.word	0x20000ed8
    b5c8:	20000310 	.word	0x20000310
    b5cc:	200018f4 	.word	0x200018f4

0000b5d0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    b5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5d4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b5d6:	f7ff fb0f 	bl	abf8 <z_time_slice>
	__asm__ volatile(
    b5da:	f04f 0320 	mov.w	r3, #32
    b5de:	f3ef 8411 	mrs	r4, BASEPRI
    b5e2:	f383 8811 	msr	BASEPRI, r3
    b5e6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    b5ea:	f8df a0b0 	ldr.w	sl, [pc, #176]	; b69c <z_clock_announce+0xcc>
    b5ee:	4d2a      	ldr	r5, [pc, #168]	; (b698 <z_clock_announce+0xc8>)
    b5f0:	4651      	mov	r1, sl
	return list->head == list;
    b5f2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; b6a0 <z_clock_announce+0xd0>
    b5f6:	602e      	str	r6, [r5, #0]
    b5f8:	f8d5 c000 	ldr.w	ip, [r5]
    b5fc:	f8db 0000 	ldr.w	r0, [fp]
    b600:	4662      	mov	r2, ip
    b602:	e9da 8900 	ldrd	r8, r9, [sl]
    b606:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b608:	4558      	cmp	r0, fp
    b60a:	e9cd 2300 	strd	r2, r3, [sp]
    b60e:	d00d      	beq.n	b62c <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    b610:	b160      	cbz	r0, b62c <z_clock_announce+0x5c>
    b612:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    b616:	45b4      	cmp	ip, r6
    b618:	41bb      	sbcs	r3, r7
    b61a:	da1d      	bge.n	b658 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    b61c:	9b00      	ldr	r3, [sp, #0]
    b61e:	ebb6 0c03 	subs.w	ip, r6, r3
    b622:	9b01      	ldr	r3, [sp, #4]
    b624:	eb67 0603 	sbc.w	r6, r7, r3
    b628:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    b62c:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    b62e:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    b630:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    b632:	eb13 0208 	adds.w	r2, r3, r8
    b636:	9b01      	ldr	r3, [sp, #4]
    b638:	eb43 0309 	adc.w	r3, r3, r9
    b63c:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
    b640:	f7ff ff0c 	bl	b45c <next_timeout>
    b644:	4631      	mov	r1, r6
    b646:	f7f7 f919 	bl	287c <z_clock_set_timeout>
	__asm__ volatile(
    b64a:	f384 8811 	msr	BASEPRI, r4
    b64e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b652:	b003      	add	sp, #12
    b654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    b658:	2200      	movs	r2, #0
    b65a:	2300      	movs	r3, #0
		curr_tick += dt;
    b65c:	eb18 0806 	adds.w	r8, r8, r6
    b660:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    b664:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    b668:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    b66c:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    b670:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    b672:	f7ff fed9 	bl	b428 <remove_timeout>
    b676:	f384 8811 	msr	BASEPRI, r4
    b67a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    b67e:	6883      	ldr	r3, [r0, #8]
    b680:	4798      	blx	r3
	__asm__ volatile(
    b682:	f04f 0320 	mov.w	r3, #32
    b686:	f3ef 8411 	mrs	r4, BASEPRI
    b68a:	f383 8811 	msr	BASEPRI, r3
    b68e:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    b692:	4902      	ldr	r1, [pc, #8]	; (b69c <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    b694:	e7b0      	b.n	b5f8 <z_clock_announce+0x28>
    b696:	bf00      	nop
    b698:	20001934 	.word	0x20001934
    b69c:	20000ed8 	.word	0x20000ed8
    b6a0:	20000310 	.word	0x20000310

0000b6a4 <z_tick_get>:

int64_t z_tick_get(void)
{
    b6a4:	b510      	push	{r4, lr}
    b6a6:	f04f 0320 	mov.w	r3, #32
    b6aa:	f3ef 8411 	mrs	r4, BASEPRI
    b6ae:	f383 8811 	msr	BASEPRI, r3
    b6b2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    b6b6:	f7f7 f913 	bl	28e0 <z_clock_elapsed>
    b6ba:	4b06      	ldr	r3, [pc, #24]	; (b6d4 <z_tick_get+0x30>)
    b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    b6c0:	1812      	adds	r2, r2, r0
    b6c2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    b6c6:	f384 8811 	msr	BASEPRI, r4
    b6ca:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    b6ce:	4610      	mov	r0, r2
    b6d0:	4619      	mov	r1, r3
    b6d2:	bd10      	pop	{r4, pc}
    b6d4:	20000ed8 	.word	0x20000ed8

0000b6d8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b6da:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    b6de:	1c56      	adds	r6, r2, #1
    b6e0:	f143 0700 	adc.w	r7, r3, #0
    b6e4:	2f00      	cmp	r7, #0
    b6e6:	bf08      	it	eq
    b6e8:	2e02      	cmpeq	r6, #2
{
    b6ea:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b6ec:	d302      	bcc.n	b6f4 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b6ee:	490c      	ldr	r1, [pc, #48]	; (b720 <z_timer_expiration_handler+0x48>)
    b6f0:	f7ff fee0 	bl	b4b4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    b6f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b6f6:	3301      	adds	r3, #1
    b6f8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b6fa:	6a23      	ldr	r3, [r4, #32]
    b6fc:	b10b      	cbz	r3, b702 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    b6fe:	4620      	mov	r0, r4
    b700:	4798      	blx	r3
	return list->head == list;
    b702:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b706:	42a5      	cmp	r5, r4
    b708:	d009      	beq.n	b71e <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b70a:	b145      	cbz	r5, b71e <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    b70c:	4628      	mov	r0, r5
    b70e:	f004 f8e9 	bl	f8e4 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    b712:	4628      	mov	r0, r5
    b714:	f004 f938 	bl	f988 <z_ready_thread>
    b718:	2300      	movs	r3, #0
    b71a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
    b71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b720:	0000b6d9 	.word	0x0000b6d9

0000b724 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b724:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    b728:	4619      	mov	r1, r3
    b72a:	4606      	mov	r6, r0
    b72c:	4610      	mov	r0, r2
    b72e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b732:	1c4c      	adds	r4, r1, #1
    b734:	bf08      	it	eq
    b736:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    b73a:	4680      	mov	r8, r0
    b73c:	4689      	mov	r9, r1
    b73e:	d047      	beq.n	b7d0 <z_impl_k_timer_start+0xac>
    b740:	4614      	mov	r4, r2
    b742:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    b744:	ea54 0305 	orrs.w	r3, r4, r5
    b748:	d016      	beq.n	b778 <z_impl_k_timer_start+0x54>
    b74a:	f06f 0301 	mvn.w	r3, #1
    b74e:	ebb3 0a02 	subs.w	sl, r3, r2
    b752:	f04f 33ff 	mov.w	r3, #4294967295
    b756:	eb63 0b05 	sbc.w	fp, r3, r5
    b75a:	f1ba 0f00 	cmp.w	sl, #0
    b75e:	f17b 0300 	sbcs.w	r3, fp, #0
    b762:	da09      	bge.n	b778 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
    b764:	f112 34ff 	adds.w	r4, r2, #4294967295
    b768:	f145 35ff 	adc.w	r5, r5, #4294967295
    b76c:	2c01      	cmp	r4, #1
    b76e:	f175 0300 	sbcs.w	r3, r5, #0
    b772:	bfbc      	itt	lt
    b774:	2401      	movlt	r4, #1
    b776:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b778:	f06f 0301 	mvn.w	r3, #1
    b77c:	1a1b      	subs	r3, r3, r0
    b77e:	9300      	str	r3, [sp, #0]
    b780:	f04f 33ff 	mov.w	r3, #4294967295
    b784:	eb63 0301 	sbc.w	r3, r3, r1
    b788:	9301      	str	r3, [sp, #4]
    b78a:	e9dd 2300 	ldrd	r2, r3, [sp]
    b78e:	2a00      	cmp	r2, #0
    b790:	f173 0300 	sbcs.w	r3, r3, #0
    b794:	da0c      	bge.n	b7b0 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b796:	f110 38ff 	adds.w	r8, r0, #4294967295
    b79a:	f141 39ff 	adc.w	r9, r1, #4294967295
    b79e:	f1b8 0f00 	cmp.w	r8, #0
    b7a2:	f179 0300 	sbcs.w	r3, r9, #0
    b7a6:	bfbc      	itt	lt
    b7a8:	f04f 0800 	movlt.w	r8, #0
    b7ac:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    b7b0:	4630      	mov	r0, r6
    b7b2:	f004 fa06 	bl	fbc2 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    b7b6:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b7b8:	4642      	mov	r2, r8
	timer->status = 0U;
    b7ba:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b7bc:	4630      	mov	r0, r6
    b7be:	464b      	mov	r3, r9
    b7c0:	4905      	ldr	r1, [pc, #20]	; (b7d8 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
    b7c2:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    b7c6:	b002      	add	sp, #8
    b7c8:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b7cc:	f7ff be72 	b.w	b4b4 <z_add_timeout>
}
    b7d0:	b002      	add	sp, #8
    b7d2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    b7d6:	bf00      	nop
    b7d8:	0000b6d9 	.word	0x0000b6d9

0000b7dc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    b7dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    b7e0:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    b7e2:	4b2a      	ldr	r3, [pc, #168]	; (b88c <z_impl_k_poll+0xb0>)
{
    b7e4:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
    b7e6:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
    b7e8:	2301      	movs	r3, #1
    b7ea:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
    b7ee:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
    b7f2:	ea52 0307 	orrs.w	r3, r2, r7
    b7f6:	bf0c      	ite	eq
    b7f8:	2301      	moveq	r3, #1
    b7fa:	2300      	movne	r3, #0
    b7fc:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
    b800:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    b802:	f004 fb4b 	bl	fe9c <register_events>
    b806:	4681      	mov	r9, r0
	__asm__ volatile(
    b808:	f04f 0320 	mov.w	r3, #32
    b80c:	f3ef 8a11 	mrs	sl, BASEPRI
    b810:	f383 8811 	msr	BASEPRI, r3
    b814:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    b818:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    b81c:	b964      	cbnz	r4, b838 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    b81e:	4601      	mov	r1, r0
    b820:	4652      	mov	r2, sl
    b822:	4640      	mov	r0, r8
    b824:	f004 fa6a 	bl	fcfc <clear_event_registrations>
	__asm__ volatile(
    b828:	f38a 8811 	msr	BASEPRI, sl
    b82c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
    b830:	4620      	mov	r0, r4
    b832:	b004      	add	sp, #16
    b834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    b838:	2300      	movs	r3, #0
    b83a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b83e:	ea56 0307 	orrs.w	r3, r6, r7
    b842:	d106      	bne.n	b852 <z_impl_k_poll+0x76>
    b844:	f38a 8811 	msr	BASEPRI, sl
    b848:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    b84c:	f06f 040a 	mvn.w	r4, #10
    b850:	e7ee      	b.n	b830 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    b852:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    b854:	4651      	mov	r1, sl
    b856:	e9cd 6700 	strd	r6, r7, [sp]
    b85a:	480d      	ldr	r0, [pc, #52]	; (b890 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    b85c:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    b860:	f7ff fb02 	bl	ae68 <z_pend_curr>
    b864:	4604      	mov	r4, r0
	__asm__ volatile(
    b866:	f04f 0320 	mov.w	r3, #32
    b86a:	f3ef 8511 	mrs	r5, BASEPRI
    b86e:	f383 8811 	msr	BASEPRI, r3
    b872:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    b876:	462a      	mov	r2, r5
    b878:	4649      	mov	r1, r9
    b87a:	4640      	mov	r0, r8
    b87c:	f004 fa3e 	bl	fcfc <clear_event_registrations>
	__asm__ volatile(
    b880:	f385 8811 	msr	BASEPRI, r5
    b884:	f3bf 8f6f 	isb	sy
	return swap_rc;
    b888:	e7d2      	b.n	b830 <z_impl_k_poll+0x54>
    b88a:	bf00      	nop
    b88c:	200018f4 	.word	0x200018f4
    b890:	20002a16 	.word	0x20002a16

0000b894 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
    b894:	b538      	push	{r3, r4, r5, lr}
    b896:	4603      	mov	r3, r0
	__asm__ volatile(
    b898:	f04f 0220 	mov.w	r2, #32
    b89c:	f3ef 8511 	mrs	r5, BASEPRI
    b8a0:	f382 8811 	msr	BASEPRI, r2
    b8a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
    b8a8:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
    b8aa:	2101      	movs	r1, #1
    b8ac:	6081      	str	r1, [r0, #8]
	return list->head == list;
    b8ae:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    b8b0:	4283      	cmp	r3, r0
    b8b2:	d106      	bne.n	b8c2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    b8b4:	f385 8811 	msr	BASEPRI, r5
    b8b8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
    b8bc:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
    b8be:	4620      	mov	r0, r4
    b8c0:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
    b8c2:	e9d0 3200 	ldrd	r3, r2, [r0]
    b8c6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    b8c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b8ca:	2300      	movs	r3, #0
	node->prev = NULL;
    b8cc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    b8d0:	f004 fa53 	bl	fd7a <signal_poll_event>
	z_reschedule(&lock, key);
    b8d4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    b8d6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    b8d8:	4801      	ldr	r0, [pc, #4]	; (b8e0 <z_impl_k_poll_signal_raise+0x4c>)
    b8da:	f7ff f87d 	bl	a9d8 <z_reschedule>
	return rc;
    b8de:	e7ee      	b.n	b8be <z_impl_k_poll_signal_raise+0x2a>
    b8e0:	20002a16 	.word	0x20002a16

0000b8e4 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
    b8e4:	460a      	mov	r2, r1
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    b8e6:	4601      	mov	r1, r0
    b8e8:	4801      	ldr	r0, [pc, #4]	; (b8f0 <k_aligned_alloc+0xc>)
    b8ea:	f004 bb55 	b.w	ff98 <z_heap_aligned_alloc>
    b8ee:	bf00      	nop
    b8f0:	200004e8 	.word	0x200004e8

0000b8f4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    b8f4:	b538      	push	{r3, r4, r5, lr}
    b8f6:	4604      	mov	r4, r0
    b8f8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    b8fa:	f004 f8e5 	bl	fac8 <k_is_in_isr>
    b8fe:	b950      	cbnz	r0, b916 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    b900:	4b06      	ldr	r3, [pc, #24]	; (b91c <z_thread_aligned_alloc+0x28>)
    b902:	689b      	ldr	r3, [r3, #8]
    b904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (heap) {
    b906:	b143      	cbz	r3, b91a <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
    b908:	462a      	mov	r2, r5
    b90a:	4621      	mov	r1, r4
    b90c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
    b90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
    b912:	f004 bb41 	b.w	ff98 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
    b916:	4b02      	ldr	r3, [pc, #8]	; (b920 <z_thread_aligned_alloc+0x2c>)
    b918:	e7f6      	b.n	b908 <z_thread_aligned_alloc+0x14>
}
    b91a:	bd38      	pop	{r3, r4, r5, pc}
    b91c:	200018f4 	.word	0x200018f4
    b920:	200004e8 	.word	0x200004e8

0000b924 <nrf_cc3xx_platform_init_no_rng>:
    b924:	b510      	push	{r4, lr}
    b926:	4c0a      	ldr	r4, [pc, #40]	; (b950 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    b928:	6823      	ldr	r3, [r4, #0]
    b92a:	b11b      	cbz	r3, b934 <nrf_cc3xx_platform_init_no_rng+0x10>
    b92c:	2301      	movs	r3, #1
    b92e:	2000      	movs	r0, #0
    b930:	6023      	str	r3, [r4, #0]
    b932:	bd10      	pop	{r4, pc}
    b934:	f000 f8b2 	bl	ba9c <CC_LibInitNoRng>
    b938:	2800      	cmp	r0, #0
    b93a:	d0f7      	beq.n	b92c <nrf_cc3xx_platform_init_no_rng+0x8>
    b93c:	3801      	subs	r0, #1
    b93e:	2807      	cmp	r0, #7
    b940:	d803      	bhi.n	b94a <nrf_cc3xx_platform_init_no_rng+0x26>
    b942:	4b04      	ldr	r3, [pc, #16]	; (b954 <nrf_cc3xx_platform_init_no_rng+0x30>)
    b944:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b948:	bd10      	pop	{r4, pc}
    b94a:	4803      	ldr	r0, [pc, #12]	; (b958 <nrf_cc3xx_platform_init_no_rng+0x34>)
    b94c:	bd10      	pop	{r4, pc}
    b94e:	bf00      	nop
    b950:	20002938 	.word	0x20002938
    b954:	00010c08 	.word	0x00010c08
    b958:	ffff8ffe 	.word	0xffff8ffe

0000b95c <nrf_cc3xx_platform_abort>:
    b95c:	f3bf 8f4f 	dsb	sy
    b960:	4905      	ldr	r1, [pc, #20]	; (b978 <nrf_cc3xx_platform_abort+0x1c>)
    b962:	4b06      	ldr	r3, [pc, #24]	; (b97c <nrf_cc3xx_platform_abort+0x20>)
    b964:	68ca      	ldr	r2, [r1, #12]
    b966:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b96a:	4313      	orrs	r3, r2
    b96c:	60cb      	str	r3, [r1, #12]
    b96e:	f3bf 8f4f 	dsb	sy
    b972:	bf00      	nop
    b974:	e7fd      	b.n	b972 <nrf_cc3xx_platform_abort+0x16>
    b976:	bf00      	nop
    b978:	e000ed00 	.word	0xe000ed00
    b97c:	05fa0004 	.word	0x05fa0004

0000b980 <CC_PalAbort>:
    b980:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    b984:	2100      	movs	r1, #0
    b986:	b430      	push	{r4, r5}
    b988:	4a08      	ldr	r2, [pc, #32]	; (b9ac <CC_PalAbort+0x2c>)
    b98a:	4c09      	ldr	r4, [pc, #36]	; (b9b0 <CC_PalAbort+0x30>)
    b98c:	4d09      	ldr	r5, [pc, #36]	; (b9b4 <CC_PalAbort+0x34>)
    b98e:	6023      	str	r3, [r4, #0]
    b990:	602b      	str	r3, [r5, #0]
    b992:	6013      	str	r3, [r2, #0]
    b994:	60e3      	str	r3, [r4, #12]
    b996:	60eb      	str	r3, [r5, #12]
    b998:	60d3      	str	r3, [r2, #12]
    b99a:	61a3      	str	r3, [r4, #24]
    b99c:	4a06      	ldr	r2, [pc, #24]	; (b9b8 <CC_PalAbort+0x38>)
    b99e:	4c07      	ldr	r4, [pc, #28]	; (b9bc <CC_PalAbort+0x3c>)
    b9a0:	61ab      	str	r3, [r5, #24]
    b9a2:	6863      	ldr	r3, [r4, #4]
    b9a4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    b9a8:	bc30      	pop	{r4, r5}
    b9aa:	4718      	bx	r3
    b9ac:	50845408 	.word	0x50845408
    b9b0:	50845400 	.word	0x50845400
    b9b4:	50845404 	.word	0x50845404
    b9b8:	50844000 	.word	0x50844000
    b9bc:	20000318 	.word	0x20000318

0000b9c0 <nrf_cc3xx_platform_set_abort>:
    b9c0:	4b02      	ldr	r3, [pc, #8]	; (b9cc <nrf_cc3xx_platform_set_abort+0xc>)
    b9c2:	e9d0 1200 	ldrd	r1, r2, [r0]
    b9c6:	e9c3 1200 	strd	r1, r2, [r3]
    b9ca:	4770      	bx	lr
    b9cc:	20000318 	.word	0x20000318

0000b9d0 <mutex_unlock>:
    b9d0:	b148      	cbz	r0, b9e6 <mutex_unlock+0x16>
    b9d2:	6843      	ldr	r3, [r0, #4]
    b9d4:	b12b      	cbz	r3, b9e2 <mutex_unlock+0x12>
    b9d6:	f3bf 8f5f 	dmb	sy
    b9da:	2300      	movs	r3, #0
    b9dc:	6003      	str	r3, [r0, #0]
    b9de:	4618      	mov	r0, r3
    b9e0:	4770      	bx	lr
    b9e2:	4802      	ldr	r0, [pc, #8]	; (b9ec <mutex_unlock+0x1c>)
    b9e4:	4770      	bx	lr
    b9e6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b9ea:	4770      	bx	lr
    b9ec:	ffff8fea 	.word	0xffff8fea

0000b9f0 <mutex_free>:
    b9f0:	b510      	push	{r4, lr}
    b9f2:	4604      	mov	r4, r0
    b9f4:	b128      	cbz	r0, ba02 <mutex_free+0x12>
    b9f6:	6863      	ldr	r3, [r4, #4]
    b9f8:	b113      	cbz	r3, ba00 <mutex_free+0x10>
    b9fa:	2300      	movs	r3, #0
    b9fc:	6023      	str	r3, [r4, #0]
    b9fe:	6063      	str	r3, [r4, #4]
    ba00:	bd10      	pop	{r4, pc}
    ba02:	4b02      	ldr	r3, [pc, #8]	; (ba0c <mutex_free+0x1c>)
    ba04:	4802      	ldr	r0, [pc, #8]	; (ba10 <mutex_free+0x20>)
    ba06:	685b      	ldr	r3, [r3, #4]
    ba08:	4798      	blx	r3
    ba0a:	e7f4      	b.n	b9f6 <mutex_free+0x6>
    ba0c:	20000318 	.word	0x20000318
    ba10:	00010c28 	.word	0x00010c28

0000ba14 <mutex_init>:
    ba14:	b510      	push	{r4, lr}
    ba16:	4604      	mov	r4, r0
    ba18:	b130      	cbz	r0, ba28 <mutex_init+0x14>
    ba1a:	2200      	movs	r2, #0
    ba1c:	6863      	ldr	r3, [r4, #4]
    ba1e:	6022      	str	r2, [r4, #0]
    ba20:	f043 0301 	orr.w	r3, r3, #1
    ba24:	6063      	str	r3, [r4, #4]
    ba26:	bd10      	pop	{r4, pc}
    ba28:	4801      	ldr	r0, [pc, #4]	; (ba30 <mutex_init+0x1c>)
    ba2a:	f7ff ffa9 	bl	b980 <CC_PalAbort>
    ba2e:	e7f4      	b.n	ba1a <mutex_init+0x6>
    ba30:	00010c50 	.word	0x00010c50

0000ba34 <mutex_lock>:
    ba34:	b180      	cbz	r0, ba58 <mutex_lock+0x24>
    ba36:	6843      	ldr	r3, [r0, #4]
    ba38:	b163      	cbz	r3, ba54 <mutex_lock+0x20>
    ba3a:	2201      	movs	r2, #1
    ba3c:	e8d0 3fef 	ldaex	r3, [r0]
    ba40:	e8c0 2fe1 	stlex	r1, r2, [r0]
    ba44:	2900      	cmp	r1, #0
    ba46:	d1f9      	bne.n	ba3c <mutex_lock+0x8>
    ba48:	2b01      	cmp	r3, #1
    ba4a:	d0f7      	beq.n	ba3c <mutex_lock+0x8>
    ba4c:	f3bf 8f5f 	dmb	sy
    ba50:	2000      	movs	r0, #0
    ba52:	4770      	bx	lr
    ba54:	4802      	ldr	r0, [pc, #8]	; (ba60 <mutex_lock+0x2c>)
    ba56:	4770      	bx	lr
    ba58:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ba5c:	4770      	bx	lr
    ba5e:	bf00      	nop
    ba60:	ffff8fea 	.word	0xffff8fea

0000ba64 <nrf_cc3xx_platform_set_mutexes>:
    ba64:	b470      	push	{r4, r5, r6}
    ba66:	4b0b      	ldr	r3, [pc, #44]	; (ba94 <nrf_cc3xx_platform_set_mutexes+0x30>)
    ba68:	6806      	ldr	r6, [r0, #0]
    ba6a:	68c2      	ldr	r2, [r0, #12]
    ba6c:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    ba70:	e9c3 4202 	strd	r4, r2, [r3, #8]
    ba74:	e9c3 6500 	strd	r6, r5, [r3]
    ba78:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    ba7c:	680e      	ldr	r6, [r1, #0]
    ba7e:	4b06      	ldr	r3, [pc, #24]	; (ba98 <nrf_cc3xx_platform_set_mutexes+0x34>)
    ba80:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    ba84:	e9c3 6500 	strd	r6, r5, [r3]
    ba88:	e9c3 4002 	strd	r4, r0, [r3, #8]
    ba8c:	611a      	str	r2, [r3, #16]
    ba8e:	bc70      	pop	{r4, r5, r6}
    ba90:	4770      	bx	lr
    ba92:	bf00      	nop
    ba94:	20000328 	.word	0x20000328
    ba98:	20000338 	.word	0x20000338

0000ba9c <CC_LibInitNoRng>:
    ba9c:	b508      	push	{r3, lr}
    ba9e:	f000 f80f 	bl	bac0 <CC_HalInit>
    baa2:	b928      	cbnz	r0, bab0 <CC_LibInitNoRng+0x14>
    baa4:	f000 f80e 	bl	bac4 <CC_PalInit>
    baa8:	b930      	cbnz	r0, bab8 <CC_LibInitNoRng+0x1c>
    baaa:	4a04      	ldr	r2, [pc, #16]	; (babc <CC_LibInitNoRng+0x20>)
    baac:	6010      	str	r0, [r2, #0]
    baae:	bd08      	pop	{r3, pc}
    bab0:	f000 f836 	bl	bb20 <CC_PalTerminate>
    bab4:	2003      	movs	r0, #3
    bab6:	bd08      	pop	{r3, pc}
    bab8:	2004      	movs	r0, #4
    baba:	bd08      	pop	{r3, pc}
    babc:	50845a0c 	.word	0x50845a0c

0000bac0 <CC_HalInit>:
    bac0:	2000      	movs	r0, #0
    bac2:	4770      	bx	lr

0000bac4 <CC_PalInit>:
    bac4:	b510      	push	{r4, lr}
    bac6:	4811      	ldr	r0, [pc, #68]	; (bb0c <CC_PalInit+0x48>)
    bac8:	f000 f848 	bl	bb5c <CC_PalMutexCreate>
    bacc:	b100      	cbz	r0, bad0 <CC_PalInit+0xc>
    bace:	bd10      	pop	{r4, pc}
    bad0:	480f      	ldr	r0, [pc, #60]	; (bb10 <CC_PalInit+0x4c>)
    bad2:	f000 f843 	bl	bb5c <CC_PalMutexCreate>
    bad6:	2800      	cmp	r0, #0
    bad8:	d1f9      	bne.n	bace <CC_PalInit+0xa>
    bada:	4c0e      	ldr	r4, [pc, #56]	; (bb14 <CC_PalInit+0x50>)
    badc:	4620      	mov	r0, r4
    bade:	f000 f83d 	bl	bb5c <CC_PalMutexCreate>
    bae2:	2800      	cmp	r0, #0
    bae4:	d1f3      	bne.n	bace <CC_PalInit+0xa>
    bae6:	4b0c      	ldr	r3, [pc, #48]	; (bb18 <CC_PalInit+0x54>)
    bae8:	480c      	ldr	r0, [pc, #48]	; (bb1c <CC_PalInit+0x58>)
    baea:	601c      	str	r4, [r3, #0]
    baec:	f000 f836 	bl	bb5c <CC_PalMutexCreate>
    baf0:	4601      	mov	r1, r0
    baf2:	2800      	cmp	r0, #0
    baf4:	d1eb      	bne.n	bace <CC_PalInit+0xa>
    baf6:	f000 f82d 	bl	bb54 <CC_PalDmaInit>
    bafa:	4604      	mov	r4, r0
    bafc:	b108      	cbz	r0, bb02 <CC_PalInit+0x3e>
    bafe:	4620      	mov	r0, r4
    bb00:	bd10      	pop	{r4, pc}
    bb02:	f000 f83f 	bl	bb84 <CC_PalPowerSaveModeInit>
    bb06:	4620      	mov	r0, r4
    bb08:	e7fa      	b.n	bb00 <CC_PalInit+0x3c>
    bb0a:	bf00      	nop
    bb0c:	20000370 	.word	0x20000370
    bb10:	20000364 	.word	0x20000364
    bb14:	2000036c 	.word	0x2000036c
    bb18:	20000374 	.word	0x20000374
    bb1c:	20000368 	.word	0x20000368

0000bb20 <CC_PalTerminate>:
    bb20:	b508      	push	{r3, lr}
    bb22:	4808      	ldr	r0, [pc, #32]	; (bb44 <CC_PalTerminate+0x24>)
    bb24:	f000 f824 	bl	bb70 <CC_PalMutexDestroy>
    bb28:	4807      	ldr	r0, [pc, #28]	; (bb48 <CC_PalTerminate+0x28>)
    bb2a:	f000 f821 	bl	bb70 <CC_PalMutexDestroy>
    bb2e:	4807      	ldr	r0, [pc, #28]	; (bb4c <CC_PalTerminate+0x2c>)
    bb30:	f000 f81e 	bl	bb70 <CC_PalMutexDestroy>
    bb34:	4806      	ldr	r0, [pc, #24]	; (bb50 <CC_PalTerminate+0x30>)
    bb36:	f000 f81b 	bl	bb70 <CC_PalMutexDestroy>
    bb3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bb3e:	f000 b80b 	b.w	bb58 <CC_PalDmaTerminate>
    bb42:	bf00      	nop
    bb44:	20000370 	.word	0x20000370
    bb48:	20000364 	.word	0x20000364
    bb4c:	2000036c 	.word	0x2000036c
    bb50:	20000368 	.word	0x20000368

0000bb54 <CC_PalDmaInit>:
    bb54:	2000      	movs	r0, #0
    bb56:	4770      	bx	lr

0000bb58 <CC_PalDmaTerminate>:
    bb58:	4770      	bx	lr
    bb5a:	bf00      	nop

0000bb5c <CC_PalMutexCreate>:
    bb5c:	b508      	push	{r3, lr}
    bb5e:	4b03      	ldr	r3, [pc, #12]	; (bb6c <CC_PalMutexCreate+0x10>)
    bb60:	6802      	ldr	r2, [r0, #0]
    bb62:	681b      	ldr	r3, [r3, #0]
    bb64:	6810      	ldr	r0, [r2, #0]
    bb66:	4798      	blx	r3
    bb68:	2000      	movs	r0, #0
    bb6a:	bd08      	pop	{r3, pc}
    bb6c:	20000328 	.word	0x20000328

0000bb70 <CC_PalMutexDestroy>:
    bb70:	b508      	push	{r3, lr}
    bb72:	4b03      	ldr	r3, [pc, #12]	; (bb80 <CC_PalMutexDestroy+0x10>)
    bb74:	6802      	ldr	r2, [r0, #0]
    bb76:	685b      	ldr	r3, [r3, #4]
    bb78:	6810      	ldr	r0, [r2, #0]
    bb7a:	4798      	blx	r3
    bb7c:	2000      	movs	r0, #0
    bb7e:	bd08      	pop	{r3, pc}
    bb80:	20000328 	.word	0x20000328

0000bb84 <CC_PalPowerSaveModeInit>:
    bb84:	b570      	push	{r4, r5, r6, lr}
    bb86:	4c09      	ldr	r4, [pc, #36]	; (bbac <CC_PalPowerSaveModeInit+0x28>)
    bb88:	4d09      	ldr	r5, [pc, #36]	; (bbb0 <CC_PalPowerSaveModeInit+0x2c>)
    bb8a:	6920      	ldr	r0, [r4, #16]
    bb8c:	68ab      	ldr	r3, [r5, #8]
    bb8e:	4798      	blx	r3
    bb90:	b118      	cbz	r0, bb9a <CC_PalPowerSaveModeInit+0x16>
    bb92:	4b08      	ldr	r3, [pc, #32]	; (bbb4 <CC_PalPowerSaveModeInit+0x30>)
    bb94:	4808      	ldr	r0, [pc, #32]	; (bbb8 <CC_PalPowerSaveModeInit+0x34>)
    bb96:	685b      	ldr	r3, [r3, #4]
    bb98:	4798      	blx	r3
    bb9a:	2100      	movs	r1, #0
    bb9c:	4a07      	ldr	r2, [pc, #28]	; (bbbc <CC_PalPowerSaveModeInit+0x38>)
    bb9e:	68eb      	ldr	r3, [r5, #12]
    bba0:	6011      	str	r1, [r2, #0]
    bba2:	6920      	ldr	r0, [r4, #16]
    bba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bba8:	4718      	bx	r3
    bbaa:	bf00      	nop
    bbac:	20000338 	.word	0x20000338
    bbb0:	20000328 	.word	0x20000328
    bbb4:	20000318 	.word	0x20000318
    bbb8:	00010c74 	.word	0x00010c74
    bbbc:	2000294c 	.word	0x2000294c

0000bbc0 <gpio_pin_get>:
 * @retval 0 If pin logical value is 0 / inactive.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_get(const struct device *port, gpio_pin_t pin)
{
    bbc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bbc2:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    bbc4:	68c5      	ldr	r5, [r0, #12]
	return api->port_get_raw(port, value);
    bbc6:	6883      	ldr	r3, [r0, #8]
    bbc8:	a901      	add	r1, sp, #4
    bbca:	685b      	ldr	r3, [r3, #4]
    bbcc:	4798      	blx	r3
	if (ret == 0) {
    bbce:	b948      	cbnz	r0, bbe4 <gpio_pin_get+0x24>
		*value ^= data->invert;
    bbd0:	9b01      	ldr	r3, [sp, #4]
    bbd2:	682a      	ldr	r2, [r5, #0]
    bbd4:	405a      	eors	r2, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    bbd6:	2301      	movs	r3, #1
    bbd8:	fa03 f104 	lsl.w	r1, r3, r4
    bbdc:	420a      	tst	r2, r1
    bbde:	bf14      	ite	ne
    bbe0:	4618      	movne	r0, r3
    bbe2:	2000      	moveq	r0, #0
	}

	return ret;
}
    bbe4:	b003      	add	sp, #12
    bbe6:	bd30      	pop	{r4, r5, pc}

0000bbe8 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
    bbe8:	b538      	push	{r3, r4, r5, lr}
    bbea:	460c      	mov	r4, r1
	struct gpio_driver_data *data =
    bbec:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
    bbee:	6883      	ldr	r3, [r0, #8]
    bbf0:	f44f 7280 	mov.w	r2, #256	; 0x100
    bbf4:	681b      	ldr	r3, [r3, #0]
    bbf6:	4798      	blx	r3
	if (ret != 0) {
    bbf8:	b930      	cbnz	r0, bc08 <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    bbfa:	2301      	movs	r3, #1
    bbfc:	fa03 f104 	lsl.w	r1, r3, r4
    bc00:	682b      	ldr	r3, [r5, #0]
    bc02:	ea23 0301 	bic.w	r3, r3, r1
    bc06:	602b      	str	r3, [r5, #0]
}
    bc08:	bd38      	pop	{r3, r4, r5, pc}

0000bc0a <sensor_init>:
{
    bc0a:	b508      	push	{r3, lr}
	beginTriWire();
    bc0c:	f7f4 fc20 	bl	450 <beginTriWire>
}
    bc10:	2000      	movs	r0, #0
    bc12:	bd08      	pop	{r3, pc}

0000bc14 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    bc14:	4603      	mov	r3, r0
    bc16:	b140      	cbz	r0, bc2a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    bc18:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    bc1a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    bc1e:	2a02      	cmp	r2, #2
    bc20:	d006      	beq.n	bc30 <sys_notify_validate+0x1c>
    bc22:	2a03      	cmp	r2, #3
    bc24:	d004      	beq.n	bc30 <sys_notify_validate+0x1c>
    bc26:	2a01      	cmp	r2, #1
    bc28:	d005      	beq.n	bc36 <sys_notify_validate+0x22>
		return -EINVAL;
    bc2a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    bc2e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    bc30:	681a      	ldr	r2, [r3, #0]
    bc32:	2a00      	cmp	r2, #0
    bc34:	d0f9      	beq.n	bc2a <sys_notify_validate+0x16>
		notify->result = 0;
    bc36:	2000      	movs	r0, #0
    bc38:	6098      	str	r0, [r3, #8]
    bc3a:	4770      	bx	lr

0000bc3c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    bc3c:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    bc3e:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
    bc40:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    bc44:	2a02      	cmp	r2, #2
{
    bc46:	4603      	mov	r3, r0
	notify->result = res;
    bc48:	6081      	str	r1, [r0, #8]
	switch (method) {
    bc4a:	d00a      	beq.n	bc62 <sys_notify_finalize+0x26>
    bc4c:	2a03      	cmp	r2, #3
    bc4e:	d10b      	bne.n	bc68 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    bc50:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    bc52:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    bc54:	2200      	movs	r2, #0
    bc56:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    bc58:	b108      	cbz	r0, bc5e <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
    bc5a:	f7ff fe1b 	bl	b894 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    bc5e:	4620      	mov	r0, r4
    bc60:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
    bc62:	2400      	movs	r4, #0
		sig = notify->method.signal;
    bc64:	6800      	ldr	r0, [r0, #0]
		break;
    bc66:	e7f5      	b.n	bc54 <sys_notify_finalize+0x18>
	switch (method) {
    bc68:	2400      	movs	r4, #0
    bc6a:	4620      	mov	r0, r4
    bc6c:	e7f2      	b.n	bc54 <sys_notify_finalize+0x18>

0000bc6e <arch_printk_char_out>:
}
    bc6e:	2000      	movs	r0, #0
    bc70:	4770      	bx	lr

0000bc72 <str_out>:
{
    bc72:	b530      	push	{r4, r5, lr}
    bc74:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    bc76:	680c      	ldr	r4, [r1, #0]
    bc78:	1c55      	adds	r5, r2, #1
    bc7a:	b114      	cbz	r4, bc82 <str_out+0x10>
    bc7c:	684b      	ldr	r3, [r1, #4]
    bc7e:	4293      	cmp	r3, r2
    bc80:	dc01      	bgt.n	bc86 <str_out+0x14>
		ctx->count++;
    bc82:	608d      	str	r5, [r1, #8]
}
    bc84:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    bc86:	3b01      	subs	r3, #1
    bc88:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    bc8a:	bf08      	it	eq
    bc8c:	2200      	moveq	r2, #0
    bc8e:	608d      	str	r5, [r1, #8]
    bc90:	bf0c      	ite	eq
    bc92:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    bc94:	54a0      	strbne	r0, [r4, r2]
    bc96:	e7f5      	b.n	bc84 <str_out+0x12>

0000bc98 <printk>:
{
    bc98:	b40f      	push	{r0, r1, r2, r3}
    bc9a:	b507      	push	{r0, r1, r2, lr}
    bc9c:	a904      	add	r1, sp, #16
    bc9e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    bca2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    bca4:	f7f4 fd34 	bl	710 <vprintk>
}
    bca8:	b003      	add	sp, #12
    bcaa:	f85d eb04 	ldr.w	lr, [sp], #4
    bcae:	b004      	add	sp, #16
    bcb0:	4770      	bx	lr

0000bcb2 <snprintk>:
{
    bcb2:	b40c      	push	{r2, r3}
    bcb4:	b507      	push	{r0, r1, r2, lr}
    bcb6:	ab04      	add	r3, sp, #16
    bcb8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    bcbc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    bcbe:	f7f4 fd35 	bl	72c <vsnprintk>
}
    bcc2:	b003      	add	sp, #12
    bcc4:	f85d eb04 	ldr.w	lr, [sp], #4
    bcc8:	b002      	add	sp, #8
    bcca:	4770      	bx	lr

0000bccc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bccc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    bcce:	f013 0307 	ands.w	r3, r3, #7
    bcd2:	d105      	bne.n	bce0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    bcd4:	6803      	ldr	r3, [r0, #0]
    bcd6:	2b00      	cmp	r3, #0
		evt = EVT_START;
    bcd8:	bf0c      	ite	eq
    bcda:	2000      	moveq	r0, #0
    bcdc:	2003      	movne	r0, #3
    bcde:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    bce0:	2b02      	cmp	r3, #2
    bce2:	d105      	bne.n	bcf0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    bce4:	8b43      	ldrh	r3, [r0, #26]
    bce6:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    bce8:	bf14      	ite	ne
    bcea:	2000      	movne	r0, #0
    bcec:	2004      	moveq	r0, #4
    bcee:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    bcf0:	2b01      	cmp	r3, #1
    bcf2:	d105      	bne.n	bd00 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    bcf4:	6803      	ldr	r3, [r0, #0]
    bcf6:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    bcf8:	bf0c      	ite	eq
    bcfa:	2000      	moveq	r0, #0
    bcfc:	2005      	movne	r0, #5
    bcfe:	4770      	bx	lr
	int evt = EVT_NOP;
    bd00:	2000      	movs	r0, #0
}
    bd02:	4770      	bx	lr

0000bd04 <notify_one>:
{
    bd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd08:	460d      	mov	r5, r1
    bd0a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    bd0c:	4619      	mov	r1, r3
    bd0e:	1d28      	adds	r0, r5, #4
{
    bd10:	4690      	mov	r8, r2
    bd12:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    bd14:	f7ff ff92 	bl	bc3c <sys_notify_finalize>
	if (cb) {
    bd18:	4604      	mov	r4, r0
    bd1a:	b138      	cbz	r0, bd2c <notify_one+0x28>
		cb(mgr, cli, state, res);
    bd1c:	4633      	mov	r3, r6
    bd1e:	4642      	mov	r2, r8
    bd20:	4629      	mov	r1, r5
    bd22:	4638      	mov	r0, r7
    bd24:	46a4      	mov	ip, r4
}
    bd26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    bd2a:	4760      	bx	ip
}
    bd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bd30 <transition_complete>:
{
    bd30:	b410      	push	{r4}
	__asm__ volatile(
    bd32:	f04f 0420 	mov.w	r4, #32
    bd36:	f3ef 8211 	mrs	r2, BASEPRI
    bd3a:	f384 8811 	msr	BASEPRI, r4
    bd3e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    bd42:	6141      	str	r1, [r0, #20]
}
    bd44:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    bd46:	2101      	movs	r1, #1
    bd48:	f7f4 bd04 	b.w	754 <process_event>

0000bd4c <validate_args>:
{
    bd4c:	b510      	push	{r4, lr}
    bd4e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    bd50:	b140      	cbz	r0, bd64 <validate_args+0x18>
    bd52:	b139      	cbz	r1, bd64 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    bd54:	1d08      	adds	r0, r1, #4
    bd56:	f7ff ff5d 	bl	bc14 <sys_notify_validate>
	if ((rv == 0)
    bd5a:	b928      	cbnz	r0, bd68 <validate_args+0x1c>
	    && ((cli->notify.flags
    bd5c:	68a3      	ldr	r3, [r4, #8]
    bd5e:	f033 0303 	bics.w	r3, r3, #3
    bd62:	d001      	beq.n	bd68 <validate_args+0x1c>
		rv = -EINVAL;
    bd64:	f06f 0015 	mvn.w	r0, #21
}
    bd68:	bd10      	pop	{r4, pc}

0000bd6a <onoff_manager_init>:
{
    bd6a:	b538      	push	{r3, r4, r5, lr}
    bd6c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    bd6e:	4605      	mov	r5, r0
    bd70:	b158      	cbz	r0, bd8a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    bd72:	b151      	cbz	r1, bd8a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    bd74:	680b      	ldr	r3, [r1, #0]
    bd76:	b143      	cbz	r3, bd8a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    bd78:	684b      	ldr	r3, [r1, #4]
    bd7a:	b133      	cbz	r3, bd8a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    bd7c:	221c      	movs	r2, #28
    bd7e:	2100      	movs	r1, #0
    bd80:	f001 fc06 	bl	d590 <memset>
	return 0;
    bd84:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    bd86:	612c      	str	r4, [r5, #16]
}
    bd88:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bd8a:	f06f 0015 	mvn.w	r0, #21
    bd8e:	e7fb      	b.n	bd88 <onoff_manager_init+0x1e>

0000bd90 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    bd90:	b570      	push	{r4, r5, r6, lr}
    bd92:	4604      	mov	r4, r0
    bd94:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    bd96:	f7ff ffd9 	bl	bd4c <validate_args>

	if (rv < 0) {
    bd9a:	1e05      	subs	r5, r0, #0
    bd9c:	db31      	blt.n	be02 <onoff_request+0x72>
    bd9e:	f04f 0320 	mov.w	r3, #32
    bda2:	f3ef 8111 	mrs	r1, BASEPRI
    bda6:	f383 8811 	msr	BASEPRI, r3
    bdaa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    bdae:	f64f 75ff 	movw	r5, #65535	; 0xffff
    bdb2:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bdb4:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    bdb6:	42ab      	cmp	r3, r5
    bdb8:	f000 0207 	and.w	r2, r0, #7
    bdbc:	d02e      	beq.n	be1c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    bdbe:	2a02      	cmp	r2, #2
    bdc0:	d10e      	bne.n	bde0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    bdc2:	3301      	adds	r3, #1
    bdc4:	8363      	strh	r3, [r4, #26]
	rv = state;
    bdc6:	4615      	mov	r5, r2
		notify = true;
    bdc8:	2301      	movs	r3, #1
	__asm__ volatile(
    bdca:	f381 8811 	msr	BASEPRI, r1
    bdce:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    bdd2:	b1b3      	cbz	r3, be02 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    bdd4:	2300      	movs	r3, #0
    bdd6:	4631      	mov	r1, r6
    bdd8:	4620      	mov	r0, r4
    bdda:	f7ff ff93 	bl	bd04 <notify_one>
    bdde:	e010      	b.n	be02 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    bde0:	0783      	lsls	r3, r0, #30
    bde2:	d001      	beq.n	bde8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    bde4:	2a06      	cmp	r2, #6
    bde6:	d10e      	bne.n	be06 <onoff_request+0x76>
	parent->next = child;
    bde8:	2300      	movs	r3, #0
    bdea:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    bdec:	6863      	ldr	r3, [r4, #4]
    bdee:	b993      	cbnz	r3, be16 <onoff_request+0x86>
	list->head = node;
    bdf0:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    bdf4:	4615      	mov	r5, r2
    bdf6:	b962      	cbnz	r2, be12 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    bdf8:	460a      	mov	r2, r1
    bdfa:	4620      	mov	r0, r4
    bdfc:	2102      	movs	r1, #2
    bdfe:	f7f4 fca9 	bl	754 <process_event>
		}
	}

	return rv;
}
    be02:	4628      	mov	r0, r5
    be04:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    be06:	2a05      	cmp	r2, #5
    be08:	bf0c      	ite	eq
    be0a:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    be0e:	f06f 0504 	mvnne.w	r5, #4
    be12:	2300      	movs	r3, #0
    be14:	e7d9      	b.n	bdca <onoff_request+0x3a>
	parent->next = child;
    be16:	601e      	str	r6, [r3, #0]
	list->tail = node;
    be18:	6066      	str	r6, [r4, #4]
}
    be1a:	e7eb      	b.n	bdf4 <onoff_request+0x64>
		rv = -EAGAIN;
    be1c:	f06f 050a 	mvn.w	r5, #10
    be20:	e7f7      	b.n	be12 <onoff_request+0x82>

0000be22 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    be22:	4604      	mov	r4, r0
    be24:	b508      	push	{r3, lr}
    be26:	4608      	mov	r0, r1
    be28:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    be2a:	461a      	mov	r2, r3
    be2c:	47a0      	blx	r4
	return z_impl_k_current_get();
    be2e:	f7ff f929 	bl	b084 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    be32:	f7f7 fbf7 	bl	3624 <z_impl_k_thread_abort>

0000be36 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    be36:	b510      	push	{r4, lr}
    be38:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
    be3a:	f04f 33ff 	mov.w	r3, #4294967295
    be3e:	f04f 32ff 	mov.w	r2, #4294967295
    be42:	4620      	mov	r0, r4
    be44:	f7fe fd52 	bl	a8ec <z_impl_k_queue_get>
    be48:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
    be4a:	2800      	cmp	r0, #0
    be4c:	d0f5      	beq.n	be3a <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
    be4e:	6842      	ldr	r2, [r0, #4]
    be50:	3308      	adds	r3, #8
    be52:	e8d3 1fef 	ldaex	r1, [r3]
    be56:	f021 0c01 	bic.w	ip, r1, #1
    be5a:	e8c3 cfee 	stlex	lr, ip, [r3]
    be5e:	f1be 0f00 	cmp.w	lr, #0
    be62:	d1f6      	bne.n	be52 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    be64:	07cb      	lsls	r3, r1, #31
    be66:	d500      	bpl.n	be6a <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    be68:	4790      	blx	r2
	z_impl_k_yield();
    be6a:	f7ff f89b 	bl	afa4 <z_impl_k_yield>
    be6e:	e7e4      	b.n	be3a <z_work_q_main+0x4>

0000be70 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    be70:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    be72:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    be76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    be7a:	bf2c      	ite	cs
    be7c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    be80:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    be84:	4770      	bx	lr

0000be86 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    be86:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    be8a:	6880      	ldr	r0, [r0, #8]
    be8c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    be90:	bf2c      	ite	cs
    be92:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    be96:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    be9a:	4770      	bx	lr

0000be9c <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    be9c:	2201      	movs	r2, #1
{
    be9e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    bea0:	f7ff ffe6 	bl	be70 <chunk_field>
}
    bea4:	0840      	lsrs	r0, r0, #1
    bea6:	bd08      	pop	{r3, pc}

0000bea8 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    bea8:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    beaa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    beae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    beb2:	d308      	bcc.n	bec6 <set_chunk_used+0x1e>
		if (used) {
    beb4:	684b      	ldr	r3, [r1, #4]
    beb6:	b11a      	cbz	r2, bec0 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    beb8:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    bebc:	604b      	str	r3, [r1, #4]
    bebe:	4770      	bx	lr
    bec0:	f023 0301 	bic.w	r3, r3, #1
    bec4:	e7fa      	b.n	bebc <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    bec6:	884b      	ldrh	r3, [r1, #2]
    bec8:	b11a      	cbz	r2, bed2 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    beca:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    bece:	804b      	strh	r3, [r1, #2]
		}
	}
}
    bed0:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    bed2:	f023 0301 	bic.w	r3, r3, #1
    bed6:	e7fa      	b.n	bece <set_chunk_used+0x26>

0000bed8 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bed8:	0053      	lsls	r3, r2, #1
    beda:	2201      	movs	r2, #1
    bedc:	f7ff bfd3 	b.w	be86 <chunk_set>

0000bee0 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    bee0:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    bee2:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bee4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    bee8:	bf2c      	ite	cs
    beea:	2002      	movcs	r0, #2
    beec:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    beee:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    bef0:	fab0 f080 	clz	r0, r0
}
    bef4:	f1c0 001f 	rsb	r0, r0, #31
    bef8:	4770      	bx	lr

0000befa <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    befa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    befe:	4616      	mov	r6, r2
    bf00:	4604      	mov	r4, r0
    bf02:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    bf04:	f7ff ffca 	bl	be9c <chunk_size>
    bf08:	4631      	mov	r1, r6
    bf0a:	4605      	mov	r5, r0
    bf0c:	4620      	mov	r0, r4
    bf0e:	f7ff ffc5 	bl	be9c <chunk_size>
    bf12:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
    bf14:	462a      	mov	r2, r5
    bf16:	4639      	mov	r1, r7
    bf18:	4620      	mov	r0, r4
    bf1a:	f7ff ffdd 	bl	bed8 <set_chunk_size>
	return c + chunk_size(h, c);
    bf1e:	4631      	mov	r1, r6
    bf20:	4620      	mov	r0, r4
    bf22:	f7ff ffbb 	bl	be9c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    bf26:	462b      	mov	r3, r5
    bf28:	1831      	adds	r1, r6, r0
    bf2a:	2200      	movs	r2, #0
    bf2c:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
    bf2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf32:	f7ff bfa8 	b.w	be86 <chunk_set>

0000bf36 <split_chunks>:
{
    bf36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf3a:	4614      	mov	r4, r2
    bf3c:	460e      	mov	r6, r1
    bf3e:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
    bf40:	f7ff ffac 	bl	be9c <chunk_size>
	size_t lsz = rc - lc;
    bf44:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
    bf48:	1b37      	subs	r7, r6, r4
    bf4a:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
    bf4c:	4642      	mov	r2, r8
    bf4e:	4631      	mov	r1, r6
    bf50:	4628      	mov	r0, r5
    bf52:	f7ff ffc1 	bl	bed8 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
    bf56:	463a      	mov	r2, r7
    bf58:	4621      	mov	r1, r4
    bf5a:	4628      	mov	r0, r5
    bf5c:	f7ff ffbc 	bl	bed8 <set_chunk_size>
    bf60:	4643      	mov	r3, r8
    bf62:	2200      	movs	r2, #0
    bf64:	4621      	mov	r1, r4
    bf66:	4628      	mov	r0, r5
    bf68:	f7ff ff8d 	bl	be86 <chunk_set>
	return c + chunk_size(h, c);
    bf6c:	4621      	mov	r1, r4
    bf6e:	4628      	mov	r0, r5
    bf70:	f7ff ff94 	bl	be9c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    bf74:	463b      	mov	r3, r7
    bf76:	1821      	adds	r1, r4, r0
    bf78:	2200      	movs	r2, #0
    bf7a:	4628      	mov	r0, r5
}
    bf7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf80:	f7ff bf81 	b.w	be86 <chunk_set>

0000bf84 <free_list_remove_bidx>:
{
    bf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf88:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
    bf8a:	2203      	movs	r2, #3
    bf8c:	460e      	mov	r6, r1
    bf8e:	4604      	mov	r4, r0
    bf90:	f7ff ff6e 	bl	be70 <chunk_field>
	if (next_free_chunk(h, c) == c) {
    bf94:	4286      	cmp	r6, r0
    bf96:	4605      	mov	r5, r0
    bf98:	f107 0804 	add.w	r8, r7, #4
    bf9c:	d10b      	bne.n	bfb6 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
    bf9e:	2301      	movs	r3, #1
    bfa0:	fa03 f707 	lsl.w	r7, r3, r7
    bfa4:	68e3      	ldr	r3, [r4, #12]
    bfa6:	ea23 0307 	bic.w	r3, r3, r7
    bfaa:	60e3      	str	r3, [r4, #12]
		b->next = 0;
    bfac:	2300      	movs	r3, #0
    bfae:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
    bfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
    bfb6:	4631      	mov	r1, r6
    bfb8:	2202      	movs	r2, #2
    bfba:	4620      	mov	r0, r4
    bfbc:	f7ff ff58 	bl	be70 <chunk_field>
    bfc0:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
    bfc2:	462b      	mov	r3, r5
    bfc4:	4601      	mov	r1, r0
    bfc6:	2203      	movs	r2, #3
    bfc8:	4620      	mov	r0, r4
		b->next = second;
    bfca:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
    bfce:	f7ff ff5a 	bl	be86 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    bfd2:	4633      	mov	r3, r6
    bfd4:	4629      	mov	r1, r5
    bfd6:	4620      	mov	r0, r4
}
    bfd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bfdc:	2202      	movs	r2, #2
    bfde:	f7ff bf52 	b.w	be86 <chunk_set>

0000bfe2 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
    bfe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bfe6:	4604      	mov	r4, r0
    bfe8:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
    bfea:	f7ff ff79 	bl	bee0 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
    bfee:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
    bff0:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
    bff2:	4620      	mov	r0, r4
    bff4:	f7ff ff74 	bl	bee0 <bucket_idx>
    bff8:	42a8      	cmp	r0, r5
    bffa:	da03      	bge.n	c004 <alloc_chunk+0x22>
		return 0;
    bffc:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    bffe:	4630      	mov	r0, r6
    c000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
    c004:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
    c008:	f8da 9010 	ldr.w	r9, [sl, #16]
    c00c:	f1b9 0f00 	cmp.w	r9, #0
    c010:	d019      	beq.n	c046 <alloc_chunk+0x64>
    c012:	2703      	movs	r7, #3
			chunkid_t c = b->next;
    c014:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
    c018:	4620      	mov	r0, r4
    c01a:	4631      	mov	r1, r6
    c01c:	f7ff ff3e 	bl	be9c <chunk_size>
    c020:	4540      	cmp	r0, r8
    c022:	d305      	bcc.n	c030 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
    c024:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
    c026:	4631      	mov	r1, r6
    c028:	4620      	mov	r0, r4
    c02a:	f7ff ffab 	bl	bf84 <free_list_remove_bidx>
		return c;
    c02e:	e7e6      	b.n	bffe <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
    c030:	2203      	movs	r2, #3
    c032:	4631      	mov	r1, r6
    c034:	4620      	mov	r0, r4
    c036:	f7ff ff1b 	bl	be70 <chunk_field>
		} while (--i && b->next != first);
    c03a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
    c03c:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
    c040:	d001      	beq.n	c046 <alloc_chunk+0x64>
    c042:	4581      	cmp	r9, r0
    c044:	d1e6      	bne.n	c014 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
    c046:	f04f 32ff 	mov.w	r2, #4294967295
    c04a:	68e3      	ldr	r3, [r4, #12]
    c04c:	3501      	adds	r5, #1
    c04e:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
    c050:	401a      	ands	r2, r3
    c052:	d0d3      	beq.n	bffc <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
    c054:	fa92 f2a2 	rbit	r2, r2
    c058:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    c05c:	1d13      	adds	r3, r2, #4
    c05e:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    c062:	e7e0      	b.n	c026 <alloc_chunk+0x44>

0000c064 <free_list_add>:
{
    c064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c068:	4604      	mov	r4, r0
    c06a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    c06c:	f7ff ff16 	bl	be9c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    c070:	68a3      	ldr	r3, [r4, #8]
    c072:	4601      	mov	r1, r0
    c074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c078:	d301      	bcc.n	c07e <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    c07a:	2801      	cmp	r0, #1
    c07c:	d035      	beq.n	c0ea <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    c07e:	4620      	mov	r0, r4
    c080:	f7ff ff2e 	bl	bee0 <bucket_idx>
	if (b->next == 0U) {
    c084:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    c088:	6916      	ldr	r6, [r2, #16]
    c08a:	b99e      	cbnz	r6, c0b4 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    c08c:	2301      	movs	r3, #1
    c08e:	fa03 f000 	lsl.w	r0, r3, r0
    c092:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    c094:	4629      	mov	r1, r5
    c096:	4303      	orrs	r3, r0
    c098:	60e3      	str	r3, [r4, #12]
    c09a:	4620      	mov	r0, r4
		b->next = c;
    c09c:	6115      	str	r5, [r2, #16]
    c09e:	462b      	mov	r3, r5
    c0a0:	2202      	movs	r2, #2
    c0a2:	f7ff fef0 	bl	be86 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    c0a6:	2203      	movs	r2, #3
    c0a8:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    c0aa:	4620      	mov	r0, r4
}
    c0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c0b0:	f7ff bee9 	b.w	be86 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    c0b4:	2202      	movs	r2, #2
    c0b6:	4631      	mov	r1, r6
    c0b8:	4620      	mov	r0, r4
    c0ba:	f7ff fed9 	bl	be70 <chunk_field>
    c0be:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    c0c0:	4603      	mov	r3, r0
    c0c2:	2202      	movs	r2, #2
    c0c4:	4629      	mov	r1, r5
    c0c6:	4620      	mov	r0, r4
    c0c8:	f7ff fedd 	bl	be86 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    c0cc:	4633      	mov	r3, r6
    c0ce:	2203      	movs	r2, #3
    c0d0:	4629      	mov	r1, r5
    c0d2:	4620      	mov	r0, r4
    c0d4:	f7ff fed7 	bl	be86 <chunk_set>
    c0d8:	2203      	movs	r2, #3
    c0da:	4639      	mov	r1, r7
    c0dc:	462b      	mov	r3, r5
    c0de:	4620      	mov	r0, r4
    c0e0:	f7ff fed1 	bl	be86 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    c0e4:	2202      	movs	r2, #2
    c0e6:	4631      	mov	r1, r6
    c0e8:	e7df      	b.n	c0aa <free_list_add+0x46>
    c0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c0ee <free_list_remove>:
{
    c0ee:	b538      	push	{r3, r4, r5, lr}
    c0f0:	4604      	mov	r4, r0
    c0f2:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    c0f4:	f7ff fed2 	bl	be9c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    c0f8:	68a3      	ldr	r3, [r4, #8]
    c0fa:	4601      	mov	r1, r0
    c0fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c100:	d301      	bcc.n	c106 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
    c102:	2801      	cmp	r0, #1
    c104:	d009      	beq.n	c11a <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    c106:	4620      	mov	r0, r4
    c108:	f7ff feea 	bl	bee0 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
    c10c:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
    c10e:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
    c110:	4620      	mov	r0, r4
}
    c112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
    c116:	f7ff bf35 	b.w	bf84 <free_list_remove_bidx>
}
    c11a:	bd38      	pop	{r3, r4, r5, pc}

0000c11c <free_chunk>:
{
    c11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c11e:	460c      	mov	r4, r1
    c120:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    c122:	f7ff febb 	bl	be9c <chunk_size>
    c126:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c128:	2201      	movs	r2, #1
    c12a:	4631      	mov	r1, r6
    c12c:	4628      	mov	r0, r5
    c12e:	f7ff fe9f 	bl	be70 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
    c132:	07c3      	lsls	r3, r0, #31
    c134:	d40c      	bmi.n	c150 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
    c136:	4631      	mov	r1, r6
    c138:	4628      	mov	r0, r5
    c13a:	f7ff ffd8 	bl	c0ee <free_list_remove>
	return c + chunk_size(h, c);
    c13e:	4621      	mov	r1, r4
    c140:	4628      	mov	r0, r5
    c142:	f7ff feab 	bl	be9c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    c146:	4621      	mov	r1, r4
    c148:	1822      	adds	r2, r4, r0
    c14a:	4628      	mov	r0, r5
    c14c:	f7ff fed5 	bl	befa <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
    c150:	2200      	movs	r2, #0
    c152:	4621      	mov	r1, r4
    c154:	4628      	mov	r0, r5
    c156:	f7ff fe8b 	bl	be70 <chunk_field>
    c15a:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c15c:	2201      	movs	r2, #1
    c15e:	4639      	mov	r1, r7
    c160:	4628      	mov	r0, r5
    c162:	f7ff fe85 	bl	be70 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
    c166:	f010 0601 	ands.w	r6, r0, #1
    c16a:	d113      	bne.n	c194 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
    c16c:	4639      	mov	r1, r7
    c16e:	4628      	mov	r0, r5
    c170:	f7ff ffbd 	bl	c0ee <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
    c174:	4621      	mov	r1, r4
    c176:	4632      	mov	r2, r6
    c178:	4628      	mov	r0, r5
    c17a:	f7ff fe79 	bl	be70 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
    c17e:	4622      	mov	r2, r4
    c180:	1a21      	subs	r1, r4, r0
    c182:	4628      	mov	r0, r5
    c184:	f7ff feb9 	bl	befa <merge_chunks>
    c188:	4621      	mov	r1, r4
    c18a:	4632      	mov	r2, r6
    c18c:	4628      	mov	r0, r5
    c18e:	f7ff fe6f 	bl	be70 <chunk_field>
    c192:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
    c194:	4621      	mov	r1, r4
    c196:	4628      	mov	r0, r5
}
    c198:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
    c19c:	f7ff bf62 	b.w	c064 <free_list_add>

0000c1a0 <sys_heap_free>:
{
    c1a0:	b510      	push	{r4, lr}
	if (mem == NULL) {
    c1a2:	b191      	cbz	r1, c1ca <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
    c1a4:	6800      	ldr	r0, [r0, #0]
	set_chunk_used(h, c, false);
    c1a6:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
    c1a8:	6883      	ldr	r3, [r0, #8]
    c1aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c1ae:	bf2c      	ite	cs
    c1b0:	2408      	movcs	r4, #8
    c1b2:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c1b4:	1b0c      	subs	r4, r1, r4
    c1b6:	1a24      	subs	r4, r4, r0
    c1b8:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
    c1ba:	4621      	mov	r1, r4
    c1bc:	f7ff fe74 	bl	bea8 <set_chunk_used>
	free_chunk(h, c);
    c1c0:	4621      	mov	r1, r4
}
    c1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
    c1c6:	f7ff bfa9 	b.w	c11c <free_chunk>
}
    c1ca:	bd10      	pop	{r4, pc}

0000c1cc <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    c1cc:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    c1ce:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
    c1d0:	b909      	cbnz	r1, c1d6 <sys_heap_alloc+0xa>
		return NULL;
    c1d2:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
    c1d4:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    c1d6:	68ab      	ldr	r3, [r5, #8]
    c1d8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    c1dc:	d9f9      	bls.n	c1d2 <sys_heap_alloc+0x6>
    c1de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c1e2:	bf2c      	ite	cs
    c1e4:	2208      	movcs	r2, #8
    c1e6:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c1e8:	1dcc      	adds	r4, r1, #7
    c1ea:	4414      	add	r4, r2
    c1ec:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    c1ee:	4621      	mov	r1, r4
    c1f0:	4628      	mov	r0, r5
    c1f2:	f7ff fef6 	bl	bfe2 <alloc_chunk>
	if (c == 0U) {
    c1f6:	4606      	mov	r6, r0
    c1f8:	2800      	cmp	r0, #0
    c1fa:	d0ea      	beq.n	c1d2 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    c1fc:	4601      	mov	r1, r0
    c1fe:	4628      	mov	r0, r5
    c200:	f7ff fe4c 	bl	be9c <chunk_size>
    c204:	42a0      	cmp	r0, r4
    c206:	d909      	bls.n	c21c <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
    c208:	4434      	add	r4, r6
    c20a:	4631      	mov	r1, r6
    c20c:	4628      	mov	r0, r5
    c20e:	4622      	mov	r2, r4
    c210:	f7ff fe91 	bl	bf36 <split_chunks>
		free_list_add(h, c + chunk_sz);
    c214:	4621      	mov	r1, r4
    c216:	4628      	mov	r0, r5
    c218:	f7ff ff24 	bl	c064 <free_list_add>
	set_chunk_used(h, c, true);
    c21c:	4628      	mov	r0, r5
    c21e:	2201      	movs	r2, #1
    c220:	4631      	mov	r1, r6
    c222:	f7ff fe41 	bl	bea8 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
    c226:	68ab      	ldr	r3, [r5, #8]
    c228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c22c:	bf2c      	ite	cs
    c22e:	2008      	movcs	r0, #8
    c230:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    c232:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
    c236:	4428      	add	r0, r5
	return chunk_mem(h, c);
    c238:	e7cc      	b.n	c1d4 <sys_heap_alloc+0x8>

0000c23a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    c23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap *h = heap->heap;
    c23e:	6805      	ldr	r5, [r0, #0]
{
    c240:	4614      	mov	r4, r2
    c242:	68ab      	ldr	r3, [r5, #8]
    c244:	460f      	mov	r7, r1
    c246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c24a:	bf2c      	ite	cs
    c24c:	2208      	movcs	r2, #8
    c24e:	2204      	movcc	r2, #4

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (align <= chunk_header_bytes(h)) {
    c250:	4291      	cmp	r1, r2
    c252:	d804      	bhi.n	c25e <sys_heap_aligned_alloc+0x24>
		return sys_heap_alloc(heap, bytes);
    c254:	4621      	mov	r1, r4
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    c256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sys_heap_alloc(heap, bytes);
    c25a:	f7ff bfb7 	b.w	c1cc <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    c25e:	b91c      	cbnz	r4, c268 <sys_heap_aligned_alloc+0x2e>
		return NULL;
    c260:	2600      	movs	r6, #0
}
    c262:	4630      	mov	r0, r6
    c264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    c268:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    c26c:	d9f8      	bls.n	c260 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c26e:	1de1      	adds	r1, r4, #7
    c270:	4439      	add	r1, r7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    c272:	4628      	mov	r0, r5
    c274:	08c9      	lsrs	r1, r1, #3
    c276:	f7ff feb4 	bl	bfe2 <alloc_chunk>
	if (c0 == 0) {
    c27a:	4680      	mov	r8, r0
    c27c:	2800      	cmp	r0, #0
    c27e:	d0ef      	beq.n	c260 <sys_heap_aligned_alloc+0x26>
	return big_heap(h) ? 8 : 4;
    c280:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    c282:	1e7a      	subs	r2, r7, #1
    c284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c288:	bf2c      	ite	cs
    c28a:	2308      	movcs	r3, #8
    c28c:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    c28e:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    c292:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    c294:	427f      	negs	r7, r7
    c296:	4416      	add	r6, r2
    c298:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c29a:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c29c:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c29e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c2a0:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c2a2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    c2a6:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    c2a8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c2ac:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    c2b0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    c2b4:	d208      	bcs.n	c2c8 <sys_heap_aligned_alloc+0x8e>
		split_chunks(h, c0, c);
    c2b6:	4601      	mov	r1, r0
    c2b8:	463a      	mov	r2, r7
    c2ba:	4628      	mov	r0, r5
    c2bc:	f7ff fe3b 	bl	bf36 <split_chunks>
		free_list_add(h, c0);
    c2c0:	4641      	mov	r1, r8
    c2c2:	4628      	mov	r0, r5
    c2c4:	f7ff fece 	bl	c064 <free_list_add>
	return c + chunk_size(h, c);
    c2c8:	4639      	mov	r1, r7
    c2ca:	4628      	mov	r0, r5
    c2cc:	f7ff fde6 	bl	be9c <chunk_size>
    c2d0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    c2d2:	4284      	cmp	r4, r0
    c2d4:	d208      	bcs.n	c2e8 <sys_heap_aligned_alloc+0xae>
		split_chunks(h, c, c_end);
    c2d6:	4639      	mov	r1, r7
    c2d8:	4628      	mov	r0, r5
    c2da:	4622      	mov	r2, r4
    c2dc:	f7ff fe2b 	bl	bf36 <split_chunks>
		free_list_add(h, c_end);
    c2e0:	4621      	mov	r1, r4
    c2e2:	4628      	mov	r0, r5
    c2e4:	f7ff febe 	bl	c064 <free_list_add>
	set_chunk_used(h, c, true);
    c2e8:	2201      	movs	r2, #1
    c2ea:	4639      	mov	r1, r7
    c2ec:	4628      	mov	r0, r5
    c2ee:	f7ff fddb 	bl	bea8 <set_chunk_used>
	return mem;
    c2f2:	e7b6      	b.n	c262 <sys_heap_aligned_alloc+0x28>

0000c2f4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    c2f4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    c2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2fa:	bf2c      	ite	cs
    c2fc:	2508      	movcs	r5, #8
    c2fe:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    c300:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    c302:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
    c304:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c306:	1dcc      	adds	r4, r1, #7
    c308:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
    c30c:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
    c30e:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    c312:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c314:	440d      	add	r5, r1
    c316:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    c31a:	1b2d      	subs	r5, r5, r4
    c31c:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    c31e:	4629      	mov	r1, r5
    c320:	4620      	mov	r0, r4
	h->len = buf_sz;
    c322:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    c324:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    c326:	f7ff fddb 	bl	bee0 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    c32a:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    c32c:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    c32e:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c330:	361b      	adds	r6, #27
    c332:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
    c334:	f104 0210 	add.w	r2, r4, #16
    c338:	428b      	cmp	r3, r1
    c33a:	db29      	blt.n	c390 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    c33c:	4632      	mov	r2, r6
    c33e:	4620      	mov	r0, r4
    c340:	2100      	movs	r1, #0
    c342:	f7ff fdc9 	bl	bed8 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    c346:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    c348:	4620      	mov	r0, r4
    c34a:	2201      	movs	r2, #1
    c34c:	2100      	movs	r1, #0
    c34e:	f7ff fdab 	bl	bea8 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    c352:	463a      	mov	r2, r7
    c354:	4631      	mov	r1, r6
    c356:	f7ff fdbf 	bl	bed8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    c35a:	4633      	mov	r3, r6
    c35c:	4631      	mov	r1, r6
    c35e:	4620      	mov	r0, r4
    c360:	2200      	movs	r2, #0
    c362:	f7ff fd90 	bl	be86 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    c366:	4629      	mov	r1, r5
    c368:	4620      	mov	r0, r4
    c36a:	2200      	movs	r2, #0
    c36c:	f7ff fdb4 	bl	bed8 <set_chunk_size>
    c370:	463b      	mov	r3, r7
    c372:	4629      	mov	r1, r5
    c374:	4620      	mov	r0, r4
    c376:	2200      	movs	r2, #0
    c378:	f7ff fd85 	bl	be86 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    c37c:	4629      	mov	r1, r5
    c37e:	4620      	mov	r0, r4
    c380:	2201      	movs	r2, #1
    c382:	f7ff fd91 	bl	bea8 <set_chunk_used>

	free_list_add(h, chunk0_size);
    c386:	4631      	mov	r1, r6
}
    c388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    c38c:	f7ff be6a 	b.w	c064 <free_list_add>
		h->buckets[i].next = 0;
    c390:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    c394:	3301      	adds	r3, #1
    c396:	e7cf      	b.n	c338 <sys_heap_init+0x44>

0000c398 <encode_uint>:
{
    c398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c39c:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    c39e:	78d3      	ldrb	r3, [r2, #3]
{
    c3a0:	4614      	mov	r4, r2
	switch (specifier) {
    c3a2:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c3a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    c3a8:	4606      	mov	r6, r0
    c3aa:	460f      	mov	r7, r1
    c3ac:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    c3ae:	d02d      	beq.n	c40c <encode_uint+0x74>
    c3b0:	d828      	bhi.n	c404 <encode_uint+0x6c>
		return 16;
    c3b2:	2b58      	cmp	r3, #88	; 0x58
    c3b4:	bf14      	ite	ne
    c3b6:	250a      	movne	r5, #10
    c3b8:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    c3ba:	46aa      	mov	sl, r5
    c3bc:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    c3c0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    c3c4:	4652      	mov	r2, sl
    c3c6:	465b      	mov	r3, fp
    c3c8:	4630      	mov	r0, r6
    c3ca:	4639      	mov	r1, r7
    c3cc:	f7f3 fec2 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c3d0:	2a09      	cmp	r2, #9
    c3d2:	b2d3      	uxtb	r3, r2
    c3d4:	d81f      	bhi.n	c416 <encode_uint+0x7e>
    c3d6:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    c3d8:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c3da:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    c3dc:	bf08      	it	eq
    c3de:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c3e0:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    c3e4:	d301      	bcc.n	c3ea <encode_uint+0x52>
    c3e6:	45c8      	cmp	r8, r9
    c3e8:	d812      	bhi.n	c410 <encode_uint+0x78>
	if (conv->flag_hash) {
    c3ea:	7823      	ldrb	r3, [r4, #0]
    c3ec:	069b      	lsls	r3, r3, #26
    c3ee:	d505      	bpl.n	c3fc <encode_uint+0x64>
		if (radix == 8) {
    c3f0:	2d08      	cmp	r5, #8
    c3f2:	d116      	bne.n	c422 <encode_uint+0x8a>
			conv->altform_0 = true;
    c3f4:	78a3      	ldrb	r3, [r4, #2]
    c3f6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    c3fa:	70a3      	strb	r3, [r4, #2]
}
    c3fc:	4640      	mov	r0, r8
    c3fe:	b003      	add	sp, #12
    c400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    c404:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    c408:	2b70      	cmp	r3, #112	; 0x70
    c40a:	e7d3      	b.n	c3b4 <encode_uint+0x1c>
	switch (specifier) {
    c40c:	2508      	movs	r5, #8
    c40e:	e7d4      	b.n	c3ba <encode_uint+0x22>
		value /= radix;
    c410:	4606      	mov	r6, r0
    c412:	460f      	mov	r7, r1
    c414:	e7d6      	b.n	c3c4 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c416:	9a01      	ldr	r2, [sp, #4]
    c418:	2a19      	cmp	r2, #25
    c41a:	bf94      	ite	ls
    c41c:	3337      	addls	r3, #55	; 0x37
    c41e:	3357      	addhi	r3, #87	; 0x57
    c420:	e7da      	b.n	c3d8 <encode_uint+0x40>
		} else if (radix == 16) {
    c422:	2d10      	cmp	r5, #16
    c424:	d1ea      	bne.n	c3fc <encode_uint+0x64>
			conv->altform_0c = true;
    c426:	78a3      	ldrb	r3, [r4, #2]
    c428:	f043 0310 	orr.w	r3, r3, #16
    c42c:	e7e5      	b.n	c3fa <encode_uint+0x62>

0000c42e <outs>:
{
    c42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c432:	4607      	mov	r7, r0
    c434:	4688      	mov	r8, r1
    c436:	4615      	mov	r5, r2
    c438:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c43a:	4614      	mov	r4, r2
    c43c:	42b4      	cmp	r4, r6
    c43e:	eba4 0005 	sub.w	r0, r4, r5
    c442:	d302      	bcc.n	c44a <outs+0x1c>
    c444:	b93e      	cbnz	r6, c456 <outs+0x28>
    c446:	7823      	ldrb	r3, [r4, #0]
    c448:	b12b      	cbz	r3, c456 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    c44a:	4641      	mov	r1, r8
    c44c:	f814 0b01 	ldrb.w	r0, [r4], #1
    c450:	47b8      	blx	r7
		if (rc < 0) {
    c452:	2800      	cmp	r0, #0
    c454:	daf2      	bge.n	c43c <outs+0xe>
}
    c456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c45a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    c45a:	4770      	bx	lr

0000c45c <z_platform_init>:
	SystemInit();
    c45c:	f7fd b95a 	b.w	9714 <SystemInit>

0000c460 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    c460:	2300      	movs	r3, #0
	list->head = NULL;
    c462:	e9c0 3300 	strd	r3, r3, [r0]
}
    c466:	4770      	bx	lr

0000c468 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    c468:	6803      	ldr	r3, [r0, #0]
    c46a:	b923      	cbnz	r3, c476 <log_list_add_tail+0xe>
		list->head = msg;
    c46c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    c46e:	2300      	movs	r3, #0
	list->tail = msg;
    c470:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    c472:	600b      	str	r3, [r1, #0]
}
    c474:	4770      	bx	lr
		list->tail->next = msg;
    c476:	6843      	ldr	r3, [r0, #4]
    c478:	6019      	str	r1, [r3, #0]
    c47a:	e7f8      	b.n	c46e <log_list_add_tail+0x6>

0000c47c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    c47c:	6800      	ldr	r0, [r0, #0]
    c47e:	4770      	bx	lr

0000c480 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    c480:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    c482:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    c484:	b108      	cbz	r0, c48a <log_list_head_get+0xa>
		list->head = list->head->next;
    c486:	6802      	ldr	r2, [r0, #0]
    c488:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    c48a:	4770      	bx	lr

0000c48c <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    c48c:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    c48e:	f7f5 f931 	bl	16f4 <log_msg_chunk_alloc>

	if (msg != NULL) {
    c492:	b118      	cbz	r0, c49c <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    c494:	2301      	movs	r3, #1
    c496:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    c498:	2300      	movs	r3, #0
    c49a:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
    c49c:	bd08      	pop	{r3, pc}

0000c49e <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    c49e:	f7f6 ba39 	b.w	2914 <z_timer_cycle_get_32>

0000c4a2 <dummy_timestamp>:
    c4a2:	2000      	movs	r0, #0
    c4a4:	4770      	bx	lr

0000c4a6 <z_log_get_s_mask>:
{
    c4a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4a8:	4605      	mov	r5, r0
	uint32_t mask = 0;
    c4aa:	2000      	movs	r0, #0
				mask |= BIT(arg);
    c4ac:	2701      	movs	r7, #1
	uint32_t arg = 0;
    c4ae:	4603      	mov	r3, r0
	bool arm = false;
    c4b0:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
    c4b2:	f815 4b01 	ldrb.w	r4, [r5], #1
    c4b6:	b10c      	cbz	r4, c4bc <z_log_get_s_mask+0x16>
    c4b8:	428b      	cmp	r3, r1
    c4ba:	d300      	bcc.n	c4be <z_log_get_s_mask+0x18>
}
    c4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    c4be:	2c25      	cmp	r4, #37	; 0x25
    c4c0:	d102      	bne.n	c4c8 <z_log_get_s_mask+0x22>
			arm = !arm;
    c4c2:	f082 0201 	eor.w	r2, r2, #1
    c4c6:	e7f4      	b.n	c4b2 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    c4c8:	2a00      	cmp	r2, #0
    c4ca:	d0f2      	beq.n	c4b2 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    c4cc:	f044 0620 	orr.w	r6, r4, #32
    c4d0:	3e61      	subs	r6, #97	; 0x61
    c4d2:	2e19      	cmp	r6, #25
    c4d4:	d8ed      	bhi.n	c4b2 <z_log_get_s_mask+0xc>
			if (curr == 's') {
    c4d6:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    c4d8:	bf04      	itt	eq
    c4da:	fa07 f203 	lsleq.w	r2, r7, r3
    c4de:	4310      	orreq	r0, r2
			arg++;
    c4e0:	3301      	adds	r3, #1
			arm = false;
    c4e2:	2200      	movs	r2, #0
    c4e4:	e7e5      	b.n	c4b2 <z_log_get_s_mask+0xc>

0000c4e6 <log_0>:
{
    c4e6:	b538      	push	{r3, r4, r5, lr}
    c4e8:	4605      	mov	r5, r0
    c4ea:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    c4ec:	f7ff ffce 	bl	c48c <z_log_msg_std_alloc>

	if (msg != NULL) {
    c4f0:	b128      	cbz	r0, c4fe <log_0+0x18>
		msg_finalize(msg, src_level);
    c4f2:	4621      	mov	r1, r4
		msg->str = str;
    c4f4:	6105      	str	r5, [r0, #16]
}
    c4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    c4fa:	f7f5 b81d 	b.w	1538 <msg_finalize>
}
    c4fe:	bd38      	pop	{r3, r4, r5, pc}

0000c500 <log_1>:
{
    c500:	b570      	push	{r4, r5, r6, lr}
    c502:	4606      	mov	r6, r0
    c504:	460d      	mov	r5, r1
    c506:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    c508:	f7ff ffc0 	bl	c48c <z_log_msg_std_alloc>

	if (msg != NULL) {
    c50c:	b158      	cbz	r0, c526 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    c50e:	2101      	movs	r1, #1
    c510:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    c512:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    c514:	f361 1207 	bfi	r2, r1, #4, #4
    c518:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
    c51a:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
    c51c:	6145      	str	r5, [r0, #20]
}
    c51e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    c522:	f7f5 b809 	b.w	1538 <msg_finalize>
}
    c526:	bd70      	pop	{r4, r5, r6, pc}

0000c528 <log_2>:
{
    c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c52c:	4680      	mov	r8, r0
    c52e:	460f      	mov	r7, r1
    c530:	4616      	mov	r6, r2
    c532:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    c534:	f7ff ffaa 	bl	c48c <z_log_msg_std_alloc>

	if (msg != NULL) {
    c538:	b168      	cbz	r0, c556 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    c53a:	2202      	movs	r2, #2
    c53c:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
    c53e:	4629      	mov	r1, r5
    c540:	f362 1307 	bfi	r3, r2, #4, #4
    c544:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    c546:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
    c54a:	f8c0 8010 	str.w	r8, [r0, #16]
}
    c54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    c552:	f7f4 bff1 	b.w	1538 <msg_finalize>
}
    c556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c55a <log_3>:
{
    c55a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c55e:	4680      	mov	r8, r0
    c560:	460f      	mov	r7, r1
    c562:	4616      	mov	r6, r2
    c564:	461d      	mov	r5, r3
    c566:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    c56a:	f7ff ff8f 	bl	c48c <z_log_msg_std_alloc>

	if (msg != NULL) {
    c56e:	b170      	cbz	r0, c58e <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    c570:	2203      	movs	r2, #3
    c572:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
    c574:	4649      	mov	r1, r9
    c576:	f362 1307 	bfi	r3, r2, #4, #4
    c57a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    c57c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
    c580:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
    c584:	61c5      	str	r5, [r0, #28]
}
    c586:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    c58a:	f7f4 bfd5 	b.w	1538 <msg_finalize>
}
    c58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c592 <log_n>:
{
    c592:	b510      	push	{r4, lr}
    c594:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    c596:	f000 f899 	bl	c6cc <log_msg_create_n>
		if (msg == NULL) {
    c59a:	b120      	cbz	r0, c5a6 <log_n+0x14>
		msg_finalize(msg, src_level);
    c59c:	4621      	mov	r1, r4
}
    c59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
    c5a2:	f7f4 bfc9 	b.w	1538 <msg_finalize>
}
    c5a6:	bd10      	pop	{r4, pc}

0000c5a8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    c5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c5ac:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
    c5ae:	8903      	ldrh	r3, [r0, #8]
{
    c5b0:	460e      	mov	r6, r1
    c5b2:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
    c5b4:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    c5b8:	42a2      	cmp	r2, r4
{
    c5ba:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
    c5be:	d803      	bhi.n	c5c8 <log_msg_hexdump_data_op+0x20>
		*length = 0;
    c5c0:	2300      	movs	r3, #0
    c5c2:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    c5c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    c5c8:	680b      	ldr	r3, [r1, #0]
    c5ca:	4423      	add	r3, r4
    c5cc:	4293      	cmp	r3, r2
		*length = available_len - offset;
    c5ce:	bf84      	itt	hi
    c5d0:	1b13      	subhi	r3, r2, r4
    c5d2:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    c5d4:	2a0c      	cmp	r2, #12
	req_len = *length;
    c5d6:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    c5da:	d92a      	bls.n	c632 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
    c5dc:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    c5de:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    c5e2:	d82d      	bhi.n	c640 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    c5e4:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
    c5e6:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    c5e8:	454a      	cmp	r2, r9
    c5ea:	bf28      	it	cs
    c5ec:	464a      	movcs	r2, r9
    c5ee:	4420      	add	r0, r4
    c5f0:	4615      	mov	r5, r2
		if (put_op) {
    c5f2:	b317      	cbz	r7, c63a <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
    c5f4:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    c5f6:	f000 ffa0 	bl	d53a <memcpy>
		req_len -= cpy_len;
    c5fa:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    c5fe:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
    c600:	f1b9 0f00 	cmp.w	r9, #0
    c604:	d0de      	beq.n	c5c4 <log_msg_hexdump_data_op+0x1c>
    c606:	f1b8 0f00 	cmp.w	r8, #0
    c60a:	d0db      	beq.n	c5c4 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    c60c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    c610:	454d      	cmp	r5, r9
    c612:	bf28      	it	cs
    c614:	464d      	movcs	r5, r9
		if (put_op) {
    c616:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
    c618:	462a      	mov	r2, r5
    c61a:	4440      	add	r0, r8
		if (put_op) {
    c61c:	b1bf      	cbz	r7, c64e <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
    c61e:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    c620:	f000 ff8b 	bl	d53a <memcpy>
		offset = 0;
    c624:	2400      	movs	r4, #0
		cont = cont->next;
    c626:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
    c62a:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    c62e:	442e      	add	r6, r5
    c630:	e7e6      	b.n	c600 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
    c632:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
    c636:	3014      	adds	r0, #20
	if (offset < chunk_len) {
    c638:	e7d6      	b.n	c5e8 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
    c63a:	4601      	mov	r1, r0
    c63c:	4630      	mov	r0, r6
    c63e:	e7da      	b.n	c5f6 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    c640:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    c642:	2c1b      	cmp	r4, #27
    c644:	d9dc      	bls.n	c600 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
    c646:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    c64a:	3c1c      	subs	r4, #28
    c64c:	e7f9      	b.n	c642 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
    c64e:	4601      	mov	r1, r0
    c650:	4630      	mov	r0, r6
    c652:	e7e5      	b.n	c620 <log_msg_hexdump_data_op+0x78>

0000c654 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c654:	3004      	adds	r0, #4
    c656:	e8d0 3fef 	ldaex	r3, [r0]
    c65a:	3301      	adds	r3, #1
    c65c:	e8c0 3fe2 	stlex	r2, r3, [r0]
    c660:	2a00      	cmp	r2, #0
    c662:	d1f8      	bne.n	c656 <log_msg_get+0x2>
}
    c664:	4770      	bx	lr

0000c666 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    c666:	7a40      	ldrb	r0, [r0, #9]
}
    c668:	0900      	lsrs	r0, r0, #4
    c66a:	4770      	bx	lr

0000c66c <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    c66c:	7a43      	ldrb	r3, [r0, #9]
    c66e:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    c672:	ea4f 1213 	mov.w	r2, r3, lsr #4
    c676:	d216      	bcs.n	c6a6 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    c678:	2a03      	cmp	r2, #3
    c67a:	d803      	bhi.n	c684 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    c67c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    c680:	6948      	ldr	r0, [r1, #20]
    c682:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    c684:	2901      	cmp	r1, #1
    c686:	d803      	bhi.n	c690 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    c688:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    c68c:	6988      	ldr	r0, [r1, #24]
    c68e:	4770      	bx	lr
	cont = msg->payload.ext.next;
    c690:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    c692:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    c694:	2906      	cmp	r1, #6
    c696:	d803      	bhi.n	c6a0 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    c698:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    c69c:	6848      	ldr	r0, [r1, #4]
    c69e:	4770      	bx	lr
		cont = cont->next;
    c6a0:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    c6a2:	3907      	subs	r1, #7
		cont = cont->next;
    c6a4:	e7f6      	b.n	c694 <log_msg_arg_get+0x28>
		return 0;
    c6a6:	2000      	movs	r0, #0
}
    c6a8:	4770      	bx	lr

0000c6aa <log_msg_put>:
{
    c6aa:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    c6ac:	1d02      	adds	r2, r0, #4
    c6ae:	e8d2 1fef 	ldaex	r1, [r2]
    c6b2:	3901      	subs	r1, #1
    c6b4:	e8c2 1fec 	stlex	ip, r1, [r2]
    c6b8:	f1bc 0f00 	cmp.w	ip, #0
    c6bc:	d1f7      	bne.n	c6ae <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
    c6be:	685b      	ldr	r3, [r3, #4]
    c6c0:	b90b      	cbnz	r3, c6c6 <log_msg_put+0x1c>
		msg_free(msg);
    c6c2:	f7f5 b82b 	b.w	171c <msg_free>
}
    c6c6:	4770      	bx	lr

0000c6c8 <log_msg_str_get>:
}
    c6c8:	6900      	ldr	r0, [r0, #16]
    c6ca:	4770      	bx	lr

0000c6cc <log_msg_create_n>:
{
    c6cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6d0:	4681      	mov	r9, r0
    c6d2:	4688      	mov	r8, r1
    c6d4:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    c6d6:	f7f5 f80d 	bl	16f4 <log_msg_chunk_alloc>
	if (msg != NULL) {
    c6da:	4604      	mov	r4, r0
    c6dc:	b330      	cbz	r0, c72c <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
    c6de:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
    c6e0:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    c6e2:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
    c6e4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    c6e6:	8107      	strh	r7, [r0, #8]
    c6e8:	d909      	bls.n	c6fe <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
    c6ea:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    c6ec:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
    c6f0:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
    c6f2:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
    c6f6:	6147      	str	r7, [r0, #20]
	while (n > 0) {
    c6f8:	f1ba 0f00 	cmp.w	sl, #0
    c6fc:	dc0e      	bgt.n	c71c <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
    c6fe:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    c700:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
    c702:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
    c706:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    c70a:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    c70c:	d818      	bhi.n	c740 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
    c70e:	4641      	mov	r1, r8
    c710:	00aa      	lsls	r2, r5, #2
    c712:	f104 0014 	add.w	r0, r4, #20
    c716:	f000 ff10 	bl	d53a <memcpy>
	while (nargs != 0U) {
    c71a:	e007      	b.n	c72c <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    c71c:	f7f4 ffea 	bl	16f4 <log_msg_chunk_alloc>
		if (cont == NULL) {
    c720:	4606      	mov	r6, r0
    c722:	b930      	cbnz	r0, c732 <log_msg_create_n+0x66>
			msg_free(msg);
    c724:	4620      	mov	r0, r4
    c726:	f7f4 fff9 	bl	171c <msg_free>
			return NULL;
    c72a:	4634      	mov	r4, r6
}
    c72c:	4620      	mov	r0, r4
    c72e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
    c732:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
    c736:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
    c73a:	4683      	mov	fp, r0
		cont->next = NULL;
    c73c:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
    c73e:	e7db      	b.n	c6f8 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
    c740:	4641      	mov	r1, r8
    c742:	2208      	movs	r2, #8
    c744:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    c748:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
    c74a:	f000 fef6 	bl	d53a <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    c74e:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    c750:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
    c754:	2d07      	cmp	r5, #7
    c756:	462e      	mov	r6, r5
    c758:	bf28      	it	cs
    c75a:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
    c75c:	ea4f 0986 	mov.w	r9, r6, lsl #2
    c760:	4641      	mov	r1, r8
    c762:	1d38      	adds	r0, r7, #4
    c764:	464a      	mov	r2, r9
    c766:	f000 fee8 	bl	d53a <memcpy>
	while (nargs != 0U) {
    c76a:	1bad      	subs	r5, r5, r6
		cont = cont->next;
    c76c:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
    c76e:	44c8      	add	r8, r9
	while (nargs != 0U) {
    c770:	d1f0      	bne.n	c754 <log_msg_create_n+0x88>
    c772:	e7db      	b.n	c72c <log_msg_create_n+0x60>

0000c774 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    c774:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    c776:	2400      	movs	r4, #0
    c778:	9400      	str	r4, [sp, #0]
    c77a:	f7ff ff15 	bl	c5a8 <log_msg_hexdump_data_op>
}
    c77e:	b002      	add	sp, #8
    c780:	bd10      	pop	{r4, pc}

0000c782 <buffer_write>:
{
    c782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c784:	4606      	mov	r6, r0
    c786:	460d      	mov	r5, r1
    c788:	4614      	mov	r4, r2
    c78a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    c78c:	4621      	mov	r1, r4
    c78e:	4628      	mov	r0, r5
    c790:	463a      	mov	r2, r7
    c792:	47b0      	blx	r6
	} while (len != 0);
    c794:	1a24      	subs	r4, r4, r0
		buf += processed;
    c796:	4405      	add	r5, r0
	} while (len != 0);
    c798:	d1f8      	bne.n	c78c <buffer_write+0xa>
}
    c79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c79c <std_print>:
{
    c79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c7a0:	b08e      	sub	sp, #56	; 0x38
    c7a2:	af0e      	add	r7, sp, #56	; 0x38
    c7a4:	4680      	mov	r8, r0
    c7a6:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    c7a8:	f7ff ff8e 	bl	c6c8 <log_msg_str_get>
    c7ac:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    c7ae:	4640      	mov	r0, r8
    c7b0:	f7ff ff59 	bl	c666 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
    c7b4:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
    c7b8:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    c7ba:	0083      	lsls	r3, r0, #2
    c7bc:	3307      	adds	r3, #7
    c7be:	f023 0307 	bic.w	r3, r3, #7
    c7c2:	ebad 0d03 	sub.w	sp, sp, r3
    c7c6:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    c7c8:	45d1      	cmp	r9, sl
    c7ca:	d116      	bne.n	c7fa <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    c7cc:	4640      	mov	r0, r8
    c7ce:	f7ff ff4a 	bl	c666 <log_msg_nargs_get>
    c7d2:	280f      	cmp	r0, #15
    c7d4:	d81e      	bhi.n	c814 <std_print+0x78>
    c7d6:	e8df f010 	tbh	[pc, r0, lsl #1]
    c7da:	0019      	.short	0x0019
    c7dc:	00260020 	.word	0x00260020
    c7e0:	0036002d 	.word	0x0036002d
    c7e4:	004e0041 	.word	0x004e0041
    c7e8:	006e005d 	.word	0x006e005d
    c7ec:	00960081 	.word	0x00960081
    c7f0:	00c600ad 	.word	0x00c600ad
    c7f4:	00fe00e1 	.word	0x00fe00e1
    c7f8:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
    c7fa:	4649      	mov	r1, r9
    c7fc:	4640      	mov	r0, r8
    c7fe:	f7ff ff35 	bl	c66c <log_msg_arg_get>
    c802:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    c806:	f109 0901 	add.w	r9, r9, #1
    c80a:	e7dd      	b.n	c7c8 <std_print+0x2c>
		print_formatted(log_output, str);
    c80c:	4631      	mov	r1, r6
    c80e:	4628      	mov	r0, r5
    c810:	f7f4 ffc2 	bl	1798 <print_formatted>
}
    c814:	46bd      	mov	sp, r7
    c816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    c81a:	4631      	mov	r1, r6
    c81c:	4628      	mov	r0, r5
    c81e:	6822      	ldr	r2, [r4, #0]
    c820:	f7f4 ffba 	bl	1798 <print_formatted>
		break;
    c824:	e7f6      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
    c826:	4631      	mov	r1, r6
    c828:	e9d4 2300 	ldrd	r2, r3, [r4]
    c82c:	4628      	mov	r0, r5
    c82e:	f7f4 ffb3 	bl	1798 <print_formatted>
		break;
    c832:	e7ef      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    c834:	68a3      	ldr	r3, [r4, #8]
    c836:	4631      	mov	r1, r6
    c838:	9300      	str	r3, [sp, #0]
    c83a:	4628      	mov	r0, r5
    c83c:	e9d4 2300 	ldrd	r2, r3, [r4]
    c840:	f7f4 ffaa 	bl	1798 <print_formatted>
		break;
    c844:	e7e6      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c846:	68e3      	ldr	r3, [r4, #12]
    c848:	4631      	mov	r1, r6
    c84a:	9301      	str	r3, [sp, #4]
    c84c:	68a3      	ldr	r3, [r4, #8]
    c84e:	4628      	mov	r0, r5
    c850:	9300      	str	r3, [sp, #0]
    c852:	e9d4 2300 	ldrd	r2, r3, [r4]
    c856:	f7f4 ff9f 	bl	1798 <print_formatted>
		break;
    c85a:	e7db      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c85c:	6923      	ldr	r3, [r4, #16]
    c85e:	4631      	mov	r1, r6
    c860:	9302      	str	r3, [sp, #8]
    c862:	68e3      	ldr	r3, [r4, #12]
    c864:	4628      	mov	r0, r5
    c866:	9301      	str	r3, [sp, #4]
    c868:	68a3      	ldr	r3, [r4, #8]
    c86a:	9300      	str	r3, [sp, #0]
    c86c:	e9d4 2300 	ldrd	r2, r3, [r4]
    c870:	f7f4 ff92 	bl	1798 <print_formatted>
		break;
    c874:	e7ce      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c876:	6963      	ldr	r3, [r4, #20]
    c878:	4631      	mov	r1, r6
    c87a:	9303      	str	r3, [sp, #12]
    c87c:	6923      	ldr	r3, [r4, #16]
    c87e:	4628      	mov	r0, r5
    c880:	9302      	str	r3, [sp, #8]
    c882:	68e3      	ldr	r3, [r4, #12]
    c884:	9301      	str	r3, [sp, #4]
    c886:	68a3      	ldr	r3, [r4, #8]
    c888:	9300      	str	r3, [sp, #0]
    c88a:	e9d4 2300 	ldrd	r2, r3, [r4]
    c88e:	f7f4 ff83 	bl	1798 <print_formatted>
		break;
    c892:	e7bf      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c894:	69a3      	ldr	r3, [r4, #24]
    c896:	4631      	mov	r1, r6
    c898:	9304      	str	r3, [sp, #16]
    c89a:	6963      	ldr	r3, [r4, #20]
    c89c:	4628      	mov	r0, r5
    c89e:	9303      	str	r3, [sp, #12]
    c8a0:	6923      	ldr	r3, [r4, #16]
    c8a2:	9302      	str	r3, [sp, #8]
    c8a4:	68e3      	ldr	r3, [r4, #12]
    c8a6:	9301      	str	r3, [sp, #4]
    c8a8:	68a3      	ldr	r3, [r4, #8]
    c8aa:	9300      	str	r3, [sp, #0]
    c8ac:	e9d4 2300 	ldrd	r2, r3, [r4]
    c8b0:	f7f4 ff72 	bl	1798 <print_formatted>
		break;
    c8b4:	e7ae      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c8b6:	69e3      	ldr	r3, [r4, #28]
    c8b8:	4631      	mov	r1, r6
    c8ba:	9305      	str	r3, [sp, #20]
    c8bc:	69a3      	ldr	r3, [r4, #24]
    c8be:	4628      	mov	r0, r5
    c8c0:	9304      	str	r3, [sp, #16]
    c8c2:	6963      	ldr	r3, [r4, #20]
    c8c4:	9303      	str	r3, [sp, #12]
    c8c6:	6923      	ldr	r3, [r4, #16]
    c8c8:	9302      	str	r3, [sp, #8]
    c8ca:	68e3      	ldr	r3, [r4, #12]
    c8cc:	9301      	str	r3, [sp, #4]
    c8ce:	68a3      	ldr	r3, [r4, #8]
    c8d0:	9300      	str	r3, [sp, #0]
    c8d2:	e9d4 2300 	ldrd	r2, r3, [r4]
    c8d6:	f7f4 ff5f 	bl	1798 <print_formatted>
		break;
    c8da:	e79b      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c8dc:	6a23      	ldr	r3, [r4, #32]
    c8de:	4631      	mov	r1, r6
    c8e0:	9306      	str	r3, [sp, #24]
    c8e2:	69e3      	ldr	r3, [r4, #28]
    c8e4:	4628      	mov	r0, r5
    c8e6:	9305      	str	r3, [sp, #20]
    c8e8:	69a3      	ldr	r3, [r4, #24]
    c8ea:	9304      	str	r3, [sp, #16]
    c8ec:	6963      	ldr	r3, [r4, #20]
    c8ee:	9303      	str	r3, [sp, #12]
    c8f0:	6923      	ldr	r3, [r4, #16]
    c8f2:	9302      	str	r3, [sp, #8]
    c8f4:	68e3      	ldr	r3, [r4, #12]
    c8f6:	9301      	str	r3, [sp, #4]
    c8f8:	68a3      	ldr	r3, [r4, #8]
    c8fa:	9300      	str	r3, [sp, #0]
    c8fc:	e9d4 2300 	ldrd	r2, r3, [r4]
    c900:	f7f4 ff4a 	bl	1798 <print_formatted>
		break;
    c904:	e786      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c906:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c908:	4631      	mov	r1, r6
    c90a:	9307      	str	r3, [sp, #28]
    c90c:	6a23      	ldr	r3, [r4, #32]
    c90e:	4628      	mov	r0, r5
    c910:	9306      	str	r3, [sp, #24]
    c912:	69e3      	ldr	r3, [r4, #28]
    c914:	9305      	str	r3, [sp, #20]
    c916:	69a3      	ldr	r3, [r4, #24]
    c918:	9304      	str	r3, [sp, #16]
    c91a:	6963      	ldr	r3, [r4, #20]
    c91c:	9303      	str	r3, [sp, #12]
    c91e:	6923      	ldr	r3, [r4, #16]
    c920:	9302      	str	r3, [sp, #8]
    c922:	68e3      	ldr	r3, [r4, #12]
    c924:	9301      	str	r3, [sp, #4]
    c926:	68a3      	ldr	r3, [r4, #8]
    c928:	9300      	str	r3, [sp, #0]
    c92a:	e9d4 2300 	ldrd	r2, r3, [r4]
    c92e:	f7f4 ff33 	bl	1798 <print_formatted>
		break;
    c932:	e76f      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c934:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c936:	4631      	mov	r1, r6
    c938:	9308      	str	r3, [sp, #32]
    c93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c93c:	4628      	mov	r0, r5
    c93e:	9307      	str	r3, [sp, #28]
    c940:	6a23      	ldr	r3, [r4, #32]
    c942:	9306      	str	r3, [sp, #24]
    c944:	69e3      	ldr	r3, [r4, #28]
    c946:	9305      	str	r3, [sp, #20]
    c948:	69a3      	ldr	r3, [r4, #24]
    c94a:	9304      	str	r3, [sp, #16]
    c94c:	6963      	ldr	r3, [r4, #20]
    c94e:	9303      	str	r3, [sp, #12]
    c950:	6923      	ldr	r3, [r4, #16]
    c952:	9302      	str	r3, [sp, #8]
    c954:	68e3      	ldr	r3, [r4, #12]
    c956:	9301      	str	r3, [sp, #4]
    c958:	68a3      	ldr	r3, [r4, #8]
    c95a:	9300      	str	r3, [sp, #0]
    c95c:	e9d4 2300 	ldrd	r2, r3, [r4]
    c960:	f7f4 ff1a 	bl	1798 <print_formatted>
		break;
    c964:	e756      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c966:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c968:	4631      	mov	r1, r6
    c96a:	9309      	str	r3, [sp, #36]	; 0x24
    c96c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c96e:	4628      	mov	r0, r5
    c970:	9308      	str	r3, [sp, #32]
    c972:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c974:	9307      	str	r3, [sp, #28]
    c976:	6a23      	ldr	r3, [r4, #32]
    c978:	9306      	str	r3, [sp, #24]
    c97a:	69e3      	ldr	r3, [r4, #28]
    c97c:	9305      	str	r3, [sp, #20]
    c97e:	69a3      	ldr	r3, [r4, #24]
    c980:	9304      	str	r3, [sp, #16]
    c982:	6963      	ldr	r3, [r4, #20]
    c984:	9303      	str	r3, [sp, #12]
    c986:	6923      	ldr	r3, [r4, #16]
    c988:	9302      	str	r3, [sp, #8]
    c98a:	68e3      	ldr	r3, [r4, #12]
    c98c:	9301      	str	r3, [sp, #4]
    c98e:	68a3      	ldr	r3, [r4, #8]
    c990:	9300      	str	r3, [sp, #0]
    c992:	e9d4 2300 	ldrd	r2, r3, [r4]
    c996:	f7f4 feff 	bl	1798 <print_formatted>
		break;
    c99a:	e73b      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c99c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c99e:	4631      	mov	r1, r6
    c9a0:	930a      	str	r3, [sp, #40]	; 0x28
    c9a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c9a4:	4628      	mov	r0, r5
    c9a6:	9309      	str	r3, [sp, #36]	; 0x24
    c9a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c9aa:	9308      	str	r3, [sp, #32]
    c9ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c9ae:	9307      	str	r3, [sp, #28]
    c9b0:	6a23      	ldr	r3, [r4, #32]
    c9b2:	9306      	str	r3, [sp, #24]
    c9b4:	69e3      	ldr	r3, [r4, #28]
    c9b6:	9305      	str	r3, [sp, #20]
    c9b8:	69a3      	ldr	r3, [r4, #24]
    c9ba:	9304      	str	r3, [sp, #16]
    c9bc:	6963      	ldr	r3, [r4, #20]
    c9be:	9303      	str	r3, [sp, #12]
    c9c0:	6923      	ldr	r3, [r4, #16]
    c9c2:	9302      	str	r3, [sp, #8]
    c9c4:	68e3      	ldr	r3, [r4, #12]
    c9c6:	9301      	str	r3, [sp, #4]
    c9c8:	68a3      	ldr	r3, [r4, #8]
    c9ca:	9300      	str	r3, [sp, #0]
    c9cc:	e9d4 2300 	ldrd	r2, r3, [r4]
    c9d0:	f7f4 fee2 	bl	1798 <print_formatted>
		break;
    c9d4:	e71e      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    c9d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c9d8:	4631      	mov	r1, r6
    c9da:	930b      	str	r3, [sp, #44]	; 0x2c
    c9dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c9de:	4628      	mov	r0, r5
    c9e0:	930a      	str	r3, [sp, #40]	; 0x28
    c9e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c9e4:	9309      	str	r3, [sp, #36]	; 0x24
    c9e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c9e8:	9308      	str	r3, [sp, #32]
    c9ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c9ec:	9307      	str	r3, [sp, #28]
    c9ee:	6a23      	ldr	r3, [r4, #32]
    c9f0:	9306      	str	r3, [sp, #24]
    c9f2:	69e3      	ldr	r3, [r4, #28]
    c9f4:	9305      	str	r3, [sp, #20]
    c9f6:	69a3      	ldr	r3, [r4, #24]
    c9f8:	9304      	str	r3, [sp, #16]
    c9fa:	6963      	ldr	r3, [r4, #20]
    c9fc:	9303      	str	r3, [sp, #12]
    c9fe:	6923      	ldr	r3, [r4, #16]
    ca00:	9302      	str	r3, [sp, #8]
    ca02:	68e3      	ldr	r3, [r4, #12]
    ca04:	9301      	str	r3, [sp, #4]
    ca06:	68a3      	ldr	r3, [r4, #8]
    ca08:	9300      	str	r3, [sp, #0]
    ca0a:	e9d4 2300 	ldrd	r2, r3, [r4]
    ca0e:	f7f4 fec3 	bl	1798 <print_formatted>
		break;
    ca12:	e6ff      	b.n	c814 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    ca14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ca16:	4631      	mov	r1, r6
    ca18:	930c      	str	r3, [sp, #48]	; 0x30
    ca1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ca1c:	4628      	mov	r0, r5
    ca1e:	930b      	str	r3, [sp, #44]	; 0x2c
    ca20:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ca22:	930a      	str	r3, [sp, #40]	; 0x28
    ca24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ca26:	9309      	str	r3, [sp, #36]	; 0x24
    ca28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ca2a:	9308      	str	r3, [sp, #32]
    ca2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ca2e:	9307      	str	r3, [sp, #28]
    ca30:	6a23      	ldr	r3, [r4, #32]
    ca32:	9306      	str	r3, [sp, #24]
    ca34:	69e3      	ldr	r3, [r4, #28]
    ca36:	9305      	str	r3, [sp, #20]
    ca38:	69a3      	ldr	r3, [r4, #24]
    ca3a:	9304      	str	r3, [sp, #16]
    ca3c:	6963      	ldr	r3, [r4, #20]
    ca3e:	9303      	str	r3, [sp, #12]
    ca40:	6923      	ldr	r3, [r4, #16]
    ca42:	9302      	str	r3, [sp, #8]
    ca44:	68e3      	ldr	r3, [r4, #12]
    ca46:	9301      	str	r3, [sp, #4]
    ca48:	68a3      	ldr	r3, [r4, #8]
    ca4a:	9300      	str	r3, [sp, #0]
    ca4c:	e9d4 2300 	ldrd	r2, r3, [r4]
    ca50:	f7f4 fea2 	bl	1798 <print_formatted>
}
    ca54:	e6de      	b.n	c814 <std_print+0x78>

0000ca56 <log_output_flush>:
		     log_output->control_block->offset,
    ca56:	6842      	ldr	r2, [r0, #4]
{
    ca58:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
    ca5a:	e9d2 2300 	ldrd	r2, r3, [r2]
{
    ca5e:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    ca60:	6881      	ldr	r1, [r0, #8]
    ca62:	6800      	ldr	r0, [r0, #0]
    ca64:	f7ff fe8d 	bl	c782 <buffer_write>
	log_output->control_block->offset = 0;
    ca68:	2200      	movs	r2, #0
    ca6a:	6863      	ldr	r3, [r4, #4]
    ca6c:	601a      	str	r2, [r3, #0]
}
    ca6e:	bd10      	pop	{r4, pc}

0000ca70 <out_func>:
{
    ca70:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    ca72:	684b      	ldr	r3, [r1, #4]
{
    ca74:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    ca76:	681a      	ldr	r2, [r3, #0]
    ca78:	68cb      	ldr	r3, [r1, #12]
{
    ca7a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    ca7c:	429a      	cmp	r2, r3
    ca7e:	d102      	bne.n	ca86 <out_func+0x16>
		log_output_flush(out_ctx);
    ca80:	4608      	mov	r0, r1
    ca82:	f7ff ffe8 	bl	ca56 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ca86:	6863      	ldr	r3, [r4, #4]
    ca88:	e8d3 2fef 	ldaex	r2, [r3]
    ca8c:	1c51      	adds	r1, r2, #1
    ca8e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ca92:	2800      	cmp	r0, #0
    ca94:	d1f8      	bne.n	ca88 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    ca96:	68a3      	ldr	r3, [r4, #8]
}
    ca98:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
    ca9a:	549d      	strb	r5, [r3, r2]
}
    ca9c:	bd38      	pop	{r3, r4, r5, pc}

0000ca9e <virtio_get_status>:
}
    ca9e:	2004      	movs	r0, #4
    caa0:	4770      	bx	lr

0000caa2 <virtio_get_features>:
}
    caa2:	2001      	movs	r0, #1
    caa4:	4770      	bx	lr

0000caa6 <virtio_set_features>:
}
    caa6:	4770      	bx	lr

0000caa8 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
    caa8:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
    caaa:	21b4      	movs	r1, #180	; 0xb4
    caac:	2004      	movs	r0, #4
    caae:	f7fe ff19 	bl	b8e4 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
    cab2:	4604      	mov	r4, r0
    cab4:	b118      	cbz	r0, cabe <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
    cab6:	22b4      	movs	r2, #180	; 0xb4
    cab8:	2100      	movs	r1, #0
    caba:	f000 fd69 	bl	d590 <memset>
	}

	return vqs;
}
    cabe:	4620      	mov	r0, r4
    cac0:	bd10      	pop	{r4, pc}

0000cac2 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
    cac2:	f002 bca6 	b.w	f412 <rpmsg_destroy_ept>

0000cac6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    cac6:	b2cb      	uxtb	r3, r1
    cac8:	210c      	movs	r1, #12
    caca:	68c2      	ldr	r2, [r0, #12]
    cacc:	fb03 2101 	mla	r1, r3, r1, r2
    cad0:	6f88      	ldr	r0, [r1, #120]	; 0x78
}
    cad2:	f000 0007 	and.w	r0, r0, #7
    cad6:	4770      	bx	lr

0000cad8 <set_off_state>:
	__asm__ volatile(
    cad8:	f04f 0320 	mov.w	r3, #32
    cadc:	f3ef 8211 	mrs	r2, BASEPRI
    cae0:	f383 8811 	msr	BASEPRI, r3
    cae4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    cae8:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    caea:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    caee:	d001      	beq.n	caf4 <set_off_state+0x1c>
    caf0:	428b      	cmp	r3, r1
    caf2:	d107      	bne.n	cb04 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    caf4:	2301      	movs	r3, #1
    caf6:	6003      	str	r3, [r0, #0]
	int err = 0;
    caf8:	2000      	movs	r0, #0
	__asm__ volatile(
    cafa:	f382 8811 	msr	BASEPRI, r2
    cafe:	f3bf 8f6f 	isb	sy
}
    cb02:	4770      	bx	lr
		err = -EPERM;
    cb04:	f04f 30ff 	mov.w	r0, #4294967295
    cb08:	e7f7      	b.n	cafa <set_off_state+0x22>

0000cb0a <set_starting_state>:
{
    cb0a:	b510      	push	{r4, lr}
	__asm__ volatile(
    cb0c:	f04f 0320 	mov.w	r3, #32
    cb10:	f3ef 8211 	mrs	r2, BASEPRI
    cb14:	f383 8811 	msr	BASEPRI, r3
    cb18:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    cb1c:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    cb1e:	f003 0407 	and.w	r4, r3, #7
    cb22:	2c01      	cmp	r4, #1
    cb24:	d106      	bne.n	cb34 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    cb26:	6001      	str	r1, [r0, #0]
	int err = 0;
    cb28:	2000      	movs	r0, #0
	__asm__ volatile(
    cb2a:	f382 8811 	msr	BASEPRI, r2
    cb2e:	f3bf 8f6f 	isb	sy
}
    cb32:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    cb34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    cb38:	428b      	cmp	r3, r1
		err = -EALREADY;
    cb3a:	bf14      	ite	ne
    cb3c:	f04f 30ff 	movne.w	r0, #4294967295
    cb40:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    cb44:	e7f1      	b.n	cb2a <set_starting_state+0x20>

0000cb46 <set_on_state>:
	__asm__ volatile(
    cb46:	f04f 0320 	mov.w	r3, #32
    cb4a:	f3ef 8211 	mrs	r2, BASEPRI
    cb4e:	f383 8811 	msr	BASEPRI, r3
    cb52:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    cb56:	6803      	ldr	r3, [r0, #0]
    cb58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cb5c:	f043 0302 	orr.w	r3, r3, #2
    cb60:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    cb62:	f382 8811 	msr	BASEPRI, r2
    cb66:	f3bf 8f6f 	isb	sy
}
    cb6a:	4770      	bx	lr

0000cb6c <onoff_started_callback>:
{
    cb6c:	b410      	push	{r4}
	notify(mgr, 0);
    cb6e:	241c      	movs	r4, #28
	return &data->mgr[type];
    cb70:	68c0      	ldr	r0, [r0, #12]
    cb72:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    cb74:	fb03 0004 	mla	r0, r3, r4, r0
    cb78:	2100      	movs	r1, #0
}
    cb7a:	bc10      	pop	{r4}
	notify(mgr, 0);
    cb7c:	4710      	bx	r2

0000cb7e <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    cb7e:	2003      	movs	r0, #3
    cb80:	f7fc be5a 	b.w	9838 <nrfx_clock_start>

0000cb84 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    cb84:	2002      	movs	r0, #2
    cb86:	f7fc be57 	b.w	9838 <nrfx_clock_start>

0000cb8a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    cb8a:	2000      	movs	r0, #0
    cb8c:	f7fc be54 	b.w	9838 <nrfx_clock_start>

0000cb90 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    cb90:	2003      	movs	r0, #3
    cb92:	f7fc bea5 	b.w	98e0 <nrfx_clock_stop>

0000cb96 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    cb96:	2002      	movs	r0, #2
    cb98:	f7fc bea2 	b.w	98e0 <nrfx_clock_stop>

0000cb9c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    cb9c:	2000      	movs	r0, #0
    cb9e:	f7fc be9f 	b.w	98e0 <nrfx_clock_stop>

0000cba2 <blocking_start_callback>:
{
    cba2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    cba4:	f7fe ba74 	b.w	b090 <z_impl_k_sem_give>

0000cba8 <api_stop>:
{
    cba8:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    cbaa:	240c      	movs	r4, #12
    cbac:	b2c9      	uxtb	r1, r1
    cbae:	434c      	muls	r4, r1
{
    cbb0:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    cbb2:	68c0      	ldr	r0, [r0, #12]
    cbb4:	f104 0378 	add.w	r3, r4, #120	; 0x78
    cbb8:	2180      	movs	r1, #128	; 0x80
    cbba:	4418      	add	r0, r3
    cbbc:	f7ff ff8c 	bl	cad8 <set_off_state>
	if (err < 0) {
    cbc0:	2800      	cmp	r0, #0
    cbc2:	db04      	blt.n	cbce <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    cbc4:	6869      	ldr	r1, [r5, #4]
    cbc6:	440c      	add	r4, r1
    cbc8:	6863      	ldr	r3, [r4, #4]
    cbca:	4798      	blx	r3
	return 0;
    cbcc:	2000      	movs	r0, #0
}
    cbce:	bd38      	pop	{r3, r4, r5, pc}

0000cbd0 <api_start>:
{
    cbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    cbd4:	240c      	movs	r4, #12
    cbd6:	b2c9      	uxtb	r1, r1
    cbd8:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    cbda:	68c5      	ldr	r5, [r0, #12]
{
    cbdc:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    cbde:	f104 0078 	add.w	r0, r4, #120	; 0x78
    cbe2:	2180      	movs	r1, #128	; 0x80
    cbe4:	4428      	add	r0, r5
{
    cbe6:	4690      	mov	r8, r2
    cbe8:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    cbea:	f7ff ff8e 	bl	cb0a <set_starting_state>
	if (err < 0) {
    cbee:	2800      	cmp	r0, #0
    cbf0:	db06      	blt.n	cc00 <api_start+0x30>
	subdata->cb = cb;
    cbf2:	4425      	add	r5, r4
	subdata->user_data = user_data;
    cbf4:	e9c5 871c 	strd	r8, r7, [r5, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    cbf8:	6873      	ldr	r3, [r6, #4]
    cbfa:	591b      	ldr	r3, [r3, r4]
    cbfc:	4798      	blx	r3
	return 0;
    cbfe:	2000      	movs	r0, #0
}
    cc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cc04 <bt_rpmsg_open>:
{
    cc04:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
    cc06:	f7f5 fd87 	bl	2718 <bt_rpmsg_platform_endpoint_is_bound>
    cc0a:	b108      	cbz	r0, cc10 <bt_rpmsg_open+0xc>
}
    cc0c:	2000      	movs	r0, #0
    cc0e:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
    cc10:	2100      	movs	r1, #0
    cc12:	2021      	movs	r0, #33	; 0x21
    cc14:	f7fe fa14 	bl	b040 <z_impl_k_sleep>
    cc18:	e7f5      	b.n	cc06 <bt_rpmsg_open+0x2>

0000cc1a <endpoint_cb>:
{
    cc1a:	b508      	push	{r3, lr}
    cc1c:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
    cc1e:	4611      	mov	r1, r2
    cc20:	f7f5 fc4e 	bl	24c0 <bt_rpmsg_rx>
}
    cc24:	2000      	movs	r0, #0
    cc26:	bd08      	pop	{r3, pc}

0000cc28 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    cc28:	4770      	bx	lr

0000cc2a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    cc2a:	4770      	bx	lr

0000cc2c <sys_clock_disable>:
    cc2c:	4770      	bx	lr

0000cc2e <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    cc2e:	2000      	movs	r0, #0
    cc30:	f7f5 ba08 	b.w	2044 <sys_reboot>

0000cc34 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
    cc34:	b538      	push	{r3, r4, r5, lr}
    cc36:	460d      	mov	r5, r1
	if (from_len <= to_len) {
    cc38:	42ab      	cmp	r3, r5
{
    cc3a:	4611      	mov	r1, r2
    cc3c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    cc3e:	d804      	bhi.n	cc4a <_copy+0x16>
		(void)memcpy(to, from, from_len);
    cc40:	461a      	mov	r2, r3
    cc42:	f000 fc7a 	bl	d53a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    cc46:	4620      	mov	r0, r4
    cc48:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
    cc4a:	2400      	movs	r4, #0
    cc4c:	e7fb      	b.n	cc46 <_copy+0x12>

0000cc4e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    cc4e:	f000 bc9f 	b.w	d590 <memset>

0000cc52 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    cc52:	09c3      	lsrs	r3, r0, #7
    cc54:	005a      	lsls	r2, r3, #1
    cc56:	4413      	add	r3, r2
    cc58:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    cc5c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    cc60:	b2c0      	uxtb	r0, r0
    cc62:	4770      	bx	lr

0000cc64 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    cc64:	78cb      	ldrb	r3, [r1, #3]
    cc66:	7802      	ldrb	r2, [r0, #0]
    cc68:	4053      	eors	r3, r2
    cc6a:	7003      	strb	r3, [r0, #0]
    cc6c:	884b      	ldrh	r3, [r1, #2]
    cc6e:	7842      	ldrb	r2, [r0, #1]
    cc70:	4053      	eors	r3, r2
    cc72:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    cc74:	680a      	ldr	r2, [r1, #0]
    cc76:	7883      	ldrb	r3, [r0, #2]
    cc78:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    cc7c:	7083      	strb	r3, [r0, #2]
    cc7e:	680a      	ldr	r2, [r1, #0]
    cc80:	78c3      	ldrb	r3, [r0, #3]
    cc82:	4053      	eors	r3, r2
    cc84:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    cc86:	79cb      	ldrb	r3, [r1, #7]
    cc88:	7902      	ldrb	r2, [r0, #4]
    cc8a:	4053      	eors	r3, r2
    cc8c:	7103      	strb	r3, [r0, #4]
    cc8e:	88cb      	ldrh	r3, [r1, #6]
    cc90:	7942      	ldrb	r2, [r0, #5]
    cc92:	4053      	eors	r3, r2
    cc94:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    cc96:	684a      	ldr	r2, [r1, #4]
    cc98:	7983      	ldrb	r3, [r0, #6]
    cc9a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    cc9e:	7183      	strb	r3, [r0, #6]
    cca0:	684a      	ldr	r2, [r1, #4]
    cca2:	79c3      	ldrb	r3, [r0, #7]
    cca4:	4053      	eors	r3, r2
    cca6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    cca8:	7acb      	ldrb	r3, [r1, #11]
    ccaa:	7a02      	ldrb	r2, [r0, #8]
    ccac:	4053      	eors	r3, r2
    ccae:	7203      	strb	r3, [r0, #8]
    ccb0:	7a42      	ldrb	r2, [r0, #9]
    ccb2:	894b      	ldrh	r3, [r1, #10]
    ccb4:	4053      	eors	r3, r2
    ccb6:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    ccb8:	688a      	ldr	r2, [r1, #8]
    ccba:	7a83      	ldrb	r3, [r0, #10]
    ccbc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    ccc0:	7283      	strb	r3, [r0, #10]
    ccc2:	688a      	ldr	r2, [r1, #8]
    ccc4:	7ac3      	ldrb	r3, [r0, #11]
    ccc6:	4053      	eors	r3, r2
    ccc8:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    ccca:	7bcb      	ldrb	r3, [r1, #15]
    cccc:	7b02      	ldrb	r2, [r0, #12]
    ccce:	4053      	eors	r3, r2
    ccd0:	7303      	strb	r3, [r0, #12]
    ccd2:	89cb      	ldrh	r3, [r1, #14]
    ccd4:	7b42      	ldrb	r2, [r0, #13]
    ccd6:	4053      	eors	r3, r2
    ccd8:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    ccda:	68ca      	ldr	r2, [r1, #12]
    ccdc:	7b83      	ldrb	r3, [r0, #14]
    ccde:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    cce2:	7383      	strb	r3, [r0, #14]
    cce4:	68ca      	ldr	r2, [r1, #12]
    cce6:	7bc3      	ldrb	r3, [r0, #15]
    cce8:	4053      	eors	r3, r2
    ccea:	73c3      	strb	r3, [r0, #15]
}
    ccec:	4770      	bx	lr

0000ccee <shift_rows>:
{
    ccee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    ccf0:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    ccf2:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    ccf4:	f88d 2000 	strb.w	r2, [sp]
    ccf8:	7942      	ldrb	r2, [r0, #5]
    ccfa:	f88d 2001 	strb.w	r2, [sp, #1]
    ccfe:	7a82      	ldrb	r2, [r0, #10]
    cd00:	f88d 2002 	strb.w	r2, [sp, #2]
    cd04:	7bc2      	ldrb	r2, [r0, #15]
    cd06:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    cd0a:	7902      	ldrb	r2, [r0, #4]
    cd0c:	f88d 2004 	strb.w	r2, [sp, #4]
    cd10:	7a42      	ldrb	r2, [r0, #9]
    cd12:	f88d 2005 	strb.w	r2, [sp, #5]
    cd16:	7b82      	ldrb	r2, [r0, #14]
    cd18:	f88d 2006 	strb.w	r2, [sp, #6]
    cd1c:	78c2      	ldrb	r2, [r0, #3]
    cd1e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    cd22:	7a02      	ldrb	r2, [r0, #8]
    cd24:	f88d 2008 	strb.w	r2, [sp, #8]
    cd28:	7b42      	ldrb	r2, [r0, #13]
    cd2a:	f88d 2009 	strb.w	r2, [sp, #9]
    cd2e:	7882      	ldrb	r2, [r0, #2]
    cd30:	f88d 200a 	strb.w	r2, [sp, #10]
    cd34:	79c2      	ldrb	r2, [r0, #7]
    cd36:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    cd3a:	7b02      	ldrb	r2, [r0, #12]
    cd3c:	f88d 200c 	strb.w	r2, [sp, #12]
    cd40:	7842      	ldrb	r2, [r0, #1]
    cd42:	f88d 200d 	strb.w	r2, [sp, #13]
    cd46:	7982      	ldrb	r2, [r0, #6]
    cd48:	f88d 200e 	strb.w	r2, [sp, #14]
    cd4c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    cd50:	2310      	movs	r3, #16
    cd52:	466a      	mov	r2, sp
    cd54:	4619      	mov	r1, r3
    cd56:	f7ff ff6d 	bl	cc34 <_copy>
}
    cd5a:	b005      	add	sp, #20
    cd5c:	f85d fb04 	ldr.w	pc, [sp], #4

0000cd60 <mult_row_column>:
{
    cd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd62:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    cd64:	7808      	ldrb	r0, [r1, #0]
{
    cd66:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    cd68:	f7ff ff73 	bl	cc52 <_double_byte>
    cd6c:	4605      	mov	r5, r0
    cd6e:	7860      	ldrb	r0, [r4, #1]
    cd70:	f7ff ff6f 	bl	cc52 <_double_byte>
    cd74:	78a2      	ldrb	r2, [r4, #2]
    cd76:	7863      	ldrb	r3, [r4, #1]
    cd78:	4053      	eors	r3, r2
    cd7a:	78e2      	ldrb	r2, [r4, #3]
    cd7c:	4053      	eors	r3, r2
    cd7e:	405d      	eors	r5, r3
    cd80:	4045      	eors	r5, r0
    cd82:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    cd84:	7860      	ldrb	r0, [r4, #1]
    cd86:	7827      	ldrb	r7, [r4, #0]
    cd88:	f7ff ff63 	bl	cc52 <_double_byte>
    cd8c:	4605      	mov	r5, r0
    cd8e:	78a0      	ldrb	r0, [r4, #2]
    cd90:	f7ff ff5f 	bl	cc52 <_double_byte>
    cd94:	78a3      	ldrb	r3, [r4, #2]
    cd96:	405f      	eors	r7, r3
    cd98:	78e3      	ldrb	r3, [r4, #3]
    cd9a:	405f      	eors	r7, r3
    cd9c:	407d      	eors	r5, r7
    cd9e:	4045      	eors	r5, r0
    cda0:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    cda2:	78a0      	ldrb	r0, [r4, #2]
    cda4:	7865      	ldrb	r5, [r4, #1]
    cda6:	7827      	ldrb	r7, [r4, #0]
    cda8:	f7ff ff53 	bl	cc52 <_double_byte>
    cdac:	406f      	eors	r7, r5
    cdae:	4605      	mov	r5, r0
    cdb0:	78e0      	ldrb	r0, [r4, #3]
    cdb2:	f7ff ff4e 	bl	cc52 <_double_byte>
    cdb6:	78e3      	ldrb	r3, [r4, #3]
    cdb8:	405f      	eors	r7, r3
    cdba:	407d      	eors	r5, r7
    cdbc:	4045      	eors	r5, r0
    cdbe:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    cdc0:	7820      	ldrb	r0, [r4, #0]
    cdc2:	f7ff ff46 	bl	cc52 <_double_byte>
    cdc6:	7863      	ldrb	r3, [r4, #1]
    cdc8:	7825      	ldrb	r5, [r4, #0]
    cdca:	405d      	eors	r5, r3
    cdcc:	78a3      	ldrb	r3, [r4, #2]
    cdce:	405d      	eors	r5, r3
    cdd0:	4045      	eors	r5, r0
    cdd2:	78e0      	ldrb	r0, [r4, #3]
    cdd4:	f7ff ff3d 	bl	cc52 <_double_byte>
    cdd8:	b2ed      	uxtb	r5, r5
    cdda:	4045      	eors	r5, r0
    cddc:	70f5      	strb	r5, [r6, #3]
}
    cdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cde0 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    cde0:	460a      	mov	r2, r1
{
    cde2:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    cde4:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
    cde8:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    cdea:	2b00      	cmp	r3, #0
    cdec:	bfb4      	ite	lt
    cdee:	2387      	movlt	r3, #135	; 0x87
    cdf0:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    cdf2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    cdf6:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
    cdfa:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
    cdfc:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    ce00:	d002      	beq.n	ce08 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
    ce02:	7813      	ldrb	r3, [r2, #0]
    ce04:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    ce06:	e7f4      	b.n	cdf2 <gf_double+0x12>
	}
}
    ce08:	bd10      	pop	{r4, pc}

0000ce0a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    ce0a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    ce0c:	b120      	cbz	r0, ce18 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    ce0e:	2258      	movs	r2, #88	; 0x58
    ce10:	2100      	movs	r1, #0
    ce12:	f7ff ff1c 	bl	cc4e <_set>
    ce16:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
    ce18:	bd08      	pop	{r3, pc}

0000ce1a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    ce1a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    ce1c:	4604      	mov	r4, r0
    ce1e:	b188      	cbz	r0, ce44 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    ce20:	2210      	movs	r2, #16
    ce22:	2100      	movs	r1, #0
    ce24:	f7ff ff13 	bl	cc4e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    ce28:	2210      	movs	r2, #16
    ce2a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    ce2e:	2100      	movs	r1, #0
    ce30:	f7ff ff0d 	bl	cc4e <_set>
	s->leftover_offset = 0;
    ce34:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    ce36:	2200      	movs	r2, #0
	s->leftover_offset = 0;
    ce38:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
    ce3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ce3e:	2001      	movs	r0, #1
    ce40:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
    ce44:	bd10      	pop	{r4, pc}

0000ce46 <tc_cmac_setup>:
{
    ce46:	b570      	push	{r4, r5, r6, lr}
    ce48:	460d      	mov	r5, r1
    ce4a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    ce4c:	4604      	mov	r4, r0
    ce4e:	b310      	cbz	r0, ce96 <tc_cmac_setup+0x50>
    ce50:	b311      	cbz	r1, ce98 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
    ce52:	2258      	movs	r2, #88	; 0x58
    ce54:	2100      	movs	r1, #0
    ce56:	f7ff fefa 	bl	cc4e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    ce5a:	4629      	mov	r1, r5
    ce5c:	4630      	mov	r0, r6
	s->sched = sched;
    ce5e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    ce60:	f7f5 fe4e 	bl	2b00 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    ce64:	2210      	movs	r2, #16
    ce66:	2100      	movs	r1, #0
    ce68:	4620      	mov	r0, r4
    ce6a:	f7ff fef0 	bl	cc4e <_set>
	gf_double (s->K1, s->iv);
    ce6e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    ce72:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    ce74:	4621      	mov	r1, r4
    ce76:	4620      	mov	r0, r4
    ce78:	f7f5 fe96 	bl	2ba8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    ce7c:	4621      	mov	r1, r4
    ce7e:	4628      	mov	r0, r5
    ce80:	f7ff ffae 	bl	cde0 <gf_double>
	gf_double (s->K2, s->K1);
    ce84:	4629      	mov	r1, r5
    ce86:	f104 0020 	add.w	r0, r4, #32
    ce8a:	f7ff ffa9 	bl	cde0 <gf_double>
	tc_cmac_init(s);
    ce8e:	4620      	mov	r0, r4
    ce90:	f7ff ffc3 	bl	ce1a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    ce94:	2001      	movs	r0, #1
}
    ce96:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    ce98:	4608      	mov	r0, r1
    ce9a:	e7fc      	b.n	ce96 <tc_cmac_setup+0x50>

0000ce9c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    ce9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cea0:	460d      	mov	r5, r1
    cea2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    cea4:	4604      	mov	r4, r0
    cea6:	2800      	cmp	r0, #0
    cea8:	d062      	beq.n	cf70 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    ceaa:	b912      	cbnz	r2, ceb2 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    ceac:	2001      	movs	r0, #1
}
    ceae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
    ceb2:	2900      	cmp	r1, #0
    ceb4:	d05c      	beq.n	cf70 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
    ceb6:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
    ceba:	ea50 0301 	orrs.w	r3, r0, r1
    cebe:	d057      	beq.n	cf70 <tc_cmac_update+0xd4>
	s->countdown--;
    cec0:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
    cec4:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
    cec8:	f141 33ff 	adc.w	r3, r1, #4294967295
    cecc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
    ced0:	f1b8 0f00 	cmp.w	r8, #0
    ced4:	d02a      	beq.n	cf2c <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    ced6:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
    ceda:	f108 0030 	add.w	r0, r8, #48	; 0x30
    cede:	42be      	cmp	r6, r7
    cee0:	4420      	add	r0, r4
    cee2:	d208      	bcs.n	cef6 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    cee4:	462a      	mov	r2, r5
    cee6:	4633      	mov	r3, r6
    cee8:	4631      	mov	r1, r6
    ceea:	f7ff fea3 	bl	cc34 <_copy>
			s->leftover_offset += data_length;
    ceee:	6c62      	ldr	r2, [r4, #68]	; 0x44
    cef0:	4432      	add	r2, r6
    cef2:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    cef4:	e7da      	b.n	ceac <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
    cef6:	463b      	mov	r3, r7
    cef8:	462a      	mov	r2, r5
    cefa:	4639      	mov	r1, r7
    cefc:	f7ff fe9a 	bl	cc34 <_copy>
		s->leftover_offset = 0;
    cf00:	2300      	movs	r3, #0
    cf02:	3e10      	subs	r6, #16
    cf04:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    cf06:	4446      	add	r6, r8
		data += remaining_space;
    cf08:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    cf0a:	1e63      	subs	r3, r4, #1
    cf0c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
    cf10:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    cf14:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    cf18:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
    cf1a:	ea82 0200 	eor.w	r2, r2, r0
    cf1e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    cf20:	d1f6      	bne.n	cf10 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    cf22:	4621      	mov	r1, r4
    cf24:	4620      	mov	r0, r4
    cf26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    cf28:	f7f5 fe3e 	bl	2ba8 <tc_aes_encrypt>
    cf2c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    cf30:	2e10      	cmp	r6, #16
    cf32:	d80a      	bhi.n	cf4a <tc_cmac_update+0xae>
	if (data_length > 0) {
    cf34:	2e00      	cmp	r6, #0
    cf36:	d0b9      	beq.n	ceac <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
    cf38:	4633      	mov	r3, r6
    cf3a:	462a      	mov	r2, r5
    cf3c:	4631      	mov	r1, r6
    cf3e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    cf42:	f7ff fe77 	bl	cc34 <_copy>
		s->leftover_offset = data_length;
    cf46:	6466      	str	r6, [r4, #68]	; 0x44
    cf48:	e7b0      	b.n	ceac <tc_cmac_update+0x10>
    cf4a:	1e63      	subs	r3, r4, #1
    cf4c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    cf4e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    cf52:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    cf56:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
    cf58:	ea82 0200 	eor.w	r2, r2, r0
    cf5c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    cf5e:	d1f6      	bne.n	cf4e <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    cf60:	4621      	mov	r1, r4
    cf62:	4620      	mov	r0, r4
    cf64:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    cf66:	f7f5 fe1f 	bl	2ba8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    cf6a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    cf6c:	3e10      	subs	r6, #16
    cf6e:	e7df      	b.n	cf30 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
    cf70:	2000      	movs	r0, #0
    cf72:	e79c      	b.n	ceae <tc_cmac_update+0x12>

0000cf74 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    cf74:	b570      	push	{r4, r5, r6, lr}
    cf76:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    cf78:	4605      	mov	r5, r0
    cf7a:	b1f0      	cbz	r0, cfba <tc_cmac_final+0x46>
    cf7c:	b371      	cbz	r1, cfdc <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    cf7e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    cf80:	2a10      	cmp	r2, #16
    cf82:	d11b      	bne.n	cfbc <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    cf84:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    cf86:	1e63      	subs	r3, r4, #1
    cf88:	3901      	subs	r1, #1
    cf8a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
    cf8e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    cf92:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    cf96:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
    cf98:	ea82 0206 	eor.w	r2, r2, r6
    cf9c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    cfa0:	ea82 0206 	eor.w	r2, r2, r6
    cfa4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    cfa6:	d1f2      	bne.n	cf8e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    cfa8:	4621      	mov	r1, r4
    cfaa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    cfac:	4628      	mov	r0, r5
    cfae:	f7f5 fdfb 	bl	2ba8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    cfb2:	4620      	mov	r0, r4
    cfb4:	f7ff ff29 	bl	ce0a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    cfb8:	2001      	movs	r0, #1
}
    cfba:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    cfbc:	f102 0030 	add.w	r0, r2, #48	; 0x30
    cfc0:	2100      	movs	r1, #0
    cfc2:	f1c2 0210 	rsb	r2, r2, #16
    cfc6:	4420      	add	r0, r4
    cfc8:	f7ff fe41 	bl	cc4e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    cfcc:	2280      	movs	r2, #128	; 0x80
    cfce:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
    cfd0:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    cfd4:	4423      	add	r3, r4
    cfd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    cfda:	e7d4      	b.n	cf86 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
    cfdc:	4608      	mov	r0, r1
    cfde:	e7ec      	b.n	cfba <tc_cmac_final+0x46>

0000cfe0 <tc_sha256_update>:
{
    cfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfe2:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
    cfe4:	b110      	cbz	r0, cfec <tc_sha256_update+0xc>
    cfe6:	b1f9      	cbz	r1, d028 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
    cfe8:	b90a      	cbnz	r2, cfee <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
    cfea:	2001      	movs	r0, #1
}
    cfec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
    cfee:	2600      	movs	r6, #0
    cff0:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
    cff2:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
    cff6:	42a5      	cmp	r5, r4
    cff8:	d0f7      	beq.n	cfea <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
    cffa:	6e83      	ldr	r3, [r0, #104]	; 0x68
    cffc:	1c5a      	adds	r2, r3, #1
    cffe:	6682      	str	r2, [r0, #104]	; 0x68
    d000:	f814 1b01 	ldrb.w	r1, [r4], #1
    d004:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
    d006:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
    d008:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
    d00c:	d9f3      	bls.n	cff6 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
    d00e:	4639      	mov	r1, r7
    d010:	f7f5 fe34 	bl	2c7c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
    d014:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
    d018:	f513 7300 	adds.w	r3, r3, #512	; 0x200
    d01c:	f142 0200 	adc.w	r2, r2, #0
    d020:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
    d024:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
    d026:	e7e6      	b.n	cff6 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
    d028:	4608      	mov	r0, r1
    d02a:	e7df      	b.n	cfec <tc_sha256_update+0xc>

0000d02c <tc_sha256_final>:
{
    d02c:	b570      	push	{r4, r5, r6, lr}
    d02e:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
    d030:	4605      	mov	r5, r0
    d032:	2800      	cmp	r0, #0
    d034:	d054      	beq.n	d0e0 <tc_sha256_final+0xb4>
    d036:	2900      	cmp	r1, #0
    d038:	d053      	beq.n	d0e2 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
    d03a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
    d03e:	6e89      	ldr	r1, [r1, #104]	; 0x68
    d040:	f104 0628 	add.w	r6, r4, #40	; 0x28
    d044:	00c8      	lsls	r0, r1, #3
    d046:	1812      	adds	r2, r2, r0
    d048:	f143 0300 	adc.w	r3, r3, #0
    d04c:	e9c4 2308 	strd	r2, r3, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    d050:	2380      	movs	r3, #128	; 0x80
    d052:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
    d054:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    d056:	4421      	add	r1, r4
    d058:	66a0      	str	r0, [r4, #104]	; 0x68
    d05a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
    d05e:	d90b      	bls.n	d078 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
    d060:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    d064:	2100      	movs	r1, #0
    d066:	4430      	add	r0, r6
    d068:	f7ff fdf1 	bl	cc4e <_set>
		compress(s->iv, s->leftover);
    d06c:	4631      	mov	r1, r6
    d06e:	4620      	mov	r0, r4
    d070:	f7f5 fe04 	bl	2c7c <compress>
		s->leftover_offset = 0;
    d074:	2300      	movs	r3, #0
    d076:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
    d078:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    d07a:	2100      	movs	r1, #0
    d07c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    d080:	4430      	add	r0, r6
    d082:	f7ff fde4 	bl	cc4e <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
    d086:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
    d088:	4631      	mov	r1, r6
    d08a:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
    d08c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
    d08e:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
    d090:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
    d092:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
    d096:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
    d09a:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
    d09c:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
    d09e:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
    d0a0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
    d0a4:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
    d0a8:	f7f5 fde8 	bl	2c7c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
    d0ac:	1f26      	subs	r6, r4, #4
    d0ae:	1d2b      	adds	r3, r5, #4
    d0b0:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
    d0b4:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t >> 24);
    d0b8:	3304      	adds	r3, #4
    d0ba:	0e11      	lsrs	r1, r2, #24
    d0bc:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
    d0c0:	0c11      	lsrs	r1, r2, #16
    d0c2:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
    d0c6:	0a11      	lsrs	r1, r2, #8
    d0c8:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
    d0cc:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
    d0d0:	4283      	cmp	r3, r0
    d0d2:	d1ef      	bne.n	d0b4 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
    d0d4:	4620      	mov	r0, r4
    d0d6:	2270      	movs	r2, #112	; 0x70
    d0d8:	2100      	movs	r1, #0
    d0da:	f7ff fdb8 	bl	cc4e <_set>
	return TC_CRYPTO_SUCCESS;
    d0de:	2001      	movs	r0, #1
}
    d0e0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    d0e2:	4608      	mov	r0, r1
    d0e4:	e7fc      	b.n	d0e0 <tc_sha256_final+0xb4>

0000d0e6 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
    d0e6:	b530      	push	{r4, r5, lr}
    d0e8:	1e43      	subs	r3, r0, #1
    d0ea:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
    d0ec:	42a9      	cmp	r1, r5
    d0ee:	d106      	bne.n	d0fe <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
    d0f0:	2136      	movs	r1, #54	; 0x36
    d0f2:	245c      	movs	r4, #92	; 0x5c
    d0f4:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
    d0f6:	1a13      	subs	r3, r2, r0
    d0f8:	2b3f      	cmp	r3, #63	; 0x3f
    d0fa:	d90c      	bls.n	d116 <rekey+0x30>
	}
}
    d0fc:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
    d0fe:	780c      	ldrb	r4, [r1, #0]
    d100:	f084 0436 	eor.w	r4, r4, #54	; 0x36
    d104:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
    d108:	f811 4b01 	ldrb.w	r4, [r1], #1
    d10c:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
    d110:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
    d114:	e7ea      	b.n	d0ec <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
    d116:	f802 1b01 	strb.w	r1, [r2], #1
    d11a:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
    d11e:	e7ea      	b.n	d0f6 <rekey+0x10>

0000d120 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
    d120:	b5f0      	push	{r4, r5, r6, r7, lr}
    d122:	460e      	mov	r6, r1
    d124:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
    d126:	4605      	mov	r5, r0
{
    d128:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
    d12a:	b1b8      	cbz	r0, d15c <tc_hmac_set_key+0x3c>
    d12c:	b341      	cbz	r1, d180 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
    d12e:	b34a      	cbz	r2, d184 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
    d130:	2a40      	cmp	r2, #64	; 0x40
    d132:	f100 0770 	add.w	r7, r0, #112	; 0x70
    d136:	d813      	bhi.n	d160 <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
    d138:	a810      	add	r0, sp, #64	; 0x40
    d13a:	f7f5 fe85 	bl	2e48 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
    d13e:	4622      	mov	r2, r4
    d140:	4669      	mov	r1, sp
    d142:	a810      	add	r0, sp, #64	; 0x40
    d144:	f7ff ff4c 	bl	cfe0 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
    d148:	a910      	add	r1, sp, #64	; 0x40
    d14a:	a834      	add	r0, sp, #208	; 0xd0
    d14c:	f7ff ff6e 	bl	d02c <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
    d150:	4622      	mov	r2, r4
    d152:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
    d154:	4638      	mov	r0, r7
    d156:	f7ff ffc6 	bl	d0e6 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
    d15a:	2001      	movs	r0, #1
}
    d15c:	b04d      	add	sp, #308	; 0x134
    d15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
    d160:	f7f5 fe72 	bl	2e48 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
    d164:	4622      	mov	r2, r4
    d166:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
    d168:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
    d16c:	4628      	mov	r0, r5
    d16e:	f7ff ff37 	bl	cfe0 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
    d172:	4629      	mov	r1, r5
    d174:	4620      	mov	r0, r4
    d176:	f7ff ff59 	bl	d02c <tc_sha256_final>
		rekey(ctx->key,
    d17a:	2220      	movs	r2, #32
    d17c:	4621      	mov	r1, r4
    d17e:	e7e9      	b.n	d154 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
    d180:	4608      	mov	r0, r1
    d182:	e7eb      	b.n	d15c <tc_hmac_set_key+0x3c>
    d184:	4610      	mov	r0, r2
    d186:	e7e9      	b.n	d15c <tc_hmac_set_key+0x3c>

0000d188 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
    d188:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
    d18a:	4604      	mov	r4, r0
    d18c:	b140      	cbz	r0, d1a0 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
    d18e:	f7f5 fe5b 	bl	2e48 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
    d192:	2240      	movs	r2, #64	; 0x40
    d194:	4620      	mov	r0, r4
    d196:	f104 0170 	add.w	r1, r4, #112	; 0x70
    d19a:	f7ff ff21 	bl	cfe0 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
    d19e:	2001      	movs	r0, #1
}
    d1a0:	bd10      	pop	{r4, pc}

0000d1a2 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
    d1a2:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
    d1a4:	b110      	cbz	r0, d1ac <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
    d1a6:	f7ff ff1b 	bl	cfe0 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
    d1aa:	2001      	movs	r0, #1
}
    d1ac:	bd08      	pop	{r3, pc}

0000d1ae <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
    d1ae:	b570      	push	{r4, r5, r6, lr}
    d1b0:	460e      	mov	r6, r1
    d1b2:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    d1b4:	4605      	mov	r5, r0
    d1b6:	b1f0      	cbz	r0, d1f6 <tc_hmac_final+0x48>
    d1b8:	2920      	cmp	r1, #32
    d1ba:	d11c      	bne.n	d1f6 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
    d1bc:	b1ea      	cbz	r2, d1fa <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
    d1be:	4611      	mov	r1, r2
    d1c0:	f7ff ff34 	bl	d02c <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
    d1c4:	4620      	mov	r0, r4
    d1c6:	f7f5 fe3f 	bl	2e48 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
    d1ca:	2240      	movs	r2, #64	; 0x40
    d1cc:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
    d1d0:	4620      	mov	r0, r4
    d1d2:	f7ff ff05 	bl	cfe0 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
    d1d6:	4632      	mov	r2, r6
    d1d8:	4629      	mov	r1, r5
    d1da:	4620      	mov	r0, r4
    d1dc:	f7ff ff00 	bl	cfe0 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
    d1e0:	4621      	mov	r1, r4
    d1e2:	4628      	mov	r0, r5
    d1e4:	f7ff ff22 	bl	d02c <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
    d1e8:	4620      	mov	r0, r4
    d1ea:	22f0      	movs	r2, #240	; 0xf0
    d1ec:	2100      	movs	r1, #0
    d1ee:	f7ff fd2e 	bl	cc4e <_set>

	return TC_CRYPTO_SUCCESS;
    d1f2:	2001      	movs	r0, #1
}
    d1f4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    d1f6:	2000      	movs	r0, #0
    d1f8:	e7fc      	b.n	d1f4 <tc_hmac_final+0x46>
    d1fa:	4610      	mov	r0, r2
    d1fc:	e7fa      	b.n	d1f4 <tc_hmac_final+0x46>

0000d1fe <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
    d1fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d202:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
    d204:	f04f 0b01 	mov.w	fp, #1
{
    d208:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
    d20a:	2300      	movs	r3, #0
{
    d20c:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    d20e:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
    d212:	4631      	mov	r1, r6
{
    d214:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    d216:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
    d218:	f88d 3006 	strb.w	r3, [sp, #6]
{
    d21c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
    d220:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    d224:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    d228:	f7ff ff7a 	bl	d120 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
    d22c:	4620      	mov	r0, r4
    d22e:	f7ff ffab 	bl	d188 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    d232:	2220      	movs	r2, #32
    d234:	4629      	mov	r1, r5
    d236:	4620      	mov	r0, r4
    d238:	f7ff ffb3 	bl	d1a2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
    d23c:	465a      	mov	r2, fp
    d23e:	4620      	mov	r0, r4
    d240:	f10d 0106 	add.w	r1, sp, #6
    d244:	f7ff ffad 	bl	d1a2 <tc_hmac_update>

	if (data && datalen)
    d248:	f1b8 0f00 	cmp.w	r8, #0
    d24c:	d007      	beq.n	d25e <update+0x60>
    d24e:	f1b9 0f00 	cmp.w	r9, #0
    d252:	d004      	beq.n	d25e <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
    d254:	464a      	mov	r2, r9
    d256:	4641      	mov	r1, r8
    d258:	4620      	mov	r0, r4
    d25a:	f7ff ffa2 	bl	d1a2 <tc_hmac_update>
	if (additional_data && additional_datalen)
    d25e:	b13f      	cbz	r7, d270 <update+0x72>
    d260:	f1ba 0f00 	cmp.w	sl, #0
    d264:	d004      	beq.n	d270 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
    d266:	4652      	mov	r2, sl
    d268:	4639      	mov	r1, r7
    d26a:	4620      	mov	r0, r4
    d26c:	f7ff ff99 	bl	d1a2 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
    d270:	4622      	mov	r2, r4
    d272:	2120      	movs	r1, #32
    d274:	4630      	mov	r0, r6
    d276:	f7ff ff9a 	bl	d1ae <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    d27a:	2220      	movs	r2, #32
    d27c:	4631      	mov	r1, r6
    d27e:	4620      	mov	r0, r4
    d280:	f7ff ff4e 	bl	d120 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
    d284:	4620      	mov	r0, r4
    d286:	f7ff ff7f 	bl	d188 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    d28a:	2220      	movs	r2, #32
    d28c:	4629      	mov	r1, r5
    d28e:	4620      	mov	r0, r4
    d290:	f7ff ff87 	bl	d1a2 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
    d294:	4622      	mov	r2, r4
    d296:	2120      	movs	r1, #32
    d298:	4628      	mov	r0, r5
    d29a:	f7ff ff88 	bl	d1ae <tc_hmac_final>

	if (data == 0 || datalen == 0)
    d29e:	f1b8 0f00 	cmp.w	r8, #0
    d2a2:	d03a      	beq.n	d31a <update+0x11c>
    d2a4:	f1b9 0f00 	cmp.w	r9, #0
    d2a8:	d037      	beq.n	d31a <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    d2aa:	2220      	movs	r2, #32
    d2ac:	4631      	mov	r1, r6
    d2ae:	4620      	mov	r0, r4
    d2b0:	f7ff ff36 	bl	d120 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
    d2b4:	4620      	mov	r0, r4
    d2b6:	f7ff ff67 	bl	d188 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    d2ba:	2220      	movs	r2, #32
    d2bc:	4629      	mov	r1, r5
    d2be:	4620      	mov	r0, r4
    d2c0:	f7ff ff6f 	bl	d1a2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
    d2c4:	2201      	movs	r2, #1
    d2c6:	f10d 0107 	add.w	r1, sp, #7
    d2ca:	4620      	mov	r0, r4
    d2cc:	f7ff ff69 	bl	d1a2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
    d2d0:	464a      	mov	r2, r9
    d2d2:	4641      	mov	r1, r8
    d2d4:	4620      	mov	r0, r4
    d2d6:	f7ff ff64 	bl	d1a2 <tc_hmac_update>
	if (additional_data && additional_datalen)
    d2da:	b13f      	cbz	r7, d2ec <update+0xee>
    d2dc:	f1ba 0f00 	cmp.w	sl, #0
    d2e0:	d004      	beq.n	d2ec <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
    d2e2:	4652      	mov	r2, sl
    d2e4:	4639      	mov	r1, r7
    d2e6:	4620      	mov	r0, r4
    d2e8:	f7ff ff5b 	bl	d1a2 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
    d2ec:	4622      	mov	r2, r4
    d2ee:	2120      	movs	r1, #32
    d2f0:	4630      	mov	r0, r6
    d2f2:	f7ff ff5c 	bl	d1ae <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    d2f6:	2220      	movs	r2, #32
    d2f8:	4631      	mov	r1, r6
    d2fa:	4620      	mov	r0, r4
    d2fc:	f7ff ff10 	bl	d120 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
    d300:	4620      	mov	r0, r4
    d302:	f7ff ff41 	bl	d188 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    d306:	2220      	movs	r2, #32
    d308:	4629      	mov	r1, r5
    d30a:	4620      	mov	r0, r4
    d30c:	f7ff ff49 	bl	d1a2 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
    d310:	4622      	mov	r2, r4
    d312:	2120      	movs	r1, #32
    d314:	4628      	mov	r0, r5
    d316:	f7ff ff4a 	bl	d1ae <tc_hmac_final>
}
    d31a:	b003      	add	sp, #12
    d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d320 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
    d320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d322:	460c      	mov	r4, r1
    d324:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
    d326:	4605      	mov	r5, r0
    d328:	b1b0      	cbz	r0, d358 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
    d32a:	b1b9      	cbz	r1, d35c <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
    d32c:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
    d32e:	2220      	movs	r2, #32
    d330:	2100      	movs	r1, #0
    d332:	30f0      	adds	r0, #240	; 0xf0
    d334:	f7ff fc8b 	bl	cc4e <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
    d338:	2220      	movs	r2, #32
    d33a:	2101      	movs	r1, #1
    d33c:	f505 7088 	add.w	r0, r5, #272	; 0x110
    d340:	f7ff fc85 	bl	cc4e <_set>
	update(prng, personalization, plen, 0, 0);
    d344:	4628      	mov	r0, r5
    d346:	4633      	mov	r3, r6
    d348:	463a      	mov	r2, r7
    d34a:	4621      	mov	r1, r4
    d34c:	9600      	str	r6, [sp, #0]
    d34e:	f7ff ff56 	bl	d1fe <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
    d352:	2001      	movs	r0, #1
	prng->countdown = 0;
    d354:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
    d358:	b003      	add	sp, #12
    d35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d35c:	4608      	mov	r0, r1
    d35e:	e7fb      	b.n	d358 <tc_hmac_prng_init+0x38>

0000d360 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
    d360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d362:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
    d364:	4605      	mov	r5, r0
    d366:	b180      	cbz	r0, d38a <tc_hmac_prng_reseed+0x2a>
    d368:	b179      	cbz	r1, d38a <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
    d36a:	2a1f      	cmp	r2, #31
    d36c:	d90d      	bls.n	d38a <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
    d36e:	b153      	cbz	r3, d386 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
    d370:	b16c      	cbz	r4, d38e <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
    d372:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
    d374:	f7ff ff43 	bl	d1fe <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
    d378:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
    d37c:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
    d37e:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
    d382:	b003      	add	sp, #12
    d384:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
    d386:	9300      	str	r3, [sp, #0]
    d388:	e7f4      	b.n	d374 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
    d38a:	2000      	movs	r0, #0
    d38c:	e7f9      	b.n	d382 <tc_hmac_prng_reseed+0x22>
    d38e:	4620      	mov	r0, r4
    d390:	e7f7      	b.n	d382 <tc_hmac_prng_reseed+0x22>

0000d392 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
    d392:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d396:	460d      	mov	r5, r1
    d398:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    d39a:	4680      	mov	r8, r0
    d39c:	b3d8      	cbz	r0, d416 <tc_hmac_prng_generate+0x84>
    d39e:	b3d2      	cbz	r2, d416 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
    d3a0:	1e4b      	subs	r3, r1, #1
    d3a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
    d3a6:	d236      	bcs.n	d416 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
    d3a8:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    d3ac:	b3ab      	cbz	r3, d41a <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
    d3ae:	3b01      	subs	r3, #1
    d3b0:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    d3b4:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    d3b8:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    d3bc:	2220      	movs	r2, #32
    d3be:	4649      	mov	r1, r9
    d3c0:	4620      	mov	r0, r4
    d3c2:	f7ff fead 	bl	d120 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
    d3c6:	4620      	mov	r0, r4
    d3c8:	f7ff fede 	bl	d188 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    d3cc:	2220      	movs	r2, #32
    d3ce:	4639      	mov	r1, r7
    d3d0:	4620      	mov	r0, r4
    d3d2:	f7ff fee6 	bl	d1a2 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
    d3d6:	4622      	mov	r2, r4
    d3d8:	2120      	movs	r1, #32
    d3da:	4638      	mov	r0, r7
    d3dc:	f7ff fee7 	bl	d1ae <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
    d3e0:	2d20      	cmp	r5, #32
    d3e2:	462e      	mov	r6, r5
    d3e4:	bf28      	it	cs
    d3e6:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
    d3e8:	4640      	mov	r0, r8
    d3ea:	4633      	mov	r3, r6
    d3ec:	463a      	mov	r2, r7
    d3ee:	4631      	mov	r1, r6
    d3f0:	f7ff fc20 	bl	cc34 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
    d3f4:	2d20      	cmp	r5, #32
    d3f6:	bf38      	it	cc
    d3f8:	2520      	movcc	r5, #32
	while (outlen != 0) {
    d3fa:	3d20      	subs	r5, #32
		out += bufferlen;
    d3fc:	44b0      	add	r8, r6
	while (outlen != 0) {
    d3fe:	d1dd      	bne.n	d3bc <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
    d400:	4620      	mov	r0, r4
    d402:	462b      	mov	r3, r5
    d404:	462a      	mov	r2, r5
    d406:	4629      	mov	r1, r5
    d408:	9500      	str	r5, [sp, #0]
    d40a:	f7ff fef8 	bl	d1fe <update>

	return TC_CRYPTO_SUCCESS;
    d40e:	2001      	movs	r0, #1
}
    d410:	b003      	add	sp, #12
    d412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    d416:	2000      	movs	r0, #0
    d418:	e7fa      	b.n	d410 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
    d41a:	f04f 30ff 	mov.w	r0, #4294967295
    d41e:	e7f7      	b.n	d410 <tc_hmac_prng_generate+0x7e>

0000d420 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    d420:	2100      	movs	r1, #0
    d422:	2001      	movs	r0, #1
    d424:	f7f5 bdc2 	b.w	2fac <z_arm_fatal_error>

0000d428 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    d428:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    d42a:	f383 880b 	msr	PSPLIM, r3
}
    d42e:	4770      	bx	lr

0000d430 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    d430:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    d432:	6800      	ldr	r0, [r0, #0]
    d434:	f7f5 bdba 	b.w	2fac <z_arm_fatal_error>

0000d438 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    d438:	b508      	push	{r3, lr}
	handler();
    d43a:	f7f5 fe6b 	bl	3114 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    d43e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    d442:	f7f5 bead 	b.w	31a0 <z_arm_exc_exit>

0000d446 <mpu_configure_region>:
{
    d446:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    d448:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    d44a:	680c      	ldr	r4, [r1, #0]
{
    d44c:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
    d44e:	890a      	ldrh	r2, [r1, #8]
    d450:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    d452:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d454:	3b01      	subs	r3, #1
    d456:	f024 041f 	bic.w	r4, r4, #31
    d45a:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    d45c:	f002 021f 	and.w	r2, r2, #31
    d460:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d464:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
    d468:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
    d46a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d46e:	9303      	str	r3, [sp, #12]
    d470:	f7f6 f92e 	bl	36d0 <region_allocate_and_init>
}
    d474:	b005      	add	sp, #20
    d476:	bd30      	pop	{r4, r5, pc}

0000d478 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    d478:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    d47c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    d480:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    d482:	bf08      	it	eq
    d484:	f06f 0015 	mvneq.w	r0, #21
    d488:	4770      	bx	lr

0000d48a <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    d48a:	4603      	mov	r3, r0
    d48c:	3901      	subs	r1, #1
    d48e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    d492:	b90a      	cbnz	r2, d498 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    d494:	701a      	strb	r2, [r3, #0]

	return dest;
}
    d496:	4770      	bx	lr
		*d = *s;
    d498:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    d49c:	e7f7      	b.n	d48e <strcpy+0x4>

0000d49e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    d49e:	b570      	push	{r4, r5, r6, lr}
    d4a0:	4605      	mov	r5, r0
    d4a2:	3901      	subs	r1, #1
    d4a4:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    d4a6:	b142      	cbz	r2, d4ba <strncpy+0x1c>
    d4a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    d4ac:	1e56      	subs	r6, r2, #1
    d4ae:	b92b      	cbnz	r3, d4bc <strncpy+0x1e>
    d4b0:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    d4b2:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    d4b6:	42a2      	cmp	r2, r4
    d4b8:	d1fb      	bne.n	d4b2 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    d4ba:	bd70      	pop	{r4, r5, r6, pc}
		n--;
    d4bc:	4632      	mov	r2, r6
		*d = *s;
    d4be:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    d4c2:	e7ef      	b.n	d4a4 <strncpy+0x6>

0000d4c4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    d4c4:	4603      	mov	r3, r0
	size_t n = 0;
    d4c6:	2000      	movs	r0, #0

	while (*s != '\0') {
    d4c8:	5c1a      	ldrb	r2, [r3, r0]
    d4ca:	b902      	cbnz	r2, d4ce <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    d4cc:	4770      	bx	lr
		n++;
    d4ce:	3001      	adds	r0, #1
    d4d0:	e7fa      	b.n	d4c8 <strlen+0x4>

0000d4d2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    d4d2:	4603      	mov	r3, r0
	size_t n = 0;
    d4d4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    d4d6:	5c1a      	ldrb	r2, [r3, r0]
    d4d8:	b10a      	cbz	r2, d4de <strnlen+0xc>
    d4da:	4288      	cmp	r0, r1
    d4dc:	d100      	bne.n	d4e0 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    d4de:	4770      	bx	lr
		n++;
    d4e0:	3001      	adds	r0, #1
    d4e2:	e7f8      	b.n	d4d6 <strnlen+0x4>

0000d4e4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    d4e4:	1e43      	subs	r3, r0, #1
    d4e6:	3901      	subs	r1, #1
    d4e8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d4ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    d4f0:	4282      	cmp	r2, r0
    d4f2:	d101      	bne.n	d4f8 <strcmp+0x14>
    d4f4:	2a00      	cmp	r2, #0
    d4f6:	d1f7      	bne.n	d4e8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    d4f8:	1a10      	subs	r0, r2, r0
    d4fa:	4770      	bx	lr

0000d4fc <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    d4fc:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    d4fe:	2400      	movs	r4, #0
    d500:	42a2      	cmp	r2, r4
    d502:	d008      	beq.n	d516 <strncmp+0x1a>
    d504:	5d03      	ldrb	r3, [r0, r4]
    d506:	5d0d      	ldrb	r5, [r1, r4]
    d508:	42ab      	cmp	r3, r5
    d50a:	d102      	bne.n	d512 <strncmp+0x16>
    d50c:	3401      	adds	r4, #1
    d50e:	2b00      	cmp	r3, #0
    d510:	d1f6      	bne.n	d500 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    d512:	1b58      	subs	r0, r3, r5
    d514:	e000      	b.n	d518 <strncmp+0x1c>
    d516:	2000      	movs	r0, #0
}
    d518:	bd30      	pop	{r4, r5, pc}

0000d51a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    d51a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    d51c:	b15a      	cbz	r2, d536 <memcmp+0x1c>
    d51e:	3901      	subs	r1, #1
    d520:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    d522:	f810 2b01 	ldrb.w	r2, [r0], #1
    d526:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    d52a:	42a0      	cmp	r0, r4
    d52c:	d001      	beq.n	d532 <memcmp+0x18>
    d52e:	429a      	cmp	r2, r3
    d530:	d0f7      	beq.n	d522 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    d532:	1ad0      	subs	r0, r2, r3
}
    d534:	bd10      	pop	{r4, pc}
		return 0;
    d536:	4610      	mov	r0, r2
    d538:	e7fc      	b.n	d534 <memcmp+0x1a>

0000d53a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    d53a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    d53c:	ea81 0400 	eor.w	r4, r1, r0
    d540:	07a5      	lsls	r5, r4, #30
    d542:	4603      	mov	r3, r0
    d544:	d00b      	beq.n	d55e <memcpy+0x24>
    d546:	3b01      	subs	r3, #1
    d548:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    d54a:	4291      	cmp	r1, r2
    d54c:	d11b      	bne.n	d586 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    d54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    d550:	2a00      	cmp	r2, #0
    d552:	d0fc      	beq.n	d54e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    d554:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    d558:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    d55a:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    d55e:	079c      	lsls	r4, r3, #30
    d560:	d1f6      	bne.n	d550 <memcpy+0x16>
    d562:	f022 0403 	bic.w	r4, r2, #3
    d566:	1f1d      	subs	r5, r3, #4
    d568:	0896      	lsrs	r6, r2, #2
    d56a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    d56c:	42b9      	cmp	r1, r7
    d56e:	d105      	bne.n	d57c <memcpy+0x42>
    d570:	f06f 0503 	mvn.w	r5, #3
    d574:	4423      	add	r3, r4
    d576:	fb05 2206 	mla	r2, r5, r6, r2
    d57a:	e7e4      	b.n	d546 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    d57c:	f851 cb04 	ldr.w	ip, [r1], #4
    d580:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    d584:	e7f2      	b.n	d56c <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    d586:	f811 4b01 	ldrb.w	r4, [r1], #1
    d58a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    d58e:	e7dc      	b.n	d54a <memcpy+0x10>

0000d590 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    d590:	4603      	mov	r3, r0
{
    d592:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    d594:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    d596:	079c      	lsls	r4, r3, #30
    d598:	d111      	bne.n	d5be <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    d59a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    d59e:	f022 0603 	bic.w	r6, r2, #3
    d5a2:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    d5a6:	441e      	add	r6, r3
    d5a8:	0894      	lsrs	r4, r2, #2
    d5aa:	42b3      	cmp	r3, r6
    d5ac:	d10d      	bne.n	d5ca <memset+0x3a>
    d5ae:	f06f 0503 	mvn.w	r5, #3
    d5b2:	fb05 2204 	mla	r2, r5, r4, r2
    d5b6:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    d5b8:	4293      	cmp	r3, r2
    d5ba:	d109      	bne.n	d5d0 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    d5bc:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    d5be:	2a00      	cmp	r2, #0
    d5c0:	d0fc      	beq.n	d5bc <memset+0x2c>
		*(d_byte++) = c_byte;
    d5c2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    d5c6:	3a01      	subs	r2, #1
    d5c8:	e7e5      	b.n	d596 <memset+0x6>
		*(d_word++) = c_word;
    d5ca:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    d5ce:	e7ec      	b.n	d5aa <memset+0x1a>
		*(d_byte++) = c_byte;
    d5d0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    d5d4:	e7f0      	b.n	d5b8 <memset+0x28>

0000d5d6 <_stdout_hook_default>:
}
    d5d6:	f04f 30ff 	mov.w	r0, #4294967295
    d5da:	4770      	bx	lr

0000d5dc <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    d5dc:	b510      	push	{r4, lr}
    d5de:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
    d5e0:	7801      	ldrb	r1, [r0, #0]
    d5e2:	7822      	ldrb	r2, [r4, #0]
{
    d5e4:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
    d5e6:	428a      	cmp	r2, r1
    d5e8:	d00e      	beq.n	d608 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    d5ea:	4669      	mov	r1, sp
    d5ec:	f7f6 fa5c 	bl	3aa8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    d5f0:	4620      	mov	r0, r4
    d5f2:	a905      	add	r1, sp, #20
    d5f4:	f7f6 fa58 	bl	3aa8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    d5f8:	2210      	movs	r2, #16
    d5fa:	f10d 0115 	add.w	r1, sp, #21
    d5fe:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    d602:	f7ff ff8a 	bl	d51a <memcmp>
    d606:	e007      	b.n	d618 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
    d608:	2a01      	cmp	r2, #1
    d60a:	d007      	beq.n	d61c <bt_uuid_cmp+0x40>
    d60c:	2a02      	cmp	r2, #2
    d60e:	d008      	beq.n	d622 <bt_uuid_cmp+0x46>
    d610:	b95a      	cbnz	r2, d62a <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    d612:	8840      	ldrh	r0, [r0, #2]
    d614:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    d616:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
    d618:	b00a      	add	sp, #40	; 0x28
    d61a:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    d61c:	6840      	ldr	r0, [r0, #4]
    d61e:	6863      	ldr	r3, [r4, #4]
    d620:	e7f9      	b.n	d616 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    d622:	2210      	movs	r2, #16
    d624:	1c61      	adds	r1, r4, #1
    d626:	3001      	adds	r0, #1
    d628:	e7eb      	b.n	d602 <bt_uuid_cmp+0x26>
	switch (u1->type) {
    d62a:	f06f 0015 	mvn.w	r0, #21
    d62e:	e7f3      	b.n	d618 <bt_uuid_cmp+0x3c>

0000d630 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
    d630:	2a04      	cmp	r2, #4
{
    d632:	b538      	push	{r3, r4, r5, lr}
    d634:	460c      	mov	r4, r1
	switch (data_len) {
    d636:	d00d      	beq.n	d654 <bt_uuid_create+0x24>
    d638:	2a10      	cmp	r2, #16
    d63a:	d019      	beq.n	d670 <bt_uuid_create+0x40>
    d63c:	2a02      	cmp	r2, #2
    d63e:	f04f 0300 	mov.w	r3, #0
    d642:	d11b      	bne.n	d67c <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    d644:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
    d646:	784a      	ldrb	r2, [r1, #1]
    d648:	780b      	ldrb	r3, [r1, #0]
    d64a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
    d64e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
    d650:	2001      	movs	r0, #1
}
    d652:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
    d654:	2301      	movs	r3, #1
    d656:	7003      	strb	r3, [r0, #0]
    d658:	78a2      	ldrb	r2, [r4, #2]
    d65a:	78c9      	ldrb	r1, [r1, #3]
    d65c:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    d65e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
    d662:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    d664:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    d668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
    d66c:	6042      	str	r2, [r0, #4]
		break;
    d66e:	e7ef      	b.n	d650 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
    d670:	2302      	movs	r3, #2
    d672:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
    d676:	f7ff ff60 	bl	d53a <memcpy>
		break;
    d67a:	e7e9      	b.n	d650 <bt_uuid_create+0x20>
	switch (data_len) {
    d67c:	4618      	mov	r0, r3
    d67e:	e7e8      	b.n	d652 <bt_uuid_create+0x22>

0000d680 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    d680:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    d682:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    d684:	2106      	movs	r1, #6
{
    d686:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    d688:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    d68c:	f7f8 fc6c 	bl	5f68 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    d690:	b918      	cbnz	r0, d69a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    d692:	79a3      	ldrb	r3, [r4, #6]
    d694:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d698:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    d69a:	bd10      	pop	{r4, pc}

0000d69c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    d69c:	280f      	cmp	r0, #15
    d69e:	d806      	bhi.n	d6ae <bt_hci_evt_get_flags+0x12>
    d6a0:	280d      	cmp	r0, #13
    d6a2:	d80b      	bhi.n	d6bc <bt_hci_evt_get_flags+0x20>
    d6a4:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    d6a6:	bf14      	ite	ne
    d6a8:	2002      	movne	r0, #2
    d6aa:	2003      	moveq	r0, #3
    d6ac:	4770      	bx	lr
	switch (evt) {
    d6ae:	2813      	cmp	r0, #19
    d6b0:	d004      	beq.n	d6bc <bt_hci_evt_get_flags+0x20>
    d6b2:	281a      	cmp	r0, #26
    d6b4:	bf14      	ite	ne
    d6b6:	2002      	movne	r0, #2
    d6b8:	2001      	moveq	r0, #1
    d6ba:	4770      	bx	lr
    d6bc:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
    d6be:	4770      	bx	lr

0000d6c0 <get_adv_channel_map>:
{
    d6c0:	4603      	mov	r3, r0
		channel_map &= ~0x01;
    d6c2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
    d6c6:	bf0c      	ite	eq
    d6c8:	2007      	moveq	r0, #7
    d6ca:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
    d6cc:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
    d6ce:	bf48      	it	mi
    d6d0:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
    d6d4:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
    d6d6:	bf48      	it	mi
    d6d8:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
    d6dc:	4770      	bx	lr

0000d6de <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d6de:	e8d0 0faf 	lda	r0, [r0]
}
    d6e2:	4770      	bx	lr

0000d6e4 <bt_addr_le_copy>:
    d6e4:	2207      	movs	r2, #7
    d6e6:	f7ff bf28 	b.w	d53a <memcpy>

0000d6ea <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
    d6ea:	2207      	movs	r2, #7
    d6ec:	f7ff bf15 	b.w	d51a <memcmp>

0000d6f0 <atomic_or>:
{
    d6f0:	4603      	mov	r3, r0
}
    d6f2:	e8d3 0fef 	ldaex	r0, [r3]
    d6f6:	ea40 0201 	orr.w	r2, r0, r1
    d6fa:	e8c3 2fec 	stlex	ip, r2, [r3]
    d6fe:	f1bc 0f00 	cmp.w	ip, #0
    d702:	d1f6      	bne.n	d6f2 <atomic_or+0x2>
    d704:	4770      	bx	lr

0000d706 <atomic_and>:
{
    d706:	4603      	mov	r3, r0
}
    d708:	e8d3 0fef 	ldaex	r0, [r3]
    d70c:	ea00 0201 	and.w	r2, r0, r1
    d710:	e8c3 2fec 	stlex	ip, r2, [r3]
    d714:	f1bc 0f00 	cmp.w	ip, #0
    d718:	d1f6      	bne.n	d708 <atomic_and+0x2>
    d71a:	4770      	bx	lr

0000d71c <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
    d71c:	460b      	mov	r3, r1
    d71e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
    d720:	f001 041f 	and.w	r4, r1, #31
    d724:	2101      	movs	r1, #1
    d726:	095b      	lsrs	r3, r3, #5
    d728:	40a1      	lsls	r1, r4

	if (val) {
    d72a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    d72e:	b112      	cbz	r2, d736 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
    d730:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d732:	f7ff bfdd 	b.w	d6f0 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d736:	43c9      	mvns	r1, r1
}
    d738:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d73a:	f7ff bfe4 	b.w	d706 <atomic_and>

0000d73e <bt_hci_disconnect>:
{
    d73e:	b570      	push	{r4, r5, r6, lr}
    d740:	4606      	mov	r6, r0
    d742:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    d744:	f240 4006 	movw	r0, #1030	; 0x406
    d748:	2103      	movs	r1, #3
    d74a:	f7f6 fe93 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    d74e:	4604      	mov	r4, r0
    d750:	b168      	cbz	r0, d76e <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
    d752:	2103      	movs	r1, #3
    d754:	3008      	adds	r0, #8
    d756:	f001 f9c4 	bl	eae2 <net_buf_simple_add>
	disconn->reason = reason;
    d75a:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
    d75c:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
    d75e:	4621      	mov	r1, r4
}
    d760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
    d764:	2200      	movs	r2, #0
    d766:	f240 4006 	movw	r0, #1030	; 0x406
    d76a:	f7f6 bebb 	b.w	44e4 <bt_hci_cmd_send_sync>
}
    d76e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    d772:	bd70      	pop	{r4, r5, r6, pc}

0000d774 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    d774:	8802      	ldrh	r2, [r0, #0]
    d776:	8843      	ldrh	r3, [r0, #2]
{
    d778:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    d77a:	429a      	cmp	r2, r3
    d77c:	d818      	bhi.n	d7b0 <bt_le_conn_params_valid+0x3c>
    d77e:	2a05      	cmp	r2, #5
    d780:	d916      	bls.n	d7b0 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    d782:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    d786:	d813      	bhi.n	d7b0 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    d788:	8884      	ldrh	r4, [r0, #4]
    d78a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    d78e:	d20f      	bcs.n	d7b0 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    d790:	88c1      	ldrh	r1, [r0, #6]
    d792:	f640 4076 	movw	r0, #3190	; 0xc76
    d796:	f1a1 020a 	sub.w	r2, r1, #10
    d79a:	b292      	uxth	r2, r2
    d79c:	4282      	cmp	r2, r0
    d79e:	d807      	bhi.n	d7b0 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
    d7a0:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    d7a4:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    d7a8:	bf34      	ite	cc
    d7aa:	2001      	movcc	r0, #1
    d7ac:	2000      	movcs	r0, #0
}
    d7ae:	bd10      	pop	{r4, pc}
		return false;
    d7b0:	2000      	movs	r0, #0
    d7b2:	e7fc      	b.n	d7ae <bt_le_conn_params_valid+0x3a>

0000d7b4 <bt_le_set_data_len>:
{
    d7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d7b6:	4607      	mov	r7, r0
    d7b8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    d7ba:	f242 0022 	movw	r0, #8226	; 0x2022
    d7be:	2106      	movs	r1, #6
{
    d7c0:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    d7c2:	f7f6 fe57 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    d7c6:	4604      	mov	r4, r0
    d7c8:	b170      	cbz	r0, d7e8 <bt_le_set_data_len+0x34>
    d7ca:	2106      	movs	r1, #6
    d7cc:	3008      	adds	r0, #8
    d7ce:	f001 f988 	bl	eae2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    d7d2:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    d7d4:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
    d7d6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    d7d8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    d7da:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    d7dc:	f242 0022 	movw	r0, #8226	; 0x2022
}
    d7e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    d7e4:	f7f7 b8c4 	b.w	4970 <bt_hci_cmd_send>
}
    d7e8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    d7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d7ee <bt_le_set_phy>:
{
    d7ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d7f2:	4680      	mov	r8, r0
    d7f4:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    d7f6:	f242 0032 	movw	r0, #8242	; 0x2032
    d7fa:	2107      	movs	r1, #7
{
    d7fc:	4616      	mov	r6, r2
    d7fe:	461d      	mov	r5, r3
    d800:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    d804:	f7f6 fe36 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    d808:	4604      	mov	r4, r0
    d80a:	b190      	cbz	r0, d832 <bt_le_set_phy+0x44>
    d80c:	2107      	movs	r1, #7
    d80e:	3008      	adds	r0, #8
    d810:	f001 f967 	bl	eae2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    d814:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
    d818:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
    d81a:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
    d81c:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
    d81e:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
    d820:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    d824:	4621      	mov	r1, r4
}
    d826:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    d82a:	f242 0032 	movw	r0, #8242	; 0x2032
    d82e:	f7f7 b89f 	b.w	4970 <bt_hci_cmd_send>
}
    d832:	f06f 0036 	mvn.w	r0, #54	; 0x36
    d836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000d83a <bt_addr_le_is_bonded>:
}
    d83a:	2000      	movs	r0, #0
    d83c:	4770      	bx	lr

0000d83e <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
    d83e:	6880      	ldr	r0, [r0, #8]
    d840:	f7f8 ba46 	b.w	5cd0 <enh_conn_complete>

0000d844 <le_legacy_conn_complete>:
{
    d844:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    d846:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    d848:	6881      	ldr	r1, [r0, #8]
{
    d84a:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
    d84c:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    d84e:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
    d850:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    d854:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    d858:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
    d85a:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    d85e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    d862:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    d866:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    d86a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    d86e:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    d872:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    d876:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    d87a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    d87e:	7b4b      	ldrb	r3, [r1, #13]
    d880:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    d884:	f7ff ff2e 	bl	d6e4 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
    d888:	4669      	mov	r1, sp
    d88a:	2206      	movs	r2, #6
    d88c:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    d890:	9400      	str	r4, [sp, #0]
    d892:	f8ad 4004 	strh.w	r4, [sp, #4]
    d896:	f7ff fe50 	bl	d53a <memcpy>
    d89a:	2206      	movs	r2, #6
    d89c:	4669      	mov	r1, sp
    d89e:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    d8a2:	9400      	str	r4, [sp, #0]
    d8a4:	f8ad 4004 	strh.w	r4, [sp, #4]
    d8a8:	f7ff fe47 	bl	d53a <memcpy>
	enh_conn_complete(&enh);
    d8ac:	a802      	add	r0, sp, #8
    d8ae:	f7f8 fa0f 	bl	5cd0 <enh_conn_complete>
}
    d8b2:	b00a      	add	sp, #40	; 0x28
    d8b4:	bd10      	pop	{r4, pc}

0000d8b6 <tx_notify>:
{
    d8b6:	b570      	push	{r4, r5, r6, lr}
    d8b8:	4604      	mov	r4, r0
	__asm__ volatile(
    d8ba:	f04f 0220 	mov.w	r2, #32
    d8be:	f3ef 8311 	mrs	r3, BASEPRI
    d8c2:	f382 8811 	msr	BASEPRI, r2
    d8c6:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    d8ca:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
    d8cc:	b920      	cbnz	r0, d8d8 <tx_notify+0x22>
	__asm__ volatile(
    d8ce:	f383 8811 	msr	BASEPRI, r3
    d8d2:	f3bf 8f6f 	isb	sy
}
    d8d6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d8d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d8da:	6802      	ldr	r2, [r0, #0]
    d8dc:	4288      	cmp	r0, r1
	list->tail = node;
    d8de:	bf08      	it	eq
    d8e0:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
    d8e2:	6222      	str	r2, [r4, #32]
    d8e4:	f383 8811 	msr	BASEPRI, r3
    d8e8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    d8ec:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
    d8f0:	f7f8 fb52 	bl	5f98 <tx_free>
		cb(conn, user_data);
    d8f4:	4631      	mov	r1, r6
    d8f6:	4620      	mov	r0, r4
    d8f8:	47a8      	blx	r5
	while (1) {
    d8fa:	e7de      	b.n	d8ba <tx_notify+0x4>

0000d8fc <tx_complete_work>:
	tx_notify(conn);
    d8fc:	3828      	subs	r0, #40	; 0x28
    d8fe:	f7ff bfda 	b.w	d8b6 <tx_notify>

0000d902 <bt_conn_new>:
{
    d902:	b538      	push	{r3, r4, r5, lr}
    d904:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    d906:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d908:	2501      	movs	r5, #1
    d90a:	428b      	cmp	r3, r1
    d90c:	d102      	bne.n	d914 <bt_conn_new+0x12>
		return NULL;
    d90e:	2400      	movs	r4, #0
}
    d910:	4620      	mov	r0, r4
    d912:	bd38      	pop	{r3, r4, r5, pc}
    d914:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    d918:	e8d2 0fef 	ldaex	r0, [r2]
    d91c:	2800      	cmp	r0, #0
    d91e:	d104      	bne.n	d92a <bt_conn_new+0x28>
    d920:	e8c2 5fec 	stlex	ip, r5, [r2]
    d924:	f1bc 0f00 	cmp.w	ip, #0
    d928:	d1f6      	bne.n	d918 <bt_conn_new+0x16>
    d92a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    d92e:	d002      	beq.n	d936 <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
    d930:	4604      	mov	r4, r0
    d932:	3301      	adds	r3, #1
    d934:	e7e9      	b.n	d90a <bt_conn_new+0x8>
	if (!conn) {
    d936:	2c00      	cmp	r4, #0
    d938:	d0ea      	beq.n	d910 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    d93a:	22b8      	movs	r2, #184	; 0xb8
    d93c:	2100      	movs	r1, #0
    d93e:	4620      	mov	r0, r4
    d940:	f7ff fe26 	bl	d590 <memset>
	return conn;
    d944:	e7e4      	b.n	d910 <bt_conn_new+0xe>

0000d946 <bt_conn_get_security>:
}
    d946:	2001      	movs	r0, #1
    d948:	4770      	bx	lr

0000d94a <bt_conn_reset_rx_state>:
{
    d94a:	b510      	push	{r4, lr}
    d94c:	4604      	mov	r4, r0
	if (!conn->rx) {
    d94e:	6900      	ldr	r0, [r0, #16]
    d950:	b118      	cbz	r0, d95a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
    d952:	f7fb fa33 	bl	8dbc <net_buf_unref>
	conn->rx = NULL;
    d956:	2300      	movs	r3, #0
    d958:	6123      	str	r3, [r4, #16]
}
    d95a:	bd10      	pop	{r4, pc}

0000d95c <bt_conn_is_peer_addr_le>:
{
    d95c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
    d95e:	7a03      	ldrb	r3, [r0, #8]
{
    d960:	4604      	mov	r4, r0
	if (id != conn->id) {
    d962:	428b      	cmp	r3, r1
{
    d964:	4615      	mov	r5, r2
	if (id != conn->id) {
    d966:	d115      	bne.n	d994 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
    d968:	f100 0188 	add.w	r1, r0, #136	; 0x88
    d96c:	2207      	movs	r2, #7
    d96e:	4628      	mov	r0, r5
    d970:	f7ff fdd3 	bl	d51a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    d974:	b180      	cbz	r0, d998 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    d976:	78e3      	ldrb	r3, [r4, #3]
    d978:	2207      	movs	r2, #7
    d97a:	b943      	cbnz	r3, d98e <bt_conn_is_peer_addr_le+0x32>
    d97c:	f104 0196 	add.w	r1, r4, #150	; 0x96
    d980:	4628      	mov	r0, r5
    d982:	f7ff fdca 	bl	d51a <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
    d986:	fab0 f080 	clz	r0, r0
    d98a:	0940      	lsrs	r0, r0, #5
}
    d98c:	bd38      	pop	{r3, r4, r5, pc}
    d98e:	f104 018f 	add.w	r1, r4, #143	; 0x8f
    d992:	e7f5      	b.n	d980 <bt_conn_is_peer_addr_le+0x24>
		return false;
    d994:	2000      	movs	r0, #0
    d996:	e7f9      	b.n	d98c <bt_conn_is_peer_addr_le+0x30>
		return true;
    d998:	2001      	movs	r0, #1
    d99a:	e7f7      	b.n	d98c <bt_conn_is_peer_addr_le+0x30>

0000d99c <bt_conn_ref>:
{
    d99c:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
    d99e:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d9a2:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
    d9a6:	b15b      	cbz	r3, d9c0 <bt_conn_ref+0x24>
	} while (!atomic_cas(&conn->ref, old, old + 1));
    d9a8:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d9aa:	e8d2 4fef 	ldaex	r4, [r2]
    d9ae:	429c      	cmp	r4, r3
    d9b0:	d104      	bne.n	d9bc <bt_conn_ref+0x20>
    d9b2:	e8c2 1fec 	stlex	ip, r1, [r2]
    d9b6:	f1bc 0f00 	cmp.w	ip, #0
    d9ba:	d1f6      	bne.n	d9aa <bt_conn_ref+0xe>
    d9bc:	d1f1      	bne.n	d9a2 <bt_conn_ref+0x6>
}
    d9be:	bd10      	pop	{r4, pc}
			return NULL;
    d9c0:	4618      	mov	r0, r3
    d9c2:	e7fc      	b.n	d9be <bt_conn_ref+0x22>

0000d9c4 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
    d9c4:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d9c6:	e8d0 3fef 	ldaex	r3, [r0]
    d9ca:	3b01      	subs	r3, #1
    d9cc:	e8c0 3fe2 	stlex	r2, r3, [r0]
    d9d0:	2a00      	cmp	r2, #0
    d9d2:	d1f8      	bne.n	d9c6 <bt_conn_unref+0x2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d9d4:	e8d0 3faf 	lda	r3, [r0]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    d9d8:	b90b      	cbnz	r3, d9de <bt_conn_unref+0x1a>
		bt_le_adv_resume();
    d9da:	f7f8 b943 	b.w	5c64 <bt_le_adv_resume>
}
    d9de:	4770      	bx	lr

0000d9e0 <conn_lookup_handle>:
{
    d9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d9e4:	4607      	mov	r7, r0
    d9e6:	460e      	mov	r6, r1
    d9e8:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
    d9ea:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
    d9ec:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
    d9f0:	42b4      	cmp	r4, r6
    d9f2:	d103      	bne.n	d9fc <conn_lookup_handle+0x1c>
	return NULL;
    d9f4:	2300      	movs	r3, #0
}
    d9f6:	4618      	mov	r0, r3
    d9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
    d9fc:	fb09 7004 	mla	r0, r9, r4, r7
    da00:	f7ff ffcc 	bl	d99c <bt_conn_ref>
    da04:	4603      	mov	r3, r0
		if (!conn) {
    da06:	b158      	cbz	r0, da20 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
    da08:	7a85      	ldrb	r5, [r0, #10]
    da0a:	2d01      	cmp	r5, #1
    da0c:	d002      	beq.n	da14 <conn_lookup_handle+0x34>
    da0e:	3d07      	subs	r5, #7
    da10:	2d01      	cmp	r5, #1
    da12:	d803      	bhi.n	da1c <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
    da14:	881a      	ldrh	r2, [r3, #0]
    da16:	4542      	cmp	r2, r8
    da18:	d0ed      	beq.n	d9f6 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
    da1a:	4618      	mov	r0, r3
    da1c:	f7ff ffd2 	bl	d9c4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
    da20:	3401      	adds	r4, #1
    da22:	e7e5      	b.n	d9f0 <conn_lookup_handle+0x10>

0000da24 <bt_conn_le_conn_update>:
{
    da24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da26:	4607      	mov	r7, r0
    da28:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    da2a:	f242 0013 	movw	r0, #8211	; 0x2013
    da2e:	210e      	movs	r1, #14
    da30:	f7f6 fd20 	bl	4474 <bt_hci_cmd_create>
	if (!buf) {
    da34:	4606      	mov	r6, r0
    da36:	b1d0      	cbz	r0, da6e <bt_conn_le_conn_update+0x4a>
    da38:	210e      	movs	r1, #14
    da3a:	3008      	adds	r0, #8
    da3c:	f001 f851 	bl	eae2 <net_buf_simple_add>
    da40:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
    da42:	220e      	movs	r2, #14
    da44:	2100      	movs	r1, #0
    da46:	f7ff fda3 	bl	d590 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    da4a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
    da4c:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    da4e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    da50:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
    da52:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    da54:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    da56:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
    da58:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    da5c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    da5e:	88ab      	ldrh	r3, [r5, #4]
    da60:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    da62:	88eb      	ldrh	r3, [r5, #6]
    da64:	8123      	strh	r3, [r4, #8]
}
    da66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
    da6a:	f7f6 bd3b 	b.w	44e4 <bt_hci_cmd_send_sync>
}
    da6e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    da72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000da74 <l2cap_connected>:
}
    da74:	4770      	bx	lr

0000da76 <l2cap_disconnected>:
    da76:	4770      	bx	lr

0000da78 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    da78:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
    da7a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    da7c:	b17b      	cbz	r3, da9e <bt_l2cap_chan_remove+0x26>
    da7e:	2200      	movs	r2, #0
    da80:	3b08      	subs	r3, #8
    da82:	b163      	cbz	r3, da9e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    da84:	428b      	cmp	r3, r1
    da86:	f103 0408 	add.w	r4, r3, #8
    da8a:	d10f      	bne.n	daac <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
    da8c:	688b      	ldr	r3, [r1, #8]
    da8e:	b93a      	cbnz	r2, daa0 <bt_l2cap_chan_remove+0x28>
    da90:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
    da92:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
    da94:	4294      	cmp	r4, r2
    da96:	d100      	bne.n	da9a <bt_l2cap_chan_remove+0x22>
	list->tail = node;
    da98:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
    da9a:	2300      	movs	r3, #0
    da9c:	608b      	str	r3, [r1, #8]
}
    da9e:	bd10      	pop	{r4, pc}
    daa0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    daa2:	6d03      	ldr	r3, [r0, #80]	; 0x50
    daa4:	429c      	cmp	r4, r3
	list->tail = node;
    daa6:	bf08      	it	eq
    daa8:	6502      	streq	r2, [r0, #80]	; 0x50
}
    daaa:	e7f6      	b.n	da9a <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    daac:	2c00      	cmp	r4, #0
    daae:	d0f6      	beq.n	da9e <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    dab0:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    dab2:	2b00      	cmp	r3, #0
    dab4:	d0f3      	beq.n	da9e <bt_l2cap_chan_remove+0x26>
    dab6:	4622      	mov	r2, r4
    dab8:	3b08      	subs	r3, #8
    daba:	e7e2      	b.n	da82 <bt_l2cap_chan_remove+0xa>

0000dabc <bt_l2cap_chan_del>:
{
    dabc:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
    dabe:	e9d0 3500 	ldrd	r3, r5, [r0]
{
    dac2:	4604      	mov	r4, r0
	if (!chan->conn) {
    dac4:	b123      	cbz	r3, dad0 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
    dac6:	686b      	ldr	r3, [r5, #4]
    dac8:	b103      	cbz	r3, dacc <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
    daca:	4798      	blx	r3
	chan->conn = NULL;
    dacc:	2300      	movs	r3, #0
    dace:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    dad0:	68e3      	ldr	r3, [r4, #12]
    dad2:	b10b      	cbz	r3, dad8 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
    dad4:	4620      	mov	r0, r4
    dad6:	4798      	blx	r3
	if (ops->released) {
    dad8:	69eb      	ldr	r3, [r5, #28]
    dada:	b11b      	cbz	r3, dae4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
    dadc:	4620      	mov	r0, r4
}
    dade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
    dae2:	4718      	bx	r3
}
    dae4:	bd70      	pop	{r4, r5, r6, pc}

0000dae6 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    dae6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
    dae8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    daea:	b18b      	cbz	r3, db10 <bt_l2cap_disconnected+0x2a>
    daec:	f1b3 0008 	subs.w	r0, r3, #8
    daf0:	d00e      	beq.n	db10 <bt_l2cap_disconnected+0x2a>
    daf2:	681c      	ldr	r4, [r3, #0]
    daf4:	b104      	cbz	r4, daf8 <bt_l2cap_disconnected+0x12>
    daf6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    daf8:	f7ff ffe0 	bl	dabc <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    dafc:	b144      	cbz	r4, db10 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    dafe:	f114 0308 	adds.w	r3, r4, #8
    db02:	d002      	beq.n	db0a <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    db04:	68a3      	ldr	r3, [r4, #8]
    db06:	b103      	cbz	r3, db0a <bt_l2cap_disconnected+0x24>
    db08:	3b08      	subs	r3, #8
{
    db0a:	4620      	mov	r0, r4
    db0c:	461c      	mov	r4, r3
    db0e:	e7f3      	b.n	daf8 <bt_l2cap_disconnected+0x12>
}
    db10:	bd10      	pop	{r4, pc}

0000db12 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
    db12:	3104      	adds	r1, #4
    db14:	f7f8 beaa 	b.w	686c <bt_conn_create_pdu_timeout>

0000db18 <bt_l2cap_send_cb>:
{
    db18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db1c:	4614      	mov	r4, r2
    db1e:	4605      	mov	r5, r0
    db20:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
    db22:	f102 0008 	add.w	r0, r2, #8
    db26:	2104      	movs	r1, #4
    db28:	461e      	mov	r6, r3
    db2a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    db2e:	f000 fff9 	bl	eb24 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    db32:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
    db34:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    db36:	3a04      	subs	r2, #4
    db38:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    db3a:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
    db3c:	4632      	mov	r2, r6
    db3e:	4621      	mov	r1, r4
    db40:	4628      	mov	r0, r5
}
    db42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
    db46:	f7f8 bbeb 	b.w	6320 <bt_conn_send_cb>

0000db4a <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    db4a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    db4c:	b160      	cbz	r0, db68 <bt_l2cap_le_lookup_tx_cid+0x1e>
    db4e:	3808      	subs	r0, #8
    db50:	b900      	cbnz	r0, db54 <bt_l2cap_le_lookup_tx_cid+0xa>
    db52:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    db54:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
    db58:	428b      	cmp	r3, r1
    db5a:	d005      	beq.n	db68 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    db5c:	f110 0308 	adds.w	r3, r0, #8
    db60:	d001      	beq.n	db66 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    db62:	6880      	ldr	r0, [r0, #8]
    db64:	e7f2      	b.n	db4c <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
    db66:	4618      	mov	r0, r3
}
    db68:	4770      	bx	lr

0000db6a <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    db6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    db6c:	b160      	cbz	r0, db88 <bt_l2cap_le_lookup_rx_cid+0x1e>
    db6e:	3808      	subs	r0, #8
    db70:	b900      	cbnz	r0, db74 <bt_l2cap_le_lookup_rx_cid+0xa>
    db72:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    db74:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    db78:	428b      	cmp	r3, r1
    db7a:	d005      	beq.n	db88 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    db7c:	f110 0308 	adds.w	r3, r0, #8
    db80:	d001      	beq.n	db86 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    db82:	6880      	ldr	r0, [r0, #8]
    db84:	e7f2      	b.n	db6c <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
    db86:	4618      	mov	r0, r3
}
    db88:	4770      	bx	lr

0000db8a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
    db8a:	4770      	bx	lr

0000db8c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
    db8c:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
    db8e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
    db90:	b128      	cbz	r0, db9e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    db92:	6859      	ldr	r1, [r3, #4]
    db94:	6802      	ldr	r2, [r0, #0]
    db96:	4288      	cmp	r0, r1
	list->head = node;
    db98:	601a      	str	r2, [r3, #0]
	list->tail = node;
    db9a:	bf08      	it	eq
    db9c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
    db9e:	4770      	bx	lr

0000dba0 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    dba0:	2200      	movs	r2, #0
    dba2:	4603      	mov	r3, r0
    dba4:	6800      	ldr	r0, [r0, #0]
    dba6:	b900      	cbnz	r0, dbaa <sys_slist_find_and_remove+0xa>
    dba8:	4770      	bx	lr
    dbaa:	4288      	cmp	r0, r1
    dbac:	d110      	bne.n	dbd0 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
    dbae:	6808      	ldr	r0, [r1, #0]
    dbb0:	b942      	cbnz	r2, dbc4 <sys_slist_find_and_remove+0x24>
    dbb2:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    dbb4:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    dbb6:	4291      	cmp	r1, r2
    dbb8:	d100      	bne.n	dbbc <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    dbba:	6058      	str	r0, [r3, #4]
	parent->next = child;
    dbbc:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    dbbe:	2001      	movs	r0, #1
	parent->next = child;
    dbc0:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    dbc2:	4770      	bx	lr
	parent->next = child;
    dbc4:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    dbc6:	6858      	ldr	r0, [r3, #4]
    dbc8:	4281      	cmp	r1, r0
	list->tail = node;
    dbca:	bf08      	it	eq
    dbcc:	605a      	streq	r2, [r3, #4]
}
    dbce:	e7f5      	b.n	dbbc <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    dbd0:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    dbd2:	6800      	ldr	r0, [r0, #0]
    dbd4:	e7e7      	b.n	dba6 <sys_slist_find_and_remove+0x6>

0000dbd6 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
    dbd6:	4603      	mov	r3, r0
	size_t bytes = 0;
    dbd8:	2000      	movs	r0, #0

	while (buf) {
    dbda:	b903      	cbnz	r3, dbde <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
    dbdc:	4770      	bx	lr
		bytes += buf->len;
    dbde:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    dbe0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    dbe2:	4410      	add	r0, r2
		buf = buf->frags;
    dbe4:	e7f9      	b.n	dbda <net_buf_frags_len+0x4>

0000dbe6 <att_sent>:
	if (chan->ops->sent) {
    dbe6:	684b      	ldr	r3, [r1, #4]
{
    dbe8:	4608      	mov	r0, r1
	if (chan->ops->sent) {
    dbea:	695b      	ldr	r3, [r3, #20]
    dbec:	b103      	cbz	r3, dbf0 <att_sent+0xa>
		chan->ops->sent(chan);
    dbee:	4718      	bx	r3
}
    dbf0:	4770      	bx	lr

0000dbf2 <attr_read_type_cb>:
{
    dbf2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
    dbf4:	68d4      	ldr	r4, [r2, #12]
    dbf6:	3102      	adds	r1, #2
    dbf8:	7823      	ldrb	r3, [r4, #0]
    dbfa:	b913      	cbnz	r3, dc02 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
    dbfc:	7021      	strb	r1, [r4, #0]
	return true;
    dbfe:	2001      	movs	r0, #1
    dc00:	e006      	b.n	dc10 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    dc02:	428b      	cmp	r3, r1
    dc04:	d0fb      	beq.n	dbfe <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
    dc06:	8983      	ldrh	r3, [r0, #12]
    dc08:	3b02      	subs	r3, #2
    dc0a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
    dc0c:	2000      	movs	r0, #0
    dc0e:	6110      	str	r0, [r2, #16]
}
    dc10:	bd10      	pop	{r4, pc}

0000dc12 <att_prepare_write_req>:
}
    dc12:	2006      	movs	r0, #6
    dc14:	4770      	bx	lr

0000dc16 <att_op_get_type>:
	switch (op) {
    dc16:	281e      	cmp	r0, #30
    dc18:	d816      	bhi.n	dc48 <att_op_get_type+0x32>
    dc1a:	b308      	cbz	r0, dc60 <att_op_get_type+0x4a>
    dc1c:	1e43      	subs	r3, r0, #1
    dc1e:	2b1d      	cmp	r3, #29
    dc20:	d81e      	bhi.n	dc60 <att_op_get_type+0x4a>
    dc22:	e8df f003 	tbb	[pc, r3]
    dc26:	2317      	.short	0x2317
    dc28:	23172317 	.word	0x23172317
    dc2c:	23172317 	.word	0x23172317
    dc30:	23172317 	.word	0x23172317
    dc34:	23172317 	.word	0x23172317
    dc38:	231d1d17 	.word	0x231d1d17
    dc3c:	1d172317 	.word	0x1d172317
    dc40:	0f1b1d19 	.word	0x0f1b1d19
    dc44:	2004      	movs	r0, #4
    dc46:	4770      	bx	lr
    dc48:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    dc4c:	2b52      	cmp	r3, #82	; 0x52
    dc4e:	d107      	bne.n	dc60 <att_op_get_type+0x4a>
		return ATT_COMMAND;
    dc50:	2000      	movs	r0, #0
}
    dc52:	4770      	bx	lr
		return ATT_RESPONSE;
    dc54:	2002      	movs	r0, #2
    dc56:	4770      	bx	lr
		return ATT_NOTIFICATION;
    dc58:	2003      	movs	r0, #3
    dc5a:	4770      	bx	lr
		return ATT_INDICATION;
    dc5c:	2005      	movs	r0, #5
    dc5e:	4770      	bx	lr
		return ATT_COMMAND;
    dc60:	f010 0f40 	tst.w	r0, #64	; 0x40
    dc64:	bf0c      	ite	eq
    dc66:	2006      	moveq	r0, #6
    dc68:	2000      	movne	r0, #0
    dc6a:	4770      	bx	lr
		return ATT_REQUEST;
    dc6c:	2001      	movs	r0, #1
    dc6e:	4770      	bx	lr

0000dc70 <att_notify_mult>:
{
    dc70:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
    dc72:	6803      	ldr	r3, [r0, #0]
    dc74:	898a      	ldrh	r2, [r1, #12]
    dc76:	6818      	ldr	r0, [r3, #0]
    dc78:	6889      	ldr	r1, [r1, #8]
    dc7a:	f7fa fea3 	bl	89c4 <bt_gatt_mult_notification>
}
    dc7e:	2000      	movs	r0, #0
    dc80:	bd08      	pop	{r3, pc}

0000dc82 <att_notify>:
{
    dc82:	b538      	push	{r3, r4, r5, lr}
    dc84:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
    dc86:	f101 0008 	add.w	r0, r1, #8
    dc8a:	460c      	mov	r4, r1
    dc8c:	f000 ff6b 	bl	eb66 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    dc90:	682d      	ldr	r5, [r5, #0]
    dc92:	4601      	mov	r1, r0
    dc94:	89a3      	ldrh	r3, [r4, #12]
    dc96:	6828      	ldr	r0, [r5, #0]
    dc98:	68a2      	ldr	r2, [r4, #8]
    dc9a:	f000 fe4c 	bl	e936 <bt_gatt_notification>
}
    dc9e:	2000      	movs	r0, #0
    dca0:	bd38      	pop	{r3, r4, r5, pc}

0000dca2 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
    dca2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
    dca4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    dca8:	2300      	movs	r3, #0
    dcaa:	461a      	mov	r2, r3
    dcac:	9300      	str	r3, [sp, #0]
    dcae:	f7fa fc51 	bl	8554 <bt_gatt_foreach_attr_type>
				  user_data);
}
    dcb2:	b005      	add	sp, #20
    dcb4:	f85d fb04 	ldr.w	pc, [sp], #4

0000dcb8 <att_chan_read>:
{
    dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcbc:	4680      	mov	r8, r0
    dcbe:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
    dcc0:	4610      	mov	r0, r2
{
    dcc2:	4699      	mov	r9, r3
    dcc4:	468b      	mov	fp, r1
    dcc6:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
    dcc8:	f7ff ff85 	bl	dbd6 <net_buf_frags_len>
    dccc:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
    dcd0:	4283      	cmp	r3, r0
    dcd2:	d97a      	bls.n	ddca <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
    dcd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
    dcd8:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
    dcda:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
    dcdc:	f000 fedf 	bl	ea9e <net_buf_frag_last>
	size_t len, total = 0;
    dce0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
    dce4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
    dce6:	4630      	mov	r0, r6
    dce8:	f7ff ff75 	bl	dbd6 <net_buf_frags_len>
    dcec:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    dcf0:	f105 0708 	add.w	r7, r5, #8
    dcf4:	1a24      	subs	r4, r4, r0
    dcf6:	4638      	mov	r0, r7
    dcf8:	f000 ff41 	bl	eb7e <net_buf_simple_tailroom>
    dcfc:	4284      	cmp	r4, r0
    dcfe:	d211      	bcs.n	dd24 <att_chan_read+0x6c>
    dd00:	4630      	mov	r0, r6
    dd02:	f7ff ff68 	bl	dbd6 <net_buf_frags_len>
    dd06:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
    dd0a:	1a24      	subs	r4, r4, r0
		if (!len) {
    dd0c:	bb34      	cbnz	r4, dd5c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
    dd0e:	79b0      	ldrb	r0, [r6, #6]
    dd10:	f7fa ff98 	bl	8c44 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    dd14:	2200      	movs	r2, #0
    dd16:	2300      	movs	r3, #0
    dd18:	f000 fe87 	bl	ea2a <net_buf_alloc_fixed>
			if (!frag) {
    dd1c:	4605      	mov	r5, r0
    dd1e:	b930      	cbnz	r0, dd2e <att_chan_read+0x76>
	return total;
    dd20:	4657      	mov	r7, sl
    dd22:	e02c      	b.n	dd7e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
    dd24:	4638      	mov	r0, r7
    dd26:	f000 ff2a 	bl	eb7e <net_buf_simple_tailroom>
    dd2a:	4604      	mov	r4, r0
    dd2c:	e7ee      	b.n	dd0c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
    dd2e:	4601      	mov	r1, r0
    dd30:	4630      	mov	r0, r6
    dd32:	f000 fec5 	bl	eac0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
    dd36:	4630      	mov	r0, r6
    dd38:	f7ff ff4d 	bl	dbd6 <net_buf_frags_len>
    dd3c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
    dd40:	f105 0708 	add.w	r7, r5, #8
    dd44:	1a24      	subs	r4, r4, r0
    dd46:	4638      	mov	r0, r7
    dd48:	f000 ff19 	bl	eb7e <net_buf_simple_tailroom>
    dd4c:	4284      	cmp	r4, r0
    dd4e:	d21a      	bcs.n	dd86 <att_chan_read+0xce>
    dd50:	4630      	mov	r0, r6
    dd52:	f7ff ff40 	bl	dbd6 <net_buf_frags_len>
    dd56:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
    dd5a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
    dd5c:	68a9      	ldr	r1, [r5, #8]
    dd5e:	89aa      	ldrh	r2, [r5, #12]
    dd60:	f8db 7004 	ldr.w	r7, [fp, #4]
    dd64:	440a      	add	r2, r1
    dd66:	9803      	ldr	r0, [sp, #12]
    dd68:	4659      	mov	r1, fp
    dd6a:	f8cd 9000 	str.w	r9, [sp]
    dd6e:	b2a3      	uxth	r3, r4
    dd70:	47b8      	blx	r7
		if (read < 0) {
    dd72:	1e07      	subs	r7, r0, #0
    dd74:	da0c      	bge.n	dd90 <att_chan_read+0xd8>
				return total;
    dd76:	f1ba 0f00 	cmp.w	sl, #0
    dd7a:	bf18      	it	ne
    dd7c:	4657      	movne	r7, sl
}
    dd7e:	4638      	mov	r0, r7
    dd80:	b005      	add	sp, #20
    dd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd86:	4638      	mov	r0, r7
    dd88:	f000 fef9 	bl	eb7e <net_buf_simple_tailroom>
    dd8c:	4604      	mov	r4, r0
    dd8e:	e7e5      	b.n	dd5c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
    dd90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dd92:	b993      	cbnz	r3, ddba <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
    dd94:	4639      	mov	r1, r7
    dd96:	f105 0008 	add.w	r0, r5, #8
    dd9a:	f000 fea2 	bl	eae2 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
    dd9e:	4630      	mov	r0, r6
    dda0:	f7ff ff19 	bl	dbd6 <net_buf_frags_len>
    dda4:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
    dda8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
    ddaa:	4283      	cmp	r3, r0
		total += read;
    ddac:	44ba      	add	sl, r7
		offset += read;
    ddae:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
    ddb2:	d9b5      	bls.n	dd20 <att_chan_read+0x68>
    ddb4:	42a7      	cmp	r7, r4
    ddb6:	d096      	beq.n	dce6 <att_chan_read+0x2e>
    ddb8:	e7b2      	b.n	dd20 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
    ddba:	4639      	mov	r1, r7
    ddbc:	4628      	mov	r0, r5
    ddbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ddc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ddc2:	4798      	blx	r3
    ddc4:	2800      	cmp	r0, #0
    ddc6:	d1e5      	bne.n	dd94 <att_chan_read+0xdc>
    ddc8:	e7aa      	b.n	dd20 <att_chan_read+0x68>
		return 0;
    ddca:	2700      	movs	r7, #0
    ddcc:	e7d7      	b.n	dd7e <att_chan_read+0xc6>

0000ddce <find_info_cb>:
{
    ddce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
    ddd0:	6893      	ldr	r3, [r2, #8]
{
    ddd2:	4605      	mov	r5, r0
    ddd4:	460e      	mov	r6, r1
    ddd6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
    ddd8:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
    ddda:	b963      	cbnz	r3, ddf6 <find_info_cb+0x28>
    dddc:	6850      	ldr	r0, [r2, #4]
    ddde:	2101      	movs	r1, #1
    dde0:	3008      	adds	r0, #8
    dde2:	f000 fe7e 	bl	eae2 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    dde6:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    dde8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    ddea:	781b      	ldrb	r3, [r3, #0]
    ddec:	2b00      	cmp	r3, #0
    ddee:	bf0c      	ite	eq
    ddf0:	2301      	moveq	r3, #1
    ddf2:	2302      	movne	r3, #2
    ddf4:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    ddf6:	68a3      	ldr	r3, [r4, #8]
    ddf8:	781b      	ldrb	r3, [r3, #0]
    ddfa:	2b01      	cmp	r3, #1
    ddfc:	d003      	beq.n	de06 <find_info_cb+0x38>
    ddfe:	2b02      	cmp	r3, #2
    de00:	d019      	beq.n	de36 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    de02:	2000      	movs	r0, #0
    de04:	e016      	b.n	de34 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    de06:	682b      	ldr	r3, [r5, #0]
    de08:	781b      	ldrb	r3, [r3, #0]
    de0a:	2b00      	cmp	r3, #0
    de0c:	d1f9      	bne.n	de02 <find_info_cb+0x34>
    de0e:	6860      	ldr	r0, [r4, #4]
    de10:	2104      	movs	r1, #4
    de12:	3008      	adds	r0, #8
    de14:	f000 fe65 	bl	eae2 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    de18:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    de1a:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    de1c:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
    de1e:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    de20:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
    de22:	6863      	ldr	r3, [r4, #4]
    de24:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
    de28:	899b      	ldrh	r3, [r3, #12]
    de2a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    de2c:	2804      	cmp	r0, #4
    de2e:	bf94      	ite	ls
    de30:	2000      	movls	r0, #0
    de32:	2001      	movhi	r0, #1
}
    de34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    de36:	682b      	ldr	r3, [r5, #0]
    de38:	781b      	ldrb	r3, [r3, #0]
    de3a:	2b02      	cmp	r3, #2
    de3c:	d1e1      	bne.n	de02 <find_info_cb+0x34>
    de3e:	6860      	ldr	r0, [r4, #4]
    de40:	2112      	movs	r1, #18
    de42:	3008      	adds	r0, #8
    de44:	f000 fe4d 	bl	eae2 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    de48:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    de4a:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    de4c:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
    de4e:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    de52:	3101      	adds	r1, #1
    de54:	f7ff fb71 	bl	d53a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
    de58:	6863      	ldr	r3, [r4, #4]
    de5a:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
    de5e:	899b      	ldrh	r3, [r3, #12]
    de60:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    de62:	2812      	cmp	r0, #18
    de64:	e7e3      	b.n	de2e <find_info_cb+0x60>

0000de66 <attr_read_group_cb>:
	if (!data->rsp->len) {
    de66:	68d0      	ldr	r0, [r2, #12]
    de68:	3104      	adds	r1, #4
    de6a:	7803      	ldrb	r3, [r0, #0]
    de6c:	b913      	cbnz	r3, de74 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
    de6e:	7001      	strb	r1, [r0, #0]
	return true;
    de70:	2001      	movs	r0, #1
}
    de72:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    de74:	428b      	cmp	r3, r1
    de76:	d0fb      	beq.n	de70 <attr_read_group_cb+0xa>
		data->group = NULL;
    de78:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
    de7a:	6891      	ldr	r1, [r2, #8]
    de7c:	898b      	ldrh	r3, [r1, #12]
    de7e:	3b04      	subs	r3, #4
    de80:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
    de82:	6110      	str	r0, [r2, #16]
		return false;
    de84:	4770      	bx	lr

0000de86 <bt_att_chan_send>:
{
    de86:	b570      	push	{r4, r5, r6, lr}
    de88:	4604      	mov	r4, r0
    de8a:	460e      	mov	r6, r1
	if (!cb) {
    de8c:	4615      	mov	r5, r2
    de8e:	b132      	cbz	r2, de9e <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
    de90:	462a      	mov	r2, r5
    de92:	4631      	mov	r1, r6
    de94:	4620      	mov	r0, r4
}
    de96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
    de9a:	f7f9 b8f5 	b.w	7088 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
    de9e:	2200      	movs	r2, #0
    dea0:	2300      	movs	r3, #0
    dea2:	f500 7088 	add.w	r0, r0, #272	; 0x110
    dea6:	f7fd f919 	bl	b0dc <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
    deaa:	2800      	cmp	r0, #0
    deac:	daf0      	bge.n	de90 <bt_att_chan_send+0xa>
}
    deae:	f06f 000a 	mvn.w	r0, #10
    deb2:	bd70      	pop	{r4, r5, r6, pc}

0000deb4 <bt_att_chan_send_rsp>:
{
    deb4:	b538      	push	{r3, r4, r5, lr}
    deb6:	4604      	mov	r4, r0
    deb8:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
    deba:	f7ff ffe4 	bl	de86 <bt_att_chan_send>
	if (err) {
    debe:	b130      	cbz	r0, dece <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
    dec0:	4629      	mov	r1, r5
    dec2:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
    dec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    deca:	f000 bdd7 	b.w	ea7c <net_buf_put>
}
    dece:	bd38      	pop	{r3, r4, r5, pc}

0000ded0 <process_queue>:
{
    ded0:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
    ded2:	2200      	movs	r2, #0
{
    ded4:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
    ded6:	2300      	movs	r3, #0
    ded8:	4608      	mov	r0, r1
{
    deda:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
    dedc:	f000 fdaa 	bl	ea34 <net_buf_get>
	if (buf) {
    dee0:	4605      	mov	r5, r0
    dee2:	b160      	cbz	r0, defe <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
    dee4:	4601      	mov	r1, r0
    dee6:	2200      	movs	r2, #0
    dee8:	4620      	mov	r0, r4
    deea:	f7f9 f8cd 	bl	7088 <chan_send>
		if (err) {
    deee:	4604      	mov	r4, r0
    def0:	b118      	cbz	r0, defa <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
    def2:	4629      	mov	r1, r5
    def4:	4630      	mov	r0, r6
    def6:	f001 fc96 	bl	f826 <k_queue_prepend>
}
    defa:	4620      	mov	r0, r4
    defc:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
    defe:	f06f 0401 	mvn.w	r4, #1
    df02:	e7fa      	b.n	defa <process_queue+0x2a>

0000df04 <att_exec_write_req>:
    df04:	2006      	movs	r0, #6
    df06:	4770      	bx	lr

0000df08 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    df08:	30c0      	adds	r0, #192	; 0xc0
    df0a:	e8d0 3fef 	ldaex	r3, [r0]
    df0e:	f023 0301 	bic.w	r3, r3, #1
    df12:	e8c0 3fe2 	stlex	r2, r3, [r0]
    df16:	2a00      	cmp	r2, #0
    df18:	d1f7      	bne.n	df0a <chan_rsp_sent+0x2>
}
    df1a:	4770      	bx	lr

0000df1c <chan_cfm_sent>:
    df1c:	30c0      	adds	r0, #192	; 0xc0
    df1e:	e8d0 3fef 	ldaex	r3, [r0]
    df22:	f023 0302 	bic.w	r3, r3, #2
    df26:	e8c0 3fe2 	stlex	r2, r3, [r0]
    df2a:	2a00      	cmp	r2, #0
    df2c:	d1f7      	bne.n	df1e <chan_cfm_sent+0x2>
}
    df2e:	4770      	bx	lr

0000df30 <chan_req_send>:
{
    df30:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
    df32:	690e      	ldr	r6, [r1, #16]
{
    df34:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
    df36:	4630      	mov	r0, r6
{
    df38:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
    df3a:	f7ff fe4c 	bl	dbd6 <net_buf_frags_len>
    df3e:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
    df42:	4283      	cmp	r3, r0
    df44:	d317      	bcc.n	df76 <chan_req_send+0x46>
	chan->req = req;
    df46:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
    df4a:	f106 0008 	add.w	r0, r6, #8
    df4e:	f000 fe12 	bl	eb76 <net_buf_simple_headroom>
	state->len = buf->len;
    df52:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    df54:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    df56:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
    df58:	6920      	ldr	r0, [r4, #16]
    df5a:	f000 fd9c 	bl	ea96 <net_buf_ref>
    df5e:	2200      	movs	r2, #0
    df60:	4601      	mov	r1, r0
    df62:	4628      	mov	r0, r5
    df64:	f7f9 f890 	bl	7088 <chan_send>
	if (err) {
    df68:	4605      	mov	r5, r0
    df6a:	b110      	cbz	r0, df72 <chan_req_send+0x42>
		net_buf_unref(req->buf);
    df6c:	6920      	ldr	r0, [r4, #16]
    df6e:	f7fa ff25 	bl	8dbc <net_buf_unref>
}
    df72:	4628      	mov	r0, r5
    df74:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
    df76:	f06f 0523 	mvn.w	r5, #35	; 0x23
    df7a:	e7fa      	b.n	df72 <chan_req_send+0x42>

0000df7c <bt_att_chan_req_send>:
{
    df7c:	b570      	push	{r4, r5, r6, lr}
    df7e:	4604      	mov	r4, r0
    df80:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
    df82:	f500 7688 	add.w	r6, r0, #272	; 0x110
    df86:	2200      	movs	r2, #0
    df88:	2300      	movs	r3, #0
    df8a:	4630      	mov	r0, r6
    df8c:	f7fd f8a6 	bl	b0dc <z_impl_k_sem_take>
    df90:	2800      	cmp	r0, #0
    df92:	db0a      	blt.n	dfaa <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
    df94:	4620      	mov	r0, r4
    df96:	4629      	mov	r1, r5
    df98:	f7ff ffca 	bl	df30 <chan_req_send>
	if (err < 0) {
    df9c:	1e04      	subs	r4, r0, #0
    df9e:	da02      	bge.n	dfa6 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
    dfa0:	4630      	mov	r0, r6
    dfa2:	f7fd f875 	bl	b090 <z_impl_k_sem_give>
}
    dfa6:	4620      	mov	r0, r4
    dfa8:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    dfaa:	f06f 040a 	mvn.w	r4, #10
    dfae:	e7fa      	b.n	dfa6 <bt_att_chan_req_send+0x2a>

0000dfb0 <bt_att_status>:
{
    dfb0:	b538      	push	{r3, r4, r5, lr}
    dfb2:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dfb4:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
    dfb8:	07db      	lsls	r3, r3, #31
    dfba:	d519      	bpl.n	dff0 <bt_att_status+0x40>
	if (!chan->att) {
    dfbc:	f850 0c08 	ldr.w	r0, [r0, #-8]
    dfc0:	b1b0      	cbz	r0, dff0 <bt_att_status+0x40>
	if (chan->req) {
    dfc2:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    dfc6:	b99b      	cbnz	r3, dff0 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
    dfc8:	3004      	adds	r0, #4
    dfca:	f7ff fddf 	bl	db8c <sys_slist_get>
	if (!node) {
    dfce:	4604      	mov	r4, r0
    dfd0:	b170      	cbz	r0, dff0 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    dfd2:	4601      	mov	r1, r0
    dfd4:	f1a5 0008 	sub.w	r0, r5, #8
    dfd8:	f7ff ffd0 	bl	df7c <bt_att_chan_req_send>
    dfdc:	2800      	cmp	r0, #0
    dfde:	da07      	bge.n	dff0 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
    dfe0:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
    dfe4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    dfe6:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    dfe8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    dfea:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    dfec:	b902      	cbnz	r2, dff0 <bt_att_status+0x40>
	list->tail = node;
    dfee:	609c      	str	r4, [r3, #8]
}
    dff0:	bd38      	pop	{r3, r4, r5, pc}

0000dff2 <att_req_send_process>:
{
    dff2:	b570      	push	{r4, r5, r6, lr}
    dff4:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
    dff6:	3004      	adds	r0, #4
    dff8:	f7ff fdc8 	bl	db8c <sys_slist_get>
	if (!node) {
    dffc:	4606      	mov	r6, r0
    dffe:	b1c0      	cbz	r0, e032 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    e000:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e002:	b153      	cbz	r3, e01a <att_req_send_process+0x28>
    e004:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    e008:	d007      	beq.n	e01a <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e00a:	681c      	ldr	r4, [r3, #0]
    e00c:	b10c      	cbz	r4, e012 <att_req_send_process+0x20>
    e00e:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
		if (!chan->req) {
    e012:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    e016:	b13b      	cbz	r3, e028 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    e018:	b964      	cbnz	r4, e034 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
    e01a:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    e01c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    e01e:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
    e020:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    e022:	b933      	cbnz	r3, e032 <att_req_send_process+0x40>
	list->tail = node;
    e024:	60ae      	str	r6, [r5, #8]
}
    e026:	e004      	b.n	e032 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    e028:	4631      	mov	r1, r6
    e02a:	f7ff ffa7 	bl	df7c <bt_att_chan_req_send>
    e02e:	2800      	cmp	r0, #0
    e030:	dbf2      	blt.n	e018 <att_req_send_process+0x26>
}
    e032:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    e034:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
    e038:	d004      	beq.n	e044 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e03a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    e03e:	b10b      	cbz	r3, e044 <att_req_send_process+0x52>
    e040:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
    e044:	4620      	mov	r0, r4
    e046:	461c      	mov	r4, r3
    e048:	e7e3      	b.n	e012 <att_req_send_process+0x20>

0000e04a <write_cb>:
{
    e04a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e04c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
    e04e:	4601      	mov	r1, r0
{
    e050:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    e052:	222a      	movs	r2, #42	; 0x2a
    e054:	6820      	ldr	r0, [r4, #0]
    e056:	f000 fbd2 	bl	e7fe <bt_gatt_check_perm>
    e05a:	4605      	mov	r5, r0
    e05c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    e05e:	bb00      	cbnz	r0, e0a2 <write_cb+0x58>
	if (!data->req) {
    e060:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
    e062:	4631      	mov	r1, r6
	if (!data->req) {
    e064:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
    e066:	bf14      	ite	ne
    e068:	2300      	movne	r3, #0
    e06a:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
    e06c:	9301      	str	r3, [sp, #4]
    e06e:	8a63      	ldrh	r3, [r4, #18]
    e070:	68b7      	ldr	r7, [r6, #8]
    e072:	9300      	str	r3, [sp, #0]
    e074:	68e2      	ldr	r2, [r4, #12]
    e076:	8a23      	ldrh	r3, [r4, #16]
    e078:	6820      	ldr	r0, [r4, #0]
    e07a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    e07c:	1e03      	subs	r3, r0, #0
    e07e:	db05      	blt.n	e08c <write_cb+0x42>
    e080:	8a22      	ldrh	r2, [r4, #16]
    e082:	4293      	cmp	r3, r2
    e084:	d10b      	bne.n	e09e <write_cb+0x54>
	data->err = 0U;
    e086:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    e088:	2501      	movs	r5, #1
    e08a:	e005      	b.n	e098 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
    e08c:	f113 0fff 	cmn.w	r3, #255	; 0xff
    e090:	d305      	bcc.n	e09e <write_cb+0x54>
		return -err;
    e092:	425b      	negs	r3, r3
    e094:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
    e096:	7523      	strb	r3, [r4, #20]
}
    e098:	4628      	mov	r0, r5
    e09a:	b003      	add	sp, #12
    e09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
    e09e:	230e      	movs	r3, #14
    e0a0:	e7f9      	b.n	e096 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
    e0a2:	2500      	movs	r5, #0
    e0a4:	e7f8      	b.n	e098 <write_cb+0x4e>

0000e0a6 <bt_att_sent>:
{
    e0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
    e0a8:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
{
    e0ac:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
    e0ae:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
    e0b2:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
    e0b6:	b10b      	cbz	r3, e0bc <bt_att_sent+0x16>
		chan->sent(chan);
    e0b8:	4638      	mov	r0, r7
    e0ba:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e0bc:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
    e0c0:	e8d3 2fef 	ldaex	r2, [r3]
    e0c4:	f022 0210 	bic.w	r2, r2, #16
    e0c8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e0cc:	2900      	cmp	r1, #0
    e0ce:	d1f7      	bne.n	e0c0 <bt_att_sent+0x1a>
	if (!att) {
    e0d0:	b335      	cbz	r5, e120 <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
    e0d2:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    e0d6:	b98b      	cbnz	r3, e0fc <bt_att_sent+0x56>
    e0d8:	686b      	ldr	r3, [r5, #4]
    e0da:	b17b      	cbz	r3, e0fc <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
    e0dc:	1d28      	adds	r0, r5, #4
    e0de:	f7ff fd55 	bl	db8c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
    e0e2:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
    e0e4:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
    e0e6:	4638      	mov	r0, r7
    e0e8:	f7ff ff22 	bl	df30 <chan_req_send>
    e0ec:	2800      	cmp	r0, #0
    e0ee:	da17      	bge.n	e120 <bt_att_sent+0x7a>
Z_GENLIST_PREPEND(slist, snode)
    e0f0:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    e0f2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    e0f4:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
    e0f6:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    e0f8:	b903      	cbnz	r3, e0fc <bt_att_sent+0x56>
	list->tail = node;
    e0fa:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
    e0fc:	4638      	mov	r0, r7
    e0fe:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
    e102:	f7ff fee5 	bl	ded0 <process_queue>
	if (!err) {
    e106:	b158      	cbz	r0, e120 <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
    e108:	4638      	mov	r0, r7
    e10a:	f105 010c 	add.w	r1, r5, #12
    e10e:	f7ff fedf 	bl	ded0 <process_queue>
	if (!err) {
    e112:	b128      	cbz	r0, e120 <bt_att_sent+0x7a>
    e114:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
    e118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e11c:	f7fc bfb8 	b.w	b090 <z_impl_k_sem_give>
    e120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e122 <read_cb>:
{
    e122:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e126:	4606      	mov	r6, r0
	data->err = 0x00;
    e128:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
    e12a:	f8d2 8000 	ldr.w	r8, [r2]
{
    e12e:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
    e130:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    e134:	4631      	mov	r1, r6
	data->err = 0x00;
    e136:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    e138:	2215      	movs	r2, #21
    e13a:	f000 fb60 	bl	e7fe <bt_gatt_check_perm>
    e13e:	4604      	mov	r4, r0
    e140:	7328      	strb	r0, [r5, #12]
	if (data->err) {
    e142:	b9a0      	cbnz	r0, e16e <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
    e144:	e9cd 0000 	strd	r0, r0, [sp]
    e148:	88ab      	ldrh	r3, [r5, #4]
    e14a:	4631      	mov	r1, r6
    e14c:	4640      	mov	r0, r8
    e14e:	68aa      	ldr	r2, [r5, #8]
    e150:	f7ff fdb2 	bl	dcb8 <att_chan_read>
	if (ret < 0) {
    e154:	1e03      	subs	r3, r0, #0
    e156:	da0c      	bge.n	e172 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
    e158:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    e15c:	bf32      	itee	cc
    e15e:	230e      	movcc	r3, #14
		return -err;
    e160:	425b      	negcs	r3, r3
    e162:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
    e164:	732b      	strb	r3, [r5, #12]
}
    e166:	4620      	mov	r0, r4
    e168:	b002      	add	sp, #8
    e16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
    e16e:	463c      	mov	r4, r7
    e170:	e7f9      	b.n	e166 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
    e172:	2401      	movs	r4, #1
    e174:	e7f7      	b.n	e166 <read_cb+0x44>

0000e176 <att_read_blob_req>:
{
    e176:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    e178:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
    e17a:	210c      	movs	r1, #12
    e17c:	8813      	ldrh	r3, [r2, #0]
    e17e:	8852      	ldrh	r2, [r2, #2]
    e180:	9200      	str	r2, [sp, #0]
    e182:	220d      	movs	r2, #13
    e184:	f7f9 fba4 	bl	78d0 <att_read_rsp>
}
    e188:	b003      	add	sp, #12
    e18a:	f85d fb04 	ldr.w	pc, [sp], #4

0000e18e <att_read_req>:
{
    e18e:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    e190:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
    e192:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    e194:	210a      	movs	r1, #10
    e196:	881b      	ldrh	r3, [r3, #0]
    e198:	9200      	str	r2, [sp, #0]
    e19a:	220b      	movs	r2, #11
    e19c:	f7f9 fb98 	bl	78d0 <att_read_rsp>
}
    e1a0:	b003      	add	sp, #12
    e1a2:	f85d fb04 	ldr.w	pc, [sp], #4

0000e1a6 <bt_att_init>:
	bt_gatt_init();
    e1a6:	f7fa b953 	b.w	8450 <bt_gatt_init>

0000e1aa <att_req_destroy>:
{
    e1aa:	b510      	push	{r4, lr}
    e1ac:	4604      	mov	r4, r0
	if (req->buf) {
    e1ae:	6900      	ldr	r0, [r0, #16]
    e1b0:	b108      	cbz	r0, e1b6 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    e1b2:	f7fa fe03 	bl	8dbc <net_buf_unref>
	if (req->destroy) {
    e1b6:	68a3      	ldr	r3, [r4, #8]
    e1b8:	b10b      	cbz	r3, e1be <att_req_destroy+0x14>
		req->destroy(req);
    e1ba:	4620      	mov	r0, r4
    e1bc:	4798      	blx	r3
	bt_att_req_free(req);
    e1be:	4620      	mov	r0, r4
}
    e1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
    e1c4:	f7f9 bd22 	b.w	7c0c <bt_att_req_free>

0000e1c8 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
    e1c8:	898a      	ldrh	r2, [r1, #12]
    e1ca:	2300      	movs	r3, #0
    e1cc:	6889      	ldr	r1, [r1, #8]
    e1ce:	f7f9 bd29 	b.w	7c24 <att_handle_rsp>

0000e1d2 <att_handle_find_type_rsp>:
    e1d2:	f7ff bff9 	b.w	e1c8 <att_handle_find_info_rsp>

0000e1d6 <att_handle_read_type_rsp>:
    e1d6:	f7ff bff7 	b.w	e1c8 <att_handle_find_info_rsp>

0000e1da <att_handle_read_rsp>:
    e1da:	f7ff bff5 	b.w	e1c8 <att_handle_find_info_rsp>

0000e1de <att_handle_read_blob_rsp>:
    e1de:	f7ff bff3 	b.w	e1c8 <att_handle_find_info_rsp>

0000e1e2 <att_handle_read_mult_rsp>:
    e1e2:	f7ff bff1 	b.w	e1c8 <att_handle_find_info_rsp>

0000e1e6 <att_handle_read_group_rsp>:
    e1e6:	f7ff bfef 	b.w	e1c8 <att_handle_find_info_rsp>

0000e1ea <att_handle_write_rsp>:
    e1ea:	f7ff bfed 	b.w	e1c8 <att_handle_find_info_rsp>

0000e1ee <att_handle_prepare_write_rsp>:
    e1ee:	f7ff bfeb 	b.w	e1c8 <att_handle_find_info_rsp>

0000e1f2 <att_handle_exec_write_rsp>:
    e1f2:	f7ff bfe9 	b.w	e1c8 <att_handle_find_info_rsp>

0000e1f6 <att_confirm>:
    e1f6:	f7ff bfe7 	b.w	e1c8 <att_handle_find_info_rsp>

0000e1fa <att_mtu_rsp>:
{
    e1fa:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    e1fc:	6889      	ldr	r1, [r1, #8]
{
    e1fe:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    e200:	880c      	ldrh	r4, [r1, #0]
{
    e202:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    e204:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
    e206:	bf89      	itett	hi
    e208:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    e20a:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
    e20c:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    e210:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    e214:	bf99      	ittee	ls
    e216:	2304      	movls	r3, #4
    e218:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
    e21a:	2300      	movhi	r3, #0
    e21c:	8992      	ldrhhi	r2, [r2, #12]
}
    e21e:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
    e220:	f7f9 bd00 	b.w	7c24 <att_handle_rsp>

0000e224 <att_chan_detach>:
{
    e224:	b538      	push	{r3, r4, r5, lr}
    e226:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    e228:	6800      	ldr	r0, [r0, #0]
    e22a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
    e22e:	3024      	adds	r0, #36	; 0x24
    e230:	f7ff fcb6 	bl	dba0 <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
    e234:	f504 7588 	add.w	r5, r4, #272	; 0x110
    e238:	4628      	mov	r0, r5
    e23a:	f7fc ff29 	bl	b090 <z_impl_k_sem_give>
    e23e:	4628      	mov	r0, r5
    e240:	f7fc ff26 	bl	b090 <z_impl_k_sem_give>
    e244:	4628      	mov	r0, r5
    e246:	f7fc ff23 	bl	b090 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    e24a:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    e24e:	2200      	movs	r2, #0
    e250:	2300      	movs	r3, #0
    e252:	4628      	mov	r0, r5
    e254:	f000 fbee 	bl	ea34 <net_buf_get>
    e258:	4602      	mov	r2, r0
    e25a:	b950      	cbnz	r0, e272 <att_chan_detach+0x4e>
	if (chan->req) {
    e25c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    e260:	b123      	cbz	r3, e26c <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    e262:	4601      	mov	r1, r0
    e264:	230e      	movs	r3, #14
    e266:	4620      	mov	r0, r4
    e268:	f7f9 fcdc 	bl	7c24 <att_handle_rsp>
	chan->att = NULL;
    e26c:	2300      	movs	r3, #0
    e26e:	6023      	str	r3, [r4, #0]
}
    e270:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
    e272:	f7fa fda3 	bl	8dbc <net_buf_unref>
    e276:	e7ea      	b.n	e24e <att_chan_detach+0x2a>

0000e278 <bt_att_disconnected>:
{
    e278:	b538      	push	{r3, r4, r5, lr}
    e27a:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
    e27c:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
    e280:	f7ff ffd0 	bl	e224 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    e284:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e286:	b93b      	cbnz	r3, e298 <bt_att_disconnected+0x20>
	att_reset(att);
    e288:	4628      	mov	r0, r5
    e28a:	f7f9 fd31 	bl	7cf0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    e28e:	6820      	ldr	r0, [r4, #0]
}
    e290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
    e294:	f7fa bc4e 	b.w	8b34 <bt_gatt_disconnected>
}
    e298:	bd38      	pop	{r3, r4, r5, pc}

0000e29a <bt_att_send>:
{
    e29a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e29e:	4607      	mov	r7, r0
    e2a0:	460d      	mov	r5, r1
    e2a2:	4616      	mov	r6, r2
    e2a4:	4698      	mov	r8, r3
	att = att_get(conn);
    e2a6:	f7f8 ff65 	bl	7174 <att_get>
	if (!att) {
    e2aa:	4604      	mov	r4, r0
    e2ac:	b938      	cbnz	r0, e2be <bt_att_send+0x24>
		net_buf_unref(buf);
    e2ae:	4628      	mov	r0, r5
    e2b0:	f7fa fd84 	bl	8dbc <net_buf_unref>
		return -ENOTCONN;
    e2b4:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    e2b8:	b002      	add	sp, #8
    e2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
    e2be:	b146      	cbz	r6, e2d2 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
    e2c0:	4633      	mov	r3, r6
    e2c2:	462a      	mov	r2, r5
    e2c4:	2104      	movs	r1, #4
    e2c6:	4638      	mov	r0, r7
    e2c8:	f8cd 8000 	str.w	r8, [sp]
    e2cc:	f7ff fc24 	bl	db18 <bt_l2cap_send_cb>
    e2d0:	e7f2      	b.n	e2b8 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
    e2d2:	f100 060c 	add.w	r6, r0, #12
    e2d6:	4629      	mov	r1, r5
    e2d8:	4630      	mov	r0, r6
    e2da:	f000 fbcf 	bl	ea7c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
    e2de:	2200      	movs	r2, #0
    e2e0:	2300      	movs	r3, #0
    e2e2:	4630      	mov	r0, r6
    e2e4:	f000 fba6 	bl	ea34 <net_buf_get>
	if (!buf) {
    e2e8:	4605      	mov	r5, r0
    e2ea:	b908      	cbnz	r0, e2f0 <bt_att_send+0x56>
	return 0;
    e2ec:	2000      	movs	r0, #0
    e2ee:	e7e3      	b.n	e2b8 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    e2f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e2f2:	b1c3      	cbz	r3, e326 <bt_att_send+0x8c>
    e2f4:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    e2f8:	d015      	beq.n	e326 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e2fa:	681c      	ldr	r4, [r3, #0]
    e2fc:	b10c      	cbz	r4, e302 <bt_att_send+0x68>
    e2fe:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
		err = bt_att_chan_send(chan, buf, NULL);
    e302:	2200      	movs	r2, #0
    e304:	4629      	mov	r1, r5
    e306:	f7ff fdbe 	bl	de86 <bt_att_chan_send>
		if (err >= 0) {
    e30a:	2800      	cmp	r0, #0
    e30c:	daee      	bge.n	e2ec <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    e30e:	b154      	cbz	r4, e326 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e310:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
    e314:	d004      	beq.n	e320 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e316:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
    e31a:	b10b      	cbz	r3, e320 <bt_att_send+0x86>
    e31c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
    e320:	4620      	mov	r0, r4
    e322:	461c      	mov	r4, r3
    e324:	e7ed      	b.n	e302 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
    e326:	4629      	mov	r1, r5
    e328:	4630      	mov	r0, r6
    e32a:	f001 fa7c 	bl	f826 <k_queue_prepend>
    e32e:	e7dd      	b.n	e2ec <bt_att_send+0x52>

0000e330 <bt_att_req_send>:
{
    e330:	b538      	push	{r3, r4, r5, lr}
    e332:	460d      	mov	r5, r1
	att = att_get(conn);
    e334:	f7f8 ff1e 	bl	7174 <att_get>
	if (!att) {
    e338:	4604      	mov	r4, r0
    e33a:	b930      	cbnz	r0, e34a <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
    e33c:	6928      	ldr	r0, [r5, #16]
    e33e:	f7fa fd3d 	bl	8dbc <net_buf_unref>
		return -ENOTCONN;
    e342:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
    e346:	612c      	str	r4, [r5, #16]
}
    e348:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    e34a:	2300      	movs	r3, #0
    e34c:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    e34e:	6883      	ldr	r3, [r0, #8]
    e350:	b933      	cbnz	r3, e360 <bt_att_req_send+0x30>
	list->head = node;
    e352:	e9c0 5501 	strd	r5, r5, [r0, #4]
	att_req_send_process(att);
    e356:	4620      	mov	r0, r4
    e358:	f7ff fe4b 	bl	dff2 <att_req_send_process>
	return 0;
    e35c:	2000      	movs	r0, #0
    e35e:	e7f3      	b.n	e348 <bt_att_req_send+0x18>
	parent->next = child;
    e360:	601d      	str	r5, [r3, #0]
	list->tail = node;
    e362:	6085      	str	r5, [r0, #8]
}
    e364:	e7f7      	b.n	e356 <bt_att_req_send+0x26>

0000e366 <gatt_ccc_changed>:
{
    e366:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
    e368:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
    e36a:	895a      	ldrh	r2, [r3, #10]
    e36c:	428a      	cmp	r2, r1
    e36e:	d003      	beq.n	e378 <gatt_ccc_changed+0x12>
		ccc->value = value;
    e370:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
    e372:	68db      	ldr	r3, [r3, #12]
    e374:	b103      	cbz	r3, e378 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
    e376:	4718      	bx	r3
}
    e378:	4770      	bx	lr

0000e37a <gatt_indicate_rsp>:
{
    e37a:	b510      	push	{r4, lr}
    e37c:	9c02      	ldr	r4, [sp, #8]
    e37e:	460a      	mov	r2, r1
	params->_ref--;
    e380:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
    e382:	4621      	mov	r1, r4
	params->_ref--;
    e384:	3b01      	subs	r3, #1
    e386:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
    e388:	68a3      	ldr	r3, [r4, #8]
    e38a:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
    e38c:	68e3      	ldr	r3, [r4, #12]
    e38e:	b12b      	cbz	r3, e39c <gatt_indicate_rsp+0x22>
    e390:	7da2      	ldrb	r2, [r4, #22]
    e392:	b91a      	cbnz	r2, e39c <gatt_indicate_rsp+0x22>
		params->destroy(params);
    e394:	4620      	mov	r0, r4
}
    e396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
    e39a:	4718      	bx	r3
}
    e39c:	bd10      	pop	{r4, pc}

0000e39e <match_uuid>:
	data->attr = attr;
    e39e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
    e3a0:	8091      	strh	r1, [r2, #4]
}
    e3a2:	2000      	movs	r0, #0
    e3a4:	4770      	bx	lr

0000e3a6 <gen_hash_m>:
{
    e3a6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
    e3a8:	6807      	ldr	r7, [r0, #0]
{
    e3aa:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
    e3ac:	783d      	ldrb	r5, [r7, #0]
{
    e3ae:	4614      	mov	r4, r2
    e3b0:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
    e3b2:	b10d      	cbz	r5, e3b8 <gen_hash_m+0x12>
	switch (u16->val) {
    e3b4:	2501      	movs	r5, #1
    e3b6:	e014      	b.n	e3e2 <gen_hash_m+0x3c>
    e3b8:	887b      	ldrh	r3, [r7, #2]
    e3ba:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
    e3be:	d004      	beq.n	e3ca <gen_hash_m+0x24>
    e3c0:	d812      	bhi.n	e3e8 <gen_hash_m+0x42>
    e3c2:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
    e3c6:	2b03      	cmp	r3, #3
    e3c8:	d8f4      	bhi.n	e3b4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
    e3ca:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    e3ce:	2202      	movs	r2, #2
    e3d0:	4620      	mov	r0, r4
    e3d2:	f10d 010e 	add.w	r1, sp, #14
    e3d6:	f7fe fd61 	bl	ce9c <tc_cmac_update>
    e3da:	b9e0      	cbnz	r0, e416 <gen_hash_m+0x70>
			state->err = -EINVAL;
    e3dc:	f06f 0315 	mvn.w	r3, #21
    e3e0:	65a3      	str	r3, [r4, #88]	; 0x58
}
    e3e2:	4628      	mov	r0, r5
    e3e4:	b009      	add	sp, #36	; 0x24
    e3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
    e3e8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
    e3ec:	33ff      	adds	r3, #255	; 0xff
    e3ee:	b29b      	uxth	r3, r3
    e3f0:	2b04      	cmp	r3, #4
    e3f2:	d8df      	bhi.n	e3b4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
    e3f4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    e3f8:	2202      	movs	r2, #2
    e3fa:	4620      	mov	r0, r4
    e3fc:	f10d 010e 	add.w	r1, sp, #14
    e400:	f7fe fd4c 	bl	ce9c <tc_cmac_update>
    e404:	2800      	cmp	r0, #0
    e406:	d0e9      	beq.n	e3dc <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
    e408:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    e40a:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
    e40c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    e410:	f10d 010e 	add.w	r1, sp, #14
    e414:	e017      	b.n	e446 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
    e416:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    e418:	2202      	movs	r2, #2
    e41a:	4620      	mov	r0, r4
    e41c:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
    e420:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    e424:	f7fe fd3a 	bl	ce9c <tc_cmac_update>
    e428:	2800      	cmp	r0, #0
    e42a:	d0d7      	beq.n	e3dc <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
    e42c:	2000      	movs	r0, #0
    e42e:	2310      	movs	r3, #16
    e430:	4631      	mov	r1, r6
    e432:	eb0d 0203 	add.w	r2, sp, r3
    e436:	6877      	ldr	r7, [r6, #4]
    e438:	9000      	str	r0, [sp, #0]
    e43a:	47b8      	blx	r7
		if (len < 0) {
    e43c:	1e02      	subs	r2, r0, #0
    e43e:	da01      	bge.n	e444 <gen_hash_m+0x9e>
			state->err = len;
    e440:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
    e442:	e7ce      	b.n	e3e2 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
    e444:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    e446:	4620      	mov	r0, r4
    e448:	f7fe fd28 	bl	ce9c <tc_cmac_update>
    e44c:	2800      	cmp	r0, #0
    e44e:	d1b1      	bne.n	e3b4 <gen_hash_m+0xe>
    e450:	e7c4      	b.n	e3dc <gen_hash_m+0x36>

0000e452 <bt_addr_le_cmp>:
    e452:	2207      	movs	r2, #7
    e454:	f7ff b861 	b.w	d51a <memcmp>

0000e458 <find_ccc_cfg>:
{
    e458:	b513      	push	{r0, r1, r4, lr}
    e45a:	1c4a      	adds	r2, r1, #1
    e45c:	460c      	mov	r4, r1
		if (conn) {
    e45e:	b140      	cbz	r0, e472 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
    e460:	7809      	ldrb	r1, [r1, #0]
    e462:	f7ff fa7b 	bl	d95c <bt_conn_is_peer_addr_le>
    e466:	2800      	cmp	r0, #0
	return NULL;
    e468:	bf08      	it	eq
    e46a:	2400      	moveq	r4, #0
}
    e46c:	4620      	mov	r0, r4
    e46e:	b002      	add	sp, #8
    e470:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    e472:	9000      	str	r0, [sp, #0]
    e474:	4669      	mov	r1, sp
    e476:	f8cd 0003 	str.w	r0, [sp, #3]
    e47a:	4610      	mov	r0, r2
    e47c:	f7ff ffe9 	bl	e452 <bt_addr_le_cmp>
    e480:	2800      	cmp	r0, #0
	return NULL;
    e482:	bf18      	it	ne
    e484:	2400      	movne	r4, #0
    e486:	e7f1      	b.n	e46c <find_ccc_cfg+0x14>

0000e488 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
    e488:	2207      	movs	r2, #7
    e48a:	f7ff b856 	b.w	d53a <memcpy>

0000e48e <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
    e48e:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
    e490:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
    e492:	3001      	adds	r0, #1
    e494:	4669      	mov	r1, sp
    e496:	9300      	str	r3, [sp, #0]
    e498:	f8cd 3003 	str.w	r3, [sp, #3]
    e49c:	f7ff fff4 	bl	e488 <bt_addr_le_copy>
}
    e4a0:	b003      	add	sp, #12
    e4a2:	f85d fb04 	ldr.w	pc, [sp], #4

0000e4a6 <clear_cf_cfg>:
{
    e4a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e4a8:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    e4aa:	2500      	movs	r5, #0
    e4ac:	4669      	mov	r1, sp
    e4ae:	3001      	adds	r0, #1
    e4b0:	9500      	str	r5, [sp, #0]
    e4b2:	f8cd 5003 	str.w	r5, [sp, #3]
    e4b6:	f7ff ffe7 	bl	e488 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
    e4ba:	f104 0008 	add.w	r0, r4, #8
    e4be:	2201      	movs	r2, #1
    e4c0:	4629      	mov	r1, r5
    e4c2:	f7ff f865 	bl	d590 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e4c6:	340c      	adds	r4, #12
    e4c8:	e8d4 3fef 	ldaex	r3, [r4]
    e4cc:	e8c4 5fe2 	stlex	r2, r5, [r4]
    e4d0:	2a00      	cmp	r2, #0
    e4d2:	d1f9      	bne.n	e4c8 <clear_cf_cfg+0x22>
}
    e4d4:	b003      	add	sp, #12
    e4d6:	bd30      	pop	{r4, r5, pc}

0000e4d8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    e4d8:	2301      	movs	r3, #1
    e4da:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e4dc:	e8d0 2fef 	ldaex	r2, [r0]
    e4e0:	431a      	orrs	r2, r3
    e4e2:	e8c0 2fe1 	stlex	r1, r2, [r0]
    e4e6:	2900      	cmp	r1, #0
    e4e8:	d1f8      	bne.n	e4dc <atomic_set_bit+0x4>
}
    e4ea:	4770      	bx	lr

0000e4ec <sc_restore_rsp>:
{
    e4ec:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
    e4ee:	f7f9 fc85 	bl	7dfc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    e4f2:	b140      	cbz	r0, e506 <sc_restore_rsp+0x1a>
    e4f4:	7a03      	ldrb	r3, [r0, #8]
    e4f6:	07db      	lsls	r3, r3, #31
    e4f8:	d505      	bpl.n	e506 <sc_restore_rsp+0x1a>
}
    e4fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    e4fe:	2100      	movs	r1, #0
    e500:	300c      	adds	r0, #12
    e502:	f7ff bfe9 	b.w	e4d8 <atomic_set_bit>
}
    e506:	bd08      	pop	{r3, pc}

0000e508 <read_appearance>:
{
    e508:	b513      	push	{r0, r1, r4, lr}
    e50a:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
    e50c:	2200      	movs	r2, #0
{
    e50e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
    e512:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    e516:	2902      	cmp	r1, #2
    e518:	d80d      	bhi.n	e536 <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
    e51a:	f1c1 0402 	rsb	r4, r1, #2
    e51e:	429c      	cmp	r4, r3
    e520:	bfa8      	it	ge
    e522:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    e524:	f10d 0306 	add.w	r3, sp, #6
    e528:	4622      	mov	r2, r4
    e52a:	4419      	add	r1, r3
    e52c:	f7ff f805 	bl	d53a <memcpy>
}
    e530:	4620      	mov	r0, r4
    e532:	b002      	add	sp, #8
    e534:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e536:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    e53a:	e7f9      	b.n	e530 <read_appearance+0x28>

0000e53c <read_name>:
{
    e53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e540:	4698      	mov	r8, r3
    e542:	4615      	mov	r5, r2
    e544:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
    e548:	f7f6 fdec 	bl	5124 <bt_get_name>
    e54c:	4607      	mov	r7, r0
				 strlen(name));
    e54e:	f7fe ffb9 	bl	d4c4 <strlen>
	if (offset > value_len) {
    e552:	b283      	uxth	r3, r0
    e554:	42b3      	cmp	r3, r6
    e556:	d30c      	bcc.n	e572 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
    e558:	1b9c      	subs	r4, r3, r6
    e55a:	4544      	cmp	r4, r8
    e55c:	bfa8      	it	ge
    e55e:	4644      	movge	r4, r8
    e560:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
    e562:	4622      	mov	r2, r4
    e564:	4628      	mov	r0, r5
    e566:	19b9      	adds	r1, r7, r6
    e568:	f7fe ffe7 	bl	d53a <memcpy>
}
    e56c:	4620      	mov	r0, r4
    e56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e572:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
    e576:	e7f9      	b.n	e56c <read_name+0x30>

0000e578 <cf_read>:
{
    e578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e57a:	461f      	mov	r7, r3
	uint8_t data[1] = {};
    e57c:	2300      	movs	r3, #0
{
    e57e:	4615      	mov	r5, r2
    e580:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
    e584:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
    e588:	f7f9 fc38 	bl	7dfc <find_cf_cfg>
	if (cfg) {
    e58c:	b128      	cbz	r0, e59a <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
    e58e:	f100 0108 	add.w	r1, r0, #8
    e592:	2201      	movs	r2, #1
    e594:	a801      	add	r0, sp, #4
    e596:	f7fe ffd0 	bl	d53a <memcpy>
	if (offset > value_len) {
    e59a:	2e01      	cmp	r6, #1
    e59c:	d80d      	bhi.n	e5ba <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
    e59e:	f1c6 0401 	rsb	r4, r6, #1
    e5a2:	42bc      	cmp	r4, r7
    e5a4:	bfa8      	it	ge
    e5a6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    e5a8:	ab01      	add	r3, sp, #4
    e5aa:	4622      	mov	r2, r4
    e5ac:	4628      	mov	r0, r5
    e5ae:	1999      	adds	r1, r3, r6
    e5b0:	f7fe ffc3 	bl	d53a <memcpy>
}
    e5b4:	4620      	mov	r0, r4
    e5b6:	b003      	add	sp, #12
    e5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e5ba:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
    e5be:	e7f9      	b.n	e5b4 <cf_read+0x3c>

0000e5c0 <bt_gatt_attr_read_ccc>:
{
    e5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
    e5c2:	68c9      	ldr	r1, [r1, #12]
{
    e5c4:	4615      	mov	r5, r2
    e5c6:	461f      	mov	r7, r3
    e5c8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
    e5cc:	f7ff ff44 	bl	e458 <find_ccc_cfg>
	if (cfg) {
    e5d0:	b100      	cbz	r0, e5d4 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
    e5d2:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
    e5d4:	2e02      	cmp	r6, #2
    e5d6:	f8ad 0006 	strh.w	r0, [sp, #6]
    e5da:	d80e      	bhi.n	e5fa <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
    e5dc:	f1c6 0402 	rsb	r4, r6, #2
    e5e0:	42bc      	cmp	r4, r7
    e5e2:	bfa8      	it	ge
    e5e4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    e5e6:	f10d 0306 	add.w	r3, sp, #6
    e5ea:	4622      	mov	r2, r4
    e5ec:	4628      	mov	r0, r5
    e5ee:	1999      	adds	r1, r3, r6
    e5f0:	f7fe ffa3 	bl	d53a <memcpy>
}
    e5f4:	4620      	mov	r0, r4
    e5f6:	b003      	add	sp, #12
    e5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e5fa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    e5fe:	e7f9      	b.n	e5f4 <bt_gatt_attr_read_ccc+0x34>

0000e600 <bt_gatt_attr_read_service>:
{
    e600:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    e602:	68c9      	ldr	r1, [r1, #12]
{
    e604:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
    e606:	780b      	ldrb	r3, [r1, #0]
{
    e608:	4610      	mov	r0, r2
    e60a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
    e60e:	b993      	cbnz	r3, e636 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    e610:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
    e612:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    e614:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
    e618:	d819      	bhi.n	e64e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
    e61a:	f1c5 0202 	rsb	r2, r5, #2
    e61e:	4294      	cmp	r4, r2
    e620:	bfa8      	it	ge
    e622:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
    e624:	4622      	mov	r2, r4
    e626:	f10d 0306 	add.w	r3, sp, #6
    e62a:	1959      	adds	r1, r3, r5
    e62c:	f7fe ff85 	bl	d53a <memcpy>
}
    e630:	4620      	mov	r0, r4
    e632:	b003      	add	sp, #12
    e634:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    e636:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    e638:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    e63c:	d807      	bhi.n	e64e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
    e63e:	f1c5 0210 	rsb	r2, r5, #16
    e642:	4294      	cmp	r4, r2
    e644:	bfa8      	it	ge
    e646:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
    e648:	4429      	add	r1, r5
    e64a:	4622      	mov	r2, r4
    e64c:	e7ee      	b.n	e62c <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e64e:	f06f 0406 	mvn.w	r4, #6
    e652:	e7ed      	b.n	e630 <bt_gatt_attr_read_service+0x30>

0000e654 <gatt_sub_remove>:
{
    e654:	b538      	push	{r3, r4, r5, lr}
    e656:	460c      	mov	r4, r1
	if (params) {
    e658:	4619      	mov	r1, r3
    e65a:	b16b      	cbz	r3, e678 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
    e65c:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
    e660:	695b      	ldr	r3, [r3, #20]
    e662:	b982      	cbnz	r2, e686 <gatt_sub_remove+0x32>
    e664:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
    e666:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
    e668:	4295      	cmp	r5, r2
    e66a:	d100      	bne.n	e66e <gatt_sub_remove+0x1a>
	list->tail = node;
    e66c:	60e3      	str	r3, [r4, #12]
	parent->next = child;
    e66e:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
    e670:	680d      	ldr	r5, [r1, #0]
    e672:	461a      	mov	r2, r3
    e674:	614b      	str	r3, [r1, #20]
    e676:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
    e678:	68a3      	ldr	r3, [r4, #8]
    e67a:	b953      	cbnz	r3, e692 <gatt_sub_remove+0x3e>
    e67c:	4620      	mov	r0, r4
}
    e67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e682:	f7ff bf04 	b.w	e48e <gatt_sub_remove.part.0>
    e686:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    e688:	68e3      	ldr	r3, [r4, #12]
    e68a:	429d      	cmp	r5, r3
	list->tail = node;
    e68c:	bf08      	it	eq
    e68e:	60e2      	streq	r2, [r4, #12]
}
    e690:	e7ed      	b.n	e66e <gatt_sub_remove+0x1a>
    e692:	bd38      	pop	{r3, r4, r5, pc}

0000e694 <gatt_write_ccc_rsp>:
{
    e694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e698:	4606      	mov	r6, r0
    e69a:	460d      	mov	r5, r1
    e69c:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e69e:	f104 0310 	add.w	r3, r4, #16
    e6a2:	e8d3 2fef 	ldaex	r2, [r3]
    e6a6:	f022 0204 	bic.w	r2, r2, #4
    e6aa:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e6ae:	2900      	cmp	r1, #0
    e6b0:	d1f7      	bne.n	e6a2 <gatt_write_ccc_rsp+0xe>
	if (err) {
    e6b2:	b1dd      	cbz	r5, e6ec <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
    e6b4:	f7f9 fbd0 	bl	7e58 <gatt_sub_find>
		if (!sub) {
    e6b8:	4601      	mov	r1, r0
    e6ba:	b300      	cbz	r0, e6fe <gatt_write_ccc_rsp+0x6a>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
    e6bc:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
    e6be:	b143      	cbz	r3, e6d2 <gatt_write_ccc_rsp+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e6c0:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
    e6c2:	f104 0014 	add.w	r0, r4, #20
    e6c6:	4283      	cmp	r3, r0
    e6c8:	d10b      	bne.n	e6e2 <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
    e6ca:	4623      	mov	r3, r4
    e6cc:	4630      	mov	r0, r6
    e6ce:	f7ff ffc1 	bl	e654 <gatt_sub_remove>
	if (params->write) {
    e6d2:	6863      	ldr	r3, [r4, #4]
    e6d4:	b19b      	cbz	r3, e6fe <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
    e6d6:	4629      	mov	r1, r5
    e6d8:	4630      	mov	r0, r6
}
    e6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
    e6de:	2200      	movs	r2, #0
    e6e0:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    e6e2:	2a00      	cmp	r2, #0
    e6e4:	d0f5      	beq.n	e6d2 <gatt_write_ccc_rsp+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e6e6:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    e6e8:	6812      	ldr	r2, [r2, #0]
    e6ea:	e7ec      	b.n	e6c6 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
    e6ec:	89a3      	ldrh	r3, [r4, #12]
    e6ee:	2b00      	cmp	r3, #0
    e6f0:	d1ef      	bne.n	e6d2 <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
    e6f2:	462b      	mov	r3, r5
    e6f4:	462a      	mov	r2, r5
    e6f6:	4621      	mov	r1, r4
    e6f8:	6827      	ldr	r7, [r4, #0]
    e6fa:	47b8      	blx	r7
    e6fc:	e7e9      	b.n	e6d2 <gatt_write_ccc_rsp+0x3e>
}
    e6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e702 <sc_clear>:
{
    e702:	b570      	push	{r4, r5, r6, lr}
    e704:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e706:	f100 0688 	add.w	r6, r0, #136	; 0x88
    e70a:	4631      	mov	r1, r6
    e70c:	7a00      	ldrb	r0, [r0, #8]
    e70e:	f7ff f894 	bl	d83a <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    e712:	4631      	mov	r1, r6
    e714:	7a20      	ldrb	r0, [r4, #8]
    e716:	f7f9 fb8f 	bl	7e38 <find_sc_cfg>
	if (!cfg) {
    e71a:	b128      	cbz	r0, e728 <sc_clear+0x26>
}
    e71c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    e720:	220c      	movs	r2, #12
    e722:	2100      	movs	r1, #0
    e724:	f7fe bf34 	b.w	d590 <memset>
}
    e728:	bd70      	pop	{r4, r5, r6, pc}

0000e72a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
    e72a:	2a02      	cmp	r2, #2
{
    e72c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
    e72e:	d108      	bne.n	e742 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
    e730:	2300      	movs	r3, #0
    e732:	f100 0188 	add.w	r1, r0, #136	; 0x88
    e736:	461a      	mov	r2, r3
    e738:	7a00      	ldrb	r0, [r0, #8]
    e73a:	f7f9 fc15 	bl	7f68 <sc_save>
}
    e73e:	2002      	movs	r0, #2
    e740:	bd10      	pop	{r4, pc}
		sc_clear(conn);
    e742:	f7ff ffde 	bl	e702 <sc_clear>
    e746:	e7fa      	b.n	e73e <sc_ccc_cfg_write+0x14>

0000e748 <bt_gatt_attr_value_handle>:
{
    e748:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    e74a:	4604      	mov	r4, r0
    e74c:	b910      	cbnz	r0, e754 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
    e74e:	2000      	movs	r0, #0
}
    e750:	b002      	add	sp, #8
    e752:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    e754:	2300      	movs	r3, #0
    e756:	f88d 3004 	strb.w	r3, [sp, #4]
    e75a:	f642 0303 	movw	r3, #10243	; 0x2803
    e75e:	6800      	ldr	r0, [r0, #0]
    e760:	a901      	add	r1, sp, #4
    e762:	f8ad 3006 	strh.w	r3, [sp, #6]
    e766:	f7fe ff39 	bl	d5dc <bt_uuid_cmp>
    e76a:	2800      	cmp	r0, #0
    e76c:	d1ef      	bne.n	e74e <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
    e76e:	68e3      	ldr	r3, [r4, #12]
    e770:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
    e772:	2800      	cmp	r0, #0
    e774:	d1ec      	bne.n	e750 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
    e776:	4620      	mov	r0, r4
    e778:	f7f9 febc 	bl	84f4 <bt_gatt_attr_get_handle>
    e77c:	3001      	adds	r0, #1
    e77e:	b280      	uxth	r0, r0
	return handle;
    e780:	e7e6      	b.n	e750 <bt_gatt_attr_value_handle+0x8>

0000e782 <bt_gatt_attr_read_chrc>:
{
    e782:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    e784:	68cf      	ldr	r7, [r1, #12]
{
    e786:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
    e788:	79bb      	ldrb	r3, [r7, #6]
{
    e78a:	b087      	sub	sp, #28
    e78c:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    e78e:	f88d 3004 	strb.w	r3, [sp, #4]
{
    e792:	4615      	mov	r5, r2
    e794:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
    e798:	f7ff ffd6 	bl	e748 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    e79c:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
    e79e:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    e7a2:	780b      	ldrb	r3, [r1, #0]
    e7a4:	b99b      	cbnz	r3, e7ce <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    e7a6:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
    e7a8:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    e7aa:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
    e7ae:	42b1      	cmp	r1, r6
    e7b0:	d315      	bcc.n	e7de <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
    e7b2:	1b89      	subs	r1, r1, r6
    e7b4:	42a1      	cmp	r1, r4
    e7b6:	bfa8      	it	ge
    e7b8:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
    e7ba:	ab01      	add	r3, sp, #4
    e7bc:	b28c      	uxth	r4, r1
    e7be:	4622      	mov	r2, r4
    e7c0:	4628      	mov	r0, r5
    e7c2:	1999      	adds	r1, r3, r6
    e7c4:	f7fe feb9 	bl	d53a <memcpy>
}
    e7c8:	4620      	mov	r0, r4
    e7ca:	b007      	add	sp, #28
    e7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    e7ce:	3101      	adds	r1, #1
    e7d0:	2210      	movs	r2, #16
    e7d2:	f10d 0007 	add.w	r0, sp, #7
    e7d6:	f7fe feb0 	bl	d53a <memcpy>
		value_len += 16U;
    e7da:	2113      	movs	r1, #19
    e7dc:	e7e7      	b.n	e7ae <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e7de:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    e7e2:	e7f1      	b.n	e7c8 <bt_gatt_attr_read_chrc+0x46>

0000e7e4 <bt_gatt_foreach_attr>:
{
    e7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
    e7e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
    e7ea:	2300      	movs	r3, #0
    e7ec:	461a      	mov	r2, r3
    e7ee:	9300      	str	r3, [sp, #0]
    e7f0:	f7f9 feb0 	bl	8554 <bt_gatt_foreach_attr_type>
}
    e7f4:	b005      	add	sp, #20
    e7f6:	f85d fb04 	ldr.w	pc, [sp], #4

0000e7fa <db_hash_process>:
	db_hash_gen(true);
    e7fa:	f7f9 bf05 	b.w	8608 <db_hash_gen.isra.0>

0000e7fe <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
    e7fe:	07d3      	lsls	r3, r2, #31
{
    e800:	b510      	push	{r4, lr}
    e802:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    e804:	d504      	bpl.n	e810 <bt_gatt_check_perm+0x12>
    e806:	f014 0f15 	tst.w	r4, #21
    e80a:	d017      	beq.n	e83c <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    e80c:	684b      	ldr	r3, [r1, #4]
    e80e:	b1ab      	cbz	r3, e83c <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
    e810:	0793      	lsls	r3, r2, #30
    e812:	d504      	bpl.n	e81e <bt_gatt_check_perm+0x20>
    e814:	f014 0f2a 	tst.w	r4, #42	; 0x2a
    e818:	d012      	beq.n	e840 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    e81a:	688b      	ldr	r3, [r1, #8]
    e81c:	b183      	cbz	r3, e840 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
    e81e:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    e820:	f014 0f30 	tst.w	r4, #48	; 0x30
    e824:	d104      	bne.n	e830 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    e826:	f014 000c 	ands.w	r0, r4, #12
    e82a:	bf18      	it	ne
    e82c:	200f      	movne	r0, #15
}
    e82e:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
    e830:	f7ff f889 	bl	d946 <bt_conn_get_security>
    e834:	2802      	cmp	r0, #2
    e836:	d8f6      	bhi.n	e826 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
    e838:	2005      	movs	r0, #5
    e83a:	e7f8      	b.n	e82e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    e83c:	2002      	movs	r0, #2
    e83e:	e7f6      	b.n	e82e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    e840:	2003      	movs	r0, #3
    e842:	e7f4      	b.n	e82e <bt_gatt_check_perm+0x30>

0000e844 <bt_gatt_unsubscribe>:
{
    e844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    e848:	7a83      	ldrb	r3, [r0, #10]
{
    e84a:	4681      	mov	r9, r0
	if (conn->state != BT_CONN_CONNECTED) {
    e84c:	2b07      	cmp	r3, #7
{
    e84e:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    e850:	d16e      	bne.n	e930 <bt_gatt_unsubscribe+0xec>
	sub = gatt_sub_find(conn);
    e852:	f7f9 fb01 	bl	7e58 <gatt_sub_find>
	if (!sub) {
    e856:	4607      	mov	r7, r0
    e858:	b920      	cbnz	r0, e864 <bt_gatt_unsubscribe+0x20>
		return -EINVAL;
    e85a:	f06f 0015 	mvn.w	r0, #21
}
    e85e:	b003      	add	sp, #12
    e860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    e864:	6884      	ldr	r4, [r0, #8]
    e866:	b1d4      	cbz	r4, e89e <bt_gatt_unsubscribe+0x5a>
    e868:	f1b4 0514 	subs.w	r5, r4, #20
    e86c:	d019      	beq.n	e8a2 <bt_gatt_unsubscribe+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e86e:	6824      	ldr	r4, [r4, #0]
    e870:	b104      	cbz	r4, e874 <bt_gatt_unsubscribe+0x30>
    e872:	3c14      	subs	r4, #20
    e874:	f04f 0800 	mov.w	r8, #0
    e878:	46c3      	mov	fp, r8
    e87a:	46c2      	mov	sl, r8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e87c:	f106 0210 	add.w	r2, r6, #16
    e880:	b98d      	cbnz	r5, e8a6 <bt_gatt_unsubscribe+0x62>
	if (!found) {
    e882:	f1bb 0f00 	cmp.w	fp, #0
    e886:	d0e8      	beq.n	e85a <bt_gatt_unsubscribe+0x16>
	if (has_subscription) {
    e888:	f1ba 0f00 	cmp.w	sl, #0
    e88c:	d045      	beq.n	e91a <bt_gatt_unsubscribe+0xd6>
		params->notify(conn, params, NULL, 0);
    e88e:	462b      	mov	r3, r5
    e890:	462a      	mov	r2, r5
    e892:	4631      	mov	r1, r6
    e894:	4648      	mov	r0, r9
    e896:	6834      	ldr	r4, [r6, #0]
    e898:	47a0      	blx	r4
		return 0;
    e89a:	4628      	mov	r0, r5
    e89c:	e7df      	b.n	e85e <bt_gatt_unsubscribe+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    e89e:	4625      	mov	r5, r4
    e8a0:	e7e8      	b.n	e874 <bt_gatt_unsubscribe+0x30>
    e8a2:	462c      	mov	r4, r5
    e8a4:	e7e6      	b.n	e874 <bt_gatt_unsubscribe+0x30>
		if (params == tmp) {
    e8a6:	42b5      	cmp	r5, r6
    e8a8:	f105 0014 	add.w	r0, r5, #20
    e8ac:	d128      	bne.n	e900 <bt_gatt_unsubscribe+0xbc>
Z_GENLIST_REMOVE(slist, snode)
    e8ae:	696b      	ldr	r3, [r5, #20]
    e8b0:	f1b8 0f00 	cmp.w	r8, #0
    e8b4:	d11c      	bne.n	e8f0 <bt_gatt_unsubscribe+0xac>
    e8b6:	68f9      	ldr	r1, [r7, #12]
	list->head = node;
    e8b8:	60bb      	str	r3, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
    e8ba:	4288      	cmp	r0, r1
    e8bc:	d100      	bne.n	e8c0 <bt_gatt_unsubscribe+0x7c>
	list->tail = node;
    e8be:	60fb      	str	r3, [r7, #12]
	parent->next = child;
    e8c0:	2300      	movs	r3, #0
    e8c2:	616b      	str	r3, [r5, #20]
    e8c4:	e8d2 1faf 	lda	r1, [r2]
			if (atomic_test_bit(params->flags,
    e8c8:	074b      	lsls	r3, r1, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e8ca:	f3c1 0b80 	ubfx	fp, r1, #2, #1
    e8ce:	d51f      	bpl.n	e910 <bt_gatt_unsubscribe+0xcc>
	bt_att_req_cancel(conn, params);
    e8d0:	4631      	mov	r1, r6
    e8d2:	4648      	mov	r0, r9
    e8d4:	9201      	str	r2, [sp, #4]
    e8d6:	f7f9 fa61 	bl	7d9c <bt_att_req_cancel>
}
    e8da:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    e8dc:	b1dc      	cbz	r4, e916 <bt_gatt_unsubscribe+0xd2>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e8de:	f114 0114 	adds.w	r1, r4, #20
    e8e2:	d002      	beq.n	e8ea <bt_gatt_unsubscribe+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e8e4:	6961      	ldr	r1, [r4, #20]
    e8e6:	b101      	cbz	r1, e8ea <bt_gatt_unsubscribe+0xa6>
    e8e8:	3914      	subs	r1, #20
    e8ea:	4625      	mov	r5, r4
    e8ec:	460c      	mov	r4, r1
    e8ee:	e7c7      	b.n	e880 <bt_gatt_unsubscribe+0x3c>
	parent->next = child;
    e8f0:	f8c8 3000 	str.w	r3, [r8]
Z_GENLIST_REMOVE(slist, snode)
    e8f4:	68f9      	ldr	r1, [r7, #12]
    e8f6:	4288      	cmp	r0, r1
	list->tail = node;
    e8f8:	bf08      	it	eq
    e8fa:	f8c7 800c 	streq.w	r8, [r7, #12]
}
    e8fe:	e7df      	b.n	e8c0 <bt_gatt_unsubscribe+0x7c>
		if (tmp->value_handle == params->value_handle) {
    e900:	892d      	ldrh	r5, [r5, #8]
    e902:	8931      	ldrh	r1, [r6, #8]
    e904:	4680      	mov	r8, r0
    e906:	428d      	cmp	r5, r1
    e908:	bf08      	it	eq
    e90a:	f04f 0a01 	moveq.w	sl, #1
    e90e:	e7e5      	b.n	e8dc <bt_gatt_unsubscribe+0x98>
			found = true;
    e910:	f04f 0b01 	mov.w	fp, #1
    e914:	e7e2      	b.n	e8dc <bt_gatt_unsubscribe+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    e916:	4621      	mov	r1, r4
    e918:	e7e7      	b.n	e8ea <bt_gatt_unsubscribe+0xa6>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    e91a:	4633      	mov	r3, r6
    e91c:	4652      	mov	r2, sl
    e91e:	4648      	mov	r0, r9
    e920:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
    e922:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
    e926:	b003      	add	sp, #12
    e928:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    e92c:	f7f9 bbd0 	b.w	80d0 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
    e930:	f06f 0038 	mvn.w	r0, #56	; 0x38
    e934:	e793      	b.n	e85e <bt_gatt_unsubscribe+0x1a>

0000e936 <bt_gatt_notification>:
{
    e936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e93a:	4607      	mov	r7, r0
    e93c:	4688      	mov	r8, r1
    e93e:	4691      	mov	r9, r2
    e940:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
    e942:	f7f9 fa89 	bl	7e58 <gatt_sub_find>
	if (!sub) {
    e946:	b1f8      	cbz	r0, e988 <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    e948:	6883      	ldr	r3, [r0, #8]
    e94a:	b1eb      	cbz	r3, e988 <bt_gatt_notification+0x52>
    e94c:	f1b3 0614 	subs.w	r6, r3, #20
    e950:	d01a      	beq.n	e988 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e952:	681c      	ldr	r4, [r3, #0]
    e954:	b104      	cbz	r4, e958 <bt_gatt_notification+0x22>
    e956:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
    e958:	8933      	ldrh	r3, [r6, #8]
    e95a:	4543      	cmp	r3, r8
    e95c:	d10a      	bne.n	e974 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
    e95e:	4653      	mov	r3, sl
    e960:	464a      	mov	r2, r9
    e962:	4631      	mov	r1, r6
    e964:	4638      	mov	r0, r7
    e966:	6835      	ldr	r5, [r6, #0]
    e968:	47a8      	blx	r5
    e96a:	b918      	cbnz	r0, e974 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
    e96c:	4631      	mov	r1, r6
    e96e:	4638      	mov	r0, r7
    e970:	f7ff ff68 	bl	e844 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    e974:	b144      	cbz	r4, e988 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e976:	f114 0514 	adds.w	r5, r4, #20
    e97a:	d002      	beq.n	e982 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e97c:	6965      	ldr	r5, [r4, #20]
    e97e:	b105      	cbz	r5, e982 <bt_gatt_notification+0x4c>
    e980:	3d14      	subs	r5, #20
{
    e982:	4626      	mov	r6, r4
    e984:	462c      	mov	r4, r5
    e986:	e7e7      	b.n	e958 <bt_gatt_notification+0x22>
}
    e988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e98c <bt_gatt_change_aware>:
{
    e98c:	b510      	push	{r4, lr}
    e98e:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
    e990:	f7f9 fa34 	bl	7dfc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
    e994:	b910      	cbnz	r0, e99c <bt_gatt_change_aware+0x10>
		return true;
    e996:	2401      	movs	r4, #1
}
    e998:	4620      	mov	r0, r4
    e99a:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
    e99c:	7a03      	ldrb	r3, [r0, #8]
    e99e:	07da      	lsls	r2, r3, #31
    e9a0:	d5f9      	bpl.n	e996 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
    e9a2:	300c      	adds	r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e9a4:	e8d0 1faf 	lda	r1, [r0]
    e9a8:	f011 0101 	ands.w	r1, r1, #1
    e9ac:	d1f3      	bne.n	e996 <bt_gatt_change_aware+0xa>
	if (!req) {
    e9ae:	2c00      	cmp	r4, #0
    e9b0:	d0f2      	beq.n	e998 <bt_gatt_change_aware+0xc>
    e9b2:	e8d0 3faf 	lda	r3, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e9b6:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
    e9ba:	079b      	lsls	r3, r3, #30
    e9bc:	d50a      	bpl.n	e9d4 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e9be:	e8d0 3fef 	ldaex	r3, [r0]
    e9c2:	f023 0302 	bic.w	r3, r3, #2
    e9c6:	e8c0 3fe2 	stlex	r2, r3, [r0]
    e9ca:	2a00      	cmp	r2, #0
    e9cc:	d1f7      	bne.n	e9be <bt_gatt_change_aware+0x32>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
    e9ce:	f7ff fd83 	bl	e4d8 <atomic_set_bit>
	return false;
    e9d2:	e7e1      	b.n	e998 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
    e9d4:	2101      	movs	r1, #1
    e9d6:	e7fa      	b.n	e9ce <bt_gatt_change_aware+0x42>

0000e9d8 <bt_smp_recv>:
{
    e9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
    e9da:	2100      	movs	r1, #0
    e9dc:	f04f 32ff 	mov.w	r2, #4294967295
    e9e0:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
    e9e4:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    e9e6:	4608      	mov	r0, r1
    e9e8:	f7ff f893 	bl	db12 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
    e9ec:	f100 0608 	add.w	r6, r0, #8
    e9f0:	4604      	mov	r4, r0
    e9f2:	2101      	movs	r1, #1
    e9f4:	4630      	mov	r0, r6
    e9f6:	f000 f874 	bl	eae2 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    e9fa:	2505      	movs	r5, #5
    e9fc:	2101      	movs	r1, #1
    e9fe:	7005      	strb	r5, [r0, #0]
    ea00:	4630      	mov	r0, r6
    ea02:	f000 f86e 	bl	eae2 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    ea06:	7005      	strb	r5, [r0, #0]
    ea08:	2500      	movs	r5, #0
    ea0a:	4622      	mov	r2, r4
    ea0c:	462b      	mov	r3, r5
    ea0e:	2106      	movs	r1, #6
    ea10:	4638      	mov	r0, r7
    ea12:	9500      	str	r5, [sp, #0]
    ea14:	f7ff f880 	bl	db18 <bt_l2cap_send_cb>
}
    ea18:	4628      	mov	r0, r5
    ea1a:	b003      	add	sp, #12
    ea1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ea1e <bt_smp_sign>:
    ea1e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ea22:	4770      	bx	lr

0000ea24 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
    ea24:	2000      	movs	r0, #0
    ea26:	4770      	bx	lr

0000ea28 <fixed_data_unref>:
}
    ea28:	4770      	bx	lr

0000ea2a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    ea2a:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    ea2c:	6849      	ldr	r1, [r1, #4]
    ea2e:	6809      	ldr	r1, [r1, #0]
    ea30:	f7fa b938 	b.w	8ca4 <net_buf_alloc_len>

0000ea34 <net_buf_get>:
{
    ea34:	b570      	push	{r4, r5, r6, lr}
    ea36:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
    ea38:	f7fb ff58 	bl	a8ec <z_impl_k_queue_get>
	if (!buf) {
    ea3c:	4605      	mov	r5, r0
    ea3e:	b128      	cbz	r0, ea4c <net_buf_get+0x18>
    ea40:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    ea42:	7963      	ldrb	r3, [r4, #5]
    ea44:	f013 0301 	ands.w	r3, r3, #1
    ea48:	d102      	bne.n	ea50 <net_buf_get+0x1c>
	frag->frags = NULL;
    ea4a:	6023      	str	r3, [r4, #0]
}
    ea4c:	4628      	mov	r0, r5
    ea4e:	bd70      	pop	{r4, r5, r6, pc}
    ea50:	2300      	movs	r3, #0
    ea52:	2200      	movs	r2, #0
    ea54:	4630      	mov	r0, r6
    ea56:	f7fb ff49 	bl	a8ec <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    ea5a:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    ea5c:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    ea5e:	f023 0301 	bic.w	r3, r3, #1
    ea62:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    ea64:	4604      	mov	r4, r0
    ea66:	e7ec      	b.n	ea42 <net_buf_get+0xe>

0000ea68 <net_buf_simple_init_with_data>:
	buf->size  = size;
    ea68:	b292      	uxth	r2, r2
	buf->__buf = data;
    ea6a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
    ea6c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
    ea6e:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
    ea70:	8082      	strh	r2, [r0, #4]
}
    ea72:	4770      	bx	lr

0000ea74 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
    ea74:	6883      	ldr	r3, [r0, #8]
    ea76:	440b      	add	r3, r1
    ea78:	6003      	str	r3, [r0, #0]
}
    ea7a:	4770      	bx	lr

0000ea7c <net_buf_put>:
	for (tail = buf; tail->frags; tail = tail->frags) {
    ea7c:	460a      	mov	r2, r1
{
    ea7e:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
    ea80:	6814      	ldr	r4, [r2, #0]
    ea82:	b914      	cbnz	r4, ea8a <net_buf_put+0xe>
}
    ea84:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    ea86:	f000 bed8 	b.w	f83a <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    ea8a:	7953      	ldrb	r3, [r2, #5]
    ea8c:	f043 0301 	orr.w	r3, r3, #1
    ea90:	7153      	strb	r3, [r2, #5]
    ea92:	4622      	mov	r2, r4
    ea94:	e7f4      	b.n	ea80 <net_buf_put+0x4>

0000ea96 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    ea96:	7902      	ldrb	r2, [r0, #4]
    ea98:	3201      	adds	r2, #1
    ea9a:	7102      	strb	r2, [r0, #4]
	return buf;
}
    ea9c:	4770      	bx	lr

0000ea9e <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
    ea9e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
    eaa0:	4618      	mov	r0, r3
    eaa2:	681b      	ldr	r3, [r3, #0]
    eaa4:	2b00      	cmp	r3, #0
    eaa6:	d1fb      	bne.n	eaa0 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
    eaa8:	4770      	bx	lr

0000eaaa <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
    eaaa:	6802      	ldr	r2, [r0, #0]
{
    eaac:	b510      	push	{r4, lr}
	if (parent->frags) {
    eaae:	b12a      	cbz	r2, eabc <net_buf_frag_insert+0x12>
    eab0:	460b      	mov	r3, r1
	while (buf->frags) {
    eab2:	461c      	mov	r4, r3
    eab4:	681b      	ldr	r3, [r3, #0]
    eab6:	2b00      	cmp	r3, #0
    eab8:	d1fb      	bne.n	eab2 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
    eaba:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
    eabc:	6001      	str	r1, [r0, #0]
}
    eabe:	bd10      	pop	{r4, pc}

0000eac0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
    eac0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
    eac2:	4604      	mov	r4, r0
    eac4:	b920      	cbnz	r0, ead0 <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
    eac6:	4608      	mov	r0, r1
	buf->ref++;
    eac8:	790b      	ldrb	r3, [r1, #4]
    eaca:	3301      	adds	r3, #1
    eacc:	710b      	strb	r3, [r1, #4]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
    eace:	bd10      	pop	{r4, pc}
    ead0:	4603      	mov	r3, r0
	while (buf->frags) {
    ead2:	4618      	mov	r0, r3
    ead4:	681b      	ldr	r3, [r3, #0]
    ead6:	2b00      	cmp	r3, #0
    ead8:	d1fb      	bne.n	ead2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
    eada:	f7ff ffe6 	bl	eaaa <net_buf_frag_insert>
    eade:	4620      	mov	r0, r4
    eae0:	e7f5      	b.n	eace <net_buf_frag_add+0xe>

0000eae2 <net_buf_simple_add>:
	return buf->data + buf->len;
    eae2:	8883      	ldrh	r3, [r0, #4]
    eae4:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    eae6:	4419      	add	r1, r3
    eae8:	8081      	strh	r1, [r0, #4]
	return tail;
}
    eaea:	18d0      	adds	r0, r2, r3
    eaec:	4770      	bx	lr

0000eaee <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    eaee:	b430      	push	{r4, r5}
    eaf0:	8884      	ldrh	r4, [r0, #4]
    eaf2:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
    eaf4:	18a3      	adds	r3, r4, r2
    eaf6:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    eaf8:	1928      	adds	r0, r5, r4
}
    eafa:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    eafc:	f7fe bd1d 	b.w	d53a <memcpy>

0000eb00 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
    eb00:	b510      	push	{r4, lr}
    eb02:	8883      	ldrh	r3, [r0, #4]
    eb04:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
    eb06:	1c5c      	adds	r4, r3, #1
    eb08:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    eb0a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
    eb0c:	18d0      	adds	r0, r2, r3
    eb0e:	bd10      	pop	{r4, pc}

0000eb10 <net_buf_simple_add_le16>:
    eb10:	8883      	ldrh	r3, [r0, #4]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
    eb12:	b530      	push	{r4, r5, lr}
    eb14:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
    eb16:	1c9d      	adds	r5, r3, #2
    eb18:	8085      	strh	r5, [r0, #4]
    eb1a:	18d4      	adds	r4, r2, r3
	dst[0] = val;
    eb1c:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
    eb1e:	0a09      	lsrs	r1, r1, #8
    eb20:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
    eb22:	bd30      	pop	{r4, r5, pc}

0000eb24 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
    eb24:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
    eb26:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
    eb28:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
    eb2a:	1a40      	subs	r0, r0, r1
	buf->len += len;
    eb2c:	4411      	add	r1, r2
	buf->data -= len;
    eb2e:	6018      	str	r0, [r3, #0]
	buf->len += len;
    eb30:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
    eb32:	4770      	bx	lr

0000eb34 <net_buf_simple_push_u8>:
	buf->data -= len;
    eb34:	6802      	ldr	r2, [r0, #0]
    eb36:	1e53      	subs	r3, r2, #1
    eb38:	6003      	str	r3, [r0, #0]
	buf->len += len;
    eb3a:	8883      	ldrh	r3, [r0, #4]
    eb3c:	3301      	adds	r3, #1
    eb3e:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
    eb40:	f802 1c01 	strb.w	r1, [r2, #-1]
}
    eb44:	4770      	bx	lr

0000eb46 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
    eb46:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
    eb48:	8882      	ldrh	r2, [r0, #4]
    eb4a:	1a52      	subs	r2, r2, r1
    eb4c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
    eb4e:	6800      	ldr	r0, [r0, #0]
    eb50:	4408      	add	r0, r1
    eb52:	6018      	str	r0, [r3, #0]
}
    eb54:	4770      	bx	lr

0000eb56 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
    eb56:	4603      	mov	r3, r0
	void *data = buf->data;
    eb58:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
    eb5a:	889a      	ldrh	r2, [r3, #4]
    eb5c:	1a52      	subs	r2, r2, r1
	buf->data += len;
    eb5e:	4401      	add	r1, r0
	buf->len -= len;
    eb60:	809a      	strh	r2, [r3, #4]
	buf->data += len;
    eb62:	6019      	str	r1, [r3, #0]

	return data;
}
    eb64:	4770      	bx	lr

0000eb66 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
    eb66:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
    eb68:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
    eb6a:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
    eb6c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
    eb6e:	f7ff ffea 	bl	eb46 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
    eb72:	4620      	mov	r0, r4
    eb74:	bd10      	pop	{r4, pc}

0000eb76 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    eb76:	6802      	ldr	r2, [r0, #0]
    eb78:	6880      	ldr	r0, [r0, #8]
}
    eb7a:	1a10      	subs	r0, r2, r0
    eb7c:	4770      	bx	lr

0000eb7e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
    eb7e:	8883      	ldrh	r3, [r0, #4]
    eb80:	88c2      	ldrh	r2, [r0, #6]
    eb82:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
    eb84:	6803      	ldr	r3, [r0, #0]
    eb86:	6880      	ldr	r0, [r0, #8]
    eb88:	1a18      	subs	r0, r3, r0
}
    eb8a:	1a10      	subs	r0, r2, r0
    eb8c:	4770      	bx	lr

0000eb8e <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    eb8e:	b570      	push	{r4, r5, r6, lr}
    eb90:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    eb92:	6801      	ldr	r1, [r0, #0]
{
    eb94:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    eb96:	b189      	cbz	r1, ebbc <gpio_fire_callbacks+0x2e>
	return node->next;
    eb98:	680c      	ldr	r4, [r1, #0]
    eb9a:	2c00      	cmp	r4, #0
    eb9c:	bf38      	it	cc
    eb9e:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    eba0:	688a      	ldr	r2, [r1, #8]
    eba2:	402a      	ands	r2, r5
    eba4:	d002      	beq.n	ebac <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    eba6:	4630      	mov	r0, r6
    eba8:	684b      	ldr	r3, [r1, #4]
    ebaa:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ebac:	b134      	cbz	r4, ebbc <gpio_fire_callbacks+0x2e>
    ebae:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ebb0:	4621      	mov	r1, r4
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	bf38      	it	cc
    ebb6:	2300      	movcc	r3, #0
    ebb8:	461c      	mov	r4, r3
    ebba:	e7f1      	b.n	eba0 <gpio_fire_callbacks+0x12>
		}
	}
}
    ebbc:	bd70      	pop	{r4, r5, r6, pc}

0000ebbe <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ebbe:	6843      	ldr	r3, [r0, #4]
}
    ebc0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ebc2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ebc4:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    ebc6:	600b      	str	r3, [r1, #0]
}
    ebc8:	4770      	bx	lr

0000ebca <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ebca:	6843      	ldr	r3, [r0, #4]
    ebcc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    ebce:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    ebd0:	4042      	eors	r2, r0
    ebd2:	400a      	ands	r2, r1
    ebd4:	4042      	eors	r2, r0
    p_reg->OUT = value;
    ebd6:	605a      	str	r2, [r3, #4]
}
    ebd8:	2000      	movs	r0, #0
    ebda:	4770      	bx	lr

0000ebdc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ebdc:	6843      	ldr	r3, [r0, #4]
}
    ebde:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ebe0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    ebe2:	6099      	str	r1, [r3, #8]
}
    ebe4:	4770      	bx	lr

0000ebe6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ebe6:	6843      	ldr	r3, [r0, #4]
}
    ebe8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ebea:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    ebec:	60d9      	str	r1, [r3, #12]
}
    ebee:	4770      	bx	lr

0000ebf0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ebf0:	6843      	ldr	r3, [r0, #4]
}
    ebf2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ebf4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    ebf6:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    ebf8:	404b      	eors	r3, r1
    p_reg->OUT = value;
    ebfa:	6053      	str	r3, [r2, #4]
}
    ebfc:	4770      	bx	lr

0000ebfe <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    ebfe:	68c3      	ldr	r3, [r0, #12]
{
    ec00:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    ec02:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    ec04:	b158      	cbz	r0, ec1e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ec06:	2400      	movs	r4, #0
    ec08:	4281      	cmp	r1, r0
    ec0a:	d113      	bne.n	ec34 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    ec0c:	6808      	ldr	r0, [r1, #0]
    ec0e:	b95c      	cbnz	r4, ec28 <gpio_nrfx_manage_callback+0x2a>
    ec10:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    ec12:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    ec14:	42a1      	cmp	r1, r4
    ec16:	d100      	bne.n	ec1a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    ec18:	6098      	str	r0, [r3, #8]
	parent->next = child;
    ec1a:	2000      	movs	r0, #0
    ec1c:	6008      	str	r0, [r1, #0]
	if (set) {
    ec1e:	b972      	cbnz	r2, ec3e <gpio_nrfx_manage_callback+0x40>
	return 0;
    ec20:	2000      	movs	r0, #0
}
    ec22:	bd30      	pop	{r4, r5, pc}
    ec24:	4628      	mov	r0, r5
    ec26:	e7ef      	b.n	ec08 <gpio_nrfx_manage_callback+0xa>
    ec28:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    ec2a:	6898      	ldr	r0, [r3, #8]
    ec2c:	4281      	cmp	r1, r0
	list->tail = node;
    ec2e:	bf08      	it	eq
    ec30:	609c      	streq	r4, [r3, #8]
}
    ec32:	e7f2      	b.n	ec1a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ec34:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ec36:	4604      	mov	r4, r0
    ec38:	2d00      	cmp	r5, #0
    ec3a:	d1f3      	bne.n	ec24 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    ec3c:	b13a      	cbz	r2, ec4e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    ec3e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    ec40:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    ec42:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    ec44:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    ec46:	2800      	cmp	r0, #0
    ec48:	d1ea      	bne.n	ec20 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    ec4a:	6099      	str	r1, [r3, #8]
}
    ec4c:	e7e9      	b.n	ec22 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    ec4e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    ec52:	e7e6      	b.n	ec22 <gpio_nrfx_manage_callback+0x24>

0000ec54 <check_level_trigger_pins>:
{
    ec54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
    ec58:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    ec5a:	2700      	movs	r7, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    ec5c:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    ec5e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    ec62:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    ec64:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    ec68:	430a      	orrs	r2, r1
    ec6a:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    ec6e:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    ec72:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    ec74:	6915      	ldr	r5, [r2, #16]
    ec76:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    ec78:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
    ec7c:	b914      	cbnz	r4, ec84 <check_level_trigger_pins+0x30>
}
    ec7e:	4628      	mov	r0, r5
    ec80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    ec84:	4234      	tst	r4, r6
    ec86:	d00a      	beq.n	ec9e <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ec88:	f898 3008 	ldrb.w	r3, [r8, #8]
    ec8c:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    ec90:	2100      	movs	r1, #0
    ec92:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    ec96:	f7fa f93d 	bl	8f14 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    ec9a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    ec9e:	3701      	adds	r7, #1
		bit <<= 1;
    eca0:	0076      	lsls	r6, r6, #1
    eca2:	e7eb      	b.n	ec7c <check_level_trigger_pins+0x28>

0000eca4 <cfg_level_pins>:
{
    eca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
    eca8:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    ecaa:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    ecac:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    ecae:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    ecb2:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    ecb4:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    ecb8:	4313      	orrs	r3, r2
    ecba:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    ecbe:	b90c      	cbnz	r4, ecc4 <cfg_level_pins+0x20>
}
    ecc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    ecc4:	4226      	tst	r6, r4
    ecc6:	d010      	beq.n	ecea <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ecc8:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ecca:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ecce:	40e9      	lsrs	r1, r5
    ecd0:	f001 0101 	and.w	r1, r1, #1
    ecd4:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ecd8:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ecdc:	b2c9      	uxtb	r1, r1
    ecde:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    ece2:	f7fa f917 	bl	8f14 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    ece6:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    ecea:	3501      	adds	r5, #1
		bit <<= 1;
    ecec:	0076      	lsls	r6, r6, #1
    ecee:	e7e6      	b.n	ecbe <cfg_level_pins+0x1a>

0000ecf0 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
    ecf0:	6883      	ldr	r3, [r0, #8]
    ecf2:	689b      	ldr	r3, [r3, #8]
    ecf4:	4718      	bx	r3

0000ecf6 <vipm_nrf_max_id_val_get>:
}
    ecf6:	2000      	movs	r0, #0
    ecf8:	4770      	bx	lr

0000ecfa <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    ecfa:	b508      	push	{r3, lr}
    ecfc:	b139      	cbz	r1, ed0e <vipm_nrf_1_set_enabled+0x14>
    ecfe:	202a      	movs	r0, #42	; 0x2a
    ed00:	f7f4 f8ea 	bl	2ed8 <arch_irq_enable>
    ed04:	2001      	movs	r0, #1
    ed06:	f7fa ff5f 	bl	9bc8 <nrfx_ipc_receive_event_enable>
    ed0a:	2000      	movs	r0, #0
    ed0c:	bd08      	pop	{r3, pc}
    ed0e:	2001      	movs	r0, #1
    ed10:	f7fa ff62 	bl	9bd8 <nrfx_ipc_receive_event_disable>
    ed14:	e7f9      	b.n	ed0a <vipm_nrf_1_set_enabled+0x10>

0000ed16 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    ed16:	6843      	ldr	r3, [r0, #4]
    ed18:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    ed1a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    ed1e:	05d2      	lsls	r2, r2, #23
    ed20:	d518      	bpl.n	ed54 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ed22:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    ed26:	b1aa      	cbz	r2, ed54 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    ed28:	f04f 0120 	mov.w	r1, #32
    ed2c:	f3ef 8211 	mrs	r2, BASEPRI
    ed30:	f381 8811 	msr	BASEPRI, r1
    ed34:	f3bf 8f6f 	isb	sy
    ed38:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    ed3c:	b131      	cbz	r1, ed4c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ed3e:	2100      	movs	r1, #0
    ed40:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    ed44:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ed48:	2101      	movs	r1, #1
    ed4a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    ed4c:	f382 8811 	msr	BASEPRI, r2
    ed50:	f3bf 8f6f 	isb	sy
}
    ed54:	4770      	bx	lr

0000ed56 <uarte_nrfx_config_get>:
{
    ed56:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    ed58:	68c2      	ldr	r2, [r0, #12]
    ed5a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    ed5e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    ed62:	2000      	movs	r0, #0
    ed64:	4770      	bx	lr

0000ed66 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    ed66:	6843      	ldr	r3, [r0, #4]
    ed68:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    ed6a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    ed6e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    ed72:	4770      	bx	lr

0000ed74 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    ed74:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    ed76:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ed78:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    ed7c:	b938      	cbnz	r0, ed8e <is_tx_ready+0x1a>
    ed7e:	7992      	ldrb	r2, [r2, #6]
    ed80:	b932      	cbnz	r2, ed90 <is_tx_ready+0x1c>
    ed82:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    ed86:	3800      	subs	r0, #0
    ed88:	bf18      	it	ne
    ed8a:	2001      	movne	r0, #1
    ed8c:	4770      	bx	lr
    ed8e:	2001      	movs	r0, #1
}
    ed90:	4770      	bx	lr

0000ed92 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    ed92:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    ed94:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    ed96:	681b      	ldr	r3, [r3, #0]
    ed98:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ed9c:	b148      	cbz	r0, edb2 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ed9e:	2000      	movs	r0, #0
	*c = data->rx_data;
    eda0:	7c52      	ldrb	r2, [r2, #17]
    eda2:	700a      	strb	r2, [r1, #0]
    eda4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    eda8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    edac:	2201      	movs	r2, #1
    edae:	601a      	str	r2, [r3, #0]
	return 0;
    edb0:	4770      	bx	lr
		return -1;
    edb2:	f04f 30ff 	mov.w	r0, #4294967295
}
    edb6:	4770      	bx	lr

0000edb8 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
    edb8:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    edba:	f7f3 fdc5 	bl	2948 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    edbe:	f7f3 fe89 	bl	2ad4 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
    edc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    edc6:	f7fc bdad 	b.w	b924 <nrf_cc3xx_platform_init_no_rng>

0000edca <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    edca:	4700      	bx	r0

0000edcc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    edcc:	f000 be82 	b.w	fad4 <z_impl_k_busy_wait>

0000edd0 <nrfx_clock_enable>:
{
    edd0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    edd2:	2005      	movs	r0, #5
    edd4:	f7f4 f890 	bl	2ef8 <arch_irq_is_enabled>
    edd8:	b910      	cbnz	r0, ede0 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    edda:	2005      	movs	r0, #5
    eddc:	f7f4 f87c 	bl	2ed8 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    ede0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    ede4:	2201      	movs	r2, #1
    ede6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    edea:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    edee:	bd08      	pop	{r3, pc}

0000edf0 <metal_device_open>:
{
    edf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    edf2:	460c      	mov	r4, r1
    edf4:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
    edf6:	4606      	mov	r6, r0
    edf8:	b918      	cbnz	r0, ee02 <metal_device_open+0x12>
		return -EINVAL;
    edfa:	f06f 0015 	mvn.w	r0, #21
}
    edfe:	b002      	add	sp, #8
    ee00:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
    ee02:	f7fe fb5f 	bl	d4c4 <strlen>
    ee06:	2800      	cmp	r0, #0
    ee08:	d0f7      	beq.n	edfa <metal_device_open+0xa>
    ee0a:	2c00      	cmp	r4, #0
    ee0c:	d0f5      	beq.n	edfa <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
    ee0e:	4620      	mov	r0, r4
    ee10:	f7fe fb58 	bl	d4c4 <strlen>
    ee14:	2800      	cmp	r0, #0
    ee16:	d0f0      	beq.n	edfa <metal_device_open+0xa>
    ee18:	2d00      	cmp	r5, #0
    ee1a:	d0ee      	beq.n	edfa <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
    ee1c:	4630      	mov	r0, r6
    ee1e:	a901      	add	r1, sp, #4
    ee20:	f7fa ff22 	bl	9c68 <metal_bus_find>
	if (error)
    ee24:	2800      	cmp	r0, #0
    ee26:	d1ea      	bne.n	edfe <metal_device_open+0xe>
	if (!bus->ops.dev_open)
    ee28:	9801      	ldr	r0, [sp, #4]
    ee2a:	6883      	ldr	r3, [r0, #8]
    ee2c:	b11b      	cbz	r3, ee36 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
    ee2e:	462a      	mov	r2, r5
    ee30:	4621      	mov	r1, r4
    ee32:	4798      	blx	r3
	if (error)
    ee34:	e7e3      	b.n	edfe <metal_device_open+0xe>
		return -ENODEV;
    ee36:	f06f 0012 	mvn.w	r0, #18
    ee3a:	e7e0      	b.n	edfe <metal_device_open+0xe>

0000ee3c <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
    ee3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
    ee3e:	6804      	ldr	r4, [r0, #0]
    ee40:	6885      	ldr	r5, [r0, #8]
		: NULL);
    ee42:	1c66      	adds	r6, r4, #1
    ee44:	d00f      	beq.n	ee66 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
    ee46:	42a9      	cmp	r1, r5
    ee48:	d232      	bcs.n	eeb0 <metal_io_block_read+0x74>
		: NULL);
    ee4a:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
    ee4c:	185e      	adds	r6, r3, r1
    ee4e:	42ae      	cmp	r6, r5
		len = io->size - offset;
    ee50:	bf88      	it	hi
    ee52:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
    ee54:	6a05      	ldr	r5, [r0, #32]
    ee56:	b155      	cbz	r5, ee6e <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
    ee58:	9300      	str	r3, [sp, #0]
    ee5a:	2305      	movs	r3, #5
    ee5c:	47a8      	blx	r5
    ee5e:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
    ee60:	4618      	mov	r0, r3
    ee62:	b002      	add	sp, #8
    ee64:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
    ee66:	42a9      	cmp	r1, r5
    ee68:	d222      	bcs.n	eeb0 <metal_io_block_read+0x74>
    ee6a:	2400      	movs	r4, #0
    ee6c:	e7ee      	b.n	ee4c <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
    ee6e:	f3bf 8f5b 	dmb	ish
		while ( len && (
    ee72:	4621      	mov	r1, r4
    ee74:	4618      	mov	r0, r3
    ee76:	2800      	cmp	r0, #0
    ee78:	d0f2      	beq.n	ee60 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
    ee7a:	ea42 0401 	orr.w	r4, r2, r1
    ee7e:	07a4      	lsls	r4, r4, #30
    ee80:	d10a      	bne.n	ee98 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
    ee82:	2803      	cmp	r0, #3
    ee84:	dc0e      	bgt.n	eea4 <metal_io_block_read+0x68>
    ee86:	3901      	subs	r1, #1
    ee88:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
    ee8a:	4282      	cmp	r2, r0
    ee8c:	d0e8      	beq.n	ee60 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
    ee8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
    ee92:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
    ee96:	e7f8      	b.n	ee8a <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
    ee98:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
    ee9c:	3801      	subs	r0, #1
			*(unsigned char *)dest =
    ee9e:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
    eea2:	e7e8      	b.n	ee76 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
    eea4:	f851 4b04 	ldr.w	r4, [r1], #4
    eea8:	3804      	subs	r0, #4
    eeaa:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
    eeae:	e7e8      	b.n	ee82 <metal_io_block_read+0x46>
		return -ERANGE;
    eeb0:	f06f 0325 	mvn.w	r3, #37	; 0x25
    eeb4:	e7d4      	b.n	ee60 <metal_io_block_read+0x24>

0000eeb6 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
    eeb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
    eeb8:	6804      	ldr	r4, [r0, #0]
    eeba:	6885      	ldr	r5, [r0, #8]
		: NULL);
    eebc:	1c66      	adds	r6, r4, #1
    eebe:	d00e      	beq.n	eede <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
    eec0:	42a9      	cmp	r1, r5
    eec2:	d230      	bcs.n	ef26 <metal_io_block_write+0x70>
		: NULL);
    eec4:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
    eec6:	185e      	adds	r6, r3, r1
    eec8:	42ae      	cmp	r6, r5
		len = io->size - offset;
    eeca:	bf88      	it	hi
    eecc:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
    eece:	6a45      	ldr	r5, [r0, #36]	; 0x24
    eed0:	b94d      	cbnz	r5, eee6 <metal_io_block_write+0x30>
    eed2:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
    eed4:	b991      	cbnz	r1, eefc <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
    eed6:	f3bf 8f5b 	dmb	ish
	retlen = len;
    eeda:	4618      	mov	r0, r3
    eedc:	e006      	b.n	eeec <metal_io_block_write+0x36>
	if (offset >= io->size)
    eede:	42a9      	cmp	r1, r5
    eee0:	d221      	bcs.n	ef26 <metal_io_block_write+0x70>
    eee2:	2400      	movs	r4, #0
    eee4:	e7ef      	b.n	eec6 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
    eee6:	9300      	str	r3, [sp, #0]
    eee8:	2305      	movs	r3, #5
    eeea:	47a8      	blx	r5
	}
	return retlen;
}
    eeec:	b002      	add	sp, #8
    eeee:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
    eef0:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
    eef4:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
    eef6:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
    eefa:	e7eb      	b.n	eed4 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
    eefc:	ea44 0002 	orr.w	r0, r4, r2
    ef00:	0780      	lsls	r0, r0, #30
    ef02:	d1f5      	bne.n	eef0 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
    ef04:	2903      	cmp	r1, #3
    ef06:	dc08      	bgt.n	ef1a <metal_io_block_write+0x64>
    ef08:	3a01      	subs	r2, #1
    ef0a:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
    ef0c:	428c      	cmp	r4, r1
    ef0e:	d0e2      	beq.n	eed6 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
    ef10:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
    ef14:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
    ef18:	e7f8      	b.n	ef0c <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
    ef1a:	f852 0b04 	ldr.w	r0, [r2], #4
    ef1e:	3904      	subs	r1, #4
    ef20:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
    ef24:	e7ee      	b.n	ef04 <metal_io_block_write+0x4e>
		return -ERANGE;
    ef26:	f06f 0025 	mvn.w	r0, #37	; 0x25
    ef2a:	e7df      	b.n	eeec <metal_io_block_write+0x36>

0000ef2c <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
    ef2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
    ef2e:	6804      	ldr	r4, [r0, #0]
    ef30:	461d      	mov	r5, r3
		: NULL);
    ef32:	1c66      	adds	r6, r4, #1
    ef34:	6883      	ldr	r3, [r0, #8]
    ef36:	d00e      	beq.n	ef56 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
    ef38:	4299      	cmp	r1, r3
    ef3a:	d22d      	bcs.n	ef98 <metal_io_block_set+0x6c>
		: NULL);
    ef3c:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
    ef3e:	186e      	adds	r6, r5, r1
    ef40:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
    ef42:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
    ef44:	bf88      	it	hi
    ef46:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
    ef48:	b186      	cbz	r6, ef6c <metal_io_block_set+0x40>
		(*io->ops.block_set)(
    ef4a:	2305      	movs	r3, #5
    ef4c:	9500      	str	r5, [sp, #0]
    ef4e:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
    ef50:	4628      	mov	r0, r5
    ef52:	b002      	add	sp, #8
    ef54:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
    ef56:	4299      	cmp	r1, r3
    ef58:	d21e      	bcs.n	ef98 <metal_io_block_set+0x6c>
    ef5a:	2400      	movs	r4, #0
    ef5c:	e7ef      	b.n	ef3e <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
    ef5e:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
    ef62:	3b01      	subs	r3, #1
    ef64:	b923      	cbnz	r3, ef70 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
    ef66:	f3bf 8f5b 	dmb	ish
    ef6a:	e7f1      	b.n	ef50 <metal_io_block_set+0x24>
    ef6c:	462b      	mov	r3, r5
    ef6e:	e7f9      	b.n	ef64 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
    ef70:	07a1      	lsls	r1, r4, #30
    ef72:	d1f4      	bne.n	ef5e <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
    ef74:	0611      	lsls	r1, r2, #24
    ef76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    ef7a:	4311      	orrs	r1, r2
    ef7c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
    ef80:	2b03      	cmp	r3, #3
    ef82:	dc05      	bgt.n	ef90 <metal_io_block_set+0x64>
    ef84:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
    ef86:	429c      	cmp	r4, r3
    ef88:	d0ed      	beq.n	ef66 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
    ef8a:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
    ef8e:	e7fa      	b.n	ef86 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
    ef90:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
    ef94:	3b04      	subs	r3, #4
    ef96:	e7f3      	b.n	ef80 <metal_io_block_set+0x54>
		return -ERANGE;
    ef98:	f06f 0525 	mvn.w	r5, #37	; 0x25
    ef9c:	e7d8      	b.n	ef50 <metal_io_block_set+0x24>

0000ef9e <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
    ef9e:	2000      	movs	r0, #0
    efa0:	4770      	bx	lr

0000efa2 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
    efa2:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
    efa4:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
    efa6:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
    efa8:	b984      	cbnz	r4, efcc <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
    efaa:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
    efac:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
    efae:	291f      	cmp	r1, #31
    efb0:	bf98      	it	ls
    efb2:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
    efb6:	b165      	cbz	r5, efd2 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
    efb8:	6881      	ldr	r1, [r0, #8]
    efba:	428b      	cmp	r3, r1
    efbc:	d209      	bcs.n	efd2 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
    efbe:	6900      	ldr	r0, [r0, #16]
    efc0:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
    efc2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    efc6:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
    efc8:	bc30      	pop	{r4, r5}
    efca:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
    efcc:	4623      	mov	r3, r4
}
    efce:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
    efd0:	4718      	bx	r3
			: METAL_BAD_PHYS);
    efd2:	f04f 30ff 	mov.w	r0, #4294967295
    efd6:	e7f7      	b.n	efc8 <metal_io_phys+0x26>

0000efd8 <virtqueue_create>:
{
    efd8:	b570      	push	{r4, r5, r6, lr}
    efda:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
    efdc:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
    efde:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
    efe0:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
    efe4:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
    efe6:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
    efe8:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
    efea:	1c96      	adds	r6, r2, #2
    efec:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
    efee:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
    eff2:	eb01 1302 	add.w	r3, r1, r2, lsl #4
    eff6:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
    eff8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
    effc:	1c6e      	adds	r6, r5, #1
    effe:	4433      	add	r3, r6
    f000:	426d      	negs	r5, r5
    f002:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
    f004:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
    f006:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
    f008:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
    f00c:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
    f00e:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
    f010:	b96b      	cbnz	r3, f02e <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
    f012:	3a01      	subs	r2, #1
    f014:	4293      	cmp	r3, r2
    f016:	eb01 1003 	add.w	r0, r1, r3, lsl #4
    f01a:	db0a      	blt.n	f032 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
    f01c:	2300      	movs	r3, #0
    f01e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f022:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    f026:	7393      	strb	r3, [r2, #14]
    f028:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    f02c:	73d3      	strb	r3, [r2, #15]
}
    f02e:	2000      	movs	r0, #0
    f030:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
    f032:	3301      	adds	r3, #1
    f034:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
    f036:	e7ed      	b.n	f014 <virtqueue_create+0x3c>

0000f038 <virtqueue_add_buffer>:
{
    f038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
    f03c:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
    f03e:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
    f042:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
    f044:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
    f046:	46ba      	mov	sl, r7
{
    f048:	b085      	sub	sp, #20
	needed = readable + writable;
    f04a:	18d6      	adds	r6, r2, r3
{
    f04c:	4691      	mov	r9, r2
		dxp->cookie = cookie;
    f04e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f050:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
    f054:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
    f056:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
    f058:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
    f05a:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
    f05c:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
    f060:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
    f062:	42be      	cmp	r6, r7
    f064:	dc19      	bgt.n	f09a <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
    f066:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
    f068:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
    f06a:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
    f06c:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
    f06e:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
    f070:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
    f072:	1e51      	subs	r1, r2, #1
    f074:	885a      	ldrh	r2, [r3, #2]
}
    f076:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
    f078:	400a      	ands	r2, r1
    f07a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    f07e:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
    f082:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
    f086:	69e2      	ldr	r2, [r4, #28]
    f088:	8853      	ldrh	r3, [r2, #2]
    f08a:	3301      	adds	r3, #1
    f08c:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
    f08e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    f090:	3301      	adds	r3, #1
    f092:	84e3      	strh	r3, [r4, #38]	; 0x26
}
    f094:	b005      	add	sp, #20
    f096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
    f09a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		dp = &desc[idx];
    f09c:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    f09e:	f858 1c04 	ldr.w	r1, [r8, #-4]
    f0a2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    f0a6:	9302      	str	r3, [sp, #8]
    f0a8:	6803      	ldr	r3, [r0, #0]
    f0aa:	9203      	str	r2, [sp, #12]
    f0ac:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
    f0ae:	6883      	ldr	r3, [r0, #8]
    f0b0:	f108 0808 	add.w	r8, r8, #8
    f0b4:	4299      	cmp	r1, r3
    f0b6:	bf28      	it	cs
    f0b8:	f04f 31ff 	movcs.w	r1, #4294967295
    f0bc:	f7ff ff71 	bl	efa2 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
    f0c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    f0c4:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
    f0c6:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
    f0ca:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
    f0ce:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
    f0d0:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
    f0d2:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
    f0d6:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
    f0d8:	bfb6      	itet	lt
    f0da:	2201      	movlt	r2, #1
		dp->flags = 0;
    f0dc:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
    f0e0:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
    f0e2:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
    f0e4:	bfd8      	it	le
    f0e6:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
    f0e8:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
    f0ec:	bfdc      	itt	le
    f0ee:	f042 0202 	orrle.w	r2, r2, #2
    f0f2:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
    f0f4:	89ed      	ldrh	r5, [r5, #14]
    f0f6:	e7b4      	b.n	f062 <virtqueue_add_buffer+0x2a>

0000f0f8 <virtqueue_get_buffer>:
{
    f0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
    f0fa:	b350      	cbz	r0, f152 <virtqueue_get_buffer+0x5a>
    f0fc:	6a05      	ldr	r5, [r0, #32]
    f0fe:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    f100:	886c      	ldrh	r4, [r5, #2]
    f102:	429c      	cmp	r4, r3
    f104:	d030      	beq.n	f168 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
    f106:	1c5c      	adds	r4, r3, #1
    f108:	85c4      	strh	r4, [r0, #46]	; 0x2e
    f10a:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
    f10c:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
    f110:	3c01      	subs	r4, #1
    f112:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
    f114:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
    f118:	686b      	ldr	r3, [r5, #4]
    f11a:	b29e      	uxth	r6, r3
	if (len)
    f11c:	b109      	cbz	r1, f122 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
    f11e:	68ad      	ldr	r5, [r5, #8]
    f120:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
    f122:	f8d0 c018 	ldr.w	ip, [r0, #24]
    f126:	b29b      	uxth	r3, r3
    f128:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
    f12c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    f130:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
    f132:	8c87      	ldrh	r7, [r0, #36]	; 0x24
    f134:	442f      	add	r7, r5
	dxp->ndescs--;
    f136:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
    f138:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
    f13a:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
    f13c:	898d      	ldrh	r5, [r1, #12]
    f13e:	076f      	lsls	r7, r5, #29
    f140:	d50e      	bpl.n	f160 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
    f142:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
    f144:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
    f146:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
    f148:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
    f14a:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
    f14c:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
    f14e:	b102      	cbz	r2, f152 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
    f150:	8014      	strh	r4, [r2, #0]
}
    f152:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
    f154:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
    f156:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
    f158:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
    f15a:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
    f15e:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
    f160:	898d      	ldrh	r5, [r1, #12]
    f162:	07ed      	lsls	r5, r5, #31
    f164:	d4f6      	bmi.n	f154 <virtqueue_get_buffer+0x5c>
    f166:	e7ec      	b.n	f142 <virtqueue_get_buffer+0x4a>
		return NULL;
    f168:	2000      	movs	r0, #0
    f16a:	e7f2      	b.n	f152 <virtqueue_get_buffer+0x5a>

0000f16c <virtqueue_get_available_buffer>:
{
    f16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
    f170:	f3bf 8f5b 	dmb	ish
{
    f174:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
    f176:	69c2      	ldr	r2, [r0, #28]
{
    f178:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
    f17a:	8853      	ldrh	r3, [r2, #2]
    f17c:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
    f17e:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
    f180:	428b      	cmp	r3, r1
    f182:	d046      	beq.n	f212 <virtqueue_get_available_buffer+0xa6>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
    f184:	1c4b      	adds	r3, r1, #1
    f186:	8603      	strh	r3, [r0, #48]	; 0x30
    f188:	8943      	ldrh	r3, [r0, #10]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
    f18a:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
    f18e:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
    f190:	400b      	ands	r3, r1
    f192:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    f196:	889a      	ldrh	r2, [r3, #4]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
    f198:	6983      	ldr	r3, [r0, #24]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
    f19a:	b291      	uxth	r1, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
    f19c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
    f1a0:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
    f1a2:	f8d3 9000 	ldr.w	r9, [r3]
	if (!io->ops.phys_to_offset) {
    f1a6:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    f1aa:	bb5b      	cbnz	r3, f204 <virtqueue_get_available_buffer+0x98>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
    f1ac:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
    f1b0:	1c62      	adds	r2, r4, #1
    f1b2:	bf09      	itett	eq
    f1b4:	f8d8 3004 	ldreq.w	r3, [r8, #4]
    f1b8:	ea09 0404 	andne.w	r4, r9, r4
    f1bc:	681c      	ldreq	r4, [r3, #0]
    f1be:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
    f1c2:	4621      	mov	r1, r4
    f1c4:	4640      	mov	r0, r8
    f1c6:	f7ff feec 	bl	efa2 <metal_io_phys>
    f1ca:	4581      	cmp	r9, r0
    f1cc:	d009      	beq.n	f1e2 <virtqueue_get_available_buffer+0x76>
			offset += io->page_mask + 1;
    f1ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
    f1d2:	3301      	adds	r3, #1
    f1d4:	441c      	add	r4, r3
		} while (offset < io->size);
    f1d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f1da:	429c      	cmp	r4, r3
    f1dc:	d3f1      	bcc.n	f1c2 <virtqueue_get_available_buffer+0x56>
		return METAL_BAD_OFFSET;
    f1de:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
    f1e2:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
    f1e6:	1c43      	adds	r3, r0, #1
    f1e8:	d011      	beq.n	f20e <virtqueue_get_available_buffer+0xa2>
	return (io->virt != METAL_BAD_VA && offset < io->size
    f1ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f1ee:	42a3      	cmp	r3, r4
    f1f0:	d90d      	bls.n	f20e <virtqueue_get_available_buffer+0xa2>
		: NULL);
    f1f2:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
    f1f4:	8832      	ldrh	r2, [r6, #0]
    f1f6:	69ab      	ldr	r3, [r5, #24]
    f1f8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    f1fc:	689b      	ldr	r3, [r3, #8]
    f1fe:	603b      	str	r3, [r7, #0]
}
    f200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
    f204:	4649      	mov	r1, r9
    f206:	4640      	mov	r0, r8
    f208:	4798      	blx	r3
    f20a:	4604      	mov	r4, r0
    f20c:	e7e9      	b.n	f1e2 <virtqueue_get_available_buffer+0x76>
		: NULL);
    f20e:	2000      	movs	r0, #0
    f210:	e7f0      	b.n	f1f4 <virtqueue_get_available_buffer+0x88>
		return NULL;
    f212:	2000      	movs	r0, #0
    f214:	e7f4      	b.n	f200 <virtqueue_get_available_buffer+0x94>

0000f216 <virtqueue_disable_cb>:
{
    f216:	b530      	push	{r4, r5, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
    f218:	2500      	movs	r5, #0
    f21a:	6802      	ldr	r2, [r0, #0]
    f21c:	6993      	ldr	r3, [r2, #24]
    f21e:	6912      	ldr	r2, [r2, #16]
    f220:	f002 5400 	and.w	r4, r2, #536870912	; 0x20000000
    f224:	ea54 0205 	orrs.w	r2, r4, r5
    f228:	d014      	beq.n	f254 <virtqueue_disable_cb+0x3e>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
    f22a:	b94b      	cbnz	r3, f240 <virtqueue_disable_cb+0x2a>
			vring_used_event(&vq->vq_ring) =
    f22c:	69c2      	ldr	r2, [r0, #28]
    f22e:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
    f230:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    f232:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
    f234:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
    f238:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
    f23a:	3b01      	subs	r3, #1
    f23c:	8093      	strh	r3, [r2, #4]
}
    f23e:	bd30      	pop	{r4, r5, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
    f240:	2b01      	cmp	r3, #1
    f242:	d1fc      	bne.n	f23e <virtqueue_disable_cb+0x28>
			vring_avail_event(&vq->vq_ring) =
    f244:	6a02      	ldr	r2, [r0, #32]
    f246:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
    f248:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    f24a:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
    f24c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
    f250:	1a1b      	subs	r3, r3, r0
    f252:	e7f2      	b.n	f23a <virtqueue_disable_cb+0x24>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
    f254:	b92b      	cbnz	r3, f262 <virtqueue_disable_cb+0x4c>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
    f256:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
    f258:	8813      	ldrh	r3, [r2, #0]
    f25a:	f043 0301 	orr.w	r3, r3, #1
    f25e:	8013      	strh	r3, [r2, #0]
}
    f260:	e7ed      	b.n	f23e <virtqueue_disable_cb+0x28>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
    f262:	2b01      	cmp	r3, #1
    f264:	d1eb      	bne.n	f23e <virtqueue_disable_cb+0x28>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
    f266:	6a02      	ldr	r2, [r0, #32]
    f268:	e7f6      	b.n	f258 <virtqueue_disable_cb+0x42>

0000f26a <virtqueue_kick>:
{
    f26a:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
    f26c:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
    f270:	2300      	movs	r3, #0
    f272:	6801      	ldr	r1, [r0, #0]
{
    f274:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
    f276:	6908      	ldr	r0, [r1, #16]
    f278:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
    f27c:	4313      	orrs	r3, r2
    f27e:	698b      	ldr	r3, [r1, #24]
    f280:	d020      	beq.n	f2c4 <virtqueue_kick+0x5a>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
    f282:	b9b3      	cbnz	r3, f2b2 <virtqueue_kick+0x48>
			new_idx = vq->vq_ring.avail->idx;
    f284:	69e3      	ldr	r3, [r4, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
    f286:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.avail->idx;
    f288:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
    f28a:	6a23      	ldr	r3, [r4, #32]
    f28c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
    f290:	889b      	ldrh	r3, [r3, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
    f292:	1ad2      	subs	r2, r2, r3
    f294:	3a01      	subs	r2, #1
    f296:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    f298:	b292      	uxth	r2, r2
    f29a:	4293      	cmp	r3, r2
    f29c:	bf94      	ite	ls
    f29e:	2300      	movls	r3, #0
    f2a0:	2301      	movhi	r3, #1
	if (vq_ring_must_notify(vq))
    f2a2:	b11b      	cbz	r3, f2ac <virtqueue_kick+0x42>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
    f2a4:	6923      	ldr	r3, [r4, #16]
    f2a6:	b10b      	cbz	r3, f2ac <virtqueue_kick+0x42>
		vq->notify(vq);
    f2a8:	4620      	mov	r0, r4
    f2aa:	4798      	blx	r3
	vq->vq_queued_cnt = 0;
    f2ac:	2300      	movs	r3, #0
    f2ae:	84e3      	strh	r3, [r4, #38]	; 0x26
}
    f2b0:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
    f2b2:	2b01      	cmp	r3, #1
    f2b4:	d1fa      	bne.n	f2ac <virtqueue_kick+0x42>
			new_idx = vq->vq_ring.used->idx;
    f2b6:	6a23      	ldr	r3, [r4, #32]
			event_idx = vring_used_event(&vq->vq_ring);
    f2b8:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.used->idx;
    f2ba:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
    f2bc:	69e3      	ldr	r3, [r4, #28]
    f2be:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    f2c2:	e7e5      	b.n	f290 <virtqueue_kick+0x26>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
    f2c4:	b92b      	cbnz	r3, f2d2 <virtqueue_kick+0x68>
			return (vq->vq_ring.used->flags &
    f2c6:	6a23      	ldr	r3, [r4, #32]
			return (vq->vq_ring.avail->flags &
    f2c8:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
    f2ca:	43db      	mvns	r3, r3
    f2cc:	f003 0301 	and.w	r3, r3, #1
    f2d0:	e7e7      	b.n	f2a2 <virtqueue_kick+0x38>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
    f2d2:	2b01      	cmp	r3, #1
    f2d4:	d1ea      	bne.n	f2ac <virtqueue_kick+0x42>
			return (vq->vq_ring.avail->flags &
    f2d6:	69e3      	ldr	r3, [r4, #28]
    f2d8:	e7f6      	b.n	f2c8 <virtqueue_kick+0x5e>

0000f2da <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
    f2da:	69c2      	ldr	r2, [r0, #28]
    f2dc:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    f2de:	8853      	ldrh	r3, [r2, #2]
    f2e0:	428b      	cmp	r3, r1
    f2e2:	d00a      	beq.n	f2fa <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
    f2e4:	8943      	ldrh	r3, [r0, #10]
    f2e6:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
    f2e8:	400b      	ands	r3, r1
    f2ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
    f2ee:	889a      	ldrh	r2, [r3, #4]
    f2f0:	6983      	ldr	r3, [r0, #24]
    f2f2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    f2f6:	6898      	ldr	r0, [r3, #8]
	return len;
    f2f8:	4770      	bx	lr
		return 0;
    f2fa:	2000      	movs	r0, #0
}
    f2fc:	4770      	bx	lr

0000f2fe <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
    f2fe:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
    f302:	68c3      	ldr	r3, [r0, #12]
    f304:	b103      	cbz	r3, f308 <virtqueue_notification+0xa>
		vq->callback(vq);
    f306:	4718      	bx	r3
}
    f308:	4770      	bx	lr

0000f30a <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
    f30a:	f04f 32ff 	mov.w	r2, #4294967295
    f30e:	f04f 33ff 	mov.w	r3, #4294967295
    f312:	f7fb bee3 	b.w	b0dc <z_impl_k_sem_take>

0000f316 <rpmsg_unregister_endpoint>:
{
    f316:	b570      	push	{r4, r5, r6, lr}
    f318:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
    f31a:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
    f31c:	f105 0658 	add.w	r6, r5, #88	; 0x58
    f320:	4630      	mov	r0, r6
    f322:	f7ff fff2 	bl	f30a <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
    f326:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f328:	1c5a      	adds	r2, r3, #1
    f32a:	d010      	beq.n	f34e <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
    f32c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
    f330:	2b7f      	cmp	r3, #127	; 0x7f
    f332:	d80c      	bhi.n	f34e <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    f334:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
    f336:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
    f338:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    f33a:	f003 031f 	and.w	r3, r3, #31
    f33e:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
    f342:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    f346:	ea22 0203 	bic.w	r2, r2, r3
    f34a:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
    f34e:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
    f352:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
    f356:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
    f358:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
    f35a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
    f35e:	2300      	movs	r3, #0
    f360:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
    f362:	4630      	mov	r0, r6
}
    f364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f368:	f7fb be92 	b.w	b090 <z_impl_k_sem_give>

0000f36c <rpmsg_send_ns_message>:
{
    f36c:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
    f36e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    f370:	b08c      	sub	sp, #48	; 0x30
    f372:	4604      	mov	r4, r0
	ns_msg.flags = flags;
    f374:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
    f376:	2220      	movs	r2, #32
    f378:	4601      	mov	r1, r0
    f37a:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
    f37c:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
    f37e:	f7fe f88e 	bl	d49e <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
    f382:	2328      	movs	r3, #40	; 0x28
    f384:	2201      	movs	r2, #1
    f386:	4620      	mov	r0, r4
    f388:	e9cd 3200 	strd	r3, r2, [sp]
    f38c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    f38e:	2235      	movs	r2, #53	; 0x35
    f390:	ab02      	add	r3, sp, #8
    f392:	f7fa fd8d 	bl	9eb0 <rpmsg_send_offchannel_raw>
}
    f396:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    f39a:	b00c      	add	sp, #48	; 0x30
    f39c:	bd10      	pop	{r4, pc}

0000f39e <rpmsg_get_endpoint>:
{
    f39e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f3a2:	4680      	mov	r8, r0
    f3a4:	4689      	mov	r9, r1
    f3a6:	4615      	mov	r5, r2
    f3a8:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
    f3aa:	6807      	ldr	r7, [r0, #0]
    f3ac:	45b8      	cmp	r8, r7
    f3ae:	d101      	bne.n	f3b4 <rpmsg_get_endpoint+0x16>
	return NULL;
    f3b0:	2400      	movs	r4, #0
    f3b2:	e021      	b.n	f3f8 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
    f3b4:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
    f3b6:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
    f3ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f3bc:	d006      	beq.n	f3cc <rpmsg_get_endpoint+0x2e>
    f3be:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
    f3c0:	d01a      	beq.n	f3f8 <rpmsg_get_endpoint+0x5a>
		if (name)
    f3c2:	f1b9 0f00 	cmp.w	r9, #0
    f3c6:	d106      	bne.n	f3d6 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
    f3c8:	683f      	ldr	r7, [r7, #0]
    f3ca:	e7ef      	b.n	f3ac <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
    f3cc:	3301      	adds	r3, #1
    f3ce:	d1f8      	bne.n	f3c2 <rpmsg_get_endpoint+0x24>
    f3d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f3d2:	42b3      	cmp	r3, r6
    f3d4:	e7f4      	b.n	f3c0 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
    f3d6:	2220      	movs	r2, #32
    f3d8:	4649      	mov	r1, r9
    f3da:	4620      	mov	r0, r4
    f3dc:	f7fe f88e 	bl	d4fc <strncmp>
		if (!name || !name_match)
    f3e0:	2800      	cmp	r0, #0
    f3e2:	d1f1      	bne.n	f3c8 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
    f3e4:	1c72      	adds	r2, r6, #1
    f3e6:	d002      	beq.n	f3ee <rpmsg_get_endpoint+0x50>
    f3e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f3ea:	42b3      	cmp	r3, r6
    f3ec:	d004      	beq.n	f3f8 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
    f3ee:	1c6b      	adds	r3, r5, #1
    f3f0:	d1ea      	bne.n	f3c8 <rpmsg_get_endpoint+0x2a>
    f3f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f3f4:	3301      	adds	r3, #1
    f3f6:	d1e7      	bne.n	f3c8 <rpmsg_get_endpoint+0x2a>
}
    f3f8:	4620      	mov	r0, r4
    f3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000f3fe <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
    f3fe:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
    f400:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
    f404:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
    f408:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
    f40a:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
    f40c:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    f40e:	6013      	str	r3, [r2, #0]
}
    f410:	4770      	bx	lr

0000f412 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
    f412:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
    f414:	4604      	mov	r4, r0
    f416:	b190      	cbz	r0, f43e <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
    f418:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
    f41a:	b183      	cbz	r3, f43e <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
    f41c:	7802      	ldrb	r2, [r0, #0]
    f41e:	b14a      	cbz	r2, f434 <rpmsg_destroy_ept+0x22>
    f420:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    f424:	b133      	cbz	r3, f434 <rpmsg_destroy_ept+0x22>
    f426:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f42c:	d302      	bcc.n	f434 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
    f42e:	2101      	movs	r1, #1
    f430:	f7ff ff9c 	bl	f36c <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
    f434:	4620      	mov	r0, r4
}
    f436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
    f43a:	f7ff bf6c 	b.w	f316 <rpmsg_unregister_endpoint>
}
    f43e:	bd10      	pop	{r4, pc}

0000f440 <rpmsg_virtio_tx_callback>:
}
    f440:	4770      	bx	lr

0000f442 <k_sem_give>:
    f442:	f7fb be25 	b.w	b090 <z_impl_k_sem_give>

0000f446 <rpmsg_virtio_get_rx_buffer>:
{
    f446:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
    f448:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
    f44a:	4613      	mov	r3, r2
    f44c:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
    f44e:	b925      	cbnz	r5, f45a <rpmsg_virtio_get_rx_buffer+0x14>
}
    f450:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
    f452:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
    f456:	f7ff be4f 	b.w	f0f8 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
    f45a:	2d01      	cmp	r5, #1
    f45c:	d106      	bne.n	f46c <rpmsg_virtio_get_rx_buffer+0x26>
}
    f45e:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
    f460:	460a      	mov	r2, r1
    f462:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
    f466:	4619      	mov	r1, r3
    f468:	f7ff be80 	b.w	f16c <virtqueue_get_available_buffer>
}
    f46c:	2000      	movs	r0, #0
    f46e:	bc30      	pop	{r4, r5}
    f470:	4770      	bx	lr

0000f472 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
    f472:	f04f 32ff 	mov.w	r2, #4294967295
    f476:	f04f 33ff 	mov.w	r3, #4294967295
    f47a:	f7fb be2f 	b.w	b0dc <z_impl_k_sem_take>

0000f47e <rpmsg_virtio_ns_callback>:
{
    f47e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
    f482:	2a28      	cmp	r2, #40	; 0x28
{
    f484:	4680      	mov	r8, r0
    f486:	460e      	mov	r6, r1
    f488:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
    f48a:	d12b      	bne.n	f4e4 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
    f48c:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
    f48e:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
    f490:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
    f494:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    f496:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    f498:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    f49a:	1a71      	subs	r1, r6, r1
    f49c:	42a1      	cmp	r1, r4
    f49e:	bf28      	it	cs
    f4a0:	f04f 31ff 	movcs.w	r1, #4294967295
    f4a4:	f7ff fcca 	bl	ee3c <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
    f4a8:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
    f4ac:	f8d6 9020 	ldr.w	r9, [r6, #32]
    f4b0:	4638      	mov	r0, r7
    f4b2:	f7ff ffde 	bl	f472 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
    f4b6:	464b      	mov	r3, r9
    f4b8:	f04f 32ff 	mov.w	r2, #4294967295
    f4bc:	4669      	mov	r1, sp
    f4be:	4628      	mov	r0, r5
    f4c0:	f7ff ff6d 	bl	f39e <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
    f4c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
    f4c6:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
    f4c8:	07db      	lsls	r3, r3, #31
    f4ca:	d50f      	bpl.n	f4ec <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
    f4cc:	b110      	cbz	r0, f4d4 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
    f4ce:	f04f 33ff 	mov.w	r3, #4294967295
    f4d2:	6283      	str	r3, [r0, #40]	; 0x28
    f4d4:	4638      	mov	r0, r7
    f4d6:	f7ff ffb4 	bl	f442 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
    f4da:	b11c      	cbz	r4, f4e4 <rpmsg_virtio_ns_callback+0x66>
    f4dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f4de:	b10b      	cbz	r3, f4e4 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
    f4e0:	4640      	mov	r0, r8
    f4e2:	4798      	blx	r3
}
    f4e4:	2000      	movs	r0, #0
    f4e6:	b009      	add	sp, #36	; 0x24
    f4e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
    f4ec:	b950      	cbnz	r0, f504 <rpmsg_virtio_ns_callback+0x86>
    f4ee:	4638      	mov	r0, r7
    f4f0:	f7ff ffa7 	bl	f442 <k_sem_give>
			if (rdev->ns_bind_cb)
    f4f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    f4f6:	2b00      	cmp	r3, #0
    f4f8:	d0f4      	beq.n	f4e4 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
    f4fa:	464a      	mov	r2, r9
    f4fc:	4669      	mov	r1, sp
    f4fe:	4628      	mov	r0, r5
    f500:	4798      	blx	r3
    f502:	e7ef      	b.n	f4e4 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
    f504:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
    f508:	4638      	mov	r0, r7
    f50a:	f7ff ff9a 	bl	f442 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
    f50e:	e7e9      	b.n	f4e4 <rpmsg_virtio_ns_callback+0x66>

0000f510 <rpmsg_virtio_rx_callback>:
{
    f510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
    f514:	6803      	ldr	r3, [r0, #0]
{
    f516:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
    f518:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
    f51a:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
    f51e:	4638      	mov	r0, r7
    f520:	f7ff ffa7 	bl	f472 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
    f524:	4630      	mov	r0, r6
    f526:	f10d 020a 	add.w	r2, sp, #10
    f52a:	a903      	add	r1, sp, #12
    f52c:	f7ff ff8b 	bl	f446 <rpmsg_virtio_get_rx_buffer>
    f530:	4604      	mov	r4, r0
    f532:	4638      	mov	r0, r7
    f534:	f7ff ff85 	bl	f442 <k_sem_give>
	while (rp_hdr) {
    f538:	b914      	cbnz	r4, f540 <rpmsg_virtio_rx_callback+0x30>
}
    f53a:	b006      	add	sp, #24
    f53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f540:	4638      	mov	r0, r7
    f542:	f7ff ff96 	bl	f472 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
    f546:	f04f 33ff 	mov.w	r3, #4294967295
    f54a:	2100      	movs	r1, #0
    f54c:	4630      	mov	r0, r6
    f54e:	6862      	ldr	r2, [r4, #4]
    f550:	f7ff ff25 	bl	f39e <rpmsg_get_endpoint>
    f554:	4605      	mov	r5, r0
    f556:	4638      	mov	r0, r7
    f558:	f7ff ff73 	bl	f442 <k_sem_give>
		if (ept) {
    f55c:	b185      	cbz	r5, f580 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
    f55e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    f560:	6823      	ldr	r3, [r4, #0]
    f562:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
    f564:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
    f566:	bf08      	it	eq
    f568:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
    f56a:	89a2      	ldrh	r2, [r4, #12]
    f56c:	9100      	str	r1, [sp, #0]
    f56e:	4628      	mov	r0, r5
    f570:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    f574:	f104 0110 	add.w	r1, r4, #16
    f578:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
    f57a:	2800      	cmp	r0, #0
    f57c:	da00      	bge.n	f580 <rpmsg_virtio_rx_callback+0x70>
    f57e:	e7fe      	b.n	f57e <rpmsg_virtio_rx_callback+0x6e>
    f580:	4638      	mov	r0, r7
    f582:	f7ff ff76 	bl	f472 <__metal_mutex_acquire>
    f586:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
    f588:	9b03      	ldr	r3, [sp, #12]
    f58a:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
    f58c:	b9b2      	cbnz	r2, f5bc <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
    f58e:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
    f590:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
    f594:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
    f598:	2301      	movs	r3, #1
    f59a:	a904      	add	r1, sp, #16
    f59c:	f7ff fd4c 	bl	f038 <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
    f5a0:	4630      	mov	r0, r6
    f5a2:	f10d 020a 	add.w	r2, sp, #10
    f5a6:	a903      	add	r1, sp, #12
    f5a8:	f7ff ff4d 	bl	f446 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
    f5ac:	4604      	mov	r4, r0
    f5ae:	2800      	cmp	r0, #0
    f5b0:	d1bf      	bne.n	f532 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
    f5b2:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
    f5b6:	f7ff fe58 	bl	f26a <virtqueue_kick>
    f5ba:	e7ba      	b.n	f532 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
    f5bc:	2a01      	cmp	r2, #1
    f5be:	d1ef      	bne.n	f5a0 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
    f5c0:	461a      	mov	r2, r3
    f5c2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    f5c6:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
    f5ca:	f7fa fc55 	bl	9e78 <virtqueue_add_consumed_buffer>
    f5ce:	e7e7      	b.n	f5a0 <rpmsg_virtio_rx_callback+0x90>

0000f5d0 <rpmsg_virtio_shm_pool_get_buffer>:
{
    f5d0:	4603      	mov	r3, r0
	if (shpool->avail < size)
    f5d2:	6842      	ldr	r2, [r0, #4]
{
    f5d4:	b510      	push	{r4, lr}
	if (shpool->avail < size)
    f5d6:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
    f5d8:	bf29      	itett	cs
    f5da:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
    f5dc:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
    f5de:	1a84      	subcs	r4, r0, r2
    f5e0:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
    f5e2:	bf22      	ittt	cs
    f5e4:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
    f5e6:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
    f5e8:	605a      	strcs	r2, [r3, #4]
}
    f5ea:	bd10      	pop	{r4, pc}

0000f5ec <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
    f5ec:	b110      	cbz	r0, f5f4 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
    f5ee:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
    f5f2:	6001      	str	r1, [r0, #0]
}
    f5f4:	4770      	bx	lr

0000f5f6 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
    f5f6:	f7fd bb18 	b.w	cc2a <z_clock_idle_exit>

0000f5fa <k_heap_init>:
{
    f5fa:	b410      	push	{r4}
    f5fc:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    f600:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    f604:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    f606:	f7fc be75 	b.w	c2f4 <sys_heap_init>

0000f60a <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    f60a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f60e:	b087      	sub	sp, #28
    f610:	4604      	mov	r4, r0
    f612:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
    f614:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
    f618:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
    f61a:	f000 fb18 	bl	fc4e <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    f61e:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
    f622:	4605      	mov	r5, r0
    f624:	4688      	mov	r8, r1
	__asm__ volatile(
    f626:	f04f 0320 	mov.w	r3, #32
    f62a:	f3ef 8b11 	mrs	fp, BASEPRI
    f62e:	f383 8811 	msr	BASEPRI, r3
    f632:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f636:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    f63a:	463a      	mov	r2, r7
    f63c:	4631      	mov	r1, r6
    f63e:	4620      	mov	r0, r4
    f640:	f7fc fdfb 	bl	c23a <sys_heap_aligned_alloc>
    f644:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
    f646:	f7fc f82d 	bl	b6a4 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
    f64a:	9b05      	ldr	r3, [sp, #20]
    f64c:	b13b      	cbz	r3, f65e <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    f64e:	f38b 8811 	msr	BASEPRI, fp
    f652:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
    f656:	4618      	mov	r0, r3
    f658:	b007      	add	sp, #28
    f65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
    f65e:	1a2a      	subs	r2, r5, r0
    f660:	9202      	str	r2, [sp, #8]
    f662:	eb68 0201 	sbc.w	r2, r8, r1
    f666:	9203      	str	r2, [sp, #12]
    f668:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    f66c:	2901      	cmp	r1, #1
    f66e:	f172 0200 	sbcs.w	r2, r2, #0
    f672:	dbec      	blt.n	f64e <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f678:	4659      	mov	r1, fp
    f67a:	e9cd 2300 	strd	r2, r3, [sp]
    f67e:	4648      	mov	r0, r9
    f680:	4652      	mov	r2, sl
    f682:	f7fb fbf1 	bl	ae68 <z_pend_curr>
	__asm__ volatile(
    f686:	f04f 0320 	mov.w	r3, #32
    f68a:	f3ef 8b11 	mrs	fp, BASEPRI
    f68e:	f383 8811 	msr	BASEPRI, r3
    f692:	f3bf 8f6f 	isb	sy
    f696:	e7d0      	b.n	f63a <k_heap_aligned_alloc+0x30>

0000f698 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
    f698:	b538      	push	{r3, r4, r5, lr}
    f69a:	4604      	mov	r4, r0
    f69c:	f04f 0320 	mov.w	r3, #32
    f6a0:	f3ef 8511 	mrs	r5, BASEPRI
    f6a4:	f383 8811 	msr	BASEPRI, r3
    f6a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    f6ac:	f7fc fd78 	bl	c1a0 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
    f6b0:	f104 000c 	add.w	r0, r4, #12
    f6b4:	f000 f9e8 	bl	fa88 <z_unpend_all>
    f6b8:	b130      	cbz	r0, f6c8 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    f6ba:	4629      	mov	r1, r5
    f6bc:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    f6c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    f6c4:	f7fb b988 	b.w	a9d8 <z_reschedule>
	__asm__ volatile(
    f6c8:	f385 8811 	msr	BASEPRI, r5
    f6cc:	f3bf 8f6f 	isb	sy
}
    f6d0:	bd38      	pop	{r3, r4, r5, pc}

0000f6d2 <k_mem_slab_init>:
{
    f6d2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    f6d4:	2400      	movs	r4, #0
    f6d6:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    f6d8:	ea41 0402 	orr.w	r4, r1, r2
    f6dc:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    f6e0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    f6e4:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    f6e6:	d10c      	bne.n	f702 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    f6e8:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    f6ea:	42a3      	cmp	r3, r4
    f6ec:	d103      	bne.n	f6f6 <k_mem_slab_init+0x24>
    f6ee:	e9c0 0000 	strd	r0, r0, [r0]
}
    f6f2:	2000      	movs	r0, #0
}
    f6f4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    f6f6:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    f6f8:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    f6fa:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    f6fc:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    f6fe:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    f700:	e7f3      	b.n	f6ea <k_mem_slab_init+0x18>
		return -EINVAL;
    f702:	f06f 0015 	mvn.w	r0, #21
	return rc;
    f706:	e7f5      	b.n	f6f4 <k_mem_slab_init+0x22>

0000f708 <z_impl_k_mutex_init>:
{
    f708:	4603      	mov	r3, r0
	mutex->owner = NULL;
    f70a:	2000      	movs	r0, #0
    f70c:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    f710:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    f714:	4770      	bx	lr

0000f716 <queue_insert>:
{
    f716:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f71a:	4699      	mov	r9, r3
    f71c:	4604      	mov	r4, r0
    f71e:	460d      	mov	r5, r1
    f720:	4690      	mov	r8, r2
    f722:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f726:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    f72a:	f04f 0220 	mov.w	r2, #32
    f72e:	f3ef 8711 	mrs	r7, BASEPRI
    f732:	f382 8811 	msr	BASEPRI, r2
    f736:	f3bf 8f6f 	isb	sy
	if (is_append) {
    f73a:	b103      	cbz	r3, f73e <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
    f73c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    f73e:	4630      	mov	r0, r6
    f740:	f000 f97d 	bl	fa3e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    f744:	b160      	cbz	r0, f760 <queue_insert+0x4a>
    f746:	2400      	movs	r4, #0
    f748:	f8c0 8014 	str.w	r8, [r0, #20]
    f74c:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
	z_ready_thread(thread);
    f750:	f000 f91a 	bl	f988 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    f754:	4630      	mov	r0, r6
    f756:	4639      	mov	r1, r7
    f758:	f7fb f93e 	bl	a9d8 <z_reschedule>
	return 0;
    f75c:	2000      	movs	r0, #0
    f75e:	e00c      	b.n	f77a <queue_insert+0x64>
	if (alloc) {
    f760:	f1b9 0f00 	cmp.w	r9, #0
    f764:	d01b      	beq.n	f79e <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    f766:	2108      	movs	r1, #8
    f768:	f7fc f8c4 	bl	b8f4 <z_thread_aligned_alloc>
		if (anode == NULL) {
    f76c:	b938      	cbnz	r0, f77e <queue_insert+0x68>
	__asm__ volatile(
    f76e:	f387 8811 	msr	BASEPRI, r7
    f772:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    f776:	f06f 000b 	mvn.w	r0, #11
}
    f77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    f77e:	2301      	movs	r3, #1
		anode->data = data;
    f780:	f8c0 8004 	str.w	r8, [r0, #4]
    f784:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    f786:	6803      	ldr	r3, [r0, #0]
    f788:	f003 0203 	and.w	r2, r3, #3
    f78c:	b95d      	cbnz	r5, f7a6 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    f78e:	6823      	ldr	r3, [r4, #0]
    f790:	4313      	orrs	r3, r2
    f792:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    f794:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    f796:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    f798:	b973      	cbnz	r3, f7b8 <queue_insert+0xa2>
	list->tail = node;
    f79a:	6060      	str	r0, [r4, #4]
}
    f79c:	e00c      	b.n	f7b8 <queue_insert+0xa2>
}
    f79e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
    f7a0:	f8c8 9000 	str.w	r9, [r8]
}
    f7a4:	e7ef      	b.n	f786 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f7a6:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    f7a8:	f033 0303 	bics.w	r3, r3, #3
    f7ac:	d110      	bne.n	f7d0 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
    f7ae:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    f7b0:	6862      	ldr	r2, [r4, #4]
    f7b2:	b93a      	cbnz	r2, f7c4 <queue_insert+0xae>
	list->head = node;
    f7b4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    f7b8:	2104      	movs	r1, #4
    f7ba:	f104 0010 	add.w	r0, r4, #16
    f7be:	f000 fbdd 	bl	ff7c <z_handle_obj_poll_events>
    f7c2:	e7c7      	b.n	f754 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f7c4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f7c6:	f003 0303 	and.w	r3, r3, #3
    f7ca:	4303      	orrs	r3, r0
    f7cc:	6013      	str	r3, [r2, #0]
    f7ce:	e7e4      	b.n	f79a <queue_insert+0x84>
    f7d0:	4313      	orrs	r3, r2
    f7d2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f7d4:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f7d6:	f003 0303 	and.w	r3, r3, #3
    f7da:	4303      	orrs	r3, r0
    f7dc:	602b      	str	r3, [r5, #0]
}
    f7de:	e7eb      	b.n	f7b8 <queue_insert+0xa2>

0000f7e0 <z_queue_node_peek>:
{
    f7e0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    f7e2:	4604      	mov	r4, r0
    f7e4:	b130      	cbz	r0, f7f4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f7e6:	6802      	ldr	r2, [r0, #0]
    f7e8:	0793      	lsls	r3, r2, #30
    f7ea:	d003      	beq.n	f7f4 <z_queue_node_peek+0x14>
		ret = anode->data;
    f7ec:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    f7ee:	b109      	cbz	r1, f7f4 <z_queue_node_peek+0x14>
			k_free(anode);
    f7f0:	f000 fbf0 	bl	ffd4 <k_free>
}
    f7f4:	4620      	mov	r0, r4
    f7f6:	bd10      	pop	{r4, pc}

0000f7f8 <z_impl_k_queue_init>:
	list->head = NULL;
    f7f8:	2300      	movs	r3, #0
	list->tail = NULL;
    f7fa:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
    f7fe:	f100 0308 	add.w	r3, r0, #8
    f802:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
    f806:	f100 0310 	add.w	r3, r0, #16
    f80a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
    f80e:	4770      	bx	lr

0000f810 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
    f810:	2301      	movs	r3, #1
{
    f812:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    f814:	9300      	str	r3, [sp, #0]
    f816:	2300      	movs	r3, #0
{
    f818:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    f81a:	4619      	mov	r1, r3
    f81c:	f7ff ff7b 	bl	f716 <queue_insert>
}
    f820:	b003      	add	sp, #12
    f822:	f85d fb04 	ldr.w	pc, [sp], #4

0000f826 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
    f826:	2300      	movs	r3, #0
{
    f828:	b507      	push	{r0, r1, r2, lr}
    f82a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
    f82c:	9300      	str	r3, [sp, #0]
    f82e:	4619      	mov	r1, r3
    f830:	f7ff ff71 	bl	f716 <queue_insert>
}
    f834:	b003      	add	sp, #12
    f836:	f85d fb04 	ldr.w	pc, [sp], #4

0000f83a <k_queue_append_list>:
{
    f83a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f83e:	4605      	mov	r5, r0
    f840:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
    f842:	460c      	mov	r4, r1
    f844:	b391      	cbz	r1, f8ac <k_queue_append_list+0x72>
    f846:	b38a      	cbz	r2, f8ac <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f848:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
    f84c:	f04f 0320 	mov.w	r3, #32
    f850:	f3ef 8811 	mrs	r8, BASEPRI
    f854:	f383 8811 	msr	BASEPRI, r3
    f858:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
    f85c:	4638      	mov	r0, r7
    f85e:	f000 f8ee 	bl	fa3e <z_unpend_first_thread>
    f862:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
    f866:	b920      	cbnz	r0, f872 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    f868:	686b      	ldr	r3, [r5, #4]
    f86a:	b9cb      	cbnz	r3, f8a0 <k_queue_append_list+0x66>
	list->head = node;
    f86c:	602c      	str	r4, [r5, #0]
	list->tail = node;
    f86e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    f870:	e00a      	b.n	f888 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
    f872:	6144      	str	r4, [r0, #20]
    f874:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
    f878:	f000 f886 	bl	f988 <z_ready_thread>
		head = *(void **)head;
    f87c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
    f87e:	4638      	mov	r0, r7
    f880:	f000 f8dd 	bl	fa3e <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
    f884:	2c00      	cmp	r4, #0
    f886:	d1ee      	bne.n	f866 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
    f888:	2104      	movs	r1, #4
    f88a:	f105 0010 	add.w	r0, r5, #16
    f88e:	f000 fb75 	bl	ff7c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
    f892:	4638      	mov	r0, r7
    f894:	4641      	mov	r1, r8
    f896:	f7fb f89f 	bl	a9d8 <z_reschedule>
	return 0;
    f89a:	2000      	movs	r0, #0
}
    f89c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f8a0:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f8a2:	f001 0103 	and.w	r1, r1, #3
    f8a6:	430c      	orrs	r4, r1
    f8a8:	601c      	str	r4, [r3, #0]
}
    f8aa:	e7e0      	b.n	f86e <k_queue_append_list+0x34>
		return -EINVAL;
    f8ac:	f06f 0015 	mvn.w	r0, #21
    f8b0:	e7f4      	b.n	f89c <k_queue_append_list+0x62>

0000f8b2 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
    f8b2:	f990 000e 	ldrsb.w	r0, [r0, #14]
    f8b6:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
    f8ba:	4298      	cmp	r0, r3
    f8bc:	bfac      	ite	ge
    f8be:	2000      	movge	r0, #0
    f8c0:	2001      	movlt	r0, #1
    f8c2:	4770      	bx	lr

0000f8c4 <z_find_first_thread_to_unpend>:
{
    f8c4:	b510      	push	{r4, lr}
    f8c6:	f04f 0320 	mov.w	r3, #32
    f8ca:	f3ef 8411 	mrs	r4, BASEPRI
    f8ce:	f383 8811 	msr	BASEPRI, r3
    f8d2:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    f8d6:	f000 f84d 	bl	f974 <z_priq_dumb_best>
	__asm__ volatile(
    f8da:	f384 8811 	msr	BASEPRI, r4
    f8de:	f3bf 8f6f 	isb	sy
}
    f8e2:	bd10      	pop	{r4, pc}

0000f8e4 <z_unpend_thread_no_timeout>:
{
    f8e4:	b510      	push	{r4, lr}
	__asm__ volatile(
    f8e6:	f04f 0320 	mov.w	r3, #32
    f8ea:	f3ef 8411 	mrs	r4, BASEPRI
    f8ee:	f383 8811 	msr	BASEPRI, r3
    f8f2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    f8f6:	f000 f81b 	bl	f930 <unpend_thread_no_timeout>
	__asm__ volatile(
    f8fa:	f384 8811 	msr	BASEPRI, r4
    f8fe:	f3bf 8f6f 	isb	sy
}
    f902:	bd10      	pop	{r4, pc}

0000f904 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f904:	4603      	mov	r3, r0
    f906:	b920      	cbnz	r0, f912 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f908:	f3ef 8205 	mrs	r2, IPSR
    f90c:	b90a      	cbnz	r2, f912 <z_reschedule_irqlock+0xe>
    f90e:	f7f3 bac7 	b.w	2ea0 <arch_swap>
    f912:	f383 8811 	msr	BASEPRI, r3
    f916:	f3bf 8f6f 	isb	sy
}
    f91a:	4770      	bx	lr

0000f91c <z_reschedule_unlocked>:
	__asm__ volatile(
    f91c:	f04f 0320 	mov.w	r3, #32
    f920:	f3ef 8011 	mrs	r0, BASEPRI
    f924:	f383 8811 	msr	BASEPRI, r3
    f928:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    f92c:	f7ff bfea 	b.w	f904 <z_reschedule_irqlock>

0000f930 <unpend_thread_no_timeout>:
{
    f930:	4601      	mov	r1, r0
    f932:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    f934:	6880      	ldr	r0, [r0, #8]
    f936:	f7fb f875 	bl	aa24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f93a:	7b4b      	ldrb	r3, [r1, #13]
    f93c:	f023 0302 	bic.w	r3, r3, #2
    f940:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    f942:	2300      	movs	r3, #0
    f944:	608b      	str	r3, [r1, #8]
}
    f946:	bd08      	pop	{r3, pc}

0000f948 <z_unpend_thread>:
{
    f948:	b538      	push	{r3, r4, r5, lr}
    f94a:	4604      	mov	r4, r0
    f94c:	f04f 0320 	mov.w	r3, #32
    f950:	f3ef 8511 	mrs	r5, BASEPRI
    f954:	f383 8811 	msr	BASEPRI, r3
    f958:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    f95c:	f7ff ffe8 	bl	f930 <unpend_thread_no_timeout>
	__asm__ volatile(
    f960:	f385 8811 	msr	BASEPRI, r5
    f964:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    f968:	f104 0018 	add.w	r0, r4, #24
}
    f96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f970:	f000 b927 	b.w	fbc2 <z_abort_timeout>

0000f974 <z_priq_dumb_best>:
{
    f974:	4603      	mov	r3, r0
	return list->head == list;
    f976:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f978:	4283      	cmp	r3, r0
    f97a:	d003      	beq.n	f984 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    f97c:	2800      	cmp	r0, #0
    f97e:	bf38      	it	cc
    f980:	2000      	movcc	r0, #0
    f982:	4770      	bx	lr
	struct k_thread *thread = NULL;
    f984:	2000      	movs	r0, #0
}
    f986:	4770      	bx	lr

0000f988 <z_ready_thread>:
{
    f988:	b510      	push	{r4, lr}
	__asm__ volatile(
    f98a:	f04f 0320 	mov.w	r3, #32
    f98e:	f3ef 8411 	mrs	r4, BASEPRI
    f992:	f383 8811 	msr	BASEPRI, r3
    f996:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    f99a:	f7fb f89d 	bl	aad8 <ready_thread>
	__asm__ volatile(
    f99e:	f384 8811 	msr	BASEPRI, r4
    f9a2:	f3bf 8f6f 	isb	sy
}
    f9a6:	bd10      	pop	{r4, pc}

0000f9a8 <z_thread_timeout>:
{
    f9a8:	b570      	push	{r4, r5, r6, lr}
    f9aa:	4604      	mov	r4, r0
	__asm__ volatile(
    f9ac:	f04f 0320 	mov.w	r3, #32
    f9b0:	f3ef 8611 	mrs	r6, BASEPRI
    f9b4:	f383 8811 	msr	BASEPRI, r3
    f9b8:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    f9bc:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    f9c0:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    f9c4:	b113      	cbz	r3, f9cc <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    f9c6:	4628      	mov	r0, r5
    f9c8:	f7ff ffb2 	bl	f930 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    f9cc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
    f9d0:	4628      	mov	r0, r5
    f9d2:	f023 0314 	bic.w	r3, r3, #20
    f9d6:	f804 3c0b 	strb.w	r3, [r4, #-11]
    f9da:	f7fb f87d 	bl	aad8 <ready_thread>
	__asm__ volatile(
    f9de:	f386 8811 	msr	BASEPRI, r6
    f9e2:	f3bf 8f6f 	isb	sy
}
    f9e6:	bd70      	pop	{r4, r5, r6, pc}

0000f9e8 <add_to_waitq_locked>:
{
    f9e8:	b538      	push	{r3, r4, r5, lr}
    f9ea:	4604      	mov	r4, r0
    f9ec:	460d      	mov	r5, r1
	unready_thread(thread);
    f9ee:	f7fb f9fb 	bl	ade8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    f9f2:	7b63      	ldrb	r3, [r4, #13]
    f9f4:	f043 0302 	orr.w	r3, r3, #2
    f9f8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    f9fa:	b1c5      	cbz	r5, fa2e <add_to_waitq_locked+0x46>
	return list->head == list;
    f9fc:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    f9fe:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fa00:	429d      	cmp	r5, r3
    fa02:	bf08      	it	eq
    fa04:	2300      	moveq	r3, #0
    fa06:	2b00      	cmp	r3, #0
    fa08:	bf38      	it	cc
    fa0a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fa0c:	b183      	cbz	r3, fa30 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    fa0e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    fa12:	f993 200e 	ldrsb.w	r2, [r3, #14]
    fa16:	4291      	cmp	r1, r2
    fa18:	db04      	blt.n	fa24 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    fa1a:	686a      	ldr	r2, [r5, #4]
    fa1c:	429a      	cmp	r2, r3
    fa1e:	d007      	beq.n	fa30 <add_to_waitq_locked+0x48>
    fa20:	681b      	ldr	r3, [r3, #0]
    fa22:	e7f3      	b.n	fa0c <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    fa24:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fa26:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    fa2a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    fa2c:	605c      	str	r4, [r3, #4]
}
    fa2e:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    fa30:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    fa32:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    fa34:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    fa36:	686b      	ldr	r3, [r5, #4]
    fa38:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fa3a:	606c      	str	r4, [r5, #4]
    fa3c:	e7f7      	b.n	fa2e <add_to_waitq_locked+0x46>

0000fa3e <z_unpend_first_thread>:
{
    fa3e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fa40:	f04f 0320 	mov.w	r3, #32
    fa44:	f3ef 8211 	mrs	r2, BASEPRI
    fa48:	f383 8811 	msr	BASEPRI, r3
    fa4c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    fa50:	f7ff ff90 	bl	f974 <z_priq_dumb_best>
    fa54:	4604      	mov	r4, r0
	__asm__ volatile(
    fa56:	f382 8811 	msr	BASEPRI, r2
    fa5a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    fa5e:	b188      	cbz	r0, fa84 <z_unpend_first_thread+0x46>
	__asm__ volatile(
    fa60:	f04f 0320 	mov.w	r3, #32
    fa64:	f3ef 8511 	mrs	r5, BASEPRI
    fa68:	f383 8811 	msr	BASEPRI, r3
    fa6c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    fa70:	f7ff ff5e 	bl	f930 <unpend_thread_no_timeout>
	__asm__ volatile(
    fa74:	f385 8811 	msr	BASEPRI, r5
    fa78:	f3bf 8f6f 	isb	sy
    fa7c:	f104 0018 	add.w	r0, r4, #24
    fa80:	f000 f89f 	bl	fbc2 <z_abort_timeout>
}
    fa84:	4620      	mov	r0, r4
    fa86:	bd38      	pop	{r3, r4, r5, pc}

0000fa88 <z_unpend_all>:
{
    fa88:	b538      	push	{r3, r4, r5, lr}
    fa8a:	4605      	mov	r5, r0
	int need_sched = 0;
    fa8c:	2000      	movs	r0, #0
	return list->head == list;
    fa8e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fa90:	42a5      	cmp	r5, r4
    fa92:	d000      	beq.n	fa96 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    fa94:	b904      	cbnz	r4, fa98 <z_unpend_all+0x10>
}
    fa96:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    fa98:	4620      	mov	r0, r4
    fa9a:	f7ff ff55 	bl	f948 <z_unpend_thread>
		z_ready_thread(thread);
    fa9e:	4620      	mov	r0, r4
    faa0:	f7ff ff72 	bl	f988 <z_ready_thread>
		need_sched = 1;
    faa4:	2001      	movs	r0, #1
    faa6:	e7f2      	b.n	fa8e <z_unpend_all+0x6>

0000faa8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
    faa8:	b15a      	cbz	r2, fac2 <z_impl_k_sem_init+0x1a>
    faaa:	428a      	cmp	r2, r1
    faac:	d309      	bcc.n	fac2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    faae:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    fab2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    fab6:	e9c0 0000 	strd	r0, r0, [r0]
    faba:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    fabe:	2000      	movs	r0, #0
    fac0:	4770      	bx	lr
		return -EINVAL;
    fac2:	f06f 0015 	mvn.w	r0, #21
}
    fac6:	4770      	bx	lr

0000fac8 <k_is_in_isr>:
    fac8:	f3ef 8005 	mrs	r0, IPSR
}
    facc:	3800      	subs	r0, #0
    face:	bf18      	it	ne
    fad0:	2001      	movne	r0, #1
    fad2:	4770      	bx	lr

0000fad4 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    fad4:	b108      	cbz	r0, fada <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    fad6:	f7f1 bb59 	b.w	118c <arch_busy_wait>
}
    fada:	4770      	bx	lr

0000fadc <z_impl_k_thread_name_set>:
}
    fadc:	f06f 0046 	mvn.w	r0, #70	; 0x46
    fae0:	4770      	bx	lr

0000fae2 <k_thread_name_get>:
}
    fae2:	2000      	movs	r0, #0
    fae4:	4770      	bx	lr

0000fae6 <k_work_submit_to_queue>:
{
    fae6:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fae8:	f101 0308 	add.w	r3, r1, #8
    faec:	e8d3 2fef 	ldaex	r2, [r3]
    faf0:	f042 0c01 	orr.w	ip, r2, #1
    faf4:	e8c3 cfee 	stlex	lr, ip, [r3]
    faf8:	f1be 0f00 	cmp.w	lr, #0
    fafc:	d1f6      	bne.n	faec <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    fafe:	07d3      	lsls	r3, r2, #31
    fb00:	d403      	bmi.n	fb0a <k_work_submit_to_queue+0x24>
}
    fb02:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
    fb06:	f7ff be83 	b.w	f810 <k_queue_append>
}
    fb0a:	f85d fb04 	ldr.w	pc, [sp], #4

0000fb0e <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
    fb0e:	f1a0 0110 	sub.w	r1, r0, #16
    fb12:	6980      	ldr	r0, [r0, #24]
    fb14:	f7ff bfe7 	b.w	fae6 <k_work_submit_to_queue>

0000fb18 <work_cancel>:
{
    fb18:	b570      	push	{r4, r5, r6, lr}
    fb1a:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
    fb1c:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fb20:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
    fb24:	07db      	lsls	r3, r3, #31
    fb26:	d52f      	bpl.n	fb88 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
    fb28:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
    fb2a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    fb2c:	6813      	ldr	r3, [r2, #0]
    fb2e:	b913      	cbnz	r3, fb36 <work_cancel+0x1e>
			return -EINVAL;
    fb30:	f06f 0015 	mvn.w	r0, #21
}
    fb34:	bd70      	pop	{r4, r5, r6, pc}
    fb36:	429c      	cmp	r4, r3
    fb38:	d121      	bne.n	fb7e <work_cancel+0x66>
Z_GENLIST_REMOVE(sflist, sfnode)
    fb3a:	6823      	ldr	r3, [r4, #0]
    fb3c:	6856      	ldr	r6, [r2, #4]
    fb3e:	f023 0003 	bic.w	r0, r3, #3
    fb42:	b991      	cbnz	r1, fb6a <work_cancel+0x52>
    fb44:	42b4      	cmp	r4, r6
	list->head = node;
    fb46:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
    fb48:	d100      	bne.n	fb4c <work_cancel+0x34>
	list->tail = node;
    fb4a:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    fb4c:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    fb4e:	f003 0303 	and.w	r3, r3, #3
    fb52:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
    fb54:	2000      	movs	r0, #0
    fb56:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fb58:	e8d5 3fef 	ldaex	r3, [r5]
    fb5c:	f023 0301 	bic.w	r3, r3, #1
    fb60:	e8c5 3fe2 	stlex	r2, r3, [r5]
    fb64:	2a00      	cmp	r2, #0
    fb66:	d0e5      	beq.n	fb34 <work_cancel+0x1c>
    fb68:	e7f6      	b.n	fb58 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    fb6a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
    fb6c:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
    fb6e:	f003 0303 	and.w	r3, r3, #3
    fb72:	ea43 0300 	orr.w	r3, r3, r0
    fb76:	600b      	str	r3, [r1, #0]
	list->tail = node;
    fb78:	bf08      	it	eq
    fb7a:	6051      	streq	r1, [r2, #4]
}
    fb7c:	e7e6      	b.n	fb4c <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    fb7e:	6818      	ldr	r0, [r3, #0]
    fb80:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
    fb82:	f020 0303 	bic.w	r3, r0, #3
    fb86:	e7d2      	b.n	fb2e <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
    fb88:	3010      	adds	r0, #16
    fb8a:	f000 f81a 	bl	fbc2 <z_abort_timeout>
		if (err) {
    fb8e:	2800      	cmp	r0, #0
    fb90:	d0e0      	beq.n	fb54 <work_cancel+0x3c>
			return -EALREADY;
    fb92:	f06f 0044 	mvn.w	r0, #68	; 0x44
    fb96:	e7cd      	b.n	fb34 <work_cancel+0x1c>

0000fb98 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
    fb98:	b510      	push	{r4, lr}
	__asm__ volatile(
    fb9a:	f04f 0220 	mov.w	r2, #32
    fb9e:	f3ef 8411 	mrs	r4, BASEPRI
    fba2:	f382 8811 	msr	BASEPRI, r2
    fba6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
    fbaa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    fbac:	b133      	cbz	r3, fbbc <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
    fbae:	f7ff ffb3 	bl	fb18 <work_cancel>
	__asm__ volatile(
    fbb2:	f384 8811 	msr	BASEPRI, r4
    fbb6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
    fbba:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    fbbc:	f06f 0015 	mvn.w	r0, #21
    fbc0:	e7f7      	b.n	fbb2 <k_delayed_work_cancel+0x1a>

0000fbc2 <z_abort_timeout>:
{
    fbc2:	b510      	push	{r4, lr}
	__asm__ volatile(
    fbc4:	f04f 0220 	mov.w	r2, #32
    fbc8:	f3ef 8411 	mrs	r4, BASEPRI
    fbcc:	f382 8811 	msr	BASEPRI, r2
    fbd0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    fbd4:	6803      	ldr	r3, [r0, #0]
    fbd6:	b13b      	cbz	r3, fbe8 <z_abort_timeout+0x26>
			remove_timeout(to);
    fbd8:	f7fb fc26 	bl	b428 <remove_timeout>
			ret = 0;
    fbdc:	2000      	movs	r0, #0
	__asm__ volatile(
    fbde:	f384 8811 	msr	BASEPRI, r4
    fbe2:	f3bf 8f6f 	isb	sy
}
    fbe6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    fbe8:	f06f 0015 	mvn.w	r0, #21
    fbec:	e7f7      	b.n	fbde <z_abort_timeout+0x1c>

0000fbee <z_get_next_timeout_expiry>:
{
    fbee:	b510      	push	{r4, lr}
	__asm__ volatile(
    fbf0:	f04f 0320 	mov.w	r3, #32
    fbf4:	f3ef 8411 	mrs	r4, BASEPRI
    fbf8:	f383 8811 	msr	BASEPRI, r3
    fbfc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    fc00:	f7fb fc2c 	bl	b45c <next_timeout>
	__asm__ volatile(
    fc04:	f384 8811 	msr	BASEPRI, r4
    fc08:	f3bf 8f6f 	isb	sy
}
    fc0c:	bd10      	pop	{r4, pc}

0000fc0e <z_set_timeout_expiry>:
{
    fc0e:	b570      	push	{r4, r5, r6, lr}
    fc10:	4604      	mov	r4, r0
    fc12:	460d      	mov	r5, r1
	__asm__ volatile(
    fc14:	f04f 0320 	mov.w	r3, #32
    fc18:	f3ef 8611 	mrs	r6, BASEPRI
    fc1c:	f383 8811 	msr	BASEPRI, r3
    fc20:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    fc24:	f7fb fc1a 	bl	b45c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    fc28:	2801      	cmp	r0, #1
    fc2a:	dd05      	ble.n	fc38 <z_set_timeout_expiry+0x2a>
    fc2c:	42a0      	cmp	r0, r4
    fc2e:	dd03      	ble.n	fc38 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    fc30:	4629      	mov	r1, r5
    fc32:	4620      	mov	r0, r4
    fc34:	f7f2 fe22 	bl	287c <z_clock_set_timeout>
	__asm__ volatile(
    fc38:	f386 8811 	msr	BASEPRI, r6
    fc3c:	f3bf 8f6f 	isb	sy
}
    fc40:	bd70      	pop	{r4, r5, r6, pc}

0000fc42 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    fc42:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    fc44:	f7fb fd2e 	bl	b6a4 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    fc48:	bd08      	pop	{r3, pc}

0000fc4a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
    fc4a:	f7fb bd2b 	b.w	b6a4 <z_tick_get>

0000fc4e <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
    fc4e:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fc50:	1c4b      	adds	r3, r1, #1
    fc52:	bf08      	it	eq
    fc54:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    fc58:	4604      	mov	r4, r0
    fc5a:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fc5c:	d013      	beq.n	fc86 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    fc5e:	ea54 0105 	orrs.w	r1, r4, r5
    fc62:	d103      	bne.n	fc6c <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
    fc64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
    fc68:	f7fb bd1c 	b.w	b6a4 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    fc6c:	f06f 0101 	mvn.w	r1, #1
    fc70:	1a0a      	subs	r2, r1, r0
    fc72:	f04f 31ff 	mov.w	r1, #4294967295
    fc76:	eb61 0305 	sbc.w	r3, r1, r5
    fc7a:	2a00      	cmp	r2, #0
    fc7c:	f173 0100 	sbcs.w	r1, r3, #0
    fc80:	db02      	blt.n	fc88 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
    fc82:	4610      	mov	r0, r2
    fc84:	4619      	mov	r1, r3
}
    fc86:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
    fc88:	f7fb fd0c 	bl	b6a4 <z_tick_get>
    fc8c:	2c01      	cmp	r4, #1
    fc8e:	f175 0300 	sbcs.w	r3, r5, #0
    fc92:	bfbc      	itt	lt
    fc94:	2401      	movlt	r4, #1
    fc96:	2500      	movlt	r5, #0
    fc98:	1820      	adds	r0, r4, r0
    fc9a:	eb45 0101 	adc.w	r1, r5, r1
    fc9e:	e7f2      	b.n	fc86 <z_timeout_end_calc+0x38>

0000fca0 <k_timer_init>:
	timer->status = 0U;
    fca0:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    fca2:	e9c0 1208 	strd	r1, r2, [r0, #32]
    fca6:	f100 0218 	add.w	r2, r0, #24
    fcaa:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    fcae:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    fcb2:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    fcb4:	6343      	str	r3, [r0, #52]	; 0x34
}
    fcb6:	4770      	bx	lr

0000fcb8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    fcb8:	b510      	push	{r4, lr}
    fcba:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    fcbc:	f7ff ff81 	bl	fbc2 <z_abort_timeout>

	if (inactive) {
    fcc0:	b9d8      	cbnz	r0, fcfa <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
    fcc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fcc4:	b10b      	cbz	r3, fcca <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    fcc6:	4620      	mov	r0, r4
    fcc8:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    fcca:	f104 0018 	add.w	r0, r4, #24
    fcce:	2100      	movs	r1, #0
    fcd0:	f7ff fdf8 	bl	f8c4 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    fcd4:	4604      	mov	r4, r0
    fcd6:	b180      	cbz	r0, fcfa <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
    fcd8:	f7ff fe04 	bl	f8e4 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
    fcdc:	4620      	mov	r0, r4
    fcde:	f7ff fe53 	bl	f988 <z_ready_thread>
	__asm__ volatile(
    fce2:	f04f 0320 	mov.w	r3, #32
    fce6:	f3ef 8011 	mrs	r0, BASEPRI
    fcea:	f383 8811 	msr	BASEPRI, r3
    fcee:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    fcf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    fcf6:	f7ff be05 	b.w	f904 <z_reschedule_irqlock>
    fcfa:	bd10      	pop	{r4, pc}

0000fcfc <clear_event_registrations>:
	while (num_events--) {
    fcfc:	2314      	movs	r3, #20
{
    fcfe:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
    fd00:	2400      	movs	r4, #0
    fd02:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
    fd06:	4281      	cmp	r1, r0
    fd08:	d100      	bne.n	fd0c <clear_event_registrations+0x10>
}
    fd0a:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
    fd0c:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
    fd10:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
    fd14:	f003 030f 	and.w	r3, r3, #15
    fd18:	2b02      	cmp	r3, #2
    fd1a:	d80a      	bhi.n	fd32 <clear_event_registrations+0x36>
    fd1c:	b15b      	cbz	r3, fd36 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
    fd1e:	f851 3c14 	ldr.w	r3, [r1, #-20]
    fd22:	b143      	cbz	r3, fd36 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
    fd24:	f851 5c10 	ldr.w	r5, [r1, #-16]
    fd28:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
    fd2a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    fd2c:	e941 4405 	strd	r4, r4, [r1, #-20]
}
    fd30:	e001      	b.n	fd36 <clear_event_registrations+0x3a>
	switch (event->type) {
    fd32:	2b04      	cmp	r3, #4
    fd34:	d0f3      	beq.n	fd1e <clear_event_registrations+0x22>
	__asm__ volatile(
    fd36:	f382 8811 	msr	BASEPRI, r2
    fd3a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    fd3e:	f04f 0320 	mov.w	r3, #32
    fd42:	f3ef 8211 	mrs	r2, BASEPRI
    fd46:	f383 8811 	msr	BASEPRI, r3
    fd4a:	f3bf 8f6f 	isb	sy
    fd4e:	3914      	subs	r1, #20
    fd50:	e7d9      	b.n	fd06 <clear_event_registrations+0xa>

0000fd52 <k_work_submit_to_queue>:
{
    fd52:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fd54:	f101 0308 	add.w	r3, r1, #8
    fd58:	e8d3 2fef 	ldaex	r2, [r3]
    fd5c:	f042 0c01 	orr.w	ip, r2, #1
    fd60:	e8c3 cfee 	stlex	lr, ip, [r3]
    fd64:	f1be 0f00 	cmp.w	lr, #0
    fd68:	d1f6      	bne.n	fd58 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    fd6a:	07d3      	lsls	r3, r2, #31
    fd6c:	d403      	bmi.n	fd76 <k_work_submit_to_queue+0x24>
}
    fd6e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
    fd72:	f7ff bd4d 	b.w	f810 <k_queue_append>
}
    fd76:	f85d fb04 	ldr.w	pc, [sp], #4

0000fd7a <signal_poll_event>:
{
    fd7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    fd7e:	6884      	ldr	r4, [r0, #8]
{
    fd80:	4605      	mov	r5, r0
    fd82:	460e      	mov	r6, r1
	if (poller) {
    fd84:	b144      	cbz	r4, fd98 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    fd86:	7863      	ldrb	r3, [r4, #1]
    fd88:	2b01      	cmp	r3, #1
    fd8a:	d138      	bne.n	fdfe <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
    fd8c:	f814 3c57 	ldrb.w	r3, [r4, #-87]
    fd90:	f013 0302 	ands.w	r3, r3, #2
    fd94:	d10a      	bne.n	fdac <signal_poll_event+0x32>
		poller->is_polling = false;
    fd96:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
    fd98:	2000      	movs	r0, #0
	event->state |= state;
    fd9a:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
    fd9c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    fd9e:	f3c3 3104 	ubfx	r1, r3, #12, #5
    fda2:	430e      	orrs	r6, r1
    fda4:	f366 3310 	bfi	r3, r6, #12, #5
    fda8:	60eb      	str	r3, [r5, #12]
	return retcode;
    fdaa:	e00d      	b.n	fdc8 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
    fdac:	f04f 31ff 	mov.w	r1, #4294967295
    fdb0:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
    fdb4:	f06f 0001 	mvn.w	r0, #1
    fdb8:	428b      	cmp	r3, r1
    fdba:	bf08      	it	eq
    fdbc:	4282      	cmpeq	r2, r0
    fdbe:	d105      	bne.n	fdcc <signal_poll_event+0x52>
		poller->is_polling = false;
    fdc0:	2300      	movs	r3, #0
		return -EAGAIN;
    fdc2:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
    fdc6:	7023      	strb	r3, [r4, #0]
}
    fdc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    fdcc:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
    fdd0:	4640      	mov	r0, r8
    fdd2:	f7ff fdb9 	bl	f948 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    fdd6:	2e08      	cmp	r6, #8
    fdd8:	bf0c      	ite	eq
    fdda:	f06f 0303 	mvneq.w	r3, #3
    fdde:	2300      	movne	r3, #0
    fde0:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    fde2:	f814 3c57 	ldrb.w	r3, [r4, #-87]
    fde6:	06db      	lsls	r3, r3, #27
    fde8:	d102      	bne.n	fdf0 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
    fdea:	f854 7c4c 	ldr.w	r7, [r4, #-76]
    fdee:	b10f      	cbz	r7, fdf4 <signal_poll_event+0x7a>
		poller->is_polling = false;
    fdf0:	2300      	movs	r3, #0
    fdf2:	e7d0      	b.n	fd96 <signal_poll_event+0x1c>
	z_ready_thread(thread);
    fdf4:	4640      	mov	r0, r8
    fdf6:	f7ff fdc7 	bl	f988 <z_ready_thread>
		poller->is_polling = false;
    fdfa:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    fdfc:	e7cc      	b.n	fd98 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    fdfe:	2b02      	cmp	r3, #2
    fe00:	d1f6      	bne.n	fdf0 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    fe02:	7823      	ldrb	r3, [r4, #0]
    fe04:	2b00      	cmp	r3, #0
    fe06:	d0c7      	beq.n	fd98 <signal_poll_event+0x1e>
    fe08:	f854 7c04 	ldr.w	r7, [r4, #-4]
    fe0c:	2f00      	cmp	r7, #0
    fe0e:	d0f4      	beq.n	fdfa <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    fe10:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    fe14:	f1a4 0910 	sub.w	r9, r4, #16
    fe18:	f104 0010 	add.w	r0, r4, #16
    fe1c:	f7ff fed1 	bl	fbc2 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
    fe20:	4649      	mov	r1, r9
    fe22:	4638      	mov	r0, r7
		twork->poll_result = 0;
    fe24:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
    fe28:	f7ff ff93 	bl	fd52 <k_work_submit_to_queue>
		poller->is_polling = false;
    fe2c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    fe30:	e7b2      	b.n	fd98 <signal_poll_event+0x1e>

0000fe32 <add_event>:
{
    fe32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe34:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    fe36:	e9d0 2300 	ldrd	r2, r3, [r0]
    fe3a:	4290      	cmp	r0, r2
    fe3c:	4604      	mov	r4, r0
    fe3e:	460d      	mov	r5, r1
    fe40:	d106      	bne.n	fe50 <add_event+0x1e>
	node->prev = list->tail;
    fe42:	6863      	ldr	r3, [r4, #4]
	node->next = list;
    fe44:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
    fe46:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    fe48:	6863      	ldr	r3, [r4, #4]
    fe4a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    fe4c:	6065      	str	r5, [r4, #4]
}
    fe4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
    fe50:	2b00      	cmp	r3, #0
    fe52:	d0f6      	beq.n	fe42 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
    fe54:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    fe56:	b100      	cbz	r0, fe5a <add_event+0x28>
    fe58:	3864      	subs	r0, #100	; 0x64
    fe5a:	b107      	cbz	r7, fe5e <add_event+0x2c>
    fe5c:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
    fe5e:	4639      	mov	r1, r7
    fe60:	f7ff fd27 	bl	f8b2 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
    fe64:	2800      	cmp	r0, #0
    fe66:	d1ec      	bne.n	fe42 <add_event+0x10>
	return list->head == list;
    fe68:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe6a:	42b4      	cmp	r4, r6
    fe6c:	d0e9      	beq.n	fe42 <add_event+0x10>
    fe6e:	2e00      	cmp	r6, #0
    fe70:	bf38      	it	cc
    fe72:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    fe74:	2e00      	cmp	r6, #0
    fe76:	d0e4      	beq.n	fe42 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
    fe78:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    fe7a:	b101      	cbz	r1, fe7e <add_event+0x4c>
    fe7c:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
    fe7e:	4638      	mov	r0, r7
    fe80:	f7ff fd17 	bl	f8b2 <z_is_t1_higher_prio_than_t2>
    fe84:	b128      	cbz	r0, fe92 <add_event+0x60>
	node->prev = successor->prev;
    fe86:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    fe88:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
    fe8c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    fe8e:	6075      	str	r5, [r6, #4]
			return;
    fe90:	e7dd      	b.n	fe4e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
    fe92:	6863      	ldr	r3, [r4, #4]
    fe94:	42b3      	cmp	r3, r6
    fe96:	d0d4      	beq.n	fe42 <add_event+0x10>
    fe98:	6836      	ldr	r6, [r6, #0]
    fe9a:	e7eb      	b.n	fe74 <add_event+0x42>

0000fe9c <register_events>:
{
    fe9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    fea0:	f04f 0a00 	mov.w	sl, #0
{
    fea4:	460e      	mov	r6, r1
    fea6:	4614      	mov	r4, r2
    fea8:	461f      	mov	r7, r3
    feaa:	4683      	mov	fp, r0
	int events_registered = 0;
    feac:	4655      	mov	r5, sl
	event->poller = NULL;
    feae:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
    feb0:	45b2      	cmp	sl, r6
    feb2:	db02      	blt.n	feba <register_events+0x1e>
}
    feb4:	4628      	mov	r0, r5
    feb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    feba:	f04f 0320 	mov.w	r3, #32
    febe:	f3ef 8911 	mrs	r9, BASEPRI
    fec2:	f383 8811 	msr	BASEPRI, r3
    fec6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    feca:	f89b 200d 	ldrb.w	r2, [fp, #13]
    fece:	f002 020f 	and.w	r2, r2, #15
    fed2:	2a02      	cmp	r2, #2
    fed4:	d006      	beq.n	fee4 <register_events+0x48>
    fed6:	2a04      	cmp	r2, #4
    fed8:	d008      	beq.n	feec <register_events+0x50>
    feda:	2a01      	cmp	r2, #1
    fedc:	d120      	bne.n	ff20 <register_events+0x84>
		if (event->signal->signaled != 0U) {
    fede:	f8db 3010 	ldr.w	r3, [fp, #16]
    fee2:	e001      	b.n	fee8 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
    fee4:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
    fee8:	689b      	ldr	r3, [r3, #8]
    feea:	e002      	b.n	fef2 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
    feec:	f8db 3010 	ldr.w	r3, [fp, #16]
    fef0:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
    fef2:	b1ab      	cbz	r3, ff20 <register_events+0x84>
	event->state |= state;
    fef4:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
    fef8:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
    fefc:	f3c3 3104 	ubfx	r1, r3, #12, #5
    ff00:	430a      	orrs	r2, r1
    ff02:	f362 3310 	bfi	r3, r2, #12, #5
    ff06:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
    ff0a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    ff0e:	f389 8811 	msr	BASEPRI, r9
    ff12:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    ff16:	f10a 0a01 	add.w	sl, sl, #1
    ff1a:	f10b 0b14 	add.w	fp, fp, #20
    ff1e:	e7c7      	b.n	feb0 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
    ff20:	2f00      	cmp	r7, #0
    ff22:	d1f4      	bne.n	ff0e <register_events+0x72>
    ff24:	7823      	ldrb	r3, [r4, #0]
    ff26:	2b00      	cmp	r3, #0
    ff28:	d0f1      	beq.n	ff0e <register_events+0x72>
	switch (event->type) {
    ff2a:	f89b 300d 	ldrb.w	r3, [fp, #13]
    ff2e:	f003 030f 	and.w	r3, r3, #15
    ff32:	2b02      	cmp	r3, #2
    ff34:	d008      	beq.n	ff48 <register_events+0xac>
    ff36:	2b04      	cmp	r3, #4
    ff38:	d006      	beq.n	ff48 <register_events+0xac>
    ff3a:	2b01      	cmp	r3, #1
    ff3c:	d10b      	bne.n	ff56 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
    ff3e:	4622      	mov	r2, r4
    ff40:	4659      	mov	r1, fp
    ff42:	f8db 0010 	ldr.w	r0, [fp, #16]
    ff46:	e004      	b.n	ff52 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
    ff48:	4622      	mov	r2, r4
    ff4a:	4659      	mov	r1, fp
    ff4c:	f8db 0010 	ldr.w	r0, [fp, #16]
    ff50:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    ff52:	f7ff ff6e 	bl	fe32 <add_event>
	event->poller = poller;
    ff56:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
    ff5a:	3501      	adds	r5, #1
    ff5c:	e7d7      	b.n	ff0e <register_events+0x72>

0000ff5e <k_poll_event_init>:
{
    ff5e:	b510      	push	{r4, lr}
	event->poller = NULL;
    ff60:	2400      	movs	r4, #0
	event->type = type;
    ff62:	0452      	lsls	r2, r2, #17
    ff64:	0209      	lsls	r1, r1, #8
    ff66:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
    ff6a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
    ff6e:	430a      	orrs	r2, r1
    ff70:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
    ff72:	6084      	str	r4, [r0, #8]
	event->type = type;
    ff74:	430a      	orrs	r2, r1
	event->obj = obj;
    ff76:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
    ff7a:	bd10      	pop	{r4, pc}

0000ff7c <z_handle_obj_poll_events>:
{
    ff7c:	4603      	mov	r3, r0
	return list->head == list;
    ff7e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    ff80:	4283      	cmp	r3, r0
    ff82:	d008      	beq.n	ff96 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
    ff84:	e9d0 3200 	ldrd	r3, r2, [r0]
    ff88:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    ff8a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ff8c:	2300      	movs	r3, #0
	node->prev = NULL;
    ff8e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    ff92:	f7ff bef2 	b.w	fd7a <signal_poll_event>
}
    ff96:	4770      	bx	lr

0000ff98 <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
    ff98:	2904      	cmp	r1, #4
{
    ff9a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
    ff9e:	460d      	mov	r5, r1
    ffa0:	bf38      	it	cc
    ffa2:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    ffa4:	1952      	adds	r2, r2, r5
{
    ffa6:	4606      	mov	r6, r0
    ffa8:	d209      	bcs.n	ffbe <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
    ffaa:	f04f 0800 	mov.w	r8, #0
    ffae:	f04f 0900 	mov.w	r9, #0
    ffb2:	e9cd 8900 	strd	r8, r9, [sp]
    ffb6:	f7ff fb28 	bl	f60a <k_heap_aligned_alloc>
	if (mem == NULL) {
    ffba:	4604      	mov	r4, r0
    ffbc:	b918      	cbnz	r0, ffc6 <z_heap_aligned_alloc+0x2e>
		return NULL;
    ffbe:	2000      	movs	r0, #0
}
    ffc0:	b002      	add	sp, #8
    ffc2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
    ffc6:	462a      	mov	r2, r5
    ffc8:	21ff      	movs	r1, #255	; 0xff
    ffca:	f7fd fae1 	bl	d590 <memset>
	*heap_ref = heap;
    ffce:	6026      	str	r6, [r4, #0]
	return mem + excess;
    ffd0:	1960      	adds	r0, r4, r5
    ffd2:	e7f5      	b.n	ffc0 <z_heap_aligned_alloc+0x28>

0000ffd4 <k_free>:
	if (ptr != NULL) {
    ffd4:	b138      	cbz	r0, ffe6 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
    ffd6:	1f03      	subs	r3, r0, #4
    ffd8:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
    ffda:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
    ffde:	1c42      	adds	r2, r0, #1
    ffe0:	d0fa      	beq.n	ffd8 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
    ffe2:	f7ff bb59 	b.w	f698 <k_heap_free>
}
    ffe6:	4770      	bx	lr

0000ffe8 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    ffe8:	4770      	bx	lr
